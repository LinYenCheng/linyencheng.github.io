<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端三分鐘</title>
  <icon>https://www.gravatar.com/avatar/c2f8cd3cae539326aa177e1b50384215</icon>
  <subtitle>一起用三分鐘分享技術與知識</subtitle>
  <link href="https://linyencheng.github.io/feed.xml" rel="self"/>
  
  <link href="https://linyencheng.github.io/"/>
  <updated>2025-08-11T11:18:01.436Z</updated>
  <id>https://linyencheng.github.io/</id>
  
  <author>
    <name>林彥成</name>
    <email>linyencheng.tw@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我妻善逸教會我的事情</title>
    <link href="https://linyencheng.github.io/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/"/>
    <id>https://linyencheng.github.io/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/</id>
    <published>2025-08-10T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.436Z</updated>
    
    <content type="html"><![CDATA[<p>最近《鬼滅之刃：無限城篇》上映，讓我又想起了最讓我共鳴的一個角色 —— 我妻善逸。</p><p>跟其他角色比起來，善逸不像炭治郎那樣溫柔堅毅，不像宇髓天元那麼閃亮耀眼，甚至常常哭、常常喊「死定了」，明明不想戰鬥卻又總在關鍵時刻硬撐著上場。</p><p>但也正是這樣一個「怕爆、逃避、又不想讓人失望」的人物，讓我在北漂、升學與工作路上的困惑中，找到了一點力量。</p><p>如果你也曾經懷疑自己、無法做選擇、或陷入「一直練習卻沒變強」的迷惘，那麼善逸的故事或許能帶給你一些啟發。</p><h2 id="刻意練習的誤區：那些鬼滅教我的事情"><a href="#刻意練習的誤區：那些鬼滅教我的事情" class="headerlink" title="刻意練習的誤區：那些鬼滅教我的事情"></a>刻意練習的誤區：那些鬼滅教我的事情</h2><p>到了台北發展之後，接觸到了很多課程或是經驗分享，老實說剛開始覺得很棒也充滿新鮮感，但到後來慢慢覺得像肥肉充滿的滷肉飯一樣，發現吃了不一定健康也有點膩。</p><p>另外一個比較特別的是意外常在台北的麥當勞、7–11、漢堡王聽到人們在分享創業、高報酬投資還有做入會費繳交的交易，這部分實在有點問號？</p><p>所以想來談談善逸這個人物帶給我的小小啟發，想看善逸的故事，推薦可以看 17 集，傳送門在這邊，文章中的截圖大多也都是從影片中截出來的。</p><p><a href="https://www.linetv.tw/drama/10441/eps/17">https://www.linetv.tw/drama/10441/eps/17</a></p><h2 id="我妻善逸：全作最怕死的主角，卻也最讓人共鳴"><a href="#我妻善逸：全作最怕死的主角，卻也最讓人共鳴" class="headerlink" title="我妻善逸：全作最怕死的主角，卻也最讓人共鳴"></a>我妻善逸：全作最怕死的主角，卻也最讓人共鳴</h2><p>164.5 公分 | 58kg | 16 歲 | 9 月 3 日生 | 處女座</p><p>一頭黃髮的善逸在劇中是個總是貪生怕死、還沒找到喜歡的自己、遇到危險大多選擇是逃避的人物。</p><p>黃頭髮的善逸，不是染的，是怕爺爺打他逃到樹上被雷劈的結果，總是說「死定了死定了」，在劇中不是最強的，但肯定是最真實的。</p><p>善逸的膽小與逃避、內心的掙扎，對我來說反而更像一般人會遇到的樣子。</p><blockquote><p>善逸: 我一直都知道要好好努力，可是我會害怕，會逃避會哭，我想要改變，我想要成為有用的人。</p></blockquote><p>我自己以前也是那種「柿子挑軟的吃」、「只做有把握的選擇」的人，高中時從沒人問過我長大想成為什麼樣的大人，大學就要直接選一條人生路線？那時候真的滿頭問號。</p><p>當年大學畢業只推甄了系上資訊應用組，校外一所都沒申請也沒報名補習跟考試，心態上就是大學修的研究所課程不會白費，加上體驗過一學期十主科訓練後真的厭倦也不想多花成本在無意義的考試上。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/like-what.jpg"></p><h2 id="鬼滅之刃教我的事：刻意練習-≠-真實成長"><a href="#鬼滅之刃教我的事：刻意練習-≠-真實成長" class="headerlink" title="鬼滅之刃教我的事：刻意練習 ≠ 真實成長"></a>鬼滅之刃教我的事：刻意練習 ≠ 真實成長</h2><p>善逸的成長歷程就像我們現實生活的投影。</p><p>善逸的爺爺曾是鬼殺隊的柱，對善逸來說更是個嚴格的教練，善逸在前期做的很多訓練其實都跟我們小時候所受的訓練一樣。</p><p>善逸即便軟弱各種逃避，卻仍能夠在爺爺的引導下成為鬼殺隊員，為了保護些什麼而成長。</p><blockquote><p>當善逸不斷的逃跑不斷的被罰，也曾跟爺爺說:「其實，我也想回應你的期待，可是我做不到，別看我這樣，我也瞞著你偷偷修行，完全沒睡，但依然沒有一點成果。」</p></blockquote><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/grand-pa-coach.jpg"></p><p>我們都曾經有過的經驗</p><ul><li>在升學、補習、職場裡，花了大量時間做「別人說應該做的練習」，結果卻不一定有效。</li><li>長輩、社會、體制給我們的設定，讓我們在害怕被處罰或被貼標籤的情況下進行訓練，去<strong>追求那些有條件的幸福</strong>。</li></ul><p>我的國中故事</p><ul><li>國中剛開始在學業成績後段的班級，全年級 14 班班排前三但校排 100~200 名。</li><li>因為後段班標籤，有時國文課甚至直接放我們去操場打球。</li></ul><p>後段班的日常</p><ul><li>因為太皮（北爛），常和同學一起被導師處罰體能訓練：鴨子走路、青蛙跳、追逐跑…</li><li>印象最深刻的懲罰：<ul><li>放學後被打屁股打到掃把斷掉</li><li>上課到一半被叫去停車場跳蛙跳</li><li>體能訓練結束後腿超痛，上下樓梯要用扶手。</li><li>隔天走路上學常常遲到 → 遲到又會被罰站 → 再被懲罰，形成惡性循環 Orz</li></ul></li><li>其他國中「技能」：<ul><li>用珍珠或衛生紙弄濕丟到牆壁或屋頂</li><li>用手指頭轉書</li></ul></li></ul><p>關鍵的轉折</p><ul><li>國中三年，我換過五次導師、三次班級。</li><li>原班級導師當時升任訓導主任，在校務會議堅持原班不能被拆。</li><li>原班級新導師主打「睡眠學習法」，甚至說如果我不適應，可以回原班上課睡覺也沒關係。</li><li>後來原班級被學校半放棄，我被抽到新的升學班，幸運遇到願意花時間引導我的老師。</li></ul><p>因為沒有被放棄，我常在下課被叫去辦公室抄筆記、午休到訓導處罰寫和補考。雖然過程嚴格，但我慢慢成長，最終進步到全校前十名。</p><blockquote><p>雖然他確實揍我揍得太兇了，但他從來沒有對我失望</p></blockquote><p>但即使到了今天，仍舊不能理解過去體制內的教育還有升學率對人生有什麼意義。</p><p>會有現在的成就，不過也只是在關鍵時期受到了幸運的引導，因此認為天賦和運氣比起努力更重要。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/grand-pa-teacher.jpg"></p><p>雖然某個層面來看努力不會騙人，但以籃球賽來說平均身高 160 要打贏 180 在努力相同的情況下就是勝率較低，就像如果我沒被分配到升學班，我也不會有機會進步到全校前十名。</p><p>我認為好的教練應該是讓晚輩發現且能夠發揮長處，而不是讓肥宅刻意練習短跑或是讓肌無力的人把成為舉重選手當目標。</p><p>BTW 底下這個中文配音超級好笑 XDDD</p><iframe width="560" height="315" src="https://www.youtube.com/embed/t1WEik3dmh0?si=96NiEudTtKoWf2WW" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="刻意練習的盲點：印表機會考試，不代表你會生活"><a href="#刻意練習的盲點：印表機會考試，不代表你會生活" class="headerlink" title="刻意練習的盲點：印表機會考試，不代表你會生活"></a>刻意練習的盲點：印表機會考試，不代表你會生活</h2><p>上了大學之後，我放棄理解理工科的科目，為了通過考試接受和訓練自己成為印表機成為考試機器。</p><p>刻意練習本身是為了做腦神經迴路連接優化，在某些低階工作上是非常適合的，像是騎腳踏車、游泳初期就需要刻意練習，練習平衡和維持動力，而後就是靠神經迴路自然反應。</p><p>我考試的方法是在固定教室 + 聽固定音樂 + 抄寫特定科目的相關知識。後來甚至鍛鍊出知道花半小時可以拿幾分花一小時又能多拿幾分，有時候甚至會有這學期可以前十名的感受。</p><p>在這裡我可以很確定的告訴大家，學習做學問和考試競爭是兩件事情，會學習的人不一定會考試反之會考試的也不一定會學習。</p><p>值得注意的是腦區發展在 20+ 逐漸發展並到達顛峰，30+ 後會比較依賴過去的鍛鍊。</p><p>而因為每個人腦區神經突觸的過往發展並不同，視覺、聽覺、觸覺、抽象的反應程度也都存在著差異，這個部分就需要透過嘗試去找到適合自己的成長方式。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/keep-learn-one-thing.jpg"></p><p>在學校和社會的框架中成長，過程中往往會受到很多的餵食。</p><p>在學時有應試相關套餐，職場會被推廣<strong>成功人士模板</strong>外帶全家餐，年輕一代又把這套模版稱作 Role Model。</p><p>為了符合這樣的框架，滿坑滿谷的書跟課程，被灌食幾年下來，我是真的覺得快可以噴飯了？雖然網路加速很多教學和分享很棒，但也會開始讓被餵食的我們失去思考的能力。</p><p>這類分享大多會把事拆解成有再現性的基礎功能單位，然後想辦法讓接受方能練習，會容易誤以為變強只是時間問題。</p><p>在現實中因為表現不佳、薪水太低、能力不足、不滿意現況後，就會想要偷懶的<strong>透過模版改變自己</strong>。但錯的事情練習一百次也不會有用，找了一個錯誤的方向努力到最後還是錯的，是一個愛一個不會愛你的人一輩子相對會很難感到幸福的道理。</p><p>時間拉回現在，你能夠確定愛迪生在現代還有辦法成為發明家？而不是為了還學貸和房貸選擇在台積電輪班？</p><p>沒有天賦的過度努力可能終其一生就只是個秀才而已，而在不對的時間做不對的努力可能也無法達到適合自己的成功。</p><h2 id="只有一招的善逸，卻也能開創第七型"><a href="#只有一招的善逸，卻也能開創第七型" class="headerlink" title="只有一招的善逸，卻也能開創第七型"></a>只有一招的善逸，卻也能開創第七型</h2><p>善逸一直練的是「雷之呼吸・壹之型」，一開始被人瞧不起。可是他爺爺對他說：</p><blockquote><p>培育者爺爺：「既然你只能學會一招，那就將這一招磨練到極致的極致。」</p></blockquote><p>善逸後來創造了「雷之呼吸・第七型」，那不是別人教的，是他在原本一招上磨出來的自創之招，是自己的東西。</p><p>每個人都可以練出自己的「第七型」，只不過它不會出現在成功學書籍裡，也不會在網路神人教學中找到，而是來自一次次試錯與成長。</p><blockquote><p>回到「刻意練習」的主題——為什麼明明是同一位師父，善逸卻只學會了一招？</p></blockquote><p>善逸的故事告訴我們，完全複製教練的訓練方式，不一定必要，也不一定有用。</p><p>就像善逸最後打敗師兄、完成師父未竟的使命一樣，我們不一定要成為標準答案裡那種「典型的強者」。</p><p>反而應該找出屬於自己的能力型態、節奏與專長，從那裡開創出真正的價值。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/evolution-from-one-thing.jpg"></p><p>就像我，拿到大學文憑後，難道就能算是受過教育的知識份子嗎？還是其實只是一台列印速度比較慢的考試機器？</p><p>回顧過往，才發現自己在求學過程中，其實放棄了一些重要的東西。</p><p>碩士班時期，我曾經很想休學，因為初期覺得和大學差異不大，都只是被灌輸在既定框架內的知識。</p><p>直到開始寫碩士論文，我才真正避開了「刻意練習的歪樓」，學會運用所蒐集的知識，走到知識的邊界並嘗試突破。</p><p>這讓我想起了龍馬全國大賽的最後一場比賽，在想起了爸爸問他 “龍馬，你覺得網球好玩嗎？” 後進入了無我堂奧最後一道天衣無縫的境界。</p><p>這個境界說起來也蠻北爛的，就只是要在這個當下喜歡打網球。因為幸村被網球以外的事物所影響，執念太深越想追求反而越無法達到。</p><p>善逸的師兄直到最後也是搞不清楚為什麼有這第七招？ 為什麼都成為鬼還會輸了？</p><iframe width="560" height="315" src="https://www.youtube.com/embed/kPKQOmVwiTs?si=_tDiDabB8GsuNO_T" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>方法與懶人包這麼多，如果照做就能變強，那整個台灣不就都是天才了嗎？</p><p>所以說，刻意練習或模仿英雄故事其實是有風險的——失敗可以輕易複製，但成功往往難以複製。</p><p>就像圍棋老師很多，但並不是每個人都能成為棋士。對棋士來說，從 0 到 1 的思考與學習過程更為重要。</p><blockquote><p>好的老師只能引導出適合後輩的成長方法，卻無法直接製造成功。</p></blockquote><p>這整個故事中，最變態的是我們在每個階段，好像都覺得要為下階段而磨練和準備，那怎麼沒有人好好想過為了現在做準備？有沒有比起模版、比起刻意練習還要重要的事情？</p><blockquote><p>這個時代，不缺算計，只差計算，比起薪水 22K，在我們剩不到 22K 的日子中，該怎麼設計我們接下來的生活？下一個十年我們又會在哪裡？</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/qaCMghHWyjM?si=Gx_mwC-vqVhfm4YG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>在鬼滅之刃中，善逸這個角色，最貼近小編成長的過程也最有感觸，從小開始，從那個什麼都不會、什麼都做不好的我們，慢慢學習理解和適應社會規則，配合著社會交辦給我們的任務而努力生存，在持續的探索和更深刻的認識自己後，慢慢成為了有能力保護他人的存在。</p><p>回想起小時候，也常常透過忙碌來避開無法解決的困難和對未知的害怕，像是那些一學期八主科九主科十主科提早超修研究所課的日子，每個學期完全沒有心力去想其他的東西。</p><p>研究所的第一年每周只有被問進度，真的感受不到學習的意義，在很想休學的時候選擇申請交換學生換個方式暫停學業，一直是到寫了碩士論文才理解導師想帶給我們的是什麼。</p><blockquote><p>也許，成長的過程看的不是物質探索的速度，是看心裡放什麼東西。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近《鬼滅之刃：無限城篇》上映，讓我又想起了最讓我共鳴的一個角色 —— 我妻善逸。&lt;/p&gt;
&lt;p&gt;跟其他角色比起來，善逸不像炭治郎那樣溫柔堅毅，不像宇髓天元那麼閃亮耀眼，甚至常常哭、常常喊「死定了」，明明不想戰鬥卻又總在關鍵時刻硬撐著上場。&lt;/p&gt;
&lt;p&gt;但也正是這樣一個「</summary>
      
    
    
    
    <category term="那些鬼滅告訴我的事情" scheme="https://linyencheng.github.io/categories/%E9%82%A3%E4%BA%9B%E9%AC%BC%E6%BB%85%E5%91%8A%E8%A8%B4%E6%88%91%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    
    
    <category term="鬼滅之刃" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E4%B9%8B%E5%88%83/"/>
    
    <category term="我妻善逸" scheme="https://linyencheng.github.io/tags/%E6%88%91%E5%A6%BB%E5%96%84%E9%80%B8/"/>
    
    <category term="鬼滅無限列車篇" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E7%84%A1%E9%99%90%E5%88%97%E8%BB%8A%E7%AF%87/"/>
    
    <category term="從動漫看人生" scheme="https://linyencheng.github.io/tags/%E5%BE%9E%E5%8B%95%E6%BC%AB%E7%9C%8B%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>鬼舞辻無慘職場生存學</title>
    <link href="https://linyencheng.github.io/2025/08/10/kimetsu-no-yaiba/kibutsuji-muzan-boss/"/>
    <id>https://linyencheng.github.io/2025/08/10/kimetsu-no-yaiba/kibutsuji-muzan-boss/</id>
    <published>2025-08-10T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.437Z</updated>
    
    <content type="html"><![CDATA[<p>各位大大安安～最近《鬼滅之刃 無限城篇》即將開播，身為鐵粉＋職場觀察員的小編，今天就來聊聊鬼舞辻無慘——這位鬼界 CEO ——如何帶隊，以及我們在職場上怎麼分辨「好主管」與「豬頭主管」。</p><p>鬼滅之刃的鬼族，正是由<strong>鬼舞辻無慘</strong>組織與統領。他是第一個鬼，也是唯一能將人類變成鬼的存在。無慘透過制度挑選出最強的十二人，也就是大名鼎鼎的<strong>十二鬼月</strong>——分為上弦與下弦，數字越小實力越強。</p><p>在劇情規則中，鬼要變強有兩種方式：</p><ul><li><strong>吸收鬼舞辻無慘的血</strong>：快速提升，但承受不了就會灰飛煙滅</li><li><strong>吃人</strong>：進步較慢，但比較穩定</li></ul><p>你可以把「無慘之血」想像成職場上的禁藥——可能讓人瞬間衝刺到高位，但一旦失敗，連轉身的機會都沒有。那些喝了血還被炎柱一刀秒掉的鬼們，就像某些職場速成班畢業卻撐不久的「天才新人」。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/kibutsuji-muzan-boss/ghost-group.jpg"></p><h2 id="鬼舞辻無慘：鬼界-CEO-模型"><a href="#鬼舞辻無慘：鬼界-CEO-模型" class="headerlink" title="鬼舞辻無慘：鬼界 CEO 模型"></a>鬼舞辻無慘：鬼界 CEO 模型</h2><p>鬼王 | 是組織中最強的鬼 | 外貌為年輕男子 | 實際超過 1000 歲</p><p>在故事設定中，無慘能用自己的血將人類變成鬼並控制對方，只要手下的鬼說出有關他的情報就會被發動「詛咒」而死亡，對所有的鬼掌握著生殺大權。</p><p>放到現實公司，老闆不一定要有千年修為，但手上有「資源」和「生殺大權」，足以決定你能不能活得好。只要敢在茶水間亂聊老闆的八卦，可能下週就收到「友善離職通知」。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/x4aNN-JRzmY?si=7p-PaSpEraXBa8AY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="成長規則：鬼族-vs-職場人"><a href="#成長規則：鬼族-vs-職場人" class="headerlink" title="成長規則：鬼族 vs 職場人"></a>成長規則：鬼族 vs 職場人</h2><p>對於吃人鬼來說，最重要的就是讓能力增強，然後成為十二鬼月，讓自己有更高的地位，吃人鬼主要靠著兩種方式增強能力:</p><ul><li>吸無慘之血 → 快速變強但風險極高</li><li>吃人 → 穩定成長</li></ul><p>對資本主義塑造出的營利單位來說，底下的員工最重要的就是賺到更多錢，或是成為主管讓團隊賺更多的錢，一般員工主要靠著兩種方式增強賺錢能力:</p><ul><li>巴結主管或出賣自己 → 速度快但有後遺症</li><li>專業能力累積 → 速度慢但紮實</li></ul><h2 id="好主管與豬頭主管"><a href="#好主管與豬頭主管" class="headerlink" title="好主管與豬頭主管"></a>好主管與豬頭主管</h2><p>初入職場，最重要的是累積專業能力。那該怎麼判斷主管是「炎柱型」還是「下弦型」呢？</p><h3 id="有能力的主管"><a href="#有能力的主管" class="headerlink" title="有能力的主管"></a>有能力的主管</h3><ul><li>人好＋會教學：上輩子燒香遇到炎柱</li><li>人差＋會教學：像善逸的爺爺，雖嚴苛但能讓你成長</li></ul><h3 id="沒能力的主管"><a href="#沒能力的主管" class="headerlink" title="沒能力的主管"></a>沒能力的主管</h3><ul><li>人差：直接成為你的反面教材</li><li>人好：小心！可能溫水煮青蛙，讓你一直在打雜</li></ul><p>有能力的主管或同事，不管人好人差都可以在技術和態度上透過相處而學習而成長。</p><p>沒能力的爛人則可以讓你知道有多爛，讓我們之後成為自己喜歡的大人機率又更高一些。</p><p>最慘的反而是沒能力人很好的主管，可能會因為想要讓有能力的員工永遠在底下打雜，而透過特殊的操作和工作安排讓你無限打雜，<br>舉例來說</p><ul><li>很少傳承專業相關的工作經驗</li><li>常態性的錄取平庸的部屬</li><li>透過技巧讓厲害的部屬離職</li></ul><p>鬼舞辻無慘聰明的地方在透過輸血的方式讓底下的鬼無止盡的勞動，並且讓他們誤以為不需要鍛鍊只要吃人就可以變強，舉個例子來說，一個對職涯發展不好的主管會怎麼做?</p><ul><li>讓你的人生都在打雜 (告訴你去荒山野嶺吃人就是讚)</li><li>控制你學習的機會和方向 (讓你誤會上弦、下弦是得到比較多血才變強)</li><li>誤導你以為「升職」只是因為更接近核心</li></ul><p>那，在我看來上弦、下弦和一般吃人鬼之間的區別差異又在哪?! 在繼續之前我想先談談存量、增量、流量三個名詞的概念。</p><h3 id="存量、增量、流量與流量池"><a href="#存量、增量、流量與流量池" class="headerlink" title="存量、增量、流量與流量池"></a>存量、增量、流量與流量池</h3><ul><li>存量，指的是在某個時間點擁有的數量</li><li>增量，某段時間內數量的變化，增量的調整通常是透過調整組合，達造資源和效率的優化</li><li>流量，某段時間流入或流出的數量，當增量達到一個頂的時候，成長速度趨緩就會需要引進外部的流量</li><li>流量池，當流量不再增長，就要想辦法把流量收緊變成受控制且能自由運用的流量池</li></ul><p>普通的鬼，大多是在固定的地點像是荒山野嶺中隨機吃人，而且還需要和其他的鬼去競爭，在獲得人類獵物的數量上來說存量、流量、增量都是少的。</p><p>下弦的策略性較高，以無限列車篇中的下弦之一魘夢，就是透過策略來一次捕獲整台列車的人，吃一次直接抵過普通鬼一整年。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/kibutsuji-muzan-boss/nightmare.jpg"></p><p>上弦在我來看除了策略以外，更多的是個人的素質和態度。</p><p>從上弦之參猗窩座就可以看出來，猗窩座當年是為了追求武藝至高的享受而成為了鬼，也就是說，本來就已經是擁有天分之人，卻比一般人還更加努力，甚至不惜為此成為了鬼。</p><p>在看到了對手炎柱杏壽郎身上的鬥氣已經接近至高領域後，甚至覺得興奮覺得好不容易會有更強的對手，希望對手炎柱也能夠變成鬼，可以一輩子不停地互相鍛鍊精進武藝。</p><p>我認為，上下弦之所以能夠吸收更多無慘大人的血，完全是因為本身的量級本來就與一般鬼不相同，下弦平時就習慣一次吃下幾百人的數量來成長，而上弦本身的肉體、精神和心理素質本來就是世界上的佼佼者。</p><blockquote><p>鬼舞辻無慘此時笑而不語，你各位韭菜都是我的流量池</p></blockquote><h2 id="面試反殺主管小技巧"><a href="#面試反殺主管小技巧" class="headerlink" title="面試反殺主管小技巧"></a>面試反殺主管小技巧</h2><p>來分享小編曾經年少無知遇到的悲劇故事，過去曾遇過很瞎的小組長，很喜歡示範 Hello World 等級的教學來耽誤大家成長的時間。當遇到問題私底下提出時，也只會跟你聊八卦，聊說其他誰誰誰也在抱怨的是什麼，覺得什麼什麼就是爛。</p><p>即使當你提出目前專案 audit 出有 critical issue 的問題、部分功能不 work 的問題、時程來不及的問題，他都沒有進行後續相關的協助和建議。唯一建議就是你看著辦，你需要多花點時間多加油，然而小弟不才當時已經天天都超工時了 QQ</p><blockquote><p>Q: 也許可以提問，當同事遇到問題的時候，會怎麼協助處理?</p></blockquote><p>另外，操作資訊不對襯也是種藝術，常見於能力不佳的同事，而且他會努力的卡住訊息樞紐的位置，也就是<a href="https://linyencheng.github.io/2020/10/28/thinking-team-building-by-math/?utm_source=medium&utm_medium=article&utm_campaign=link">接近中心性 (Closeness Centrality)，定義會是該節點與圖中所有其他節點之間的最短路徑長度之和的倒數</a> aka 東廠第一把交椅。</p><p>而更悲劇的事情則是這樣的主管其實就是這份工作或團隊發展的天花板。</p><blockquote><p>Q: 也許我們可以虛心請教，您是怎麼當上主管的?</p></blockquote><p>不過小聲說，對工程師在維護專案來說，我其實也有發現豬頭主管的優點，明顯的看得出來專案中留有各式前人的驕傲以及想要練習的最新技術，甚至同樣一種效果可以有三種以上的寫法共存，也就是說輪到你寫的時候，可以看心情三種挑一種寫，因為討論了也是你看著辦。</p><p>只要在專案開發機開發時不會當機的前提下，個人認為很適合新手員工拿來加入想學的新技術們來堆疊和煉蠱，不過小編那時候用的筆電是開沒半小時風扇就一直全速，瀏覽器稍微多開幾個 Tab 電腦就快要不行，只能說真的是有點悲劇 QQ</p><p>在這樣的情況下，各位也可以多加利用豬頭的特性，好好鍛鍊自己扛豬公的臂力，就像那些曾經拿專案來煉蠱的工程師們，想必他們經過了各種練習之後都已經成長了不少 XDDD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;各位大大安安～最近《鬼滅之刃 無限城篇》即將開播，身為鐵粉＋職場觀察員的小編，今天就來聊聊鬼舞辻無慘——這位鬼界 CEO ——如何帶隊，以及我們在職場上怎麼分辨「好主管」與「豬頭主管」。&lt;/p&gt;
&lt;p&gt;鬼滅之刃的鬼族，正是由&lt;strong&gt;鬼舞辻無慘&lt;/strong&gt;組織與</summary>
      
    
    
    
    <category term="那些鬼滅告訴我的事情" scheme="https://linyencheng.github.io/categories/%E9%82%A3%E4%BA%9B%E9%AC%BC%E6%BB%85%E5%91%8A%E8%A8%B4%E6%88%91%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    
    
    <category term="鬼滅之刃" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E4%B9%8B%E5%88%83/"/>
    
    <category term="鬼滅無限列車篇" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E7%84%A1%E9%99%90%E5%88%97%E8%BB%8A%E7%AF%87/"/>
    
    <category term="從動漫看人生" scheme="https://linyencheng.github.io/tags/%E5%BE%9E%E5%8B%95%E6%BC%AB%E7%9C%8B%E4%BA%BA%E7%94%9F/"/>
    
    <category term="鬼舞辻無慘" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E8%88%9E%E8%BE%BB%E7%84%A1%E6%85%98/"/>
    
  </entry>
  
  <entry>
    <title>炎柱的人生信念</title>
    <link href="https://linyencheng.github.io/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/"/>
    <id>https://linyencheng.github.io/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/</id>
    <published>2025-08-09T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.437Z</updated>
    
    <content type="html"><![CDATA[<p>鬼滅之刃無限列車篇 × 無限城上映特別感悟</p><blockquote><p>終有一天，我們會成為未來的那個自己。</p></blockquote><p>最近《鬼滅之刃 無限城篇》即將上映，我又回頭看了《鬼滅之刃 無限列車篇》。每次看到炎柱杏壽郎那句「我會履行我的職責！」，心裡都像被烈火點燃。這不只是動漫的台詞，更是人生的提醒。</p><p>在文章開始繼續下去之前，來首歌吧 😉</p><iframe width="560" height="315" src="https://www.youtube.com/embed/ILVlVWle8m0?si=eL8_QfN_0Wf5qTyG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="成為自己看得起的大人"><a href="#成為自己看得起的大人" class="headerlink" title="成為自己看得起的大人"></a>成為自己看得起的大人</h2><p>今年是我工作的第十年，不禁回想：「如果當年的我能遇到炎柱，會不會更早找到方向？」</p><blockquote><p>讀大學時，有沒有想過畢業十年後會成為什麼樣的大人?</p></blockquote><p>可是長大後呢？我們有了更多資源、更多能力，但夢想卻好像變少了。長大，究竟是為了什麼？</p><p>回想小的時候，沒錢、沒有足夠的知識、沒有資源、沒有太多權力決定事情。</p><p>如今十多年過去，長大了，這些東西都擁有更多了，但為什麼，我們卻失去所謂可能？</p><blockquote><p>長大對我們來說，代表了什麼?</p></blockquote><h2 id="價值與衝突：鬼與人之間"><a href="#價值與衝突：鬼與人之間" class="headerlink" title="價值與衝突：鬼與人之間"></a>價值與衝突：鬼與人之間</h2><p>看《鬼滅之刃》，我常覺得職場有時就像無限列車上或是無限城中的戰場。</p><p>基層員工像是拼命戰鬥的鬼殺隊劍士，薪水微薄卻依然盡力，而某些高層，則像那些安穩坐在上弦位置數十年的鬼，規則隨意改、永遠不被淘汰。</p><p>許許多多的基層員工在各自的岡位上都很努力，而我們也在進入到這個社會染缸後發現，大家應該都是常常被體制或是奇怪的事情磨到不知道自己在做什麼。</p><p>我們也可以選擇墮落，放棄良知去成為「鬼」，追求永生般的舒適，但真的值得嗎？</p><p>炎柱的回答很明確：「寧可燃燒殆盡，也不要放棄信念。」</p><p>在進入到這個社會染缸後發現，常常被體制或是奇怪的事情被磨到不知道自己在做什麼。</p><p>從小，沒有太多人告訴我該怎麼判斷是非善惡，受教育過程也沒有學會怎麼分析和做選擇，連大學都是拿分數來當參考，當年甚至單純到因為高中物理表現不錯而填了 10 個物理系志願，最後被班導師勸退建議重填。</p><p>那究竟是什麼時候，我們才能夠理解社會，會確認自己是誰，該走向哪裡? 擅長什麼? 又可以為這個環境做些什麼?</p><blockquote><p>小時後夢得不切實際，長大後卻要學著實際。我們討厭那樣的自己，無奈卻無能為力。</p></blockquote><p>病態的基層其實蠻像是在鬼滅中的吃人鬼，再努力頂多就是不斷被淘汰的下弦，為了錢而匆匆忙忙庸庸碌碌。</p><p>即便努力，對公司來說也只是一個可被替換的角色罷了，如果工作是吃人，也許可以想想吃人真的是重要的事情嗎?</p><p>部分衝突的原因我想是來自不確定性，不確定現在的資本主義社會到底會用什麼樣的功利價值來評估我們? 不確定官僚的暗黑操作是否才是正常的社會運行?</p><p>尤其是進入職場後，才發現人人都蠻會唬爛和說謊，但這終究無法讓人心安理得生活下去，其實我蠻相信好人即使知道會被騙但還是願意相信人性良善，最終，會受到傷害的還是那些說謊的人。</p><p>在我們感受到衝突和處於打雜階段的同時，是否想過上弦為什麼能像那些官能卡住上弦的位置超過數十年的原因?</p><p>也許一開始就放棄，選擇墮落開始抱怨和批評，人生就會輕鬆許多，就像在鬼滅中，只要放棄良知，選擇活在陰暗中而成為鬼，就能擁有無限的再生能力，不再面對衰老和死亡，靠著血成就自己。</p><p>但是，成為鬼去追求屬於鬼的物質後，真的就不再擁有疑惑了嗎? 如果長大了，沒有變得更好，為什麼要長大? 又為什麼要努力往前進?</p><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/spider.jpg"></p><p>在資本主義社會和淘汰制的升學體制中生長，在物質上的追求還有價值上的探索有太多太晚去理解。</p><p>從小到大在沒有安全感的時候就是不斷的存錢，長大後透過換工作來追求更高的薪水存更多的錢，也曾被同學和直屬學弟問過，那有想過什麼時候才是夠了?</p><p>當存了第一個一百萬、第二個一百萬、第三個一百萬後，人生中的價值觀似乎也沒有太多的改變。</p><h2 id="熱情：燃燒吧，直到最後一刻"><a href="#熱情：燃燒吧，直到最後一刻" class="headerlink" title="熱情：燃燒吧，直到最後一刻"></a>熱情：燃燒吧，直到最後一刻</h2><p>炎柱杏壽郎在無限列車篇最後的那場戰鬥，我體會到當價值觀活在生命之上時，可以自然而然的影響身邊的人。</p><p>那種感動會是發自內心的佩服，佩服在生死關頭那樣的不動搖和言行一致，只為了兌現自我價值。</p><blockquote><p>不管未來的路怎麼走，你都要成為一個出色的人。隨著心走自己覺得正確的道路，並且擁有火焰般燃燒的熱情。</p></blockquote><p>可以感受的出來這就是炎柱的人生價值觀，炎柱杏壽郎在最終戰死去之前，都未曾忘記要說出一些溫暖的話來鼓勵晚輩，更能深刻感受到，不在乎生死的杏壽郎對於信念貫徹的執著。</p><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/rengoku-kyoujurou.jpg"></p><p>這份信念，就像疫情期間的醫護、消防員、外送員一樣——雖然不被看見、薪水不高，但仍選擇守護他人。即使明知必死無疑，炎柱依然擋在所有人面前，說：「我會履行我的職責！在場的任何人都不會死去！」</p><p>雖然炎柱最終還是死了，但在我心裡大哥沒有輸。</p><blockquote><p>知人者智，自知者明。勝人者有力，自勝者強。知足者富，強行者有志。<br>不失其所者久，死而不亡者壽。</p></blockquote><p>這是我看到炎柱帥氣滿點後想到道德經裡面寫過的話。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/HSoJZnzLXHk?si=hguKrYHIBOWY4kdJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="成長不是看速度，而是看你心裡放什麼"><a href="#成長不是看速度，而是看你心裡放什麼" class="headerlink" title="成長不是看速度，而是看你心裡放什麼"></a>成長不是看速度，而是看你心裡放什麼</h2><p>從鬼滅的炭治郎、善逸，到我們自己的人生——成長的過程中，我們都面臨無數選擇與失去。</p><p>就像是善逸的師傅說過，可以哭泣也可以逃避，但絕對不可以放棄，但我曾經因為成為考試機器考試考到很想要休學。</p><p>有時候累到想逃避，有時甚至懷疑努力有什麼用，但只要心中還有想守護的東西，我們就不會輸。</p><p>對於物質的探索，比起無止盡的追求，好像應該更多的去分析和理解目前生活的組成，探討什麼樣的生活是能夠感受滿足且踏實。</p><p>工程師的職涯探索來說，目前想到的有三點:</p><ul><li>要有夠遠的終點，讓我們不斷的精進</li><li>要練習發揮影響力，改善優化系統架構加速團隊學習和開發</li><li>要能夠符合價值觀，而不是做惱人又耗資源的專案</li></ul><p>炎柱告訴我的，是<strong>「持續精進」</strong>這四個字。</p><p>在幸運來臨之前，持續燃燒自己，推銷自己，鍛鍊自己，才有機會創造出理想的生活。</p><h2 id="最重要的創造：整個人生"><a href="#最重要的創造：整個人生" class="headerlink" title="最重要的創造：整個人生"></a>最重要的創造：整個人生</h2><p>什麼是成功，賺錢是成功嗎? 追求快樂是對的嗎? 會不會因為自始至終都在追求反而更不快樂?</p><p>年輕的時候曾看過類似的話，大概是說你現在挑工作，之後就會換成工作挑你，即便是不喜歡的事情，練習做好也會是種成長。</p><p>出社會後，認真覺得生活是自己的不是長輩的更不是老闆的，整個人生如果不應該是階層和官僚討好，又何必每天看著小位置煩惱?</p><p>工作上能做的努力就是塑造好的環境，或是用最快的速度變強然後去更好的環境，雖然選擇變成鬼去同流合汙適應環境也是種選擇，但好像也不是那麼必須。</p><blockquote><p>Teddy Daniels: Which would be worse, to live as a monster or to die as a good man?</p></blockquote><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/be-ghost.jpg"></p><p>人的生活簡單區分也就是三件事，工作、家庭和生活，如何活像個人，最根本的還是找到努力的意義。</p><p>工作上，也許能夠想想平常做什麼事情會忘記時間，什麼時候會不自覺邊哼歌邊做事情。長大之後漸漸發現，最該做的是加強自己的擅長的事情而非改善缺點，畢竟沒有天賦的過度努力終究也只是個秀才。</p><p>但關於家庭、工作和生活，總還有些事情沒有想的很透徹。</p><p>在鬼滅之刃中，主角是一個賣炭的農村少年炭治郎。值得想想的是炭治郎在遭遇吃人鬼滅門，只剩下也變成鬼的妹妹後，為什麼最終會選擇拚了命的鍛鍊選擇成為鬼殺隊，就連師傅安排劈開石頭這麼荒唐的任務都日以繼夜的不斷練習?</p><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/kill-rock.jpg"></p><p>當遭遇人生中的變故，整個家裡只剩下變成鬼存活下來的妹妹，炭治郎剩下唯一的希望就剩下有一天能夠讓妹妹過回正常的生活。</p><p>在這個故事中，我感受到只要擁有想要守護的東西人就會變得更強，無論鬼奪走多少性命，意志是怎麼樣都不會被打敗的，想起了大學到法律系修課，柯柯老師說，學法律，能夠讓我們在需要的時候守護我們想守護的東西。</p><blockquote><p>即便不斷失去，人也只能活下去，無論遭受多嚴重的打擊都要活下去，只有活著也才有可能性。</p></blockquote><p>還記得六年多前是我開始第一份工作的時候，那陣子也是有記憶以來第一次看著親人在眼前死去，而且是長輩裡最親近的阿公。</p><p>那陣子的我常常爬到公司頂樓，看著整個台元一期二期三期，想像著許多人關在玻璃窗裡面榨乾腦力，但回頭看看自己，親人都快死掉了，除了會讀書其實就像個廢物一樣，什麼也改善不了。</p><p>那之後，過了好一陣子對事物沒什麼感覺的生活。當然日常跟一般人相處還是可以角色扮演表面上看起來很開心，但實際上心裡就空洞洞的感受不到什麼感覺。</p><p>在阿公過世的隔年，接著是外婆在看護沒注意的時候噎到，送醫院之後我們大家都不在身邊，只聽我媽說事態有點嚴重，接下來通知只告訴我們醫院也不用去了，可以回去家裡等，當然，回來的就是準備放在冰櫃裡的人了。我還記得，外婆家的日曆停在送醫院那天，那天的標語我還拍了起來。</p><blockquote><p>沒有被思考過的生活，不值得過。</p></blockquote><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/think-life.jpg"></p><p>有段時間，我看了很多電影，有部是林書宇的百日告別，最後蠻打動我的一句是人的死去在意義上會有兩次，一次在肉體，另一次在人們心裡。</p><p>認真想想，如果有一天突然走了，可能很多人根本不會知道。因為就是一個月、兩個月、三個月、甚至一年、兩年 、三年聯絡一次，又怎麼會知道下次電話打不通是什麼原因？或許我們早已在人們心裡死去了。</p><p>生老病死，生有時，死有時，栽種有時，收穫有時，人與人之間的關係也因為生命的長短而開始有了需要珍惜和把握的地方，也因為有限，所以才特別，才顯得獨一無二。</p><blockquote><p>衰老和死亡是生命短暫人類這種生物的美好之處。<br>因為會衰老、會死亡，才更加令人覺得可愛、尊貴。</p></blockquote><p>在成長的過程中，有默默發現，雖然確認終點這件事是重要的，但過去種種體驗都告訴我們，真正的目的其實是過程而不是終點，像是去浙江實習、去南京交換、去完成馬拉松、去完成單車環島、去完成爬玉山，那些過程中的體驗和感受才讓我們能夠成為我們。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/yUWAYvfQ0dA?si=neduWofFHEZX3PVa" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>在成長的過程中，也會遇到許多選擇，會有很多得到和失去，即便不斷失去，即便生活中有可能像卡通中一樣會遇到鬼遇到病毒，也只能努力生活下去，活下去，也才有可能性。</p><p>我想生活的目的可能是能夠創造幸福，還有在精神與物質之間取得平衡。</p><p><a href="https://www.dcard.tw/f/mood/p/236168854">https://www.dcard.tw/f/mood/p/236168854</a></p><p>生活中值得探索的事物很多，有更多美好值得我們去了解和遇見，而成長的過程中不免也會遇到那些討厭的，所以也要記住我們曾經喜歡怎樣的人、討厭什麼樣的人，記得未來，要變成自己喜歡的模樣，成為自己看得起的大人。</p><p>要變成自己認為喜歡的模樣，除了努力和運用天賦之外，幸運和時機其實也很重要，在遇到幸運之前，也許就像炎柱說要持續不斷的精進，有機會的時候也要懂得推銷自己，理想的生活也才會更有機會被創造出來。</p><blockquote><p>如果生活是一種創造，那最重要的創造我想會是整個人生。</p></blockquote><p>期待未來的生活能夠擁有意義和對社會付出些許貢獻，能成為誠實正直內心溫柔但攻擊力強大的人，這是大學畢業十年後給自己的期許。</p><blockquote><p>為與橋下東流水，出山要比在山清。</p></blockquote><p>如果你看完《鬼滅之刃 無限列車篇》，心裡也有那團火，不妨記住炎柱的一句話：</p><blockquote><p>「不管未來的路怎麼走，你都要成為一個出色的人。」</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鬼滅之刃無限列車篇 × 無限城上映特別感悟&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;終有一天，我們會成為未來的那個自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近《鬼滅之刃 無限城篇》即將上映，我又回頭看了《鬼滅之刃 無限列車篇》。每次看到炎柱杏壽郎那句「我會履行我的</summary>
      
    
    
    
    <category term="那些鬼滅告訴我的事情" scheme="https://linyencheng.github.io/categories/%E9%82%A3%E4%BA%9B%E9%AC%BC%E6%BB%85%E5%91%8A%E8%A8%B4%E6%88%91%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    
    
    <category term="鬼滅之刃" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E4%B9%8B%E5%88%83/"/>
    
    <category term="鬼滅無限列車篇" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E7%84%A1%E9%99%90%E5%88%97%E8%BB%8A%E7%AF%87/"/>
    
    <category term="從動漫看人生" scheme="https://linyencheng.github.io/tags/%E5%BE%9E%E5%8B%95%E6%BC%AB%E7%9C%8B%E4%BA%BA%E7%94%9F/"/>
    
    <category term="炎柱杏壽郎" scheme="https://linyencheng.github.io/tags/%E7%82%8E%E6%9F%B1%E6%9D%8F%E5%A3%BD%E9%83%8E/"/>
    
  </entry>
  
  <entry>
    <title>杏壽郎教我的三件事</title>
    <link href="https://linyencheng.github.io/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/"/>
    <id>https://linyencheng.github.io/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/</id>
    <published>2025-08-08T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.438Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>燃燒殆盡，不等於犧牲，而是有意義的投入。</p></blockquote><p>最近重新看了《鬼滅之刃》電影版（無限列車篇），明明是動畫，卻讓我這個工程師阿宅在螢幕前默默眼眶濕潤。</p><p>尤其是那位火焰般燃燒的男人——炎柱・煉獄杏壽郎，他說的每一句話，都像是在對著「已經工作十年」的我說的。</p><p>在出了社會之後，我在追求這些績效表現、成長成就的同時，總在有些時候突然有種自己慢慢被消逝的感受。</p><p>接下來想從杏壽郎、簡立峰三個階段生涯故事和大家談談認同與意義。</p><h2 id="煉獄杏壽郎-炎柱"><a href="#煉獄杏壽郎-炎柱" class="headerlink" title="煉獄杏壽郎 | 炎柱"></a>煉獄杏壽郎 | 炎柱</h2><p>177 公分 | 72kg | 20 歲 | 5 月 10 日生 | 金牛座</p><p>“杏壽郎是鬼殺隊炎柱，炎之呼吸的使用者。</p><p>有著一頭黃紅色相間的長髮，鬼殺隊制服外披著火焰圖案的羽織。</p><p>性格樂天，熱情如火，不太聽人說話，卻擁有出色的領導力和判斷力，在隊中是有如大哥般存在。</p><p>父親槇壽郎為前炎柱，另有一名幼弟千壽郎，母親在他幼年時因病過世，原本樂於教導孩子劍術的父親不堪喪妻之痛，從此變得委靡不振甚至開始酗酒。</p><p>於是他靠研讀家傳的炎之呼吸指南書自學努力成為柱，年紀輕輕就讀完三冊。</p><p>後在眾人合力之下擊退魘夢、猗窩座，成功保住車上 200 名乘客的性命，臨終前將想告訴父親和千壽郎的話傳達給炭治郎，在看到母親的魂魄出現在面前後含笑而逝。” (摘自 <a href="https://zh.wikipedia.org/wiki/%E9%AC%BC%E6%BB%85%E4%B9%8B%E5%88%83%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8">wiki</a>)</p><blockquote><p>柱ならば後輩の盾となるのは当然だ</p></blockquote><p>因為我是柱，成為後輩的盾是理所當然的事。</p><p>這句是炎柱杏壽郎在死去前跟晚輩說的話，杏壽郎出生在嚴格的家庭，從小母親就教導他身為強者的唯一使命，就是要保護弱者。</p><h3 id="杏壽郎為什麼這麼燃？是他太傻？還是太懂？"><a href="#杏壽郎為什麼這麼燃？是他太傻？還是太懂？" class="headerlink" title="杏壽郎為什麼這麼燃？是他太傻？還是太懂？"></a>杏壽郎為什麼這麼燃？是他太傻？還是太懂？</h3><p>杏壽郎他爸退隱、失志、破壞了他的信心，但他卻沒因此變成「厭世嘴砲男」，反而還拉著弟弟成長、成為柱之後鼓勵晚輩炭治郎。</p><p>我後來才懂，那不是熱血，是修煉，杏壽郎早就經歷過我們會遇到的那些心魔：</p><ul><li>做再多也得不到認可</li><li>想努力卻被現實拉扯</li><li>看到別人比自己更有天分</li><li>明明想放棄，卻又覺得這樣不行</li></ul><p>杏壽郎沒有「擺爛」也沒有「厭世」，他選擇的是——把那份傷痛轉換成堅定。</p><p>這是不是很像我們在人生中的某些轉折點？不再是「為了證明自己而努力」，而是「知道自己可以，所以願意守護」。</p><p>杏壽郎是個豪邁、爽朗、正直的人，在無限列車篇中，還記得他在火車上吃了很多美味便當，就是不停的吃、不停地大聲稱讚好吃！</p><p>在見到三個來支援的後輩，就是直接對著炭治郎、善逸、伊之助說你們都讓我來照顧吧！！！</p><iframe width="560" height="315" src="https://www.youtube.com/embed/tknn02o0B5o?si=oVgpot8Wly8SsE7h" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>遇到緊急問題發生時，杏壽郎在前往支援路上就先給化身為車輛的魘夢連續綿密的斬擊來增加危機反應時間。</p><p>在過程中也快速判斷現場狀況，讓炭治郎、伊之助去尋找並擊敗鬼，告訴晚輩說後面的五節車廂交給他保護。</p><p>其實，炎柱大可以直接自己做好斬殺鬼的任務，但因為炭治郎、伊之助並沒有能力保護這麼多車廂的乘客，所以杏壽郎在當下做了這樣的判斷和人力上的調度。</p><p>這樣的應變氣場和能力真的會讓後輩感到安心和願意努力的動力，伊之助也因此邊靠北邊心甘情願去配合指令動作。</p><h3 id="我會履行我的職責！在場的任何人都不會死去！"><a href="#我會履行我的職責！在場的任何人都不會死去！" class="headerlink" title="我會履行我的職責！在場的任何人都不會死去！"></a>我會履行我的職責！在場的任何人都不會死去！</h3><p>杏壽郎是個典型的「能者」，但他的強不只是體術，而是責任感。</p><blockquote><p>燃燒了不只一場戰鬥，也點燃了某些職涯的自我期許。</p></blockquote><p>杏壽郎那種：「我在這裡，所以別人會沒事」的態度，說實話，我在身邊某些朋友身上也看過，那些會自願 Cover 專案進度的 Senior，那些寧可晚上加班也要護住 Junior 的 Lead，那些被罵時先扛責但回頭再一一安撫團隊的人。</p><p>我曾經以為強大是為了升遷、為了年薪，但某些時刻，你會發現，<strong>強大是為了讓團隊裡更多人不受傷</strong>。</p><p>杏壽郎最後是用生命在守護整台列車，但他不是想「犧牲自己證明什麼」，他是做了自己該做的選擇，這點很重要。</p><p>身為工程師，我們常常燃燒自己在交付上、在 Debug 地獄裡、在撐住爛流程的現實中，但那跟杏壽郎不一樣。</p><p>燃燒不代表過勞，也不代表硬扛，真正的燃燒是：「我知道這件事值得我投注全部的能量。」</p><p>那是主動的選擇，不是被動的犧牲，不再只為自己活，而是因為有個更大的價值或信念，讓你願意站在那裡。</p><h2 id="生涯中的三個階段"><a href="#生涯中的三個階段" class="headerlink" title="生涯中的三個階段"></a>生涯中的三個階段</h2><p>杏壽郎的故事，讓我思考了人生可能會經歷的三個階段：</p><ol><li>成為強者，只是為了證明自己: 我們都從這裡開始，拚命成為不可取代的人，怕別人不認同。</li><li>強大之後，開始照顧別人: 當你不再需要證明自己，就會開始想：我可以幫誰撐起什麼？</li><li>願意燃燒，是因為相信值得: 你不再只為自己活，而是因為有個更大的價值或信念，讓你願意站在那裡。</li></ol><h3 id="第一個階段-成為強者，只是為了證明自己"><a href="#第一個階段-成為強者，只是為了證明自己" class="headerlink" title="第一個階段: 成為強者，只是為了證明自己"></a>第一個階段: 成為強者，只是為了證明自己</h3><blockquote><p>昨日の自分より確実に強い自分になれる</p></blockquote><p>簡立峰人生的第一階段在學術界鍛鍊 15 年，從私立大學到台大，五年半的碩士和博士學會了享受孤獨、空虛感，那個壓力就是老師很優秀、同學很優秀。</p><p>杏壽郎則是在小的時候母親就過世了，而為了追求曾經也是炎柱的父親認同，努力的成為炎柱，盼望得到父親稱讚與認同，對杏壽郎來說只要持續不斷的精進自己，你絕對可以比昨天的自己更強大。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/O5HJInVBPWg?si=J-ZwK54QtsNUoR5q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>在第一個階段，社會其實很早就建立了一個體系，讓我們下意識去追求，像是追求績效表現、薪資成長。</p><p>我們都從這裡開始，拚命成為不可取代的人，怕別人不認同。</p><p>就像戰鬥的過程中上弦之參猗窩座，為了追求武藝至高的享受而成為了鬼。</p><p>在看到了杏壽郎身上的鬥氣已經接近了至高領域後，覺得好不容易有了可能會更強的對手，甚至希望炎柱也能夠變成鬼。</p><p>不知道你們是怎麼想和看待出社會工作這件事?</p><p>在出了社會之後，我在追求這些績效表現、成長成就的同時，總在有些時候突然有種在自己慢慢被消逝的感受，那個表層想法在鬼滅之中也許是我並不想成為鬼。</p><p><img src="/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/become-ghost.jpeg"></p><h3 id="第二個階段-強大之後，開始照顧別人"><a href="#第二個階段-強大之後，開始照顧別人" class="headerlink" title="第二個階段: 強大之後，開始照顧別人"></a>第二個階段: 強大之後，開始照顧別人</h3><p>在第二個階段，簡立峰選擇加入了 Google，成為 Google 在台灣的第一個員工。</p><p>選擇放棄過往學術的累積，是因為看到了全世界更優秀的學者。</p><p>簡立峰認為 Google 的研發如果可以在台灣，也許在十年二十年後台灣需要跟國際接軌，而台灣早已經培養了一群人準備好。</p><p>在杏壽郎成為炎柱之後，很開心的向父親報告這個好消息，父親卻對人生不再懷抱熱情，冷言冷語打發掉杏壽郎。</p><blockquote><p>そんなことで俺の情熱は無くならない！ 心の炎が消えることはない！</p></blockquote><p>即便如此杏壽郎仍舊鼓勵弟弟說：「老實說，父親並沒有高興，他說根本沒意義。但是我的熱情，不會因此消失！心中的火焰，從未消失過，我絕不會被挫敗！」</p><p>當杏壽郎在無限列車上見到三個來支援的後輩時，也是對著炭治郎、善逸、伊之助說大家都讓我來照顧，在這個階段杏壽郎是希望能培養接下來將成為柱的晚輩們。</p><p>當你不再需要證明自己，就會開始想：我可以幫誰撐起什麼？</p><p><img src="/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/become-teacher.jpeg"></p><h3 id="第三個階段-願意燃燒，是因為相信值得"><a href="#第三個階段-願意燃燒，是因為相信值得" class="headerlink" title="第三個階段: 願意燃燒，是因為相信值得"></a>第三個階段: 願意燃燒，是因為相信值得</h3><p>第三個階段，簡立峰體認到放棄重來並不是太難，如果還有一個 15 年，該思考的會是能夠做哪一件事情對自己、對生長這個社會能有幫助。</p><p>炎柱在拒絕猗窩座 “<strong>變成鬼獲得永生繼續精進武藝</strong>“ 的提議後，展開激戰導致煉獄身負致命傷，左眼內臟受傷、肋骨斷裂，雖然用了奧義勉強讓猗窩座負傷，但身體還是被猗窩座的右臂貫穿，最後還是犧牲了自己生命。</p><p>對於台灣企業轉型轉不過去，簡立峰看到的其實是一個新的機會，但這個機會不是他的機會，而是年輕人的機會。</p><p>在影片的分享中簡立峰說: 「人生都很難回頭去看，是因為那是一個假設性的問題，我只能說我運氣很好、時間、空間也剛剛好。我加入 Google，把 Google 帶來台灣，有一群年輕人，在台灣加入 Google，從 Google 台灣去了全世界，那一群年輕人終究會回來，我會在那裡等他們，之後他們要把台灣帶到另一個地方去。」</p><p>在最後的最後，杏壽郎跟三個徒弟說，竈門少年、豬頭少年、黃髮少年，你們要繼續成長下去，持續不斷的精進自己，而後就要由你們成為接下來的柱，我相信你們。</p><blockquote><p>對於晚輩來說，既然被人相信了，就不要去想回應這份期待以外的事</p></blockquote><p>也許目前的年紀和歷練都不夠，但這就是我目前認為在生涯三個階段可能會有的心境轉換。</p><p>前面兩個階段也許是珍惜、照顧好自己的獨特性，並持續不斷的精進自己，期許能夠成為一個有力量的人。</p><p>在談第三個階段的感想前，想先分享當杏壽郎和猗窩座戰鬥到了最後，杏壽郎在快要倒下前，回顧過往生命時見到母親後的那段談話:</p><blockquote><p>杏壽郎問母親我做的還好嗎? 該做的事，該履行的事，都有做好嗎？<br>媽媽笑著對他說：「你做得非常好哦！」<br>太好了！ 杏壽郎這個時候開心的微笑也閉上了眼睛。</p></blockquote><p>在第三個階段，也許是處在順其自然的基礎之上，盡力的照顧我們所擁有的生活和人事物，最終能夠真誠的去幫助他人。</p><p>這會是種能夠展現生活意義的一種感受，也許在第三個階段，聰明和有績效的人可能不一定是最有價值的。</p><p>這篇文章是我認識的炎柱杏壽郎，看了兩次電影都是滿滿感動，即使一直到了現在，打心得的現在還是深受影響，最後送給大家這句帥爆的話，想告訴大家，大哥，沒有輸!</p><blockquote><p>我會履行我的職責！在場的任何人都不會死去！</p></blockquote><h2 id="你的人生，在第幾階段呢？"><a href="#你的人生，在第幾階段呢？" class="headerlink" title="你的人生，在第幾階段呢？"></a>你的人生，在第幾階段呢？</h2><p>這些動畫角色，不只是一場場打鬥、一段段感情，有時候，就是你人生某個片段的隱喻。</p><p>我們都想變強，但更重要的是：</p><blockquote><p>你希望，強大了之後，成為怎樣的大人？</p></blockquote><p><img src="/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/rengoku-kyoujurou-life-lessons.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;燃燒殆盡，不等於犧牲，而是有意義的投入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近重新看了《鬼滅之刃》電影版（無限列車篇），明明是動畫，卻讓我這個工程師阿宅在螢幕前默默眼眶濕潤。&lt;/p&gt;
&lt;p&gt;尤其是那位火焰般燃燒的男人——炎柱・煉獄杏壽郎，</summary>
      
    
    
    
    <category term="那些鬼滅告訴我的事情" scheme="https://linyencheng.github.io/categories/%E9%82%A3%E4%BA%9B%E9%AC%BC%E6%BB%85%E5%91%8A%E8%A8%B4%E6%88%91%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    
    
    <category term="鬼滅之刃" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E4%B9%8B%E5%88%83/"/>
    
    <category term="鬼滅無限列車篇" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E7%84%A1%E9%99%90%E5%88%97%E8%BB%8A%E7%AF%87/"/>
    
    <category term="從動漫看人生" scheme="https://linyencheng.github.io/tags/%E5%BE%9E%E5%8B%95%E6%BC%AB%E7%9C%8B%E4%BA%BA%E7%94%9F/"/>
    
    <category term="炎柱杏壽郎" scheme="https://linyencheng.github.io/tags/%E7%82%8E%E6%9F%B1%E6%9D%8F%E5%A3%BD%E9%83%8E/"/>
    
  </entry>
  
  <entry>
    <title>下弦之壹魘夢的情緒管理學</title>
    <link href="https://linyencheng.github.io/2025/08/02/kimetsu-no-yaiba/emotion-management/"/>
    <id>https://linyencheng.github.io/2025/08/02/kimetsu-no-yaiba/emotion-management/</id>
    <published>2025-08-02T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.437Z</updated>
    
    <content type="html"><![CDATA[<p>各位大大安安，最近看了《鬼滅之刃：無限城篇》預告，深深被下弦之壹魘夢操控人心的劇情震到雞皮疙瘩。劇中一句台詞讓我尤其有感：</p><blockquote><p>如果光憑憤怒就能勝利，那世界上就不會有鬼了。</p></blockquote><p>他說的是對，也說的是錯——因為情緒，不只是你的敵人，也可能是你的陷阱。</p><h2 id="下弦之壹魘夢：操控人性的真強者"><a href="#下弦之壹魘夢：操控人性的真強者" class="headerlink" title="下弦之壹魘夢：操控人性的真強者"></a>下弦之壹魘夢：操控人性的真強者</h2><p>鬼舞辻無慘領著上弦、下弦，魘夢是最強下弦之一。他不是靠拳頭壓人，而是用夢境玩心理：</p><blockquote><p>「人類的原動力是心靈、精神，因為人類的心全都一樣，就像玻璃工藝品一般地脆弱。」</p></blockquote><p>這句話猛不猛？他讓人自己掉進自己的情緒陷阱裡，不輕易動手卻收割人心。</p><blockquote><p><img src="https://loory.tw/wp-content/uploads/20201031031938_50.jpg" alt="下弦之壹魘夢"><br>Source: <a href="https://loory.tw/wp-content/uploads/20201031031938_50.jpg">https://loory.tw/wp-content/uploads/20201031031938_50.jpg</a></p></blockquote><h2 id="真實業務代表的情緒實戰篇"><a href="#真實業務代表的情緒實戰篇" class="headerlink" title="真實業務代表的情緒實戰篇"></a>真實業務代表的情緒實戰篇</h2><p>接下來想分享一個故事，一個業務代表的故事:</p><p>回想幾年前，我當業務代表去跟某客戶談延遲、變更、預算不足……</p><p>因為業務代表是代表公司，但當業務回到公司的時候又代表客戶，到了客戶端，當然需要代表公司解釋這一切，解釋很多問題發生的原因。</p><p>至於為什麼要說和要說什麼，不管是時程、預算、範圍改變都該說，因為範圍改變也會造成時程、預算、品質改變。</p><p>當範圍改變時我們應該講清楚，告訴對方不好意思，現在時間也要變、預算也要加，不能範圍改變但時程照舊，到時就搞死自己。</p><p>這時候對方總經理走進來，結果那位總經理當場罵我：</p><blockquote><p>你這種業務，就給我滾出去。</p></blockquote><p>憤怒幾乎衝上腦門，但我深呼吸鎮定下來，告訴自己：</p><blockquote><p>你只是角色，你只是公司派來傳話的人，你不是他的情緒垃圾桶。</p></blockquote><p>你知道你只是飾演這個角色，結果你把個人情緒帶進去的時候，會造成什麼問題？</p><blockquote><p>是你跟公司都賠進去了。</p></blockquote><p>因為當下又想到另外一件事，業務代表只是代表公司。</p><p>公司就是公司，對方罵公司的東西，只是他不小心把事跟人混在一起。</p><p>當一個人被羞辱可能就離開出去，但是我選擇了鎮定回覆：</p><blockquote><p>我們會如何處理，不好意思造成困擾，以下是後續計畫。</p></blockquote><p>結果發生了什麼？兩天後，在董事長的餐會上，那位客戶居然誇獎：</p><blockquote><p>這個!打不死的蟑螂。</p></blockquote><p>這讓我想起一句佛家格言：</p><blockquote><p>將欲弱之，必固強之；少則得，多則惑。</p></blockquote><p>魘夢靠操控人心獲勝，而炭治郎選擇用善良與堅定拆掉夢境與怒火。</p><p>總經理靠怒氣試圖掌控局面，業務透過發現並轉換思考來消散怒氣。</p><p>僅僅是價值觀上的小小的動作，讓人類最終展現出兩種截然不同的結果。</p><h2 id="情緒管理的思考-X-鬼滅精神"><a href="#情緒管理的思考-X-鬼滅精神" class="headerlink" title="情緒管理的思考 X 鬼滅精神"></a>情緒管理的思考 X 鬼滅精神</h2><p>我們在經營的其實是個人品牌，公司賠進去是因為公司沒做好，可是，你不要把自己也賠進去了。</p><p>互槓上去之後，公司賠了你也賠了，最後你也救不了，然後也沒有顯出你多厲害，結果反而僵局更僵。</p><ul><li>情緒不是錯，但它可能讓你離目標更遠。</li><li>與其任憑怒火爆炸，不如學會把情緒當訊號看待。</li><li>堅定不是逃避憤怒，而是在怒火中保持冷靜。</li></ul><blockquote><p>所謂強大，不是只能用在肉體上的形容詞。</p></blockquote><p>所以下次如果是我們遇到了這樣的事情，我們又會選擇怎麼做?</p><p>PS: 業務代表的故事來自於完成六大馬的象總王冠翔，真的很勵志!!!</p><iframe width="560" height="315" src="https://www.youtube.com/embed/4bXKIFVzHJs?si=5Pm3LEHCp3qm7278" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;各位大大安安，最近看了《鬼滅之刃：無限城篇》預告，深深被下弦之壹魘夢操控人心的劇情震到雞皮疙瘩。劇中一句台詞讓我尤其有感：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果光憑憤怒就能勝利，那世界上就不會有鬼了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他說的是對，也說的是錯</summary>
      
    
    
    
    <category term="那些鬼滅告訴我的事情" scheme="https://linyencheng.github.io/categories/%E9%82%A3%E4%BA%9B%E9%AC%BC%E6%BB%85%E5%91%8A%E8%A8%B4%E6%88%91%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    
    
    <category term="鬼滅之刃" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E4%B9%8B%E5%88%83/"/>
    
    <category term="鬼滅無限列車篇" scheme="https://linyencheng.github.io/tags/%E9%AC%BC%E6%BB%85%E7%84%A1%E9%99%90%E5%88%97%E8%BB%8A%E7%AF%87/"/>
    
    <category term="從動漫看人生" scheme="https://linyencheng.github.io/tags/%E5%BE%9E%E5%8B%95%E6%BC%AB%E7%9C%8B%E4%BA%BA%E7%94%9F/"/>
    
    <category term="魘夢" scheme="https://linyencheng.github.io/tags/%E9%AD%98%E5%A4%A2/"/>
    
  </entry>
  
  <entry>
    <title>2025 AWS 雲端高峰會登台</title>
    <link href="https://linyencheng.github.io/2025/06/22/cloud-platform/2025-aws-taiwan-summit/"/>
    <id>https://linyencheng.github.io/2025/06/22/cloud-platform/2025-aws-taiwan-summit/</id>
    <published>2025-06-22T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.377Z</updated>
    
    <content type="html"><![CDATA[<p>🎉 各位大大安安，今天小編要來聊一個讓工程師雙眼發光的消息：</p><blockquote><p>AWS 終於！終於！ 在我們熱騰騰的台灣土地上，插旗開主機房啦！</p></blockquote><h2 id="📦-AWS-本地機房開張，延遲大減、資料合規一次到位"><a href="#📦-AWS-本地機房開張，延遲大減、資料合規一次到位" class="headerlink" title="📦 AWS 本地機房開張，延遲大減、資料合規一次到位"></a>📦 AWS 本地機房開張，延遲大減、資料合規一次到位</h2><p>先來一段大家最關心的性能與價格：</p><ul><li>✅ 比美國區域貴一點</li><li>✅ 但比東京便宜 9%（有算有賺）</li><li>✅ 如果你原本是為了「低延遲」才部署東京，現在可以搬回台灣試試水溫了！</li></ul><p>💡 官方給的理由也很實在：</p><p>在台灣安全地儲存資料並推動創新，全新的 AWS 亞太 (台北) 區域將使具有資料落地需求的客戶在台灣安全地儲存資料，同時提供更低的延遲。</p><p>這句翻譯一下就是：</p><blockquote><p>「有些產業法規要求資料不得跨境，AWS 台北 Region 正好成了解方。」</p></blockquote><p>終於不用再硬找 workaround，合規、效能兩邊顧到，直接爆擊台灣各種雲端需求痛點！</p><h3 id="🧊-歡慶-AWS-台灣區域正式啟用，新戶註冊即送贈品"><a href="#🧊-歡慶-AWS-台灣區域正式啟用，新戶註冊即送贈品" class="headerlink" title="🧊 歡慶 AWS 台灣區域正式啟用，新戶註冊即送贈品"></a>🧊 歡慶 AWS 台灣區域正式啟用，新戶註冊即送贈品</h3><p>歡慶 AWS 基礎設施區域（Region）在台灣正式啟用！特別舉辦限定活動，新戶註冊即送贈品，數量有限！</p><p>越早完成註冊 + 登記領取，即可拿到 AWS 保溫瓶，是的你沒看錯，就是精緻的保溫瓶。</p><p>雖然雲端很冷？但熱水還是要裝的！夏天當然也很保冰？</p><p>👉 註冊連結在這邊：<a href="https://reurl.cc/qGeqyE">https://reurl.cc/qGeqyE</a></p><h3 id="🚀-見證從雲端到衛星"><a href="#🚀-見證從雲端到衛星" class="headerlink" title="🚀 見證從雲端到衛星"></a>🚀 見證從雲端到衛星</h3><p>前陣子小編參戰 “從區域到全球：亞馬遜創新戰略發佈會”，見證從雲端到衛星，副總統來了我也來了！</p><p>除了技術還有點生活觀察：你以為這是產業先鋒的場子？但同時也是抽獎暨頂樓野餐交流會，不僅吸收新知，還可以吃章魚燒、調酒、精緻點心和餐盒，有吃又有拿 💼</p><p>但如果你是想了解 AWS 真功夫的工程夥伴，建議下次直上 AWS 社群日，會紮實很多，還可以拿到免費試用額度！</p><p>戰略發佈會有幾個亮點！</p><ul><li>🔸 低軌衛星通訊計畫：AWS 讓網路無死角，真 · 雲端到宇宙</li><li>🔸 AI 工具人真的接地氣：股票走勢用 AI 分析 📈 紡織業 AI 配線配圖 👕</li><li>🔸 AWS 台北 region 開放，台灣同時也是全球中文技術客服的據點，技術客服要會網路 + 系統指令 + 看 log 排障礙，想轉職、跳槽的夥伴可以偷偷研究一下，外商光環技術歷練相信不會後悔 🚀</li></ul><p>最後一提，AI 居然現在也能看面相 + 算命 + 姓名學了，下一步是不是要幫你配對交友啦 💘</p><h2 id="🎯-AWS-雲端高峰會也同步開轟，整個就是火力全開"><a href="#🎯-AWS-雲端高峰會也同步開轟，整個就是火力全開" class="headerlink" title="🎯 AWS 雲端高峰會也同步開轟，整個就是火力全開"></a>🎯 AWS 雲端高峰會也同步開轟，整個就是火力全開</h2><p>雲端大神出任務，一次打通雲端轉型的任督二脈！<br>你能想到的重點，這場高峰會都幫你預熱好了 👇</p><p>🌐 核心亮點：</p><ul><li>70+ 分堂議程：AI、資料分析、應用現代化全打包</li><li>ExecLeader 高層論壇 &amp; 新創賦能日：想創業、轉職這裡都有線索</li><li>GameDay 技術實戰模式 ON：AWS 工具從講台用到戰場</li><li>AI Hub ＋ Developer Lounge：觀摩＋動手，從萌新到老鳥直接升級</li></ul><p>🎁 現場還送（真的不是抽的，是「你來我就給你」的那種誠意）：</p><ul><li>早鳥禮（都市機能包 &#x2F; 手機掛繩）</li><li>集點送 AWS 時尚半月包</li><li>參與主題演講 + 問卷還送 AWS 悶燒杯</li></ul><p>📅 2025 AWS 雲端高峰會活動資訊：</p><ul><li>日期：2025&#x2F;7&#x2F;29（二）～ 7&#x2F;30（三）</li><li>時間：08:30 - 17:30</li><li>地點：南港展覽館 2 館</li><li>報名連結：👉 <a href="https://aws.amazon.com/tw/events/summits/taipei/">https://aws.amazon.com/tw/events/summits/taipei/</a></li></ul><p>不管你是想認識 AWS 台北新 Region、還是想深入生成式 AI、低軌衛星與雲端創新技術的現場應用，這場高峰會都不會讓你白走一趟！</p><p>AWS 雲端高峰會，一次直達雲端核心技術＋轉型實戰新契機。</p><p>還不快分享給你身邊那位還在煩部署選區的朋友 XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;🎉 各位大大安安，今天小編要來聊一個讓工程師雙眼發光的消息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AWS 終於！終於！ 在我們熱騰騰的台灣土地上，插旗開主機房啦！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;📦-AWS-本地機房開張，延遲大減、資料合規一次到</summary>
      
    
    
    
    <category term="雲端服務" scheme="https://linyencheng.github.io/categories/%E9%9B%B2%E7%AB%AF%E6%9C%8D%E5%8B%99/"/>
    
    
    <category term="DevOps" scheme="https://linyencheng.github.io/tags/DevOps/"/>
    
    <category term="雲端服務" scheme="https://linyencheng.github.io/tags/%E9%9B%B2%E7%AB%AF%E6%9C%8D%E5%8B%99/"/>
    
  </entry>
  
  <entry>
    <title>AWS Lambda vs EC2 vs Azure Web App vs Vercel</title>
    <link href="https://linyencheng.github.io/2025/06/22/cloud-platform/cloud-web-service/"/>
    <id>https://linyencheng.github.io/2025/06/22/cloud-platform/cloud-web-service/</id>
    <published>2025-06-22T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.377Z</updated>
    
    <content type="html"><![CDATA[<p>這篇文章會簡單比較幾種常見的雲端架站選擇，特別針對前端工程師、Node.js 使用者設計開發環境時常見的場景。</p><h2 id="AWS-Lambda：Serverless-的快速入口"><a href="#AWS-Lambda：Serverless-的快速入口" class="headerlink" title="AWS Lambda：Serverless 的快速入口"></a>AWS Lambda：Serverless 的快速入口</h2><p>對前端工程師來說，Serverless 的最大吸引力就是「不用管機器」：</p><ul><li>Lambda 支援 Node.js，搭配 API Gateway，就能快速上線</li><li>適合微服務或是小型 API 搭配 EJS 等輕量模板</li><li>靜態資源需搭配 S3 + CloudFront，需額外維護資源路徑與快取設計</li></ul><p>推薦工具：以前常用 scandium tool，但現在多數團隊改用 Serverless Framework，支援多雲端平台，部署流程更穩定、社群資源也更完整。</p><p>適合用在：快速試作、事件驅動、短流程、不需持久連線的後端需求。</p><h2 id="AWS-EC2：自由度最高，但維運成本也高"><a href="#AWS-EC2：自由度最高，但維運成本也高" class="headerlink" title="AWS EC2：自由度最高，但維運成本也高"></a>AWS EC2：自由度最高，但維運成本也高</h2><p>EC2 本質上就是一台雲端機器，像是遠端 Ubuntu&#x2F;Linux，你可以安裝 Node.js、MongoDB、Nginx 等等，完全自由配置：</p><ul><li>開發彈性高，可自訂 Reverse Proxy、SSL、排程腳本等</li><li>適合需要自建環境、設定自動備份、使用特定作業系統的場景</li><li>可以整合 Jenkins + SSH 做 CI&#x2F;CD，自動部署</li></ul><p>缺點就是：機器掛了、網路設定錯了、沒開 Port，都是你要自己解決的事。</p><p>適合用在：大型網站、需要完整掌控的生產環境、重資源運算。</p><p>推薦參考：<a href="https://linyencheng.github.io/2019/07/13/tool-nginx/">Linux 系統網站管理（Node.js + Nginx）</a></p><h2 id="Azure-Web-App-App-Service：圖形化管理的直覺部署流程"><a href="#Azure-Web-App-App-Service：圖形化管理的直覺部署流程" class="headerlink" title="Azure Web App &#x2F; App Service：圖形化管理的直覺部署流程"></a>Azure Web App &#x2F; App Service：圖形化管理的直覺部署流程</h2><p>相比 AWS，Azure 的 Web App 是一種 PaaS 方案，讓你透過 Azure Portal 自動串 GitHub、Bitbucket 分支 → 自動 Deploy，流程一條龍，非常直覺。</p><p>Azure 的 Web App &#x2F; App Service 主打「部署流程清楚、設定簡單」：</p><ul><li>GitHub &#x2F; Bitbucket 自動串接、CI&#x2F;CD 內建</li><li>開發測試可用 Web App，測完再升級為 App Service（正式環境）</li><li>CORS 設定、環境變數、log viewer、回滾版本等皆可在 Portal 完成</li><li>若 CORS 遇 bug 可以在 Portal 直接設定</li><li>可七天內重置及用 App Service 的 Metrics + Kudu 預覽環境</li></ul><p>推薦使用情境：不熟命令列但想玩自動部署的前端工程師，或公司主力在 Microsoft 生態系。</p><p>官方資源：</p><ul><li><a href="https://azure.microsoft.com/zh-tw/services/app-service/web/">Azure Web App 官方說明</a></li><li><a href="https://azure.microsoft.com/zh-tw/services/app-service/">Azure App Service 官方說明</a></li><li><a href="https://blog.miniasp.com/post/2015/05/04/Intro-Azure-Web-App-Kudu-engine.aspx">Kudu Web App 管理工具介紹</a></li><li><a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script">Kudu Custom Deployment Script</a></li></ul><h2 id="Vercel：專為前端打造的極速部屬平台"><a href="#Vercel：專為前端打造的極速部屬平台" class="headerlink" title="Vercel：專為前端打造的極速部屬平台"></a>Vercel：專為前端打造的極速部屬平台</h2><p>如果你是 Next.js 或前端 SPA 開發者，那 Vercel 基本上就是 plug &amp; play：</p><p>Git 推送後自動建置 + 預覽連結</p><p>預設支援 SSR&#x2F;ISR（伺服器端渲染 &#x2F; 增量靜態建置）</p><p>免費方案對於個人專案或 MVP 足夠用</p><p>而且還內建 CI&#x2F;CD、Preview Deploy、404 頁面與伺服器函式支援，幾乎不用再搭其他東西就能完成整個部署。</p><p>適合用在：部落格、文件站、MVP、Next.js 專案。</p><h2 id="架站服務選哪個？"><a href="#架站服務選哪個？" class="headerlink" title="架站服務選哪個？"></a>架站服務選哪個？</h2><table><thead><tr><th>需求</th><th>推薦方案</th><th>理由</th></tr></thead><tbody><tr><td>快速試作、低維運</td><td>AWS Lambda &#x2F; Vercel</td><td>不用顧機器，部署快速，適合 PoC &#x2F; 簡易 API</td></tr><tr><td>高自訂、低延遲、複雜需求</td><td>EC2</td><td>自訂 Nginx、背景排程、系統控制度高</td></tr><tr><td>自動化流程 + GUI 操作</td><td>Azure Web App &#x2F; Vercel</td><td>Git 連動 + Portal 控制，對新手友善</td></tr></tbody></table><p>不管你是從前端起家的 Node.js 派，還是進階維運的 DevOps，這三種架站方式各有適用場景。</p><p>拿不到流量？不是誰比較弱，而是用對工具更重要。</p><p>選擇雲端架站工具，與其問「哪個比較強」，不如回到問題：「你現在的專案，真正需要什麼？」</p><ul><li>是想快速出 Demo？還是穩定營運？</li><li>是偏向前端流程？還是需要整合後端資源？</li></ul><p>工具沒有完美，只有合適。搞清楚你的場景，再對症下藥，才是高效前進的第一步。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這篇文章會簡單比較幾種常見的雲端架站選擇，特別針對前端工程師、Node.js 使用者設計開發環境時常見的場景。&lt;/p&gt;
&lt;h2 id=&quot;AWS-Lambda：Serverless-的快速入口&quot;&gt;&lt;a href=&quot;#AWS-Lambda：Serverless-的快速入口&quot; c</summary>
      
    
    
    
    <category term="雲端服務" scheme="https://linyencheng.github.io/categories/%E9%9B%B2%E7%AB%AF%E6%9C%8D%E5%8B%99/"/>
    
    
    <category term="DevOps" scheme="https://linyencheng.github.io/tags/DevOps/"/>
    
    <category term="雲端服務" scheme="https://linyencheng.github.io/tags/%E9%9B%B2%E7%AB%AF%E6%9C%8D%E5%8B%99/"/>
    
  </entry>
  
  <entry>
    <title>Backtracking 回溯法是失敗還是策略</title>
    <link href="https://linyencheng.github.io/2025/06/08/life-thinking-algorithm/backtracking-in-life/"/>
    <id>https://linyencheng.github.io/2025/06/08/life-thinking-algorithm/backtracking-in-life/</id>
    <published>2025-06-08T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.439Z</updated>
    
    <content type="html"><![CDATA[<p>各位大大安安，今天要來聊那些「走錯的路」，一個超級有感卻又常常被忽略的真相。</p><p>從小就被教育要一次選對、考對、愛對、工作對，彷彿人生是條單行道，一錯就萬劫不復，但捫心自問，這個世界真的這麼只有唯一解嗎？</p><p>實際上生活中的一切，都是在語言的規範和限制下所建構出來的，科學即使大部分合理，但生活卻仍舊充滿這麼多值得我們去探索的事物，明明還沒去找所有的可能，但我們卻似乎從未質疑?</p><p>當然這樣長久下來不太妙? 回溯法（Backtracking）也許就會是另一種更聰明、更勇敢的模式。</p><h2 id="🧩-什麼是回溯法？"><a href="#🧩-什麼是回溯法？" class="headerlink" title="🧩 什麼是回溯法？"></a>🧩 什麼是回溯法？</h2><p>回溯法，白話來說，是一種專門用來解決「組合問題」的演算法，像是解迷宮、填數獨，或是在複雜的排列組合中找出答案。</p><p>回溯法很酷的地方在於會勇敢地嘗試一條路，如果發現走不通，會退一步，換條路再試，進行系統性的探索，直到它找到正確答案為止。</p><p>簡單來說，回溯法就是：</p><ol><li>大膽試錯： 先選擇一條路走下去。</li><li>聰明回頭： 發現是死路？沒關係，「退一步」（Backtrack），回到上一個決策點。</li><li>換條路徑： 然後，再嘗試另一個方向。</li></ol><p>這個過程會重複，直到你找到那條可行的路。</p><h2 id="✨-滿天星星散落整個銀河系，什麼原因才讓我們最靠近？"><a href="#✨-滿天星星散落整個銀河系，什麼原因才讓我們最靠近？" class="headerlink" title="✨ 滿天星星散落整個銀河系，什麼原因才讓我們最靠近？"></a>✨ 滿天星星散落整個銀河系，什麼原因才讓我們最靠近？</h2><p>我們很多人都習慣把人生想像成一場「一次性解題」的考試：</p><ul><li>一次就要選對科系</li><li>一次就要找到理想工作</li><li>一次就要成功戀愛結婚</li></ul><p>然後就從此幸福快樂? 但事實是，生活並不是什麼最短路徑問題? 如果是那就不需要律師?</p><p>實務上當然還是必須先試著往某個方向衝刺，但如果發現前面卡住了、走不通了，這時候，請你勇敢地<strong>「退回來」</strong>，然後，再換一條路走走看。</p><blockquote><p>那些「錯的路」不是浪費，它們是來幫你排除錯誤選項的，讓你更接近對的那條路。</p></blockquote><p>很多人活得像個「不能失敗」的人，結果反而因此不敢嘗試，每一次的嘗試，其實都不是白費力氣，各種嘗試都在腦中默默記錄著哪些路行不通、哪些選項不值得再浪費時間。</p><ul><li>嘗試過不適合的科系？→ 你知道了真正的興趣在哪。</li><li>談了沒有結局的戀愛？→ 你看清了自己到底需要怎樣的關係。</li><li>加入過怪團隊？→ 你清楚了未來要避開什麼樣的文化。</li></ul><p>每一次的回溯，並不是要重頭來過，它是要讓你「更精準地踏出下一步」。</p><blockquote><p>人生中很多問題是沒有標準答案的。</p></blockquote><p>身為一個實作型學習的人，不可能只靠靜靜思考三小時就能得到解答，必須走下去看看再說，想當年小編的十主科自主不分系也是這樣來的，有點後悔是當年只去了流舞社練體能，反正當年耳朵都壞了?! 竟然沒去熱音體驗培養飆鼓飆弦這種可以比較長久的興趣 XD</p><p>開始能體會為什麼人在遇到疑惑的時候會想去走朝聖之路了，有些答案，真的不是靠想，是靠走。</p><h2 id="🛑-回溯也需要「剪枝」"><a href="#🛑-回溯也需要「剪枝」" class="headerlink" title="🛑 回溯也需要「剪枝」"></a>🛑 回溯也需要「剪枝」</h2><p>在演算法的世界裡，有個超實用的技巧叫做「剪枝」。</p><ul><li>沒必要在一段根本沒有未來的感情裡內耗自己</li><li>沒必要在一間不斷讓你懷疑人生的公司裡苟延殘喘</li><li>沒必要在一個註定失敗的計畫裡耗盡心力</li></ul><p>剪枝就是當你發現某條路徑明顯不可能帶你走向成功，就請你提前終止，別再浪費時間走下去。</p><p>就像兩個適合的人在不同時空遇到一樣，彼此追求和想要的生活階段並不相同，兩條不同的交叉線趨近於零交點。</p><blockquote><p>別再繼續硬撐一份根本不會帶你到目標的選擇了。</p></blockquote><p>我們的生活也該學會這件事，每一次你走錯的路只要有好好反思，它都不是白走的：「喔！這個地方我來過，不用再走一遍了。」</p><h2 id="🐷-後退原來是向前"><a href="#🐷-後退原來是向前" class="headerlink" title="🐷 後退原來是向前"></a>🐷 後退原來是向前</h2><p>回溯法是反覆的前進，加上聰明地後退。</p><p>而那些曾經走過的死路、犯過的錯都不曾白費，都是成為更好自己的基礎建設。</p><p>是代價，但更是導航。你呢？還有哪些路需要勇敢回溯、聰明剪枝？</p><blockquote><p>手把青秧插滿田，低頭便見水中天，六根清淨方為道，後退原來是向前。</p></blockquote><p>但我還是會持續愛看妹?! 畢竟一路以來很專情沒啥改變?! 20 幾歲的時候喜歡看 20 幾歲的女孩子，到了 30 幾歲好像也沒變?! 外表有時會被大家誤會比實際年齡小上 5-10 歲?! 很偶而看一下不過分吧?!</p><p>為什麼三年前的我對你完全沒有一點抵抗能力?! 說好的六根清淨酒肉和尚瘋狂僧侶呢 XDDD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;各位大大安安，今天要來聊那些「走錯的路」，一個超級有感卻又常常被忽略的真相。&lt;/p&gt;
&lt;p&gt;從小就被教育要一次選對、考對、愛對、工作對，彷彿人生是條單行道，一錯就萬劫不復，但捫心自問，這個世界真的這麼只有唯一解嗎？&lt;/p&gt;
&lt;p&gt;實際上生活中的一切，都是在語言的規範和限制下</summary>
      
    
    
    
    <category term="生活演算法" scheme="https://linyencheng.github.io/categories/%E7%94%9F%E6%B4%BB%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>不是沒時間，是你忘了排優先序！</title>
    <link href="https://linyencheng.github.io/2025/06/08/life-thinking-algorithm/priority-queue-in-life/"/>
    <id>https://linyencheng.github.io/2025/06/08/life-thinking-algorithm/priority-queue-in-life/</id>
    <published>2025-06-08T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.439Z</updated>
    
    <content type="html"><![CDATA[<p>各位大大安安，不知道大家是不是也常常有這種「人生被待辦事項綁架」的感覺？</p><p>待辦清單長到天靈蓋、學習課程一頁翻不完、手機訊息未讀 999+，每件事都喊著「我很重要！」，結果呢？</p><p>可能什麼都沒開始，就默默打開 YouTube，讓影片當背景音陪你虛度時光…（對，我也是）</p><h2 id="✅-什麼是-Priority-Queue？"><a href="#✅-什麼是-Priority-Queue？" class="headerlink" title="✅ 什麼是 Priority Queue？"></a>✅ 什麼是 Priority Queue？</h2><p>Priority Queue 是一種聰明的資料結構。</p><p>跟我們一般排隊「先來後到」的邏輯完全不同，在優先佇列裡，每個項目都自帶一個優先順序。</p><p>就像身為一個價格敏感型消費者?購物車真的無法說清就清，精打細算也要等到免運日才會甘願買? Priority Queue 才不管什麼時候加入購物車，只看重要性或緊急度，來決定要先買哪個。</p><p>想像一下急診室：醫生不會管你掛號單上的號碼是多少，他只會先處理那些生命垂危、需要立刻搶救的病患。</p><p>這，就是最真實的「根據權重排序」啊！</p><h2 id="🛠-把生活變成優先佇列"><a href="#🛠-把生活變成優先佇列" class="headerlink" title="🛠 把生活變成優先佇列"></a>🛠 把生活變成優先佇列</h2><p>來看看我們的人生待辦事項，是不是長這樣：</p><ul><li>回訊息給朋友 ✅</li><li>把下週報告準備好 ✅</li><li>開始那個說了三個月的 Side Project ✅</li><li>看完那堂線上課程 ✅</li><li>運動、打掃、洗衣、追劇 ✅✅✅</li></ul><p>每件事都像是在腦海裡無限循環，彷彿非做不可。</p><p>但如果只是全部丟進一個陣列裡隨機排序處理，那恭喜你，正在光明正大地走入拖延泥沼！</p><p>這時候，如果把這些看似重要卻又讓你焦慮的任務，通通丟進一個 Priority Queue 會如何呢?</p><p>根據以下幾個指標來重新排序：</p><ul><li>時效性（Deadline 多近？）：這件事的截止日期是不是已經在敲門了？</li><li>價值密度（這件事對我未來的回報高嗎？）：投入同樣的時間，哪件事能帶來最大的效益？</li><li>情緒影響力（做完會開心？還是持續焦慮？）：搞定它會讓你如釋重負，還是讓壓力持續堆疊？</li><li>能量配合度（現在的狀態適合處理它嗎？）：你現在是精力充沛適合燒腦，還是只想做些簡單的？</li></ul><p>例如，小編個人最常用的排序法是這樣：</p><ul><li>🔥「不做會焦慮」→ 第一優先：那些像芒刺在背、不做就無法專心做其他事的事。</li><li>🧠「做完會成長」→ 第二優先：那些能提升技能、拓展視野、累積經驗的事。</li><li>😌「做了會開心」→ 第三優先：那些能帶來愉悅、放鬆身心、補充能量的事。</li><li>😵「只打發時間」→ 最後優先：那些純粹耗費時間，卻沒有實際意義的事。</li></ul><h2 id="🧠-人生不是-FIFO（先進先出）"><a href="#🧠-人生不是-FIFO（先進先出）" class="headerlink" title="🧠 人生不是 FIFO（先進先出）"></a>🧠 人生不是 FIFO（先進先出）</h2><p>我們太容易把人生過成 FIFO (First In First Out) 模式了。</p><p>別人丟什麼就先做什麼，變成一個活生生的無情賺錢機器，毫無主動權可言。</p><p>生活，難道就只是在不斷地回應外部需求嗎？先讓自己停下來? 你願意 Cosplay 一下 Priority Queue 嗎?</p><p>將手上的任務好好分類，思考一下「權重」再決定出手順序，也許每個行動也都會更接近真心在乎的人生目標。</p><p>要把 Priority Queue 的概念落實到生活，其實沒有你想像中那麼難：</p><ul><li>善用工具：在 Trello、Notion、Google Keep 這些任務管理工具裡，加入一個「重要性」或「優先級」的欄位。</li><li>每天只選 Top 3：每天早上給自己 10 分鐘，從所有任務中挑選出今天最重要的 3 件事，其他不那麼重要的，就暫時先放著。</li><li>建立「我不再做的事清單」：這個清單能幫助你主動清除那些低權重、耗費心力的雜項。有些事，就是該直接說掰掰。</li><li>給自己一個 Priority Queue「重新排序」時間：小編習慣是每週日晚上，重新檢視並排序下週的所有任務。</li></ul><h2 id="💬-不是沒時間，是沒排序"><a href="#💬-不是沒時間，是沒排序" class="headerlink" title="💬 不是沒時間，是沒排序"></a>💬 不是沒時間，是沒排序</h2><p>很多時候，我們真的不是沒時間，而是被排山倒海而來的資訊和任務徹底淹沒了，以至於失去了好好排序的能力。</p><p>Priority Queue 不僅僅是程式碼裡的排程工具，也能把那些雜事重新賦予權重、重新排序，最終幫你找出當下最值得投入時間和精力的選擇。</p><p>所以，別再讓人生被瞎忙綁架了，今天起，你的人生，你來排序！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;各位大大安安，不知道大家是不是也常常有這種「人生被待辦事項綁架」的感覺？&lt;/p&gt;
&lt;p&gt;待辦清單長到天靈蓋、學習課程一頁翻不完、手機訊息未讀 999+，每件事都喊著「我很重要！」，結果呢？&lt;/p&gt;
&lt;p&gt;可能什麼都沒開始，就默默打開 YouTube，讓影片當背景音陪你虛度時</summary>
      
    
    
    
    <category term="生活演算法" scheme="https://linyencheng.github.io/categories/%E7%94%9F%E6%B4%BB%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>高空彈跳是先跳下去還是看清楚再跳</title>
    <link href="https://linyencheng.github.io/2025/06/05/life-thinking-algorithm/dfs-vs-bfs-in-life/"/>
    <id>https://linyencheng.github.io/2025/06/05/life-thinking-algorithm/dfs-vs-bfs-in-life/</id>
    <published>2025-06-05T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.439Z</updated>
    
    <content type="html"><![CDATA[<p>各位大大安安，今天我們來聊聊兩個常見但思維完全不同的探索策略：</p><ul><li>深度優先搜尋（Depth-First Search, DFS）</li><li>廣度優先搜尋（Breadth-First Search, BFS）</li></ul><p>在演算法中，它們是兩種遍歷圖（或樹）的方法，但在生活中也像是兩種做選擇的風格。</p><h2 id="🔍-什麼是-DFS-和-BFS？"><a href="#🔍-什麼是-DFS-和-BFS？" class="headerlink" title="🔍 什麼是 DFS 和 BFS？"></a>🔍 什麼是 DFS 和 BFS？</h2><ul><li>DFS：一頭栽進去，先走到底（踩到地雷才折返）</li><li>BFS：每一層都看一圈，再決定下一步（比較安全，但慢）</li></ul><p>想像你在一個迷宮裡找寶箱：</p><ul><li>DFS 派: 直接選一條路狂奔到底，有寶箱賺到、沒寶箱就回頭換路。</li><li>BFS 派: 每次只走一步，把所有方向都看一遍，再同時往外擴張。</li></ul><p>兩派都有風險：</p><ul><li>DFS: 容易走錯太深，浪費太多時間在錯的路上。</li><li>BFS: 雖然比較穩，但記憶體（時間與腦容量）消耗很大。</li></ul><h2 id="🧬-探索職涯與自我，該怎麼選？"><a href="#🧬-探索職涯與自我，該怎麼選？" class="headerlink" title="🧬 探索職涯與自我，該怎麼選？"></a>🧬 探索職涯與自我，該怎麼選？</h2><ol><li>你是剛畢業，不知道自己要什麼？<br>➡️ 建議走 BFS，多試幾種實習、專案、產業。把選擇打開來，再從中找到感覺對的方向。</li><li>你已經找到某個方向，但遲遲沒行動？<br>➡️ 該來點 DFS 了，直接栽進去試一試。讀書讀太多、不實踐，不會知道這條路到底合不合適。</li></ol><h2 id="💡-深思還是實驗，沒有絕對的好壞"><a href="#💡-深思還是實驗，沒有絕對的好壞" class="headerlink" title="💡 深思還是實驗，沒有絕對的好壞"></a>💡 深思還是實驗，沒有絕對的好壞</h2><p>面對一門新課程，你會…<br>　 🅐 直接報名先上再說 → DFS<br>　 🅑 先看五個心得文跟 YouTube 開箱 → BFS</p><p>想轉職，你會…<br>　 🅐 先接一兩個 side project 試水溫 → DFS<br>　 🅑 研究職涯規劃書、履歷優化、產業分析 → BFS</p><p>有些人是<strong>「邊走邊想型」</strong>（DFS）<br>他們願意嘗試，願意犯錯，也更可能快速發現熱情與限制。</p><p>有些人是<strong>「分析控思考型」</strong>（BFS）<br>他們做很多功課、訪談別人、讀很多書，再做決定，風險較低但啟動較慢。</p><h2 id="💬-探索世界也在探索自己"><a href="#💬-探索世界也在探索自己" class="headerlink" title="💬 探索世界也在探索自己"></a>💬 探索世界也在探索自己</h2><p>人生探索沒有完美路徑。</p><p>DFS 跟 BFS 都有用，看你在什麼階段、什麼樣性格、什麼樣的時間壓力。</p><p>但無論你選哪種，都記得一件事：</p><p>不要一直想不行，不行就去做；不要一直做不停，不停也要想。</p><h2 id="📚-延伸閱讀"><a href="#📚-延伸閱讀" class="headerlink" title="📚 延伸閱讀"></a>📚 延伸閱讀</h2><ul><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/shortest-path-in-your-life/">最短路徑與人生抉擇：知道去哪，才知道怎麼走</a></li><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/">動態規劃是怎麼累積經驗值的？打怪人生的優化術</a></li><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/knapsack-in-life/">用背包問題，解開選擇困難與時間管理焦慮</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;各位大大安安，今天我們來聊聊兩個常見但思維完全不同的探索策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度優先搜尋（Depth-First Search, DFS）&lt;/li&gt;
&lt;li&gt;廣度優先搜尋（Breadth-First Search, BFS）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在演算</summary>
      
    
    
    
    <category term="人生演算法" scheme="https://linyencheng.github.io/categories/%E4%BA%BA%E7%94%9F%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>香蕉在哪裡不重要，重要的是你還在原地等嗎？</title>
    <link href="https://linyencheng.github.io/2025/06/02/monkeys-on-the-mountain/try-to-find-banana-or-still-waiting-there/"/>
    <id>https://linyencheng.github.io/2025/06/02/monkeys-on-the-mountain/try-to-find-banana-or-still-waiting-there/</id>
    <published>2025-06-02T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.445Z</updated>
    
    <content type="html"><![CDATA[<p>在那座高聳的山上，猴子們過著看似安穩的生活，日復一日追求著評審猿所謂的「香蕉」，這種象徵成果與成就的獎勵。</p><p><img src="/img/monkey.webp"></p><p>評審猿年年來巡山，頒發最大最甜的香蕉給表現最亮眼的猴子。有一隻猴子靠著「逆時鐘搖三下」技巧成功摘下香蕉，從此成為傳奇 —— 戲精猿。</p><p>戲精猿開班授課、出書直播，分享成功學，推崇「香蕉角度學」，教大家如何上位，主張流程必須：</p><blockquote><p>先前滾三圈，逆時鐘搖三下，跳到北邊平台，才能拿到評審認證的香蕉。</p></blockquote><p>這段故事也許熟悉？像不像你熟悉的流程或成功模板？</p><h2 id="🐵-標準流程文化：大家都很努力，卻沒有人看整體"><a href="#🐵-標準流程文化：大家都很努力，卻沒有人看整體" class="headerlink" title="🐵 標準流程文化：大家都很努力，卻沒有人看整體"></a>🐵 標準流程文化：大家都很努力，卻沒有人看整體</h2><p>因為評審猿和記分猿的獎賞制度，猴子們發現能動的流程就不要去更動，動的不好反被計分猿扣分。</p><p>隨著猴群聚落的專業分化，整個香蕉事務流程日益繁雜，猴群們漸漸摸索出標準流程，方便新加入的猴子能快速上手。</p><p>猴群中有三隻猴子佐佐、尚尚與佑佑，這三猴分別負責挖洞、種樹、填土。</p><p>某天尚尚請假了，佐佐與佑佑不想被計分猿扣分照舊挖洞填洞，沒發現中間沒有尚尚種樹，一個挖洞一個填洞，卻沒種樹永續的香蕉計畫面因此臨了危機。</p><p>日常生活中的我們，也為了某種匱乏感而努力，每天固定的看盤操作，說服自己對現狀感到滿足，就像猴子們擔心被扣分而匆匆忙忙庸庸碌碌。</p><p>猴子們忽視了種樹這個重要的環節，最終讓整個永續香蕉計畫岌岌可危，當回到真實的世界，我們又該如何看待我們的生活和追求的目標？投資部位明明破線了卻假裝是長期投資？</p><h2 id="🍌-成功模板的詛咒：你還在照以前的劇本摘香蕉嗎？"><a href="#🍌-成功模板的詛咒：你還在照以前的劇本摘香蕉嗎？" class="headerlink" title="🍌 成功模板的詛咒：你還在照以前的劇本摘香蕉嗎？"></a>🍌 成功模板的詛咒：你還在照以前的劇本摘香蕉嗎？</h2><p>有一天，來了一批來自山下的評審猿，提出導入「香蕉關鍵成果法（Banana OKRs）」。</p><p>猴子們本能地抗拒，猴子們說：「不行啦！這樣會亂掉！」因為他們早已習慣了舊有流程與認可模式，認為只需專注於眼前的香蕉。</p><p>但，猴子們的生活中，也漸漸出現新的香蕉處理流程，但原有流程設計又僅為了原本評審猿的心情，而非真正解決問題。</p><p>猴子們開始質疑變來變去是否有意義，卻又不敢做出改變，最終導致資源的浪費。結果是什麼？流程持續變，猴子們從抱怨變成無感。</p><p>就像一對情侶，一方想過安穩的生活，而另一方卻渴望冒險挑戰。這種價值觀的衝突，讓彼此更加感到迷惘。</p><h2 id="📉-表面成效的假象：忙碌的猴子與錯誤的香蕉方向"><a href="#📉-表面成效的假象：忙碌的猴子與錯誤的香蕉方向" class="headerlink" title="📉 表面成效的假象：忙碌的猴子與錯誤的香蕉方向"></a>📉 表面成效的假象：忙碌的猴子與錯誤的香蕉方向</h2><p>山上的猴子們總是忙，忙著滿足評審猿的期待，讓評審猿相信猴子們一直在努力。</p><p>猴子們還做了更多事：</p><ul><li>發明了香蕉儲藏室（其實沒香蕉可放）</li><li>建立自駕香蕉車（但沒香蕉能載）</li><li>搞 AI 香蕉辨識（但沒樹）</li></ul><p>這些聽起來像不像我們：</p><ul><li>沒有 CI&#x2F;CD，卻硬上 microservices</li><li>開了一堆 Jira ticket，但沒人回頭看 backlog</li><li>新流程上線，每週會議，卻沒人問：「我們到底解了什麼問題？」</li></ul><p>好像很有生產力，但實際上整體香蕉處理流程仍然卡關，但猴子們卻選擇將精力投入到不斷推出新的任務上。</p><p>每當展示出這些所謂的成果時，評審猿總是會點頭表示滿意，稱讚猴子們努力的成果，仿佛總有做不完的事情，卻沒人真正改變現況。</p><p>猴子們中不止有過度繁忙的猴子，還有資源分配不均的情況，能者不僅多勞還過勞。</p><p>猴子們漸漸不再關心猴群的長期發展，而只專注於即時的成果。</p><p>每一次看似成功的小任務後，都會自信地認為自己走在正確的道路上。</p><p>一直以來猴子們都遵循「只要照著評審猿說的做就對了」的準則過日子，總覺得：</p><ul><li>問題只有對錯</li><li>決策只有接受或拒絕</li><li>生活只有上班或下班</li></ul><p>投資上也蠻常會為了一些蠅頭小利短進短出，卻往往忽視了配置的整體性和長期的發展，雖然短期的成果看似滿意，但卻無法帶來真正的進步。</p><h2 id="🍌-那棵香蕉已經吃完了，猴子卻還不肯放手？"><a href="#🍌-那棵香蕉已經吃完了，猴子卻還不肯放手？" class="headerlink" title="🍌 那棵香蕉已經吃完了，猴子卻還不肯放手？"></a>🍌 那棵香蕉已經吃完了，猴子卻還不肯放手？</h2><p>有一天，一隻猴子決定下山尋找新的香蕉，卻因為無法在回到山上前找到香蕉而感到沮喪。</p><p>其他的猴子們看到這一幕，便開始擔心也會在這樣過程中失敗，於是紛紛放棄前往遠方，而選擇待在山裡生產著香蕉。</p><p>就像工程師看到一套新架構會說：「太新了不穩」，但實際上，是沒時間也沒心力去學。</p><p>猴子們陷入了一種集體思維，既然這方法成功過，為什麼不繼續用就好？</p><ul><li>念了大學就該唸研究所</li><li>就該一直拿到 offer 就該一直往高薪跳</li><li>只寫程式不如會報告</li><li>用過的框架最熟，沒理由換</li></ul><p>可是，選擇的方向不同時，失敗的背後往往也都會有不同的原因，問題可能只是舊地圖找不到新香蕉。</p><p>香蕉的品種以及生產方式與效率已經和以往大不相同，猴子們卻仍在煩惱過去繁雜的處理程序。</p><p>猴子們相信戲精猿的那套流程，只因為曾經成功，但山已經變了，香蕉長在別處，猴子們還在原地逆時鐘搖三下。這讓猴子們意識到:</p><blockquote><p>繼續著原來的生活方式並沒有不好，但好像有哪邊不太對。</p></blockquote><p>山上的氣候，天天變化，昨天還在流行的 BananaScript，今天已經被 JungleJS 取代。猴子們過去學會的，未來可能不是沒價值，而是不夠用了。</p><p>猴子常說：「我以前這樣做都沒問題」，那代表已經跟不上氣候變遷，要不被快速進化的山林淘汰，成為了當務之急。</p><h2 id="🌱-當工程師學會反思：從猴群中走出來的聲音"><a href="#🌱-當工程師學會反思：從猴群中走出來的聲音" class="headerlink" title="🌱 當工程師學會反思：從猴群中走出來的聲音"></a>🌱 當工程師學會反思：從猴群中走出來的聲音</h2><p>山上生產香蕉的日子日復一日，即使從佐佐、尚尚、佑佑的故事中發現有許多感覺多餘的勞動，但猴子們依舊相信著前輩的愛心，對於那些口傳的作業流程深信不疑，這有講過，這都有講，這是一個規則。</p><p>猴子們最常吵架的議題就是香蕉怎麼分，有猴子主張「按工作分配」、有猴子堅持「大家平均分」。</p><p>直到有一天，一隻聰明的小猴子（好吧，其實就是隻普通的小猴子）提出一個疑問：</p><blockquote><p>「如果我們不是只能選邊站呢？是不是也能邊聽邊走、邊做邊修？」<br>「要不要我們先試著講出彼此的顧慮，再來討論解法？」</p></blockquote><p>慢慢地，猴子們學會了從立場轉向需求，也發現有些爭執其實只是「說話的方式不一樣」，有的時候和家人、朋友的溝通也是，我可能錯了，猴子們開始問自己：</p><blockquote><p>「如果長大是讓選項變少，那我們努力幹嘛？」<br>「如果人生只能選 0 跟 1，那學會彈性是要幹嘛？」</p></blockquote><p>程序猿們以前做工具都吵翻天，討論架構時永遠吵在第一層：</p><ul><li>「我們一定要用 polyrepo！」</li><li>「不行啦，monorepo 才是正道！」</li></ul><p>直到某天有隻小猴猴子說：「不然看應用情境？看團隊規模？看 build 流程？我們能不能根據需求做彈性選擇？」</p><p>於是猴子們開始做 Decision Log、比較優缺點，也慢慢找到了「選擇背後的脈絡」，不再是架構選型的宗教戰爭。</p><p>某天，那一隻平凡的小猴子研究出香蕉基因分裂技術，大幅提升產量與品質，讓猴子不再只靠老方法，也為猴子們提供了一個新的生活選擇。戲精猿因此轉型也開始有了創造力，不只是演出當年故事，而是用創意改善聚落，傳授新香蕉哲學。</p><p>猴子們開始用滑翔翼、AI 路徑預測工具找香蕉，有的程序猿寫程式寫得累，就開始利用晚上教別的猴子怎麼用 bananaGPT（不開玩笑，真的是用 AI 找香蕉 🍌），意外打開了家教副業的世界。</p><p>猴子們也發現原來職涯可以不只一條路，正職與副業可以並行，工作跟興趣可以交錯。</p><p>最重要的是：選擇權應該回到猴子自己手上。</p><h2 id="🧭-職涯不是爬樓梯，而是選地圖"><a href="#🧭-職涯不是爬樓梯，而是選地圖" class="headerlink" title="🧭 職涯不是爬樓梯，而是選地圖"></a>🧭 職涯不是爬樓梯，而是選地圖</h2><p>猴子們開始認為是不是太執著於那棵香蕉樹了？</p><p>其實除了採香蕉，還可以研究怎麼讓香蕉保存得更久、怎麼做成香蕉果乾、甚至可以設計猴子用的香蕉搬運機。</p><p>這些「不純粹採香蕉」的猴子一開始不務正業，但沒多久，卻成為讓整個猴群效率翻倍的關鍵角色。</p><p>這在工程師世界裡就像是：</p><ul><li>從單純寫程式轉向 DevOps、自動化測試、架構設計</li><li>從技術人轉型成顧問、講師、產品思維實踐者</li><li>從線性升遷邏輯轉向跨領域探索與自由職涯</li></ul><p>不一定要當那個年薪最高的猴子，也許可以當那隻走得更遠的猴子? 可以選擇當寫最強 banana script 的程序猿，也可以成為串接各方資源的傳播猿，甚至轉去海邊開香蕉冰店。</p><p>🍌 你想走多遠，取決於你是否願意放下那根「代表過去」的香蕉。</p><ul><li>舊方法有效不代表永遠適用</li><li>表現不是目的，理解與成效才是關鍵</li><li>改變會痛，但不變可能死</li><li>忙碌 ≠ 生產力，流程 ≠ 真正的進展</li><li>別放大恐懼，試著探索那些你還沒走過的香蕉樹林</li></ul><p>下一次，當你準備說出「以前這樣做沒問題」的時候，也許該問的是：「未來，這樣還會夠用嗎？」</p><blockquote><p>下一棵哈密瓜口味的香蕉，也許就長在還沒走過的地方。</p></blockquote><p>在未來的有一天，吃了哈密瓜口味的香蕉冰後，才發現生活原來也就是一碗哈密瓜冰，也才發現原來自己好像長大了呢?</p><blockquote><p>香蕉在哪裡不重要，重要的是你還在原地等嗎？</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在那座高聳的山上，猴子們過著看似安穩的生活，日復一日追求著評審猿所謂的「香蕉」，這種象徵成果與成就的獎勵。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/monkey.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;評審猿年年來巡山，頒發最大最甜的香蕉給表現最亮眼的猴子。有一隻猴子靠著「逆時鐘搖</summary>
      
    
    
    
    <category term="山上猴子的故事" scheme="https://linyencheng.github.io/categories/%E5%B1%B1%E4%B8%8A%E7%8C%B4%E5%AD%90%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>從開始到放棄，從動手到動嘴</title>
    <link href="https://linyencheng.github.io/2025/06/01/monkeys-on-the-mountain/from-starting-to-giving-up-from-doing-to-talking/"/>
    <id>https://linyencheng.github.io/2025/06/01/monkeys-on-the-mountain/from-starting-to-giving-up-from-doing-to-talking/</id>
    <published>2025-06-01T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.445Z</updated>
    
    <content type="html"><![CDATA[<p>在一座高聳入雲的山上，住著一群猴子，猴子們都追逐著一個夢想，那就是，上等的香蕉。猴子們常常在山上討論：你是追求上等蕉的猴子，還是甘願無止盡地等待平凡香蕉的猴子呢？</p><p><img src="/img/monkey.webp"></p><p>有天，山上來了隻評審猿，評審猿說服猴子們來進行香蕉重分配的活動，過程之中評審猿會依照猴子們能被看見的表現，定期或不定期配發更多香蕉給表現優異的猴子，這讓猴子們更加努力地展現自己的才能。</p><p>猴子們，漸漸學會在評審猿的評比中，透過凸顯自己的定位與價值來獲得更多香蕉。猴子們也在程序猿的協助下，建立起猴聯網的機制，確保猴群的運作更加高效。</p><p>評審猿告訴猴子們，追求香蕉的過程中，最重要的不是香蕉本身，而是你如何展現自己的才華。評審猿的話讓猴子們深受啟發，於是猴子們開始了「山上猴子的養成計畫」。</p><h2 id="阻礙與成長"><a href="#阻礙與成長" class="headerlink" title="阻礙與成長"></a>阻礙與成長</h2><p>山上猴子的養成計畫過程中，猴子需要盡可能的了解山上的一花一草一世界，就連在路上的坑坑洞洞，都很可能是前輩們為了提醒後輩們留下的愛心。</p><p>計畫中不管是老猴子或小猴子，都只想著努力的爭取評審猿眼光，或許是靠搬運香蕉的時候多扭幾下屁股，或是搬完香蕉後來一段霹靂舞，漸漸的猴子的花邊技能需求開始快速上升。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/7JzYguOt3-c?si=ihQC__uudjRB0YmI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>隨著時間的推移，猴群的規模越來越大，猴群開始出現權力與資源的爭奪，老謀深算的猴子們漸漸開始不滿足而需要更多的空間，卻也因為活動能力變得緩慢而佔用了大量的資源。</p><p>新來的小猴子們充滿活力，卻因為太急著想進入猴群而遭到資源的排擠，畢竟新來的猴子隨便在路上走都會因為坑洞而跌倒，該怎麼做才能夠幫得上老猴子們的忙呢?</p><blockquote><p>這讓小猴子們開始思考：真正有資源的生物，怎麼會選擇到山上當猴子？</p></blockquote><p>在這個山上的猴子養成計畫中，小猴子們面臨著競爭激烈的環境和各種挑戰。資源的排擠、老一輩的權力鬥爭以及環境中的隱患，無形中都影響著小猴子們的成長。</p><p>儘管過程充滿阻礙和困難，小猴子們仍渴望在猴群中找到自己的定位和價值。究竟是什麼驅使猴子們選擇在這樣的環境中奮鬥？這不僅是對資源的認知與探索，更是對自我價值的追尋。</p><p>猴子們的努力和創新，反映了不斷學習和適應的重要性。在資源有限的情況下，需要一邊避開坑洞，一邊學習如何在鬥爭與合作中，運用自己的能力來促進自身和團體的成長，並在變化萬千的山中找到屬於自己的位置。</p><blockquote><p>其中有一個有趣的問題：在選擇阻礙與未來的可能性之間，該如何取捨？</p></blockquote><h2 id="演技與合作"><a href="#演技與合作" class="headerlink" title="演技與合作"></a>演技與合作</h2><p>隨著人類教會猴子說話，他們開始演化出了說話的藝術，這讓猴子們在爭鬥中有了更多的選擇。有些猴子漸漸演化成了戲精猿，學會了用巧妙的策略和表達來獲得香蕉。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/XaN3kUz4KSw?si=CpwIqJhOqCeY8CJG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>戲精猿在追求利益的過程中，無形中增加了對演技和表現的重視，變得愈加精於表現自己的優勢，想讓評審猿看見的努力成果。</p><p>最佳演猿則是戲精猿中的翹楚，表現總是能引起評審猿的注意，進而贏得讚賞和資源，便成為猴群中最具影響力的角色之一，儘管表現往往是為了博取評審猿的認可。</p><p>言語演化象徵著技能與表達能力的提升，猴子們則依賴這些能力在漸漸擴大的組織中立足，最佳演猿的出現像一面鏡子，折射出那些精妙操控表現的影響與資源取得能力。</p><p>光彩背後，卻隱藏著競爭的黑暗面，為了獲得評審猿的青睞，讓真誠的連結在利益面前顯得脆弱。</p><p>然而，這種競爭的本質讓猴群的劣根性逐漸浮現，許多猴子為了獲得評審猿的青睞，僅止於表面上的合作和讚賞，背後都是為了引起評審猿的注意，最終造成整個群體的道德基礎逐漸崩潰。</p><blockquote><p>追求成功的過程中，是否已經犧牲了真正的價值？當外在的評價成為唯一的追求時，內心的滿足與成就感又該從何而來？</p></blockquote><p>並非所有的猴子都能適應這種變化。有些猴子依然固守傳統，無法打破自身的局限，因此在爭鬥中失去了機會，無論多麼努力，不懂適應就得面臨失敗的下場。</p><p>競爭與合作之間的微妙平衡，挑戰著猴子們的反思與適應和學習能力。</p><h2 id="猴聯網的真相"><a href="#猴聯網的真相" class="headerlink" title="猴聯網的真相"></a>猴聯網的真相</h2><p>隨著猴群的擴大，猴子們在面對困難時逐漸演化出了一種稱為「猴聯網」的合作模式。</p><p>誰能想像，猴子們在面對困難時，居然能依賴猴聯網這種充滿理想的合作模式？當意外或災難來臨時，猴聯網便會啟動，猴子們自發組織前往解決問題。</p><p>在適應猴聯網的過程中，猴子們逐漸演化成為程序猿，程序猿需要身體健康和能夠持續的勞動，若條件無法滿足，則會變回猴子。</p><p>程序猿負責處理各種事務，涵蓋從採集香蕉到妥善保存的整個流程，並透過猴聯網的機制確保猴子們都順利獲得香蕉，使猴群的生活運行流暢。</p><p>隨著猴群的擴大，總會有一些猴子無法演化成戲精猿或程序猿，但說話的藝術也讓這些猴子們找到了另外一個生存方法，那就是不負責任的傳達訊息，逐漸演化成為傳播猿，傳播猿的關鍵在於掌握重要資訊並有效佈達。</p><p>然而，資訊卻在多層傳播中變得愈加失真。過程中猴子們會出現主觀解讀、溝通障礙、選擇性表達、資訊過載、以及刻意扭曲的情況，這些都會使得訊息偏離原本的樣貌。</p><p>當時的猴子們都深信不疑，這就是猴子世界的真理。</p><p>因此，山上時常會爆發猴聯網也無法解決的「猴猴危機」，畢竟身為猴子，做蠢事是不分出生的。在等待評審猿審判前，平時各自為政猴子們不得不合作，這時猴子們終於明白只有團結才能抵禦外來的威脅。</p><blockquote><p>Apes alone…weak! Ape together…strong!</p></blockquote><h2 id="又回到最初的猿點"><a href="#又回到最初的猿點" class="headerlink" title="又回到最初的猿點"></a>又回到最初的猿點</h2><p>隨著猴群的擴大，評審猿漸漸無法辨識出猴子們的樣子，甚至連戲精猿、傳播猿和程序猿的角色也變得模糊不清，當無法得到評審猿的青睞，猴子們彷彿回到了最初的猿點，有沒有進化彷彿區別不大。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/xWzlwGVQ6_Q?si=z8CBLzzLutu9zPVb" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>猴子們從一開始的懵懂，到後來的混亂，再到努力尋找自己的定位。戲精猿、傳播猿和程序猿，似乎都在為了贏得評審猿的青睞而展現各自的才華，卻最終淪為無名猴子。</p><p>隨著時間的推移，戲精猿、傳播猿和程序猿中逐漸演化出管理猿，管理猿懂得如何實現效益最大化。藉助管理猿的協助，猴群開始出現各自的領地和聚落：戲精猿聚落擅長塑造對外形象、傳播猿聚落精於口才、程序猿聚落則專注於事務處理。</p><p>評審猿漸漸對於聚落之間的分工初具雛形感到滿意，便指派身邊的親信成為計分猿。在猴子的日常生活中，計分猿化身為普通猴子，當發現錯誤時，便立即出現進行提醒和計分。</p><p>在下一次評比中，評審猿將根據此次錯誤的影響範圍扣分。如果是曾經提過的問題，則會加倍扣分，計分猿則漸漸成為一隻善於落井下石的猴子。</p><p>當分數被扣到零分時，戲精猿、傳播猿和程序猿又會變回普通猴子，這時候猴子都會唱起一首歌來抒發當時的心情 「又回到最初的猿點，計分猿你機掰的臉」。猴子們開始意識到，從開始到放棄，從動手到動嘴，猴群中的合作與演技才是在龐大猴群中生存的關鍵。</p><p>當猴子們唱起 「又回到最初的猿點」時，回到起點的勇氣也許才是這些初出茅廬的猴子最應該學習的功課。</p><p>無論是年長的老猴子還是年輕的小猴子，在日復一日的山上生活中，猴子們可能會在這場演出中感到迷失，但最後再回到原點時，該是那個時候好好問問自己。</p><blockquote><p>我是一隻什麼樣的猴子？該成為什麼樣的猴子？究竟又該屬於哪一個聚落？ 在山上又該要扮演什麼角色？</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在一座高聳入雲的山上，住著一群猴子，猴子們都追逐著一個夢想，那就是，上等的香蕉。猴子們常常在山上討論：你是追求上等蕉的猴子，還是甘願無止盡地等待平凡香蕉的猴子呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/monkey.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;有天，山上來了隻評審猿，</summary>
      
    
    
    
    <category term="山上猴子的故事" scheme="https://linyencheng.github.io/categories/%E5%B1%B1%E4%B8%8A%E7%8C%B4%E5%AD%90%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>人生動態規劃的生活哲學</title>
    <link href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/"/>
    <id>https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/</id>
    <published>2025-05-28T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.439Z</updated>
    
    <content type="html"><![CDATA[<p>各位大大安安，今天我們要來聊聊演算法界的隱藏王者：動態規劃（Dynamic Programming，簡稱 DP）。</p><p>很多人一聽到 DP 就直接投降，但其實 DP 就像打怪練等一樣，只要掌握核心精神，就會發現：它就是你早就在做的事，只是沒寫成表格罷了。</p><h2 id="💥-什麼是動態規劃？"><a href="#💥-什麼是動態規劃？" class="headerlink" title="💥 什麼是動態規劃？"></a>💥 什麼是動態規劃？</h2><p>簡單來說：</p><blockquote><p>「我現在要做的決策，能不能靠過去的最佳經驗來做選擇？」</p></blockquote><p>再白話一點：</p><blockquote><p>你打怪升級，不會每次都從 LV1 砍到 LV99，而是記住每次升級的過程，把經驗值存起來，下次不用重頭再來。</p></blockquote><h3 id="每一步都記起來，才不會白走"><a href="#每一步都記起來，才不會白走" class="headerlink" title="每一步都記起來，才不會白走"></a>每一步都記起來，才不會白走</h3><p>想像你玩 RPG：</p><ul><li>初始血量 100</li><li>每條路徑上會遇到怪物、補包或陷阱</li><li>目標是走到終點血量還活著</li></ul><p>這時候你會怎麼辦？</p><ol><li>嘗試每一條路？</li><li>每次重走都重新計算？</li></ol><p>不，你會記住：哪條路會損多少血、哪個角落有補包，然後把「過去最佳走法」存起來，這就是 DP！</p><h2 id="🧠-DP-的兩大核心精神"><a href="#🧠-DP-的兩大核心精神" class="headerlink" title="🧠 DP 的兩大核心精神"></a>🧠 DP 的兩大核心精神</h2><ol><li>重複子問題（subproblems）：很多問題其實只是原問題的縮小版，學習 React 不用重學 JavaScript（因為你已經解過那個子問題）</li><li>最優子結構（optimal substructure）：整體最優 &#x3D; 局部最優的組合，理想的人生，也許不是一次完成，而是每階段的最好選擇累積出來的。</li></ol><p>就像人生中應該盡可能早的談戀愛?早點失戀，就能夠更早成為更好的大人?</p><h2 id="🧬-DP-是你的人生筆記"><a href="#🧬-DP-是你的人生筆記" class="headerlink" title="🧬 DP 是你的人生筆記"></a>🧬 DP 是你的人生筆記</h2><p>是不是在生活中也常這樣：</p><ul><li>跟主管開會時踩雷，下次就記下來「不能直接說不」</li><li>約會時失言，就提醒自己「不要聊前任」</li><li>專案踩雷後產生 checklist，之後照著走就沒事</li></ul><p>這些經驗筆記，其實都是生活版本的 DP 表格，這也就是傳說中的先做好一版，再做 CIP 的道理。</p><p>每一次錯誤，其實都值得記下來</p><ul><li>走過一段錯的感情，那是你情感地圖的一部分。</li><li>做過不適合的工作，下次投履歷就會更快看懂「這間不適合我」。</li></ul><p>成熟不是避免錯誤，而是走過一次、記得一次。</p><p>有時候我們不是做錯選擇，而是忘記自己曾經犯過一樣的錯。</p><p>DP 的本質就是「不重走錯誤的路，持續更新更好的選擇」。</p><p>打怪如此，寫程式如此，人生何嘗不是?</p><h2 id="📚-延伸閱讀"><a href="#📚-延伸閱讀" class="headerlink" title="📚 延伸閱讀"></a>📚 延伸閱讀</h2><ul><li><a href="https://linyencheng.github.io/2024/10/27/life-thinking-algorithm/binary-search-in-life/">人生的 Knapsack 背包，我的人生裝得下什麼？</a></li><li><a href="https://linyencheng.github.io/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/">人生的貪婪演算法，你想的最佳解也許不是真的最佳解又如何</a></li><li><a href="https://linyencheng.github.io/2024/10/27/life-thinking-algorithm/binary-search-in-life/">人生的二分搜尋法，為什麼喜歡的演唱會總是聽一場少一場?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;各位大大安安，今天我們要來聊聊演算法界的隱藏王者：動態規劃（Dynamic Programming，簡稱 DP）。&lt;/p&gt;
&lt;p&gt;很多人一聽到 DP 就直接投降，但其實 DP 就像打怪練等一樣，只要掌握核心精神，就會發現：它就是你早就在做的事，只是沒寫成表格罷了。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="人生演算法" scheme="https://linyencheng.github.io/categories/%E4%BA%BA%E7%94%9F%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>人生的 Knapsack 背包</title>
    <link href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/knapsack-in-life/"/>
    <id>https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/knapsack-in-life/</id>
    <published>2025-05-28T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.439Z</updated>
    
    <content type="html"><![CDATA[<p>各位大大安安，今天我們來聊一個經典又讓人內心動搖的問題：Knapsack Problem（背包問題）。</p><p>在演算法課上，它是一道讓學生覺得空虛的題目；但在人生中，卻是一個我們天天都在面對的選擇：</p><blockquote><p>我有一個容量有限的背包，究竟要裝進什麼？</p></blockquote><h2 id="🔍-Knapsack-Problem-是什麼？"><a href="#🔍-Knapsack-Problem-是什麼？" class="headerlink" title="🔍 Knapsack Problem 是什麼？"></a>🔍 Knapsack Problem 是什麼？</h2><p>你有一個背包，容量是 W，你面前有 N 個物品，每個物品有重量和價值。</p><p>問題是：在不超過背包容量的前提下，怎麼選物品讓總價值最大？</p><p>舉例來說：</p><table><thead><tr><th>物品</th><th>重量</th><th>價值</th></tr></thead><tbody><tr><td>書本</td><td>3kg</td><td>$60</td></tr><tr><td>筋膜槍</td><td>2kg</td><td>$40</td></tr><tr><td>鍋具組</td><td>4kg</td><td>$70</td></tr><tr><td>Switch</td><td>1kg</td><td>$30</td></tr></tbody></table><p>背包只能裝 5 公斤，你會怎麼選？</p><blockquote><p>是裝一整組鍋具，還是帶著 Switch 和書本，一邊煮泡麵一邊打薩爾達？</p></blockquote><h2 id="🧠-演算法怎麼解？"><a href="#🧠-演算法怎麼解？" class="headerlink" title="🧠 演算法怎麼解？"></a>🧠 演算法怎麼解？</h2><p>這是個典型的動態規劃問題。</p><p>因為你不能光看「單一物品的價值」，而是要考慮組合之間的搭配。</p><blockquote><p>當你有太多選擇、太少空間，這時「貪婪」反而不靈了。</p></blockquote><p>不像<a href="https://linyencheng.github.io/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/">貪婪演算法</a>那樣只看當下最好，而是記錄每個重量下的最大價值，一層一層地推進，逐步逼近最好的組合，這種方法，不正像我們活在選擇焦慮的現代人？</p><p>每一份工作都是為了下一份工作?每一個現在的犧牲和努力都是為了未來?</p><h2 id="🧳-人生就是一場背包問題"><a href="#🧳-人生就是一場背包問題" class="headerlink" title="🧳 人生就是一場背包問題"></a>🧳 人生就是一場背包問題</h2><p>想想你現在的生活：</p><ul><li>時間有限（每週只有 168 小時）</li><li>體力有限（一天只能做幾件深度工作的事）</li><li>注意力有限（訊息爆炸到讓人焦慮）</li></ul><p>那麼問題來了：你要裝進什麼？</p><ul><li>看 Netflix 還是寫 side project？</li><li>學 React 還是學生成式 AI？</li><li>交新朋友，還是回頭整理自己的情緒？</li></ul><p>我們總以為自己可以全都要，但事實是：</p><blockquote><p>背包只有這麼大，裝了 A，就裝不下 B。</p></blockquote><p>雞湯文來一篇:</p><p>你的人生終究是個小丑，你會有很多顆球需要不停地拋接。</p><p>隨著年紀漸長你會發現，大多數的球都是橡皮做的，有幾顆卻是玻璃做的。</p><p>大多數的球掉下後都能夠彈的回來，有幾顆卻無法。</p><h2 id="🤯-難的從來不是選擇，而是捨棄"><a href="#🤯-難的從來不是選擇，而是捨棄" class="headerlink" title="🤯 難的從來不是選擇，而是捨棄"></a>🤯 難的從來不是選擇，而是捨棄</h2><p>背包問題真正的難點，不是怎麼拿最多的東西，而是要學會：</p><ul><li>什麼對你真的有價值？</li><li>那些看起來很重、但其實沒價值的東西，能不能放下？</li><li>你背的，是自己的選擇，還是社會給你的 KPI？</li></ul><p>這些才是人生的 Knapsack 的核心。</p><p>有時候，我們為了「不浪費」學過的技能、交過的朋友、打下的基礎，反而捨不得放下。</p><blockquote><p>但演算法教我們：不是已經投入的就一定值得，重點是未來的價值。</p></blockquote><h2 id="🧘-滿足-≠-成就"><a href="#🧘-滿足-≠-成就" class="headerlink" title="🧘 滿足 ≠ 成就"></a>🧘 滿足 ≠ 成就</h2><p>這幾年我也開始學著用「價值密度」來看自己的人生選擇：</p><ul><li>花 2 小時跟朋友吃飯，也許價值比刷 4 小時社群還高。</li><li>一個月薪 15 萬的工作，扣掉通勤、壓力、身心耗損，也許還不如月薪 6 萬但能自由安排時間的生活。</li></ul><p>成就感（來自外部）、滿足感（來自內部），可能根本裝在兩個不同的背包裡。</p><h2 id="該是時候給你的人生寫個動態規劃"><a href="#該是時候給你的人生寫個動態規劃" class="headerlink" title="該是時候給你的人生寫個動態規劃"></a>該是時候給你的人生寫個動態規劃</h2><p>別再只是「先拿最近看到的最閃亮的東西」了。<br>給自己一些時間，列出選項，計算代價，思考組合。</p><p>人生的背包問題沒有唯一解，但你可以選擇自己計算出來的答案，而不是別人塞給你的。</p><p>你呢? 你的 Knapsack 人生的背包裝得下什麼?</p><h2 id="📚-延伸閱讀"><a href="#📚-延伸閱讀" class="headerlink" title="📚 延伸閱讀"></a>📚 延伸閱讀</h2><ul><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/">人生動態規劃的生活哲學，打怪升級不是靠天賦是靠什麼?</a></li><li><a href="https://linyencheng.github.io/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/">人生的貪婪演算法，你想的最佳解也許不是真的最佳解又如何</a></li><li><a href="https://linyencheng.github.io/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/">成為自己看得起的大人: 那些鬼滅告訴我的事情</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;各位大大安安，今天我們來聊一個經典又讓人內心動搖的問題：Knapsack Problem（背包問題）。&lt;/p&gt;
&lt;p&gt;在演算法課上，它是一道讓學生覺得空虛的題目；但在人生中，卻是一個我們天天都在面對的選擇：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我有一個容量有限的背包，究</summary>
      
    
    
    
    <category term="人生演算法" scheme="https://linyencheng.github.io/categories/%E4%BA%BA%E7%94%9F%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>你的 Dijkstra 路徑真的有比較快嗎?</title>
    <link href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/shortest-path-in-your-life/"/>
    <id>https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/shortest-path-in-your-life/</id>
    <published>2025-05-28T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.439Z</updated>
    
    <content type="html"><![CDATA[<p>各位大大安安，今天我們來聊聊一個既簡單又不簡單的問題：我這輩子到底要怎麼走，才是最快到達理想人生的路？</p><p>你可能會說：「那不是看命嗎？」但演算法告訴我們：其實可以算出來——這就是最短路徑演算法（Shortest Path Algorithm）。</p><p>不過你的 Dijkstra 路徑真的有比較快嗎?抉擇是為了走的快，還是走的滿足?</p><h2 id="🛤️-最短路徑演算法是什麼？"><a href="#🛤️-最短路徑演算法是什麼？" class="headerlink" title="🛤️ 最短路徑演算法是什麼？"></a>🛤️ 最短路徑演算法是什麼？</h2><p>舉個例子，Dijkstra 演算法告訴我們：</p><p>從起點出發，計算到每一個節點的最短距離，並持續更新直到抵達終點。</p><p>注意兩件事：</p><ul><li>每條路的距離不同（人生中每條選擇的代價也不同）</li><li>不一定直線最短（有時候繞一下反而更快）</li></ul><p>物理中的最速降線</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Bh6-zKwTupc?si=re4i2O_b5ZQiE3tI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="🎓-生涯選擇的圖論"><a href="#🎓-生涯選擇的圖論" class="headerlink" title="🎓 生涯選擇的圖論"></a>🎓 生涯選擇的圖論</h2><p>想像人生是一張圖：</p><ul><li>每個節點是一段經歷：大學、第一份工作、轉職、創業、放空…</li><li>每條邊是轉換：從 A 到 B 要花幾年、多少代價、多少心力</li><li>目標：從現在的你，到你理想的樣子</li></ul><p>你會發現，人生根本不是線性「讀書 → 就業 → 升遷」，而是：</p><blockquote><p>一張巨大的圖，每個人都在不同的節點，問著：『我該怎麼走？』</p></blockquote><h2 id="🧭-問題是：你知道終點在哪嗎？"><a href="#🧭-問題是：你知道終點在哪嗎？" class="headerlink" title="🧭 問題是：你知道終點在哪嗎？"></a>🧭 問題是：你知道終點在哪嗎？</h2><p>很多人在人生地圖裡亂走，是因為：</p><ul><li>沒有明確的終點（不知道自己要什麼）</li><li>以為別人的終點就是自己的（盲目追求高薪、頭銜）</li><li>看不到邊的代價（轉職需要的學習時間、創業的壓力）</li></ul><blockquote><p>沒有終點，最短路徑也沒有意義。</p></blockquote><h2 id="⛏️-Dijkstra：一步步更新你的地圖"><a href="#⛏️-Dijkstra：一步步更新你的地圖" class="headerlink" title="⛏️ Dijkstra：一步步更新你的地圖"></a>⛏️ Dijkstra：一步步更新你的地圖</h2><p>在 Dijkstra 中，我們會做兩件事：</p><ol><li>先選擇當前已知最短的路徑節點</li><li>透過它更新其他節點的可能性</li></ol><p>在人生中也一樣：</p><ol><li>先做好當下最清楚的一步（例如學好 JavaScript）</li><li>再根據這一步，打開更多的可能（前端、全端、開課、創業）</li></ol><p>別小看這一步，它不一定是最有光環的選項，但它是讓地圖更新的起點。</p><h2 id="💬-有時候走錯路也沒關係，因為你學會了「邊的成本」"><a href="#💬-有時候走錯路也沒關係，因為你學會了「邊的成本」" class="headerlink" title="💬 有時候走錯路也沒關係，因為你學會了「邊的成本」"></a>💬 有時候走錯路也沒關係，因為你學會了「邊的成本」</h2><p>每條路都是一筆資料，你可以不走，但你不能不知道它的代價。</p><p>像我即使選了某份高薪但不自由的工作，身體也變得不怎麼健康，後來可能就離開了，但過程中我學會了自己的忍耐極限，也學會了怎麼設定邊的 cost。</p><p>這筆學費很貴，但會讓我未來的地圖更準確。最短路徑的意義，不是走最少的步，而是走出最符合價值的走法。</p><p>有人走彎路，結果找到自我;有人走直線，卻在終點迷路;最終，不是去哪，也許有沒有畫過自己的地圖?</p><h2 id="📚-延伸閱讀"><a href="#📚-延伸閱讀" class="headerlink" title="📚 延伸閱讀"></a>📚 延伸閱讀</h2><ul><li><a href="https://linyencheng.github.io/2024/10/27/life-thinking-algorithm/binary-search-in-life/">人生的二分搜尋法，為什麼喜歡的演唱會總是聽一場少一場?</a></li><li><a href="https://linyencheng.github.io/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/">人生的貪婪演算法，你想的最佳解也許不是真的最佳解又如何</a></li><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/">人生動態規劃的生活哲學，打怪升級不是靠天賦是靠什麼?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;各位大大安安，今天我們來聊聊一個既簡單又不簡單的問題：我這輩子到底要怎麼走，才是最快到達理想人生的路？&lt;/p&gt;
&lt;p&gt;你可能會說：「那不是看命嗎？」但演算法告訴我們：其實可以算出來——這就是最短路徑演算法（Shortest Path Algorithm）。&lt;/p&gt;
&lt;p&gt;不</summary>
      
    
    
    
    <category term="人生演算法" scheme="https://linyencheng.github.io/categories/%E4%BA%BA%E7%94%9F%E6%BC%94%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>你是忘記了還是害怕想起來</title>
    <link href="https://linyencheng.github.io/2025/01/21/career/experience-sharing-tsmc-job/"/>
    <id>https://linyencheng.github.io/2025/01/21/career/experience-sharing-tsmc-job/</id>
    <published>2025-01-21T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.377Z</updated>
    
    <content type="html"><![CDATA[<p>小編受到 104 的邀請，即將在年後 2025.02.11 (二) 19:30 ~ 21:00 舉辦一場線上的免費 QA 活動。好奇在半導體產業的日常工作是什麼樣？想知道面試的題目和流程、職涯秘辛，還是職涯規劃？歡迎各位大大提早報名，並在報名表中填上想要討論的問題。</p><blockquote><p><a href="https://tw104.pse.is/6yayls">https://tw104.pse.is/6yayls</a></p></blockquote><p>三個失敗的決定</p><ol><li>在高速成長期選擇悠哉過生活。</li><li>太晚累積英文能力，還無法進入外商公司。</li><li>職涯初期沒到台北，錯過提早探索的機會。</li></ol><p>三個成功的決定</p><ol><li>參與各種社群與不同領域朋友們交流學習。</li><li>在十年前選擇轉換前端 Reactjs 這個賽道發展。</li><li>偏 I 人，但經營部落格 MAU 5000+ 算還可以。</li></ol><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTJmLNoFlFrYcXFAbghnh4EEOqgQdK4xREkMlRKQqYdD-m_bR3O15yAGOtWCpbX9Fctr_MrNU82fIv1/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="面試與履歷準備"><a href="#面試與履歷準備" class="headerlink" title="面試與履歷準備"></a>面試與履歷準備</h2><p>開的缺就是希望你長的跟前一位轉職員工越像越好，但實際上當然不可能，就跟談戀愛要遇到真命天子&#x2F;天女是一樣的道理，可遇不可求。</p><p>優化履歷前要先懂診斷履歷，履歷的好壞簡單說就是和 JD (Job Desription) 的符合程度，當履歷符合市場上的需求之後，接著就是<a href="https://linyencheng.github.io/2020/08/17/thinking-resume/">依照履歷的受眾來進行相關優化</a>。</p><p>履歷的曝光有時候是一個機緣，重要的還是平常的累積。就跟談戀愛一樣，在對的時間遇見對的人，也要你剛好準備好才行。可能組織改組中只是時機問題？或是學歷被HR卡關但老闆實際不在意？</p><p>依照年資來分，我會將準備分為三個階段：學生階段、新鮮人階段、高齡求職</p><h3 id="履歷準備"><a href="#履歷準備" class="headerlink" title="履歷準備"></a>履歷準備</h3><p>履歷如何吸引人資?如何讓履歷更亮眼?怎樣比較容易被主管撈到履歷?</p><p>要寫得像是職缺描述的複製品，雖然大多無法完全符合，但這是求職的一部分。</p><p>履歷曝光是機緣，所以平時積累很重要，我建議每半年都可以更新一次流水帳式很細節的履歷，投遞前再修改即可，考績都可以是作文比賽，履歷何嘗不是。</p><p>在對的時間，遇見對的人，才能打動 HR 或老闆。</p><h3 id="面試準備"><a href="#面試準備" class="headerlink" title="面試準備"></a>面試準備</h3><p>面試技巧?面試流程?面試準備方向?軟體工程師面試時會看重哪方面?可以放什麼樣的專案才有加分?面試時如何提高成功率?</p><p>建議多參加面試，像是演戲需要不斷練習，才能流暢且自信。</p><p>我寫履歷其實普通還請人修改過，但我的 SEO 做得不錯，可以 Google 我的名字或 Reactjs 看看，有些軟體工程問題就會被跳過。</p><p>學生、新鮮人、資深等不同的階段我認為可以有不同的方式。</p><h3 id="學生階段求職"><a href="#學生階段求職" class="headerlink" title="學生階段求職"></a>學生階段求職</h3><p>想請問如果現在身分仍為學生，可以加強什麼部份以提高自身能力呢?</p><p>努力提升語言能力，積極參加實習，並與校友及學長姐建立良好的關係。許多職位可能來自於隨意的交流。</p><p>另外，參加 IT 幫幫忙鐵人賽，也是一個很好的選擇，我沒有很強的實際經驗可以說嘴，但是我針對網站開發寫了 90 篇以上的技術文章。</p><p>年紀跟學歷會在HR階段就被刷掉嗎?學歷與組別的重要性?學歷是不是比較重要呢🤔軟體工程師會很注重學歷嗎?</p><p>大缺人的時候，念藝術相關類別的可能也可以進來 IT 部門做 UIUX，而且升資深的職等也不會看有沒有研究所學歷。</p><p>不管科目是否相關，有機會可以拿一個頂大理工碩士 (專班也沒有關係)，畢竟是用學歷來給職等跟簽約獎金的公司。</p><p>軟體公司正常不太看學歷，但工廠在還無法評估你的能力前，比起實務經驗會更重視學歷一點。</p><p>非相關背景的人需要準備哪些東西?除了刷題，還需準備什麼？</p><p>我大學讀的是工程科學系，與現在的前端工程師的工作並不相關。</p><p>因此，在學習時，程式語言本身並不是最重要的，真正關鍵的是理解核心概念以及能解決問題的能力。</p><ul><li>閱讀而不只是只識字</li><li>搜尋而不只是被推播 </li><li>寫作而不只是只輸入</li><li>實作而不只是只空想</li></ul><p>面試考題難度是否有進行調整?需要準備 leetcode 嗎?</p><p>現在的軟體工程師職場競爭激烈，刷題變得相當重要。</p><p>如果老闆希望雇用你，可能會要求你通過面試 leetcode 題目。</p><p>面試難度取決老闆是否迫切需要你。</p><h3 id="新鮮人階段求職"><a href="#新鮮人階段求職" class="headerlink" title="新鮮人階段求職"></a>新鮮人階段求職</h3><p>請問目前AI或ML的工程師會有新鮮人的機會嗎？如果有的話除了刷題外還建議如何準備履歷及面試呢？</p><p>若經驗不足，可以依賴學歷。</p><p>大公司篩選時學歷比較容易成為篩選條件，畢竟人資未必能完全理解你的 GitHub。</p><p>再來就是可以參加 IT 幫幫忙鐵人賽，我寫了好幾屆了，也可以多參與社群跟研討會，報名當志工會是非常不錯的體驗。</p><p>非相關產業背景的有機會嗎?非相關背景的人自學轉職軟體工程師?30 +非本科求職者面試有需要注意哪些細節?非相關背景面試前需要精進或準備哪些東西?</p><p>跨領域轉職的難度比以往大。</p><p>轉職者可能需要先在小公司積累經驗，建立作品集。</p><p>舉例來說，我之前的部門同事，有幾位來自北一女和頂大的同學，前公司給我負責帶的也是非相關科系，但也是建中然後台大畢業。</p><p>你必須思考自己與他們相比的競爭力在哪裡。</p><h3 id="高齡求職"><a href="#高齡求職" class="headerlink" title="高齡求職"></a>高齡求職</h3><p>有 3 年以上軟體工作經歷但非相關學歷背景，年齡較大會在一開始投履歷的時候就被刷掉嗎?</p><p>這時候，需要展現出更豐富的經驗和影響力，而不僅僅是做 CRUD。</p><p>擁有工作經驗的人學起來比較快，但若經驗不足，優勢就不明顯。</p><p>基層老闆大多在 35-40 歲之間，在找下屬時，大多會偏向年資較少的人。</p><p>如果年齡較大，可以透過內推更快找到工作。</p><p>是否有年齡限制？年齡要多少以下?</p><p>在工程師的職涯發展中，會遇到年齡的天花板。雖然業界普遍宣稱沒有年齡歧視，但每家公司內的員工年齡結構仍會有一定的區間。</p><p>最重要的能力是能持續學習新事物。就像水族館裡的海豹，雖然身處安全的環境，但也不能忘記在野外如何覓食。</p><p>有能力的資深員工通常會轉至外商，因為外商普遍較不依年齡或性別篩選人才，履歷上也相對不建議標註相關資訊。</p><p>軟體工程師的年資與能力未必正相關，畢竟很難找到一位有 20 年 iOS 經驗的工程師，但資料庫管理師卻可以找到。所以，選擇合適的職涯道路非常重要。</p><p>舉例來說，能設計出 QPS 破萬的架構，這些技術與工具的選擇並不重要，真正關鍵的是能在有限的資源內學習，並找到解決方案。</p><h3 id="提升曝光度"><a href="#提升曝光度" class="headerlink" title="提升曝光度?"></a>提升曝光度?</h3><p>怎樣比較容易被主管撈到履歷?要被撈到需要磨練哪方面的技能呢?</p><p>另一種方式是讓老闆直接找到你，這樣人資會主動協助安排面試。</p><p>透過作品集或個人品牌，增加讓別人了解你的管道，也可以好好經營 104 的個人品牌頁面。</p><p>我能有今天的分享機會，也是因為我的資料被人搜尋到。</p><h2 id="公司與職場文化"><a href="#公司與職場文化" class="headerlink" title="公司與職場文化"></a>公司與職場文化</h2><p>內部文化或風氣，可以參考<a href="https://linyencheng.github.io/2025/06/01/monkeys-on-the-mountain/from-starting-to-giving-up-from-doing-to-talking/">山上猴子的故事</a>系列文章？</p><h3 id="公司文化"><a href="#公司文化" class="headerlink" title="公司文化"></a>公司文化</h3><p>公司文化會影響到工作的環境，尤其是關於透明度、價值觀以及組織的合作模式。</p><p>實際上還是製造為主的工廠，軟體是協助研發製造的一種工具。</p><h3 id="職場文化"><a href="#職場文化" class="headerlink" title="職場文化"></a>職場文化</h3><p>內部 “文化” 或 “風氣”?</p><p>職場文化的差異可能會影響到你在工作的態度，與同事的協作及對公司的忠誠。</p><p>簡而言之會是信任度的培養，在低度信任的情況下就是互相 HL 對方。</p><p>有歷史的老公司，分成老一代跟新生代兩類人，早期不被鼓勵找有工作經驗的新進同仁，絕大部分都是從畢業開始一路待，少數是離開後回鍋的。</p><h3 id="互動情境"><a href="#互動情境" class="headerlink" title="互動情境"></a>互動情境</h3><p>公司人數龐大，因此不同部門的互動情況差異很大。但以內部生態來說，食物鏈的層級，直接會影響你工作的心情。</p><h3 id="Mentor-制度"><a href="#Mentor-制度" class="headerlink" title="Mentor 制度"></a>Mentor 制度</h3><p>公司內部的 Mentor 制度能幫助新員工更快地融入環境，並且在工作中得到更多的指導與支持。</p><p>每位新人進入公司時，會分配一位 Buddy 或 Mentor，取決於你是否適應工作環境。</p><p>公司比較大，需要注意的事項很多，如果直接讓新人獨立工作，可能很快就會離職。</p><h3 id="心態與挑戰"><a href="#心態與挑戰" class="headerlink" title="心態與挑戰"></a>心態與挑戰</h3><p>有人的地方有政治，有政治的地方就有內耗，更何況是上千人的單位。這是一個難以避免的現象。尤其在員工數量眾多的情況下，溝通就變得尤為重要。花最多時間會是溝通。</p><blockquote><p>樹大必有枯枝，人多呢則不好說，前輩留下滿滿的愛心總是會讓你有機會成長。</p></blockquote><h3 id="最有挑戰性的問題"><a href="#最有挑戰性的問題" class="headerlink" title="最有挑戰性的問題?"></a>最有挑戰性的問題?</h3><p>遇過最大的挑戰?如何面對及處理?</p><p>在半導體產業，挑戰性的問題包括如何提高製程精度、減少缺陷率、提升生產效率等。這些問題通常需要跨領域的合作與創新思維，並且不斷學習最新的技術來解決。</p><p>在跨國工廠中，最具挑戰性的部分是能夠體驗全球化的運作模式。會遇到各種不同的架構與問題，需要處理不少預料之外的困難。</p><h3 id="工廠需要的人才類型"><a href="#工廠需要的人才類型" class="headerlink" title="工廠需要的人才類型?"></a>工廠需要的人才類型?</h3><p>加入貴公司需要具備什麼技術?需要什麼背景、技能?讀財務及軟體有地方讓我發揮嗎?文組還能夠擔任什麼職務?適合什麼樣”人格特質”的人進去?</p><p>工廠通常需要具備專業技能且能夠適應工廠環境且服從的員工，金字塔遠看高大上，實際上是搬磚的累積。</p><p>要有能力解決老闆燃眉之急的問題，可能是新專案或是舊專案改寫。</p><p>大多是原來內部人員短時間無法快速做好的，簡單做又有 credit 怎麼會輪到你？💕</p><p>背景要看是人脈的背景或能力的背景?</p><h3 id="英文重要嗎"><a href="#英文重要嗎" class="headerlink" title="英文重要嗎"></a>英文重要嗎</h3><p>Does TSMC accept foreign student that graduated here in Taiwan?</p><p>現在同事蠻多外國人的，也非常需要懂英文、日文的人才。有些部門會需要應對外國人，英文沒有很好沒關係但至少打字或簡單聊天還是需要的。</p><h3 id="需要值班嗎"><a href="#需要值班嗎" class="headerlink" title="需要值班嗎?"></a>需要值班嗎?</h3><p>工廠是以製造為主，需要大量工人來確保機械的穩定運作。在這樣的環境下，你必須能夠配合產線的作息，隨時準備好進行工作。即使是出去玩，也有可能需要帶上電腦，隨時與同事進行協調。</p><h2 id="工作上會使用哪些技術和工具？"><a href="#工作上會使用哪些技術和工具？" class="headerlink" title="工作上會使用哪些技術和工具？"></a>工作上會使用哪些技術和工具？</h2><p>在工廠進行 AI 應用與數位轉型的過程中，軟體工程師依照工作本質的分類，會依照不同處的需求所以會有不同的工具選型，因為這樣所以需要的技能也都不太一樣，依照權責也分成中央的 IT 還有各部門的 IT。</p><p>在工廠的軟體工程師，依照工作的職能用到的程式語言從 c++ vb JavaScript Java kotlin dart 都有，主要是幫各部門處理任何你能想像出來的需求。</p><p>畢竟是屬於 support 的成本單位，不同單位不同製程都有不同的 work flow 需要客製跟權限卡控，詳細資訊可以參考底下網站。</p><blockquote><p>康威定律，組織越多需要特製的系統就越多</p></blockquote><p>主要是幫各部門處理雜事？畢竟是屬於 support 的成本單位，不同單位不同製程都有不同的 work flow 需要客製跟權限卡控，詳細資訊可以參考底下網站。</p><blockquote><p>靠新手訓練營統一專業技能，台積電將雲端原生技術變成 IT 必備基礎<br><a href="https://www.ithome.com.tw/news/149127">https://www.ithome.com.tw/news/149127</a></p></blockquote><h3 id="對外部"><a href="#對外部" class="headerlink" title="對外部"></a>對外部</h3><p>對外部需求的處理通常要精通前端、後端等技術，熟悉主流開發框架。</p><p>使用的包括：Node.js、React、Java、Python、Docker、Kubernetes 等。</p><h3 id="對產線"><a href="#對產線" class="headerlink" title="對產線"></a>對產線</h3><p>對產線相關工作，主要會專注在產線相關的資料處理，主要是撰寫後端去和產線上原有的 SiView 系統進行互動。</p><p>此外要更熟悉如傳統的 VB、SQL 操作，以及甲骨文或是 DB2 等各種類型的資料庫，用於監控與資料分析，蠻重視對於資料的操作正確性。</p><h3 id="AI-應用"><a href="#AI-應用" class="headerlink" title="AI 應用"></a>AI 應用</h3><p>內部預算緊縮如何說服長官提供資源？有部署內部的LLM嗎？是否有開發RAG、Agent應用？網管資安政策限制下怎麼獲取數據？</p><p>AI 正在各行各業廣泛應用，尤其在自動化、預測分析等發揮巨大作用。</p><p>工程師可能會參與：<br>－運用計算機視覺做量測自動化<br>－機器學習生成實驗參數<br>－聊天機器人回答常見問題</p><h3 id="內部相關基礎建設-DevOps"><a href="#內部相關基礎建設-DevOps" class="headerlink" title="內部相關基礎建設 (DevOps)"></a>內部相關基礎建設 (DevOps)</h3><p>對於內部基礎建設，DevOps 是當前企業 IT 運營的關鍵。</p><p>DevOps 實踐涉及持續集成、持續部署、自動化測試等，並通過使用 CI&#x2F;CD 工具、版本控制工具等，提升整體開發運營效率。</p><p>也是有只負責辦公室工具軟體的部門，就是大家想像中的 MIS。</p><h2 id="半導體產業工程師職涯"><a href="#半導體產業工程師職涯" class="headerlink" title="半導體產業工程師職涯"></a>半導體產業工程師職涯</h2><h3 id="轉職或是內部輪調"><a href="#轉職或是內部輪調" class="headerlink" title="轉職或是內部輪調?"></a>轉職或是內部輪調?</h3><p>對於工程師來說，轉職與內部輪調是常見的選擇。</p><p>轉職讓工程師拓展技術領域，而內部輪調可幫助擴大對公司運營的了解，進一步提升職涯發展的深度與廣度。</p><p>部門調動要維持穩定的考績，表現穩定者更具轉換優勢。</p><h3 id="外派的機會"><a href="#外派的機會" class="headerlink" title="外派的機會"></a>外派的機會</h3><p>想了解外派機會?有機會去日本或美國嗎?</p><p>外派機會通常對於有特殊技能或高經驗的工程師開放。</p><p>如果能夠自願外派，更是加分，畢竟，拯救台灣、賺取外匯的重任，將由各位大大來承擔。</p><p>川普即將翻開小孩無效卡?!</p><h3 id="可以遠端工作嗎"><a href="#可以遠端工作嗎" class="headerlink" title="可以遠端工作嗎?"></a>可以遠端工作嗎?</h3><p>疫情期間，處理的業務機密等級不高的時候可以遠端工作。</p><p>在工廠工作時，原則上遠端工作不太可能，除非有特殊需求，例如陪產或需要照顧生病的家人等情況。</p><p>自願天天值班就可以天天在家工作。</p><h3 id="新專案多還是維護舊專案多呢"><a href="#新專案多還是維護舊專案多呢" class="headerlink" title="新專案多還是維護舊專案多呢?"></a>新專案多還是維護舊專案多呢?</h3><p>如果你在一家有歷史的工廠工作，專案的時間跨度可能會非常長。</p><p>有些系統可能非常陳舊，但也有些架構被新進員工認為過於前衛，在這樣的公司上班你需要學會和危樓共存，也需要學習建立摩天大樓。</p><blockquote><p>康威定律: 隨著組織的發展，舊的專案不僅不能拋棄還會推陳出新許多新的專案</p></blockquote><h2 id="工作上的體驗"><a href="#工作上的體驗" class="headerlink" title="工作上的體驗"></a>工作上的體驗</h2><h3 id="學習資源多嗎-是否有補助呢"><a href="#學習資源多嗎-是否有補助呢" class="headerlink" title="學習資源多嗎? 是否有補助呢?"></a>學習資源多嗎? 是否有補助呢?</h3><p>請問工作後能夠繼續深造?學習新技能嗎?</p><p>學習資源豐富與否取決於公司政策與部門文化。大部分公司會提供一些內部或外部的學習資源，並可能會提供補助或津貼以鼓勵員工進行自我提升。</p><p>大公司的學習資源通常相對較多，前提是你有足夠的時間來充分利用這些資源，公司額外提供達到考績標準的同仁申請在職進修補助。</p><h3 id="辦公室氣氛"><a href="#辦公室氣氛" class="headerlink" title="辦公室氣氛"></a>辦公室氣氛</h3><p>工作氣氛,是否高壓或有霸凌現象?待過的部門氣氛如何?和同事與主管相處的氛圍如何?</p><p>辦公室的氣氛通常取決於公司的文化與團隊氛圍。良好的氣氛有助於員工的工作積極性和創造力，也能促進團隊的合作與溝通。</p><p>台北辦公室的環境據說與外商公司相似，雖然我自己沒有親身經歷過，但近期公司確實有舉辦一些講座，歡迎大家報名參加。</p><h3 id="工程師的一天會是怎麼樣子"><a href="#工程師的一天會是怎麼樣子" class="headerlink" title="工程師的一天會是怎麼樣子?"></a>工程師的一天會是怎麼樣子?</h3><p>在大公司的日常工作流程中，會議是不可或缺的一部分，尤其是在團隊人數較多的情況下，會議常常成為同步訊息的主要方式。</p><p>近年來，公司也開始聘請敏捷教練或 Scrum Master 來輔導團隊，提升工作效率與協作模式。開發流程會依照看板、Scrum 或是 Deadline Driven 的 DDD，會議是同步訊息的主要方式。</p><p>在工廠工作的工程師日常：</p><ol><li>常常會被使用系統的單位 HL</li><li>影響產線的時候需要馬上解決</li><li>被質疑系統有問題造成 MO</li><li>被抱怨系統難以操作和使用</li></ol><h3 id="怎麼適應高壓的工作"><a href="#怎麼適應高壓的工作" class="headerlink" title="怎麼適應高壓的工作?"></a>怎麼適應高壓的工作?</h3><p>在於高壓環境，如何熟悉工作內容?屬於高壓的工作環境嗎?</p><p>高壓的工作需要良好的時間管理與壓力管理能力。學會設置優先級，合理分配工作，並且及時調整自己的心態，這樣能夠在壓力下保持高效的工作狀態。</p><p>大家可能會好奇，在高壓的工作環境下，如何快速熟悉工作內容？有時候可能需要賣萌、加班，或是調高自己的羞恥心來適應這種工作節奏。</p><h3 id="AI-的幫助"><a href="#AI-的幫助" class="headerlink" title="AI 的幫助?"></a>AI 的幫助?</h3><p>AI 對於產業未來的影響是什麼?AI 應用上是否有重要計畫?AI 時代下，對軟體工程師的建議?是否有 AI 相關的職缺?裡面可以使用 AI 工具嗎?</p><p>AI 技術在許多領域提供了極大的幫助，從自動化作業到數據分析，AI 不僅能提高工作效率，還能提供更多創新的解決方案，減少人工錯誤。</p><p>目前來看，公司希望在不影響廠房運作的前提下，盡量避免過多的干預。有些系統仍然維持在比較傳統的架構下，整合與翻新並不容易。但還是會有一些創新的應用像是把將一些資料透過 AR&#x2F;VR 視覺化，幫助技術與操作的理解和模擬。</p><h3 id="台商與外商的選擇"><a href="#台商與外商的選擇" class="headerlink" title="台商與外商的選擇?"></a>台商與外商的選擇?</h3><p>那麼在半導體產業和外商公司之間該如何選擇呢？如果有選擇的機會，當然是選擇外商，這點其實不需要猶豫。</p><h3 id="是否需要加班呢"><a href="#是否需要加班呢" class="headerlink" title="是否需要加班呢?"></a>是否需要加班呢?</h3><p>加班的情況取決於專案的需求與工作進度。若專案較為緊迫，可能需要加班完成任務。</p><p>許多公司也有彈性工時政策，讓員工在不影響工作進度的情況下更好地平衡工作與生活。</p><p>至於工作中是否經常需要加班？加班的頻率基本上是個人選擇，取決於你的工作態度與需求，個人是蠻支持新一代（00後）來整頓職場環境的。</p><!-- 半導體產業的工程師分類與各自負責的項目大致為何？無半導體相關知識可以進入嗎？台積電IT維護舊系統多還是開發新專案多呢？原先非相關產業背景的有機會進入台積電做工程師嗎？C# 工程師有機會進入台積電嗎？化工系同學有辦法加入tsmc 嗎？半導體產業的相關職務？需要的相關技術？台積電和其他半導體產業最大的區別是什麼？AI對於產業未來的影響是什麼？想請問如何面試上設備工程師是否有管理培訓計劃給有經驗的候選人？輝達的新電腦有研究嗎？台積電適合做到退休嗎？台積電海外廠（如：德國廠、熊本廠）人員招攬條件與資格？研發替代役的簽約金要在特殊的時間點面試才有，以前如果是簽約金，會依照學校的世界排名還有你的面試當下地點 --><h3 id="需要值班嗎-1"><a href="#需要值班嗎-1" class="headerlink" title="需要值班嗎?"></a>需要值班嗎?</h3><p>是不是每個職位都需要輪班與值班嗎？</p><p>有些工作需要定期值班或輪班，這取決於公司的運作模式與需求。</p><p>工廠是以製造為主，需要大量工人來確保機械的穩定運作。</p><p>在這樣的環境，必須能夠配合產線的作息，隨時準備好進行工作。</p><p>即使是出去玩，也有可能需要帶上電腦，隨時與同事進行協調。</p><h3 id="升遷考核"><a href="#升遷考核" class="headerlink" title="升遷考核"></a>升遷考核</h3><p>升遷問題?升遷制度為何?內部的升遷及考核制度?</p><p>升遷考核主要依賴個人的表現、貢獻以及是否能夠處理更高層次的工作與挑戰。</p><p>目前公司每年會進行一次考核，根據職等有所不同。</p><p>缺乏升遷機會的人，進修 PHD 或是藉由跳槽後再回鍋，可能成為更快的晉升途徑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;小編受到 104 的邀請，即將在年後 2025.02.11 (二) 19:30 ~ 21:00 舉辦一場線上的免費 QA 活動。好奇在半導體產業的日常工作是什麼樣？想知道面試的題目和流程、職涯秘辛，還是職涯規劃？歡迎各位大大提早報名，並在報名表中填上想要討論的問題。&lt;/p&gt;</summary>
      
    
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/categories/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    
    <category term="職涯發展" scheme="https://linyencheng.github.io/tags/%E8%81%B7%E6%B6%AF%E7%99%BC%E5%B1%95/"/>
    
    <category term="個人成長" scheme="https://linyencheng.github.io/tags/%E5%80%8B%E4%BA%BA%E6%88%90%E9%95%B7/"/>
    
    <category term="軟體工程" scheme="https://linyencheng.github.io/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>React 19 集氣兩年華麗登場</title>
    <link href="https://linyencheng.github.io/2024/12/14/react/react-v19-introduction/"/>
    <id>https://linyencheng.github.io/2024/12/14/react/react-v19-introduction/</id>
    <published>2024-12-14T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.451Z</updated>
    
    <content type="html"><![CDATA[<p>餓死抬頭，React 19 究竟是繼 v18 睽違兩年華麗登場?! 還是十年走來始終如一?! 相對於 Angular 每次升級每次 Breaking Change，這次的 React 19 更新看起來不僅不想拖過年，也把 Nextjs Canary 許久的 Server Component 穩定版進行釋出。</p><p>一如既往的可以無痛升級，這次升級雖然也有一些必要改變，但也提早在 v18 的小版本釋出中提出警告，基於 v18 穩定和表現基礎上實現了多項重大功能提升和優化，接近兩年的蟄伏究竟帶來了什麼改變?!</p><p>React 19 不僅僅是版本更新，而是對開發者體驗和應用性能的全方位升級。React 19 引入了全新的 API 和 Hooks，改善了 React 內部多個機制，讓開發者能夠更高效地構建現代 Web 應用。</p><p>接下來一起來從實際開發者體驗的角度，介紹 React 19 中幾個關鍵新特性，並解釋它們如何簡化開發流程和提升應用效能。</p><h2 id="React-19-Server-Component"><a href="#React-19-Server-Component" class="headerlink" title="React 19 Server Component"></a>React 19 Server Component</h2><p>目前看起來雖然穩定，但絕大多數工具跟框架都尚未完全整合和支援，小編認為這一版可以看成 Server Component 提前準備，像是</p><ul><li>Actions 提供了 Client 跟 Server 都支援的寫法</li><li>內建支援使用 Meta Data</li><li>完整支援 web component</li></ul><h2 id="React-19-Actions"><a href="#React-19-Actions" class="headerlink" title="React 19 Actions"></a>React 19 Actions</h2><p>React 19 介紹了 Actions 的概念，取代了使用事件處理器，並與 React transitions 和 concurrent features 整合。</p><p>Actions 可以在客戶端和伺服器端使用，例如可以使用 Client Action 來替代之前的 onSubmit 事件處理器來處理表單，使用 Action 時不需要解析事件，Action 會直接接收 FormData。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TodoApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [items, setItems] = <span class="title function_">useState</span>([&#123; <span class="attr">text</span>: <span class="string">&quot;我的第一個待辦事項&quot;</span> &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">formAction</span>(<span class="params">formData</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newItem = formData.<span class="title function_">get</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line">    <span class="comment">// 可以向伺服器發送 POST 請求來儲存新項目</span></span><br><span class="line">    <span class="title function_">setItems</span>(<span class="function">(<span class="params">items</span>) =&gt;</span> [...items, &#123; <span class="attr">text</span>: newItem &#125;]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>待辦清單<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;formAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;新增待辦...&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;items.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useActionState：非同步狀態管理"><a href="#useActionState：非同步狀態管理" class="headerlink" title="useActionState：非同步狀態管理"></a>useActionState：非同步狀態管理</h3><p>React 19 中加入了 useActionState Hook 簡化程式碼，專門用來簡化非同步資料處理和狀態管理，開發者不再需要手動追蹤請求狀態、錯誤信息或更新順序，Actions 提供自動管理的待處理狀態，當請求開始時 <code>isPending </code> 會設置為 true，並在最終更新後自動重置。</p><p>例如當用戶提交表單時，React 19 可以自動管理 API 請求的等待狀態和錯誤處理，這使得開發者能更專注於業務邏輯，而不必關心繁瑣的狀態管理細節。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Actions 的待處理狀態</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UpdateName</span>(<span class="params">&#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [isPending, startTransition] = <span class="title function_">useTransition</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">startTransition</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> error = <span class="keyword">await</span> <span class="title function_">updateName</span>(name);</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="title function_">setError</span>(error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">redirect</span>(<span class="string">&quot;/path&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(event)</span> =&gt;</span> setName(event.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSubmit&#125;</span> <span class="attr">disabled</span>=<span class="string">&#123;isPending&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        更新</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;error &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;error&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 &lt;form&gt; Actions 和 useActionState</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChangeName</span>(<span class="params">&#123; name, setName &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [error, submitAction, isPending] = <span class="title function_">useActionState</span>(</span><br><span class="line">    <span class="title function_">async</span> (previousState, formData) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> error = <span class="keyword">await</span> <span class="title function_">updateName</span>(formData.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">redirect</span>(<span class="string">&quot;/path&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">null</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;submitAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;isPending&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        更新</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;error &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;error&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useOptimistic：提升用戶體驗"><a href="#useOptimistic：提升用戶體驗" class="headerlink" title="useOptimistic：提升用戶體驗"></a>useOptimistic：提升用戶體驗</h3><p>React 19 引入了 useOptimistic Hook，通過實現樂觀更新來提升應用的響應速度。用戶送出請求後，應用會立刻顯示預期結果，並在後端回應後進行最終更新而減少等待時間。</p><ul><li>如果成功，會直接用新的 state 覆蓋預期結果</li><li>如果失敗，會直接取消 UI 的更新</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChangeName</span>(<span class="params">&#123; currentName, onUpdateName &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [optimisticName, setOptimisticName] = <span class="title function_">useOptimistic</span>(currentName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">submitAction</span> = <span class="keyword">async</span> (<span class="params">formData</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newName = formData.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="title function_">setOptimisticName</span>(newName);</span><br><span class="line">    <span class="keyword">const</span> updatedName = <span class="keyword">await</span> <span class="title function_">updateName</span>(newName);</span><br><span class="line">    <span class="title function_">onUpdateName</span>(updatedName);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;submitAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your name is: &#123;optimisticName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Change Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">disabled</span>=<span class="string">&#123;currentName</span> !== <span class="string">optimisticName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="use-API：輕鬆讀取資源"><a href="#use-API：輕鬆讀取資源" class="headerlink" title="use API：輕鬆讀取資源"></a>use API：輕鬆讀取資源</h3><p>React 19 引入的 use API 讓開發者能夠在渲染過程中直接讀取非同步資源（如 Promise 或 Context），並且由 React 自動處理懸掛（suspense）機制，直到資源準備好為止，這樣就可以簡化資料的處理流程，不必手動管理載入狀態。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; use &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Comments</span>(<span class="params">&#123; commentsPromise &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// `use` 會在 promise 解決之前進行 suspend</span></span><br><span class="line">  <span class="keyword">const</span> comments = <span class="title function_">use</span>(commentsPromise);</span><br><span class="line">  <span class="keyword">return</span> comments.<span class="title function_">map</span>(<span class="function">(<span class="params">comment</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;comment.id&#125;</span>&gt;</span>&#123;comment&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; commentsPromise &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 當 `use` 在 Comments 中 suspend 時，</span></span><br><span class="line">  <span class="comment">// 這個 Suspense 邊界會顯示</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Comments</span> <span class="attr">commentsPromise</span>=<span class="string">&#123;commentsPromise&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="簡化-ref-使用"><a href="#簡化-ref-使用" class="headerlink" title="簡化 ref 使用"></a>簡化 ref 使用</h2><p>React 19 改善了對 ref 的使用，支援將 ref 作為 props 傳遞給函式元件，並增加了對 ref 清理函式的支援。這使得管理元件的 ref 更加簡單且直觀，不再需要使用 forwardRef。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyInput</span>(<span class="params">&#123; placeholder, ref &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">placeholder</span>=<span class="string">&#123;placeholder&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;(ref)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        // ref 被創建</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        // 新增：返回一個清理函式，當元素從 DOM 中移除時重置 ref</span></span><br><span class="line"><span class="language-xml">        return () =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          // ref 清理邏輯</span></span><br><span class="line"><span class="language-xml">        &#125;;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用時：</span></span><br><span class="line">&lt;<span class="title class_">MyInput</span> ref=&#123;ref&#125; /&gt;;</span><br></pre></td></tr></table></figure><h2 id="useDeferredValue：延遲更新優化性能"><a href="#useDeferredValue：延遲更新優化性能" class="headerlink" title="useDeferredValue：延遲更新優化性能"></a>useDeferredValue：延遲更新優化性能</h2><p>React 19 引入了 useDeferredValue，它允許在初始渲染時使用預設值，並將數據更新推遲至背景中進行，這樣就能有效減少數據變更對渲染性能的影響。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Search</span>(<span class="params">&#123; deferredValue &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 初次渲染時，value 是空字串 (&#x27;&#x27;)。</span></span><br><span class="line">  <span class="comment">// 隨後會安排在背景中使用 deferredValue 重新渲染。</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useDeferredValue</span>(deferredValue, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Results</span> <span class="attr">query</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-19-提升樣式和資源載入效能"><a href="#React-19-提升樣式和資源載入效能" class="headerlink" title="React 19 提升樣式和資源載入效能"></a>React 19 提升樣式和資源載入效能</h2><p>React 19 針對樣式表和資源載入進行了優化，支援在客戶端渲染和伺服器端渲染中更好地整合和載入資源，從而提升應用的載入速度和流暢度。</p><p>開發者可以更加靈活地控制樣式表的載入順序，保證依賴樣式表的內容在樣式表載入後才會渲染，避免因樣式表未載入完全而導致的渲染問題。</p><h2 id="內建支援使用-Meta-Data"><a href="#內建支援使用-Meta-Data" class="headerlink" title="內建支援使用 Meta Data"></a>內建支援使用 Meta Data</h2><p>在 React 19 中 對 Meta Data 提供了原生支援，實現了在元件中渲染文檔標籤（如 <code>&lt;title&gt;</code>、<code>&lt;link&gt;</code> 和 <code>&lt;meta&gt;</code>），並將它們自動提升到文檔的 <code>&lt;head&gt;</code> 區域。</p><p>這確保了這些元資料標籤在客戶端應用、流式 SSR 和伺服器端元件中的正常運作，從而提升了性能，雖然 React 提供了內建支援，對於更複雜的場景，您仍然可以選擇使用第三方庫來處理元資料，例如 react-helmet，它可以根據當前路由動態更新元資料。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">BlogPost</span>(<span class="params">&#123; post &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Josh&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;author&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://twitter.com/joshcstory/&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&#123;post.keywords&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Eee equals em-see-squared...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="優化樣式表載入"><a href="#優化樣式表載入" class="headerlink" title="優化樣式表載入"></a>優化樣式表載入</h2><p>React 19 引入了樣式表的內建支援，進一步提升了客戶端和伺服器端渲染的性能。</p><p>在渲染包含樣式表的元件時，React 會根據設置的優先順序自動管理樣式表在 DOM 中的插入順序，確保樣式表先於內容渲染。</p><ul><li>伺服器端渲染：React 會確保樣式表在流式渲染過程中提前載入，避免阻塞頁面渲染。</li><li>客戶端渲染：React 確保樣式表載入完成後再進行渲染，並且多次渲染同一元件時，樣式表只會被載入一次。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&quot;loading...&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;high&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">className</span>=<span class="string">&quot;foo-class bar-class&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;...&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;...&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;baz&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;default&quot;</span> /&gt;</span>  &#123;/* 將會被插入在 foo 和 bar 之間 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentOne</span> /&gt;</span> &#123;/* 不會在 DOM 中導致樣式表鏈接重複 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="支援非同步腳本"><a href="#支援非同步腳本" class="headerlink" title="支援非同步腳本"></a>支援非同步腳本</h2><p>React 19 在非同步腳本的載入管理上提供了更高效的支援。無論腳本位於元件樹的何處，React 都能確保非同步腳本只會載入一次，從而提升性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>=<span class="string">&#123;true&#125;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      Hello World</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        ...</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span> &#123;/* 不會導致 DOM 中的腳本重複 */&#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="資源預載入支援"><a href="#資源預載入支援" class="headerlink" title="資源預載入支援"></a>資源預載入支援</h2><p>React 19 引入了資源預載入 API，可以讓瀏覽器更早地載入必要的資源，顯著提高頁面性能。這些 API 能夠幫助優化頁面載入速度，並讓資源更快地準備好以應對用戶交互。</p><ul><li>預載入字體、樣式表等資源：可以在頁面載入之前提前載入字體和樣式表，從而減少頁面顯示的延遲。</li><li>預先載入導航所需資源：當用戶進行點擊或懸停操作時，預載入未來導航可能需要的資源，加速頁面更新。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; prefetchDNS, preconnect, preload, preinit &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">preinit</span>(<span class="string">&quot;https://.../path/to/some/script.js&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;script&quot;</span> &#125;); <span class="comment">// 預先載入並執行此腳本</span></span><br><span class="line">  <span class="title function_">preload</span>(<span class="string">&quot;https://.../path/to/font.woff&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;font&quot;</span> &#125;); <span class="comment">// 預載入此字體</span></span><br><span class="line">  <span class="title function_">preload</span>(<span class="string">&quot;https://.../path/to/stylesheet.css&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;style&quot;</span> &#125;); <span class="comment">// 預載入此樣式表</span></span><br><span class="line">  <span class="title function_">prefetchDNS</span>(<span class="string">&quot;https://...&quot;</span>); <span class="comment">// 當你可能不會從此主機請求任何內容時使用</span></span><br><span class="line">  <span class="title function_">preconnect</span>(<span class="string">&quot;https://...&quot;</span>); <span class="comment">// 當你將會請求某些東西，但不確定具體請求的資源時使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根據資源對早期載入的實用性優先排序，而非調用順序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch-dns&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://...&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://...&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://.../path/to/font.woff&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://.../path/to/stylesheet.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://.../path/to/some/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="React-19-完整支援-web-component"><a href="#React-19-完整支援-web-component" class="headerlink" title="React 19 完整支援 web component"></a>React 19 完整支援 web component</h2><p>React 19 完全支援 Web Components，並解決了以前版本中使用 Web Components 的一些相容性問題。現在，React 能夠正確處理傳遞給自訂元素的屬性，無論是在伺服器端渲染還是客戶端渲染中，都能夠精確區分和處理屬性與自訂元素的實際屬性，這使得 React 更加靈活和強大。</p><ul><li>伺服器端渲染（SSR）：當傳遞給自訂元素的 props 是基礎類型（例如字串、數字或值為 true）時，會作為屬性渲染。如果 props 是非基礎類型（例如物件、符號、函式或值為 false），則會被省略。</li><li>客戶端渲染（CSR）：當 props 與自訂元素實例的屬性相符時，將被作為屬性分配給該元素，否則會作為屬性分配。這樣的設計讓 React 更加靈活地支援自訂元素，解決了先前的相容性問題，無論是在伺服器端還是客戶端渲染中，處理方式都能有效區分屬性和自訂元素的實際屬性。</li></ul><p><a href="https://custom-elements-everywhere.com/">https://custom-elements-everywhere.com/</a></p><h2 id="React-19-華麗登場，你準備好了嗎"><a href="#React-19-華麗登場，你準備好了嗎" class="headerlink" title="React 19 華麗登場，你準備好了嗎"></a>React 19 華麗登場，你準備好了嗎</h2><p>React 19 引入的這些新特性不僅提升了開發者的工作效率，還大幅改善了應用的性能和用戶體驗。</p><p>從簡化非同步狀態管理的 useActionState 到提升響應速度的 useOptimistic，再到優化資源載入和對 Web Components 的支援，顯著提高了頁面的載入性能和流暢度。無論是伺服器端渲染還是客戶端渲染，這些改進都能幫助開發者構建更加高效的應用。</p><p>如果你是一名 React 開發者，這些新特性無疑會讓你的開發過程更加順利，並能構建出更高效、流暢的應用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;餓死抬頭，React 19 究竟是繼 v18 睽違兩年華麗登場?! 還是十年走來始終如一?! 相對於 Angular 每次升級每次 Breaking Change，這次的 React 19 更新看起來不僅不想拖過年，也把 Nextjs Canary 許久的 Server C</summary>
      
    
    
    
    <category term="React.js" scheme="https://linyencheng.github.io/categories/React-js/"/>
    
    
    <category term="JavaScript" scheme="https://linyencheng.github.io/tags/JavaScript/"/>
    
    <category term="網站技術" scheme="https://linyencheng.github.io/tags/%E7%B6%B2%E7%AB%99%E6%8A%80%E8%A1%93/"/>
    
    <category term="React.js" scheme="https://linyencheng.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>Windows 11 如何保留舊版應用程式與介面設定</title>
    <link href="https://linyencheng.github.io/2024/12/08/windows11/how-to-retain-old-app-versions-or-interface-settings-in-windows-11/"/>
    <id>https://linyencheng.github.io/2024/12/08/windows11/how-to-retain-old-app-versions-or-interface-settings-in-windows-11/</id>
    <published>2024-12-08T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.471Z</updated>
    
    <content type="html"><![CDATA[<p>當你升級到 Windows 11 時，許多使用者習慣的舊版應用程式與介面設定可能會被改變，帶來不小的衝擊。</p><p>例如，經典的 WordPad 即將在 Windows 11 中消失，熟悉的開始選單也因為全新的設計而大幅改變，從左下角移動到中間，這些改動可能會讓長期使用者感到不便。</p><p>對於依賴舊版介面和應用程式的使用者來說，如何保留原本的操作體驗，成為升級過程中一個重要的問題。</p><p>本文將探討如何在 Windows 11 中保留舊版應用程式與介面設定，讓你可以在新系統中繼續保持熟悉的操作流程。</p><h2 id="再見-WordPad"><a href="#再見-WordPad" class="headerlink" title="再見 WordPad"></a>再見 WordPad</h2><p>在畢業離開學校後，由於沒有校園授權版本的 Office 繼續使用，畢業加購的 Office 2010 年的光碟也顯得有些過時，每次重灌或升級系統時 WordPad 仍然是開啟特殊檔案格式的好幫手。</p><h3 id="WordPad-的歷史背景"><a href="#WordPad-的歷史背景" class="headerlink" title="WordPad 的歷史背景"></a>WordPad 的歷史背景</h3><p>WordPad 在 1995 年隨 Windows 95 正式推出，取代了 Windows 3.1 及更早版本的小作家，成為大家常用的文字編輯工具。</p><p>儘管隨著 Microsoft Office 的普及，WordPad 的使用率逐漸降低，但許多使用者仍然認為它是處理 RTF 文件的最佳選擇。</p><h3 id="WordPad-的退出與影響"><a href="#WordPad-的退出與影響" class="headerlink" title="WordPad 的退出與影響"></a>WordPad 的退出與影響</h3><p>最近，微軟在 Windows 11 的 24H2 更新中，做出了引人注目的改變，經典的 WordPad 即將被移除。</p><p>這個決定令許多老用戶感到惋惜，因為他們依賴這個簡單而實用的工具來完成日常的文字編輯。</p><p>微軟建議使用者可以轉向使用 Word 或記事本，這一變化引發了不少討論。</p><h3 id="如何備份-WordPad"><a href="#如何備份-WordPad" class="headerlink" title="如何備份 WordPad"></a>如何備份 WordPad</h3><p>儘管 WordPad 被移除，其執行檔仍然存在於系統中。</p><p>如果你希望保留這個經典工具，可以按照以下步驟進行備份：</p><ol><li>打開檔案總管。</li><li>前往 C:\Program Files\Windows NT\Accessories。</li><li>複製 WordPad 的執行檔，並將其備份到你希望的位置。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241011/20130026urDzF2NEgh.png" alt="https://ithelp.ithome.com.tw/upload/images/20241011/20130026urDzF2NEgh.png"></p><p>這樣，即使未來無法直接使用 WordPad，你仍可以隨時找到和使用它。</p><p>隨著科技的不斷進步，也許會逐漸告別一些經典的工具，然而，WordPad 在許多使用者心中的位置依然不可取代。</p><p>無論未來如何，希望大家都能找到適合自己的文字編輯解決方案。</p><h2 id="右鍵選單去哪裡了？變回你原來的樣子吧！"><a href="#右鍵選單去哪裡了？變回你原來的樣子吧！" class="headerlink" title="右鍵選單去哪裡了？變回你原來的樣子吧！"></a>右鍵選單去哪裡了？變回你原來的樣子吧！</h2><p>Windows 11 這次更新看起來是把 UI&#x2F;UX team 全部換掉了?! 更新後右鍵選單大變樣！你準備好了嗎？</p><p>隨著 Windows 11 的推出，許多長期使用 Windows 系統的用戶發現，原本熟悉的右鍵選單發生了顯著的變化，這不僅是視覺上的改變，更在使用習慣上帶來了一定的挑戰。</p><p>接下來將討論 Windows 11 右鍵選單的設計變動，使用者如何適應這些變化，並對未來的改進提出建議。</p><h3 id="設計理念的變化"><a href="#設計理念的變化" class="headerlink" title="設計理念的變化"></a>設計理念的變化</h3><p>Windows 11 的更新顯然在視覺設計上更為現代化，並且強調簡潔與美學。</p><p>然而，這種設計的推動卻讓一些長期使用者感到困惑，尤其是習慣了 Windows 10 或更早版本的右鍵選單。</p><p>雖然新介面整體看起來更具現代感，功能卻變得不那麼直觀，許多常用的選項變得隱藏，甚至需要額外操作才能找到。</p><p>整個設計變漂亮很多，但是我就問我習慣的右鍵選單要去哪裏找?</p><h3 id="右鍵選單的「簡化」與隱藏選項"><a href="#右鍵選單的「簡化」與隱藏選項" class="headerlink" title="右鍵選單的「簡化」與隱藏選項"></a>右鍵選單的「簡化」與隱藏選項</h3><p>在 Windows 11 中，右鍵選單的結構被簡化，將常見操作（如複製、貼上、新建資料夾等）集中在主選單中，而將其他不那麼常用的選項隱藏在「顯示其他選項」的次級選單中。</p><p>這樣的設計雖然提升了視覺清爽度，但對於習慣老版選單的用戶來說，卻帶來了不小的挑戰。</p><p>雖然 Windows 11 仍然提供了「顯示其他選項」的功能，讓用戶可以找到傳統的右鍵選單，但這樣的設計卻讓人感到不夠直觀。</p><p>對於不熟悉新界面的用戶來說，這可能會成為一個障礙，甚至影響到工作效率。</p><h3 id="使用者的適應過程"><a href="#使用者的適應過程" class="headerlink" title="使用者的適應過程"></a>使用者的適應過程</h3><p>習慣了舊版介面的用戶需要時間去適應這一變化。對於這些用戶來說，操作流程的改變可能會影響工作效率，尤其是右鍵選單中隱藏的一些進階功能。</p><p>Windows 11 提供了多種方法來顯示完整的選單，包括：</p><ul><li>「顯示其他選項」：點擊右鍵後，選擇「顯示其他選項」，以顯示傳統的右鍵選單。</li><li>按住 Shift 鍵 + 右鍵點擊：這樣可以顯示更多高級選項。</li><li>強制改回舊版的選單，網路上有許多教學是通過 CMD 修改註冊表強制恢復，但不建議使用。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20240928/20130026gXopprXQFO.png" alt="https://ithelp.ithome.com.tw/upload/images/20240928/20130026gXopprXQFO.png"></p><h3 id="微軟的妥協與未來的設計方向"><a href="#微軟的妥協與未來的設計方向" class="headerlink" title="微軟的妥協與未來的設計方向"></a>微軟的妥協與未來的設計方向</h3><p>微軟理解到這樣的變動對長期用戶可能帶來的不便，因此也提供了一些選項，讓用戶可以切換回舊版的右鍵選單。</p><p>這樣的設計反映了微軟對使用者需求的重視，然而這樣的「妥協」是否足夠，仍然值得探討。</p><p>若是微軟希望推廣新介面，應該更積極在界面中加入提示，讓用戶可以根據自己的需求選擇是否切換到新介面，這樣的做法能夠減少不必要的使用者困惑，並讓過渡期更為順暢。</p><h3 id="如何提升-Windows-11-右鍵選單體驗？"><a href="#如何提升-Windows-11-右鍵選單體驗？" class="headerlink" title="如何提升 Windows 11 右鍵選單體驗？"></a>如何提升 Windows 11 右鍵選單體驗？</h3><p>對於那些在日常工作中依賴右鍵選單進行多任務處理的用戶來說，如何快速適應 Windows 11 的更新至關重要。</p><ol><li>設置常用選項：使用者可以自定義 Windows 11 右鍵選單，將最常使用的功能放在更顯眼的位置，從而提升操作效率。這樣不僅能提高個人工作效率，也能減少多次點擊的時間浪費。</li><li>學習快捷鍵：Windows 11 提供了多種快捷鍵選項，能幫助用戶快速切換選單或執行操作。例如，「Shift + 右鍵」可以顯示完整選單，這樣的快捷操作將大大提升操作速度。</li><li>使用「顯示其他選項」的提示：為了幫助習慣舊版介面的用戶，微軟應考慮在新介面中添加更多的提示，告訴用戶如何調出完整選單。這不僅能提升使用者體驗，也能幫助新用戶更快上手。</li><li>保持界面一致性：儘管視覺上的更新是 Windows 11 的亮點之一，但保持操作的一致性對於老用戶來說更為重要。微軟應考慮提供一個平衡方案，既能保留新界面的美觀，又不會破壞用戶習慣。</li></ol><p>Windows 11 在提升美學和視覺效果的同時，也帶來了操作流程的變革。對於長期使用者來說，這樣的變化無疑帶來了不小的挑戰，尤其是右鍵選單的簡化。</p><p>然而，透過「顯示其他選項」等功能，微軟也給予了用戶一定的適應空間。在未來的更新中，微軟應該更加重視用戶的需求與回饋，在美學與實用性之間找到更好的平衡，從而進一步提升 Windows 11 的使用者體驗。</p><h2 id="Windows-11-開始選單跑到中間了"><a href="#Windows-11-開始選單跑到中間了" class="headerlink" title="Windows 11 開始選單跑到中間了"></a>Windows 11 開始選單跑到中間了</h2><p>不管是從哪個版本的 window 升級，一打開的驚喜就是，天啊，選單跑到中間了。</p><p>隨著 Windows 11 的推出，最引人注目的變化之一就是開始選單的位置從傳統的左下角移動到了畫面中央。</p><p>對於長期使用 Windows 的用戶來說，這樣的改動可能帶來了不少困惑與不便，特別是習慣了十多年舊版 Windows 介面的使用者。</p><h3 id="為什麼選擇將開始選單移到中間？"><a href="#為什麼選擇將開始選單移到中間？" class="headerlink" title="為什麼選擇將開始選單移到中間？"></a>為什麼選擇將開始選單移到中間？</h3><p>微軟的設計團隊將開始選單置中，似乎是為了追求更現代的外觀和統一的設計風格。這一變化與現代設備的多樣化螢幕比例及觸控操作的趨勢密切相關。</p><p>將選單置中能夠在不同尺寸的螢幕上提供一種更加對稱、視覺上平衡的效果，尤其是在觸控螢幕設備上使用時，將選單置中可能會帶來更加直觀的操作體驗。</p><p>然而，對於習慣了舊版 Windows 左下角開始選單的使用者來說，這樣的改動就成了一種顯著的心理衝擊。</p><h3 id="與舊版-Windows-比較：為何不習慣？"><a href="#與舊版-Windows-比較：為何不習慣？" class="headerlink" title="與舊版 Windows 比較：為何不習慣？"></a>與舊版 Windows 比較：為何不習慣？</h3><p>無論是 Windows 7 還是 Windows 10，用戶早已習慣將開始選單放置於螢幕左下角，這是許多年的使用習慣。</p><p>對於那些習慣了這種排列的用戶而言，每次尋找開始選單時都會不自覺地朝左下角移動，但 Windows 11 卻將它放置在了中間，這不僅是視覺上的調整，更是一種使用體驗上的顛覆。</p><p>當我們用習慣了十年的方式去操作，卻突然發現操作界面完全改變，這對許多人來說可能會產生困惑，特別是在工作環境中，每個不必要的變動都可能影響到工作效率。</p><p>尤其是對於年長用戶或那些習慣於固定工作方式的員工，這樣的變化可能會造成短期的效率下降。</p><p>對於一個超過上萬人的公司來說，尤其是年長的員工，這樣的突如其來的變化可能會造成工作效率的下降，甚至引發不必要的困惑。</p><p>這個部分不得不誇獎小編的公司，在小編的公司也強迫大家更新 Windows 11 時，竟然有先把預設的位置設定回熟悉的左下角，畢竟也是個超過上萬人的公司 (長輩也非常的多)，突如其來的使用者體驗改變其實真的會讓大家措手不及。</p><h3 id="Windows-11-vs-macOS：兩大操作系統的選單設計差異"><a href="#Windows-11-vs-macOS：兩大操作系統的選單設計差異" class="headerlink" title="Windows 11 vs macOS：兩大操作系統的選單設計差異"></a>Windows 11 vs macOS：兩大操作系統的選單設計差異</h3><p>如果我們再將目光投向蘋果的 macOS 系統，會發現其設計理念與 Windows 11 有些相似，也有顯著不同。macOS 一直以來都將應用程式的啟動器（Dock）放置在螢幕的底部，而其選單欄則是始終固定在螢幕的最上方。</p><p>這種固定式的選單設計與 Windows 11 的中央對齊相比，提供了不同的用戶體驗：macOS 注重的並非頻繁調整選單位置，而是始終如一的設置讓用戶能夠更快地適應。</p><p>此外，macOS 的觸控和視覺設計也強調直觀和簡化，對比於 Windows 11 的較大視覺調整和對稱設計，macOS 通常提供較少的選項來改變選單的佈局，這樣做有助於減少用戶在操作過程中的迷惑感。</p><h3 id="Windows-11-開始選單大升級"><a href="#Windows-11-開始選單大升級" class="headerlink" title="Windows 11 開始選單大升級"></a>Windows 11 開始選單大升級</h3><p>Windows 11 開始功能表的設計相較於 Windows 10 發生了顯著變化。開始選單的設計從以往從過去原本滑鼠移過去就會自動展開的左右展開改為上下覆蓋式，新的開始功能表採用上下覆蓋式佈局，並將應用程式和快捷方式更加集中，提供更直觀的操作介面。這一變化不僅提升了<strong>觸控操作</strong>的便捷性，也改善了跨設備使用的整體體驗。</p><p>在 Windows 8 及 Windows 10 時期，微軟引入了 Metro UI（也稱為 Modern UI），這是一種強調簡潔、現代化的設計理念，並引入了動態磚（Live Tiles）。動態磚讓用戶可以自定義應用程式的顯示方式，並即時顯示有用資訊，這對於觸控設備來說是非常友好的設計。</p><p>然而，這一設計並不完全適合所有類型的使用者。特別是在桌面環境中，對於習慣傳統桌面操作的用戶來說，動態磚顯得過於繁雜且難以掌握，尤其是在鍵盤和滑鼠操作的環境下。因此，微軟決定將這一設計進行優化，並將其轉型為 Fluent UI，也就是拿掉了動態磚的設計。</p><h3 id="如何適應-Windows-11-開始選單的變化"><a href="#如何適應-Windows-11-開始選單的變化" class="headerlink" title="如何適應 Windows 11 開始選單的變化"></a>如何適應 Windows 11 開始選單的變化</h3><p>雖然 Windows 11 將選單位置改為中央、動態磚的消失讓一些長期使用者感到不便，但 Windows 11 仍然提供了豐富的個人化選項來幫助使用者適應新的界面。</p><p>如何調整開始選單以符合個人需求：</p><ol><li>調整工作列行為:<ul><li>對開始列按右鍵，選擇工作列設定</li><li><img src="https://ithelp.ithome.com.tw/upload/images/20241110/20130026ebCI2i2KnY.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/20130026ebCI2i2KnY.png"></li><li>展開工作列行為：在設定選項中找到「工作列行為」</li><li>選擇靠左對齊：在「工作列對齊」中選擇「靠左」</li><li><img src="https://ithelp.ithome.com.tw/upload/images/20241110/201300260ctG6mA3mB.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/201300260ctG6mA3mB.png"></li></ul></li><li>調整應用程式顯示方式：<ul><li>右鍵點擊開始選單空白處，選擇「開始設定」。</li><li><img src="https://ithelp.ithome.com.tw/upload/images/20241110/20130026ivE1qavPnE.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/20130026ivE1qavPnE.png"></li><li>在「個人化」選項中，調整應用程式的顯示方式和排列。</li></ul></li><li>應用程式群組：<ul><li>將常用應用程式拖放到一起，創建自己的資料夾，以便更快找到所需程式。</li></ul></li><li>透明背景與主題設定：<ul><li>可以根據個人喜好，選擇深色模式或淺色模式，並調整開始選單的背景透明度，選擇自己喜歡的主題色彩。</li></ul></li><li>關閉多餘的廣告：<ul><li>可以依照需求把建議、最近開啟的 Apps 都關掉，可以讓版面更簡潔</li><li><img src="https://ithelp.ithome.com.tw/upload/images/20241110/20130026UXRbM0ihfn.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/20130026UXRbM0ihfn.png"></li></ul></li></ol><p>這樣一來，使用者就能夠重新找回熟悉的操作方式，減少因介面變動帶來的困擾。</p><h3 id="未來的期待：希望更多靈活的自定義選項"><a href="#未來的期待：希望更多靈活的自定義選項" class="headerlink" title="未來的期待：希望更多靈活的自定義選項"></a>未來的期待：希望更多靈活的自定義選項</h3><p>目前，Windows 11 並不支援將工作列置於螢幕左側、右側或上方的功能，這對某些用戶而言可能是一個遺憾。尤其是對於喜歡自訂介面的使用者來說，這樣的功能可以極大地提升操作的便利性。</p><p>我們期待微軟能夠聆聽用戶的反饋，並在未來的更新中加入更多的排版自定義選項，讓使用者能夠根據個人的需求進行更細緻的調整。</p><p>在科技日新月異的今天，操作系統的設計不僅要追求美觀，還必須兼顧使用者的需求。對於 Windows 11 和其他操作系統來說，未來的設計應該更加注重靈活性和自訂性，讓每位用戶都能在符合個人需求的環境中提高工作效率。</p><p>不管你是 Windows 的長期用戶，還是蘋果 macOS 的忠實擁護者，最終目標都是提供一個直觀、便捷且高效的使用體驗。</p><h2 id="Windows-11-工作管理員再進化"><a href="#Windows-11-工作管理員再進化" class="headerlink" title="Windows 11 工作管理員再進化"></a>Windows 11 工作管理員再進化</h2><p>隨著科技的快速發展，Windows 系統的工作管理員也進行了大規模的設計和功能升級。在 Windows 11 中，工作管理員不僅改變了外觀，還提升了使用者體驗和效能，讓現代使用者能夠更加高效地進行系統管理。本文將探討 Windows 11 中工作管理員的重大變革，以及它如何提高使用者操作效率和系統監控能力。</p><h3 id="工作管舊的簡單介面"><a href="#工作管舊的簡單介面" class="headerlink" title="工作管舊的簡單介面"></a>工作管舊的簡單介面</h3><p>在過去的 Windows 系統中，使用者經常透過快捷鍵 <code>Ctrl + Alt + Delete</code> 打開工作管理員，進行程式強制關閉、監控系統性能等操作。這成為了不少使用者熟悉的「密技」，但舊版工作管理員界面過於簡單，且功能呈現方式較為繁瑣，難以滿足現代使用者對高效管理和深入數據分析的需求。</p><p>舊版工作管理員的不足：</p><ol><li>操作界面簡單，但功能選項不夠直觀：對新手使用者來說，舊版工作管理員的選項較為隱蔽且繁雜，難以快速理解和操作。</li><li>缺乏詳細的硬體與軟體資訊：儘管可以進行程序監控，卻無法提供深入的系統健康狀況和性能資料，很多時候需要額外安裝第三方軟體來補充。</li><li>限制的跨設備體驗：舊版設計未能很好地適配觸控設備，對平板或其他觸控型裝置的支援較弱。</li></ol><p>如果你還是懷念舊版，其實微軟還是留有舊版的程式，位置在 <code>C:\Windows\SysWOW64\Taskmgr.exe</code>。</p><h3 id="Windows-11-全新升級工作管理員"><a href="#Windows-11-全新升級工作管理員" class="headerlink" title="Windows 11 全新升級工作管理員"></a>Windows 11 全新升級工作管理員</h3><p>Windows 11 中的工作管理員重新設計，從根本上改進了使用者體驗。新的設計使得它不僅適用於桌面電腦，還對觸控設備進行了優化。界面按鈕和選單的大小被調整為適合手指觸控的尺寸，使得觸控操作更加順暢。</p><p>新版工作管理員的主要特色：</p><ol><li>簡化的界面：新的工作管理員取消了繁雜的視覺元素，界面變得更加簡潔明了，將重要資訊清晰呈現。過去的「上下」操作順序被改為「左右」設計，符合現代化用戶界面風格，並更易於操作。</li><li>更詳盡的硬體與軟體監控資料：新版工作管理員提供了更多硬體性能的實時數據，包括 CPU 使用率、記憶體消耗、磁碟和網絡的使用情況，並且顯示更多關於應用程式的詳細資訊，使得使用者能夠更直觀地掌握系統健康狀況。</li><li>新增的效率模式：Windows 11 中引入了效率模式，允許用戶針對某些應用程式進行設置，將它們設為低資源占用的運行模式。這一設計特別有助於提升系統整體效率，對企業來說，這樣的設計在節省能源、提升工作效率方面具有顯著價值。特別是在 ESG（環境、社會與治理）議題日益受到重視的今天，這項功能對企業的碳排放管理尤為有益。</li></ol><p>效率模式的設置非常簡單，用戶只需右鍵點擊應用程式，選擇手動調整即可。這樣不僅幫助減少資源佔用，還能提升電池續航時間，對筆記型電腦或觸控設備用戶特別有用。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241016/20130026kKkBLalpMS.png" alt="https://ithelp.ithome.com.tw/upload/images/20241016/20130026kKkBLalpMS.png"></p><p>作為前端工程師，對於 Windows 11 的工作管理員，我認為最大改進之一在於它如何通過精簡且一致的設計來提升使用者的整體體驗。新的設計使得工作管理員不僅在桌面電腦上操作順暢，還能在觸控設備上提供更為直觀的使用體驗。</p><p>此外，Windows 11 還加強了跨設備一致性，無論是桌面、筆記型電腦、平板或是觸控設備，用戶都可以在不同裝置之間無縫切換，進行操作和管理，這大大提升了工作流的效率和統一性。</p><p>新版工作管理員的使用者體驗提升要點：</p><ul><li>簡潔的操作界面：新版工作管理員的界面設計更加直觀，使用者可以輕鬆定位所需功能，提升操作效率。</li><li>自動資源管理：通過效率模式和資源優化，Windows 11 能夠讓系統在不犧牲性能的情況下，最大限度減少資源占用，這對於企業用戶來說，尤其是在多任務處理時具有顯著的好處。</li><li>跨設備無縫操作：無論是在筆記型電腦、平板還是觸控設備上，Windows 11 的工作管理員都能提供一致的使用體驗，使用者可以隨時隨地進行管理和監控。</li></ul><p>未來的工作管理員，期待會更高效、更智慧，Windows 11 的工作管理員改進了傳統的設計，融入了更多現代化的設計元素和智能功能，提升了操作流暢度和資源管理效率。</p><p>無論是個人用戶還是企業用戶，都能從中受益，特別是在多設備協作和資源優化方面。未來，微軟可能會進一步完善工作管理員的功能，例如引入更多基於人工智慧的性能預測或更加智能的資源分配策略，為用戶提供更加高效、靈活的操作體驗。</p><h2 id="從控制台到設定頁面，熟悉的操作被打亂"><a href="#從控制台到設定頁面，熟悉的操作被打亂" class="headerlink" title="從控制台到設定頁面，熟悉的操作被打亂"></a>從控制台到設定頁面，熟悉的操作被打亂</h2><p>身為一個容易被知識綁架的工程師，改版後的設定界面在工作上做系統管理和設定時的確會感到不適應。作為一個長期使用 Windows 系統的用戶，特別是對於工程師或系統管理員來說，Windows 11 的設定界面變化確實帶來了不小的挑戰。</p><p>即使是在 Windows 10 中，看得出來設定頁面打開是對已經存在超過十年的控制台的致敬:</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241013/20130026aKUL4Zjd8A.png" alt="https://ithelp.ithome.com.tw/upload/images/20241013/20130026aKUL4Zjd8A.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241014/20130026TtKHme1lzM.png" alt="https://ithelp.ithome.com.tw/upload/images/20241014/20130026TtKHme1lzM.png"></p><p>以往，使用控制台可以輕鬆找到許多系統設定，像是網路設定、硬體管理等。然而在 Windows 11 中，這些選項被重新分類，許多功能被移到新的「設定」頁面，這使得習慣了舊版介面的使用者需要花更多時間去尋找相同的選項。</p><p>以網路設定為例，原本透過控制台的快速切換顯示模式，操作非常直觀能夠快速地通過控制台找到網路設定，但在 Windows 11 中，許多設定被細分並放在不同的頁面，這讓使用者在快速進行日常管理時需要付出更多的精力。</p><h3 id="傳統控制台-vs-Windows-11-設定"><a href="#傳統控制台-vs-Windows-11-設定" class="headerlink" title="傳統控制台 vs Windows 11 設定"></a>傳統控制台 vs Windows 11 設定</h3><p>在 Windows 10 中，控制台介面通常是上下排列的結構，選項清晰可見，讓使用者能夠迅速找到所需功能。然而，在 Windows 11 中，設定頁面已經進化成左側固定選單的形式，這樣的設計視覺上更加現代化，但對於習慣舊版控制台的用戶來說，卻帶來了不小的學習曲線。</p><p>在 Windows 10 進入設定後，其實會發現底層的選單實際上就是這次 Windows 11 設定界面的左右排列格式。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241013/20130026xEigWC1wJd.png" alt="https://ithelp.ithome.com.tw/upload/images/20241013/20130026xEigWC1wJd.png"></p><p>Windows 11 重新設計的設定，目前具備常駐的固定左側選單，使得更容易從一堆設定中瀏覽至另一組設定。這次更新淘汰了傳統控制台的主選單，統一改為新的設計體驗。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241014/20130026FBuWRndRMl.png" alt="https://ithelp.ithome.com.tw/upload/images/20241014/20130026FBuWRndRMl.png"></p><p>這在視覺上看起來更現代，但卻造成些微不方便，像是需要移除軟體時，曾經能輕鬆找到控制台的程式和功能移除選項，現在這個功能被隱藏在新的設定界面中。</p><p>過去，像是「程式和功能」這類的設定項目在控制台中是極為顯眼的，使用者只需進入控制台即可輕鬆找到移除軟體的選項。但在 Windows 11 中，這些功能被隱藏在新的「設定」界面中，讓許多用戶感到困惑。</p><h3 id="隱藏的選項，如何快速找到所需設定？"><a href="#隱藏的選項，如何快速找到所需設定？" class="headerlink" title="隱藏的選項，如何快速找到所需設定？"></a>隱藏的選項，如何快速找到所需設定？</h3><p>Windows 11 的設定界面不僅是視覺上的更新，更帶來了操作方式上的根本改變。許多曾經清晰顯示在控制台中的功能，如程式管理、硬體設置等，現在都需要通過更多層級的導航才能找到。這樣的改動無疑會讓習慣舊版介面的用戶感到不便，尤其是在日常管理或快速處理問題時。</p><p>此外，對於需要高效操作的使用者來說，尋找特定功能的時間增加了，這對工作效率帶來了挑戰。例如，要移除一個程式，過去只需進入控制台並點擊「程式和功能」，但現在需要更多步驟來尋找相應的選項。</p><p>Windows 11 在界面設計上無疑追求了現代感和簡潔性，這個部份即使改變很大但仍然保有舊版的介面可供使用，只需要在搜尋輸入 Control Panel 就可以打開熟悉的畫面。</p><h2 id="Windows-11-設計大變革-Fluent-UI-的崛起，統一多設備體驗"><a href="#Windows-11-設計大變革-Fluent-UI-的崛起，統一多設備體驗" class="headerlink" title="Windows 11 設計大變革: Fluent UI 的崛起，統一多設備體驗"></a>Windows 11 設計大變革: Fluent UI 的崛起，統一多設備體驗</h2><p>Windows 11 的全新設計將過去的 Metro UI 捨棄，取而代之的是更現代化、更具流暢感的 Fluent UI 設計語言。這一設計不僅改善了 Windows 11 介面的視覺效果，還優化了跨設備的使用體驗，尤其是對觸控裝置的支援更加完善。Fluent UI 強調柔和的圓角、過渡動畫與透明效果，使整個系統看起來更加簡潔、現代且具有動感。</p><p>Fluent UI 是微軟為了實現跨設備一致性而推動的設計語言，旨在讓 Windows 11 在桌面、筆記型電腦、平板以及手機等不同裝置上都能提供統一且高效的使用者體驗。這樣的設計不僅注重視覺美感，還加強了操作的流暢性與互動感，使得用戶在任何裝置上都能享有直觀的操作體驗。</p><h3 id="Fluent-UI-與-Metro-UI-的區別"><a href="#Fluent-UI-與-Metro-UI-的區別" class="headerlink" title="Fluent UI 與 Metro UI 的區別"></a>Fluent UI 與 Metro UI 的區別</h3><ul><li>Metro UI 的設計強調扁平化和直線邊角，而 Fluent UI 則採用了圓角設計和透明玻璃效果，讓使用者有更柔和、舒適的視覺感受。</li><li>Fluent UI 的介面過渡更加自然，並加強了對觸控操作的支持，特別適合<strong>二合一裝置</strong>和<strong>平板電腦</strong>的使用。</li></ul><h3 id="Metro-UI-的回顧：Windows-8-和-10-的創新與挑戰"><a href="#Metro-UI-的回顧：Windows-8-和-10-的創新與挑戰" class="headerlink" title="Metro UI 的回顧：Windows 8 和 10 的創新與挑戰"></a>Metro UI 的回顧：Windows 8 和 10 的創新與挑戰</h3><p>在 Windows 8 及 Windows 10 時期，微軟引入了 Metro UI（也稱為 Modern UI），這是一種強調簡潔、現代化的設計理念，並引入了動態磚（Live Tiles）。動態磚讓用戶可以自定義應用程式的顯示方式，並即時顯示有用資訊，這對於觸控設備來說是非常友好的設計。</p><p>然而，這一設計並不完全適合所有類型的使用者。特別是在桌面環境中，對於習慣傳統桌面操作的用戶來說，動態磚顯得過於繁雜且難以掌握，尤其是在鍵盤和滑鼠操作的環境下。因此，微軟決定將這一設計進行優化，並將其轉型為 Fluent UI。</p><h3 id="Fluent-UI-的引入：流暢的現代化體驗"><a href="#Fluent-UI-的引入：流暢的現代化體驗" class="headerlink" title="Fluent UI 的引入：流暢的現代化體驗"></a>Fluent UI 的引入：流暢的現代化體驗</h3><p>Fluent UI 帶來了更加注重視覺層次感的設計語言。與 Metro UI 的扁平化設計相比，Fluent UI 不僅強調視覺上的一致性，還提升了操作的流暢性和自然感。這些變化不僅體現在界面的設計上，還進一步優化了跨設備的使用體驗，從桌面到觸控設備，每一個操作都更加直觀和舒適。</p><p>Fluent UI 主要特點：</p><ul><li>統一的控制元件樣式：無論在桌面端還是觸控設備上，Fluent UI 都提供統一的外觀和操作體驗，這樣用戶可以在不同裝置間無縫切換。</li><li>視覺一致性：Fluent UI 強調顏色、邊界和陰影等視覺元素的一致性，使得使用者在跨裝置操作時，能夠獲得一致的使用體驗。</li><li>觸控友好：Fluent UI 特別針對觸控設備進行了優化，這使得 Windows 11 在平板和觸控屏設備上有了更佳的操作體驗。</li></ul><h3 id="從動態磚到簡化的應用程式列表"><a href="#從動態磚到簡化的應用程式列表" class="headerlink" title="從動態磚到簡化的應用程式列表"></a>從動態磚到簡化的應用程式列表</h3><p>Windows 11 的開始選單是 Fluent UI 設計語言的一個重要實踐。微軟將 Windows 10 中的動態磚移除，並將開始選單簡化為一個置中的、線性化的應用程式列表。這樣的設計方式，與 Android 和 iOS 中的應用程式管理方式類似，讓用戶在不同設備間的操作體驗更加一致。</p><p>主要變化：</p><ul><li>應用程式群組：開始選單不再顯示動態磚，而是將應用程式以簡單的圖示顯示，並允許使用者將應用程式整理成資料夾或群組。這樣的設計更符合現代化需求，讓用戶可以根據自己的需求自由安排應用程式。</li><li>簡化的布局：與 Windows 10 的動態磚相比，Windows 11 的開始選單變得更加簡潔，去除了多餘的動態元素，專注於應用程式展示和快捷操作。</li><li>動態效果與透明背景：Fluent UI 的設計加入了更多透明度和模糊效果，讓選單背景與操作界面之間的過渡更具視覺深度，提升了整體的操作流暢感。</li></ul><h3 id="Windows-11-圓角設計：視覺效果的升級"><a href="#Windows-11-圓角設計：視覺效果的升級" class="headerlink" title="Windows 11 圓角設計：視覺效果的升級"></a>Windows 11 圓角設計：視覺效果的升級</h3><p>Windows 11 的圓角設計給作業系統增添了柔和感，尤其在視窗設計和應用程式介面中更加突出。圓角設計提升了 現代感，並讓使用者在視覺上感到更舒適。然而，對於一些舊款硬體來說，這些視覺效果可能會對 效能 造成一定影響。</p><h2 id="Windows-11-儲存空間管理工具"><a href="#Windows-11-儲存空間管理工具" class="headerlink" title="Windows 11 儲存空間管理工具"></a>Windows 11 儲存空間管理工具</h2><p>隨著數位時代的進步，儲存空間管理已經成為提高系統性能和維持設備流暢運行的重要一環。</p><p>Windows 11 在這方面的表現可謂超乎預期，它的儲存空間管理功能不僅進化了介面，還加入了多項智慧化功能就像空間魔術師，讓使用者能夠像操作行動裝置一樣輕鬆管理儲存空間，我們就不用再額外安裝像是 ccleaner 這樣的優化軟體。</p><h3 id="全新設計的儲存空間管理介面"><a href="#全新設計的儲存空間管理介面" class="headerlink" title="全新設計的儲存空間管理介面"></a>全新設計的儲存空間管理介面</h3><p>在 Windows 10 中，儲存空間管理雖然也已經有了基本功能，但操作介面略顯繁瑣，需要額外的第三方工具來進行優化。而在 Windows 11 中，這一點得到了顯著改進。儲存空間管理的介面經過重新設計，變得更加直觀，讓使用者可以輕鬆管理自己的檔案和磁碟空間，無需額外安裝如 CCleaner 等工具。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241026/20130026RVUWqgk8Zp.png" alt="https://ithelp.ithome.com.tw/upload/images/20241026/20130026RVUWqgk8Zp.png"></p><p>進入 「設定」 &gt; 「系統」 &gt; 「儲存空間」，使用者就可以清楚地看到當前儲存空間的使用狀況，並且每個檔案類別（如應用程式、文件、圖片等）都會以清晰的圖表形式展示出來。這樣的設計讓使用者一目瞭然，便於快速找出佔用空間的主要原因。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241026/201300260fLFU4i9j1.png" alt="https://ithelp.ithome.com.tw/upload/images/20241026/201300260fLFU4i9j1.png"></p><h3 id="空間管理工具：簡單直觀，隨時清理"><a href="#空間管理工具：簡單直觀，隨時清理" class="headerlink" title="空間管理工具：簡單直觀，隨時清理"></a>空間管理工具：簡單直觀，隨時清理</h3><p>Windows 11 的 儲存空間管理工具，不僅簡化了磁碟清理的操作，還提供了更多強大的選項。您不再需要依賴外部工具來釋放空間，現在一切都可以在操作系統內輕鬆完成。</p><p>只需進入設定中的儲存空間選項，然後選擇需要清理的項目即可。這包括應用程式、臨時檔案、下載資料夾等，使用者可以輕鬆管理各類資料，清理不再需要的檔案。</p><h3 id="進階設定與自動化功能：儲存空間感知器"><a href="#進階設定與自動化功能：儲存空間感知器" class="headerlink" title="進階設定與自動化功能：儲存空間感知器"></a>進階設定與自動化功能：儲存空間感知器</h3><p>Windows 11 引入了更為強大的 儲存空間感知器 功能，讓儲存空間管理變得更加智能。當系統發現儲存空間不足時，儲存空間感知器會自動釋放空間，並且根據使用者的需求自動清理不必要的檔案，極大地減少了用戶的手動操作。</p><ul><li>自動清理功能： 開啟儲存空間感知器後，系統會在磁碟空間不足時自動執行清理，清除暫存檔案和不必要的系統文件，讓用戶無需親自進行操作 (僅適用系統磁碟機通常為 C:)。</li><li>資源回收桶管理： 預設情況下，儲存空間感知器會定期清理資源回收桶中的檔案，並根據設定的時間（例如 30 天未使用的檔案）自動刪除。這樣可以避免資源回收桶中堆積過多無用檔案，佔用寶貴的儲存空間。</li></ul><p>系統的假設是我們下載、丟到資源回收桶的東西其實長期來看都是不被需要的，如果可以被下載那就代表網路有來源，如果在垃圾桶超過幾天，那我們這輩子也許都不會再去翻閱。</p><p>其中，儲存空間感知器是一個強大的功能，能根據使用者的需求自動調整儲存設置，當系統檢測到儲存空間不足時會自動釋放空間，並通知用戶進行進一步的清理。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241026/201300264PkXJGwIf4.png" alt="https://ithelp.ithome.com.tw/upload/images/20241026/201300264PkXJGwIf4.png"></p><h3 id="如何啟用儲存空間感知器？"><a href="#如何啟用儲存空間感知器？" class="headerlink" title="如何啟用儲存空間感知器？"></a>如何啟用儲存空間感知器？</h3><p>啟用儲存空間感知器非常簡單，按以下步驟操作：</p><ol><li>在 Windows 搜尋欄 輸入「開啟儲存空間感知器」，然後點選 「開啟」。</li><li>點選 「儲存空間感知器」，然後勾選 「清理暫存檔案」 和 「自動清理使用者內容」。</li><li>設定清理排程：選擇執行儲存空間感知器的頻率（例如，每月一次或每週一次）。</li><li>可以選擇刪除<strong>資源回收桶</strong>和<strong>下載</strong>資料夾 中，超過設定天數未開啟的檔案。</li><li>點擊 「立即執行儲存空間感知器」，讓系統立即釋放磁碟空間。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241026/20130026fgAyWXemjr.png" alt="https://ithelp.ithome.com.tw/upload/images/20241026/20130026fgAyWXemjr.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241110/20130026fO1xpiX3Uq.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/20130026fO1xpiX3Uq.png"></p><h3 id="Windows-11-讓空間管理變得更簡單"><a href="#Windows-11-讓空間管理變得更簡單" class="headerlink" title="Windows 11 讓空間管理變得更簡單"></a>Windows 11 讓空間管理變得更簡單</h3><p>Windows 11 讓儲存空間管理變得更簡單、更智能，特別是 儲存空間感知器 功能，能夠根據使用情況自動釋放空間，讓用戶無需手動處理。而直觀的介面和進階設定功能，也讓管理檔案變得更加高效，能夠確保系統運行更加流暢。</p><p>無論是對個人使用者還是專業人士來說，Windows 11 的儲存空間管理功能無疑是一大亮點，它將儲存空間清理變得更加輕鬆，讓用戶能夠專注於更重要的工作，無需擔心磁碟空間不足的問題。</p><h2 id="Windows-11-剪貼簿無限閱讀"><a href="#Windows-11-剪貼簿無限閱讀" class="headerlink" title="Windows 11 剪貼簿無限閱讀"></a>Windows 11 剪貼簿無限閱讀</h2><p>Windows 11 的剪貼簿功能經過大幅升級，提供了全新的<strong>剪貼簿歷史記錄</strong>、<strong>雲端同步</strong>、<strong>OCR 文字識別技術</strong>等強大功能，讓這個日常工具不僅能夠儲存複製內容，還能提高工作效率並支援跨設備協同作業。</p><p>透過 OCR 技術，用戶可以輕鬆從圖片中提取文字，配合雲端同步功能，無論在哪台設備上都能隨時存取內容，實現高效的數位化工作流程。</p><p>此外，Windows 11 剪貼簿還支援以圖搜圖功能，讓管理多格式內容變得更加靈活智能。這些創新功能不僅提升了剪貼簿的便利性，還幫助用戶更加高效地處理各類內容，無論是文字還是圖片，讓數位工作更上一層樓。</p><h3 id="剪貼簿歷史：無限閱讀"><a href="#剪貼簿歷史：無限閱讀" class="headerlink" title="剪貼簿歷史：無限閱讀"></a>剪貼簿歷史：無限閱讀</h3><p>在 Windows 11 中，啟用<strong>剪貼簿歷史</strong>功能後，您可以儲存多筆複製的內容，取代了過去只能保存最後一個複製項目的限制。這不僅提升了複製和貼上的便捷性，也讓工作流程變得更加高效。</p><ul><li>同步功能：當您登錄 Microsoft 帳戶後，剪貼簿的內容可以在不同設備之間進行同步。無論您是在桌面電腦、筆記型電腦還是平板上操作，隨時隨地都能查看自己的剪貼簿歷史，保持一致的工作體驗。</li><li>資料保留：即使重啟電腦，剪貼簿中的內容也會被保留，不會丟失任何重要的資料。這樣您可以放心記錄工作中的靈感或待辦事項，隨時使用。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20241028/201300263kf5XiYaY1.png" alt="https://ithelp.ithome.com.tw/upload/images/20241028/201300263kf5XiYaY1.png"></p><h3 id="OCR-文字辨識技術：從圖片中提取文字"><a href="#OCR-文字辨識技術：從圖片中提取文字" class="headerlink" title="OCR 文字辨識技術：從圖片中提取文字"></a>OCR 文字辨識技術：從圖片中提取文字</h3><p>Windows 11 剪貼簿的進階功能之一是 OCR（光學字符識別）技術，這使得剪貼簿不僅僅是文字與圖片的儲存工具，它還可以自動識別圖片中的文字，並將其轉換為可編輯的文本。這一功能對於處理含有文字的圖片非常有幫助，無論是文件、照片還是手寫筆記，都能夠輕鬆轉換為可編輯的文字。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241109/2013002635ERUhL4Fd.png" alt="https://ithelp.ithome.com.tw/upload/images/20241109/2013002635ERUhL4Fd.png"></p><p>Text Actions（文字操作）：剪貼簿中的 OCR 功能與 text actions 技術相結合，讓用戶可以在剪貼簿中輕鬆執行文字操作，例如選擇、複製或編輯圖片中的文字。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241109/20130026mtfxnJ9rFe.png" alt="https://ithelp.ithome.com.tw/upload/images/20241109/20130026mtfxnJ9rFe.png"></p><h3 id="剪貼簿結合-Bing-的以圖搜圖-Visual-Search"><a href="#剪貼簿結合-Bing-的以圖搜圖-Visual-Search" class="headerlink" title="剪貼簿結合 Bing 的以圖搜圖 (Visual Search)"></a>剪貼簿結合 Bing 的以圖搜圖 (Visual Search)</h3><p>除了 OCR 功能，Windows 11 剪貼簿還整合了 Bing 的以圖搜圖（Visual Search）功能。這項新功能可以讓您通過圖像識別找到相關的資訊，無論是產品、名人還是地點，都能快速獲取與圖像相關的網頁或資料。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241109/20130026nJU4Ga6HP7.png" alt="https://ithelp.ithome.com.tw/upload/images/20241109/20130026nJU4Ga6HP7.png"></p><h3 id="剪貼簿新介面與多格式支援"><a href="#剪貼簿新介面與多格式支援" class="headerlink" title="剪貼簿新介面與多格式支援"></a>剪貼簿新介面與多格式支援</h3><p>剪貼簿的全新介面不僅更為直觀，還加入了 多格式支援，讓剪貼簿的使用更加靈活。現在，您不僅可以存儲文字，還能儲存 圖片、GIF、Emoji 表情符號 等各種格式的內容，使得複製和貼上變得更加豐富多樣。</p><ul><li>快捷鍵：透過快捷鍵 Windows + V，您可以快速開啟剪貼簿介面，輕鬆查看並選擇之前複製的項目。</li><li>頻繁使用的項目：剪貼簿還會自動整理出您最近使用過的內容，並將 Emoji、GIF 表情符號等項目方便快捷地展示在選單中，減少重複操作的時間。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20241028/20130026oKDr3etbz9.png" alt="https://ithelp.ithome.com.tw/upload/images/20241028/20130026oKDr3etbz9.png"></p><h3 id="剪貼簿的靈活應用"><a href="#剪貼簿的靈活應用" class="headerlink" title="剪貼簿的靈活應用"></a>剪貼簿的靈活應用</h3><p>Windows 11 剪貼簿的升級大大提升了它的靈活性和便利性。無論是用於記錄日常靈感、待辦事項，還是處理辦公文檔、學習筆記，剪貼簿都能提供極大的幫助。隨時隨地都能輕鬆管理您的資料，無需擔心丟失任何重要內容，讓工作變得更加高效且有條理。</p><p>此外，剪貼簿不僅支援文字，還支援圖片及其他格式的內容，可以更靈活運用複製和貼上功能，滿足多樣化需求，準備好開始使用全新進化的剪貼簿了嗎?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;當你升級到 Windows 11 時，許多使用者習慣的舊版應用程式與介面設定可能會被改變，帶來不小的衝擊。&lt;/p&gt;
&lt;p&gt;例如，經典的 WordPad 即將在 Windows 11 中消失，熟悉的開始選單也因為全新的設計而大幅改變，從左下角移動到中間，這些改動可能會讓長期使</summary>
      
    
    
    
    <category term="Windows11" scheme="https://linyencheng.github.io/categories/Windows11/"/>
    
    
    <category term="Windows11" scheme="https://linyencheng.github.io/tags/Windows11/"/>
    
    <category term="2024ironman" scheme="https://linyencheng.github.io/tags/2024ironman/"/>
    
  </entry>
  
  <entry>
    <title>Windows 11 升級指南</title>
    <link href="https://linyencheng.github.io/2024/12/05/windows11/ways-to-windows11/"/>
    <id>https://linyencheng.github.io/2024/12/05/windows11/ways-to-windows11/</id>
    <published>2024-12-05T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.471Z</updated>
    
    <content type="html"><![CDATA[<p>為什麼升級到 Windows 11？升級到 Windows 11 不僅能確保您的設備在安全性上獲得支持，還能提升性能和用戶體驗。以下是幾個值得考慮的理由：</p><ul><li>現代化介面：Windows 11 擁有全新的設計，簡化的用戶介面讓您更容易找到和使用應用程式。</li><li>性能優化：新系統針對遊戲和多任務處理進行了效能調整，提供更流暢的使用體驗。</li><li>新的應用程式和功能：包含許多新功能、小工具、虛擬桌面及整合的 Microsoft Teams，讓工作和娛樂更加高效。</li><li>長期支援：隨著 Windows 10 的 EOL，升級至 Windows 11 可確保您獲得最新的安全更新和功能。</li></ul><h2 id="Windows-11-最低硬體規格需求"><a href="#Windows-11-最低硬體規格需求" class="headerlink" title="Windows 11 最低硬體規格需求"></a>Windows 11 最低硬體規格需求</h2><p>可以先透過 PC Health Check Tool 這個免費工具，來檢查裝置的硬體規格，可快速確認設備是否符合 Windows 11 的基本要求，如 CPU、RAM、存儲空間和 TPM 2.0 等關鍵硬體組件:</p><ul><li>處理器:相容的 64 位元處理器或晶片系統（SoC），具備 1 GHz 以上，並配備 2 個以上的核心</li><li>記憶體:（RAM） 4 GB</li><li>儲存空間: 64 GB 以上的儲存空間</li><li>系統韌體: UEFI，支援安全開機（Secure Boot）</li><li>TPM: 信賴平台模組（TPM）版本 2.0</li><li>圖形卡: 相容於 DirectX 12 或更新版本，包含 WDDM 2.0 驅動程式</li><li>顯示器: 高畫質（720p）顯示器，9 吋以上，每個色彩通道 8 位元</li></ul><h2 id="升級到-Windows-11-的建議"><a href="#升級到-Windows-11-的建議" class="headerlink" title="升級到 Windows 11 的建議"></a>升級到 Windows 11 的建議</h2><p>小編的筆電還停留在 Asus X550C，由於 TPM 的關係，因為 TPM 的限制而無法直接升級至 Windows 11，TPM 2.0 的要求，是為了提供進階的安全功能，如加密和安全開機，以應對新型態的勒索軟體和駭客攻擊。</p><p>微軟官方建議，不應在不符合 Windows 11 最低系統要求的設備上安裝該系統。根據小編的體驗，至少需要 8GB 的記憶體，以下是本次測試的硬體規格：</p><blockquote><p>CPU: i5-3337U<br>GPU: NVDIA GT720M<br>Memory: 8G<br>Disk: ADATA SU800 128G</p></blockquote><p>但官方還是提供了一條<a href="https://support.microsoft.com/en-us/windows/ways-to-install-windows-11-e0edbbfb-cfc5-4011-868b-2ce77ac7c70e">非建議的安裝方式</a>，讓想要搶先體驗的夥伴能夠進行升級，小編本次就是透過這種方式進行老筆電安裝升級至 Windows 11。</p><h2 id="繞過-TPM-2-0-的方法"><a href="#繞過-TPM-2-0-的方法" class="headerlink" title="繞過 TPM 2.0 的方法"></a>繞過 TPM 2.0 的方法</h2><p>如果評估過後決定進行這樣的操作並了解其中的風險，可以創建以下的註冊表鍵值，以繞過對 TPM 2.0。</p><p>但官方建議至少需要 TPM 1.2 和 CPU 型號的檢查，要檢查目前的 TPM 版本，可以按照以下步驟進行：</p><ol><li>按下 Win + R 鍵，打開「執行」對話框。</li><li>輸入 tpm.msc，然後按 Enter。</li><li>在出現的「TPM 管理」視窗中，查看右側的「TPM 裝置資訊」。在這裡，你可以看到 TPM 的版本（例如，TPM 1.2 或 TPM 2.0）。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026HVa27ynLGm.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026HVa27ynLGm.png"></p><p>註冊表鍵值設定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">路徑：HKEY_LOCAL_MACHINE\SYSTEM\Setup\MoSetup</span><br><span class="line">名稱：AllowUpgradesWithUnsupportedTPMOrCPU</span><br><span class="line">類型：REG_DWORD</span><br><span class="line">數值：1</span><br></pre></td></tr></table></figure><ol><li>windows + R</li><li>輸入 regedit 按確認執行</li><li>到以上路徑新增 AllowUpgradesWithUnsupportedTPMOrCPU</li></ol><p>注意：<strong>如果不正確地修改註冊表，可能會出現嚴重問題</strong>，這些問題可能需要重新安裝操作系統，微軟無法保證這些問題能夠解決，請在評估風險後才修改註冊表。</p><p>升級至 Windows 11 雖需繞過某些系統要求，但在安全性、性能和功能上的提升，無疑是值得考慮的選擇。</p><p><strong>請在進行任何修改之前，確保備份重要資料，並仔細閱讀相關指南。</strong></p><p>Windows 11 是微軟最新推出的作業系統，帶來了多項視覺設計、功能優化和效能提升。隨著 Windows 11 的推出，許多企業和個人面臨是否升級至新作業系統的選擇。這篇文章將分享我作為一名 IT 小編，對於使用效能較低的 ASUS VivoBook Flip 12 電腦升級 Windows 11 的測試結果，並從硬體需求、資訊安全、升級策略和企業需求等方面提供升級的建議。</p><h2 id="低效能設備-Windows-11-升級評估"><a href="#低效能設備-Windows-11-升級評估" class="headerlink" title="低效能設備 Windows 11 升級評估"></a>低效能設備 Windows 11 升級評估</h2><p>目前小編手邊還有一台效能比較低的 ASUS VivoBook Flip 12，身為 IT 的小編會不會選擇再升級一台舊電腦?</p><p>ASUS VivoBook Flip 12 配置：</p><blockquote><p>處理器: Intel® Celeron® N3350 處理器 1.1 GHz (2M 快取，最高 2.4 GHz)<br>記憶體: 4GB DDR3 on board<br>儲存空間: 64G eMMC</p></blockquote><p>這台設備的配置顯然無法達到 Windows 11 的最低硬體要求，因此，升級這樣的設備可能會造成系統不穩定，甚至影響工作效率。但對於企業來說，隨著 Windows 10 支援的終止和對安全性的需求日益增強，更換作業系統是一個必須要解決的問題。在這樣的背景下，不管是個人或企業應該評估現有設備的狀況，並根據實際需求進行升級或更換。</p><blockquote><p>答案是目前還不會</p></blockquote><h3 id="Windows-11-的硬體需求"><a href="#Windows-11-的硬體需求" class="headerlink" title="Windows 11 的硬體需求"></a>Windows 11 的硬體需求</h3><p>我從小就開始接觸電腦，經歷了從 倚天中文系統 到 Windows 95、98、ME、2000、XP、7、10、11 的各種版本，這一路走來，體會最深的就是每一次操作系統升級都伴隨著硬體需求的提升。過往，升級新作業系統時，問題大多出在硬體效能跑不動，但一般情況下，透過擴增 RAM 或更換固態硬碟（SSD） 就能解決問題。</p><p>Windows 11 帶來了比以往更高的硬體要求。與以往的版本相比，Windows 11 不僅要求更強的處理器性能，還加入了 TPM 2.0 和安全啟動等安全功能，這使得許多舊設備無法升級。對於像 ASUS VivoBook Flip 12 這樣的舊設備而言，升級的難度更大，且升級後的效能也無法保證流暢運行，甚至會拖慢工作效率。</p><h2 id="升級或更換設備？Windows-11-升級決策"><a href="#升級或更換設備？Windows-11-升級決策" class="headerlink" title="升級或更換設備？Windows 11 升級決策"></a>升級或更換設備？Windows 11 升級決策</h2><p>如果設備無法升級到 Windows 11，替換設備便成為必要步驟。升級過程中的注意事項包括：</p><ul><li>確保新設備符合最低硬體要求，以保證升級後的穩定性和效能。</li><li>備份資料，防止升級過程中資料丟失。</li><li>測試軟體相容性，確保現有應用程式不會與新作業系統衝突。</li></ul><h2 id="升級-Windows-11-的預算與安全性問題"><a href="#升級-Windows-11-的預算與安全性問題" class="headerlink" title="升級 Windows 11 的預算與安全性問題"></a>升級 Windows 11 的預算與安全性問題</h2><p>升級 Windows 11 不僅是技術問題，還涉及到預算和安全性的挑戰。對企業來說需要在有限的 IT 預算內，平衡升級所帶來的效益與投入的成本。</p><p>如何說服管理層支持升級：</p><ul><li>安全性提升：升級後，Windows 11 提供更強大的數據加密和防範未授權訪問的功能，能有效降低數據外洩風險。</li><li>節能減碳效益：Windows 11 具有更高效的能源管理系統，能降低企業運營中的能源消耗，符合 ESG（環境、社會、公司治理）要求。</li><li>分階段升級計劃：建議企業採取分階段升級的策略，減少一次性資本支出，並根據實際需求調整預算。</li></ul><h2 id="Windows-11-的資訊安全優勢"><a href="#Windows-11-的資訊安全優勢" class="headerlink" title="Windows 11 的資訊安全優勢"></a>Windows 11 的資訊安全優勢</h2><p>Windows 11 在資訊安全方面進行了多項強化。新加入的 TPM 2.0 和安全啟動功能，能有效防止未經授權的存取，並加強對企業資料的加密保護。這對於當前數據泄露風險增加的環境來說，顯得尤為重要。</p><p>然而，這些新功能會對硬體提出更高的要求，舊設備如果無法支持這些功能，可能會導致升級後系統不穩定，這也是許多企業在升級過程中需要謹慎考量的因素。</p><h2 id="節能與環保：Windows-11-的-ESG-優勢"><a href="#節能與環保：Windows-11-的-ESG-優勢" class="headerlink" title="節能與環保：Windows 11 的 ESG 優勢"></a>節能與環保：Windows 11 的 ESG 優勢</h2><p>Windows 11 針對能源管理進行了優化，能在企業中實現節能減碳，符合 ESG 策略。透過智慧休眠模式和背景處理，系統能夠顯著降低能源消耗。然而，對於效能不足的舊設備來說，這些功能的效果會受到限制。</p><p>然而，若現有設備本身效能不足，這些節能特性可能無法完全發揮，因為系統過於依賴硬體運行，設備本身的效能就已經低落，沒有效能全開很可能系統都無法順暢運行，就別談 ESG 了。</p><h2 id="Windows-10-EOS-急迫性與因應策略"><a href="#Windows-10-EOS-急迫性與因應策略" class="headerlink" title="Windows 10 EOS 急迫性與因應策略"></a>Windows 10 EOS 急迫性與因應策略</h2><p>2025 年，微軟將停止對 Windows 10 的支援。對於仍在使用 Windows 10 的企業，這意味著不再有安全更新支持，將面臨數據外洩和系統攻擊的風險。因此，企業必須加快升級至 Windows 11，以保障資訊安全。</p><p>企業的應對策略：</p><ul><li>評估現有設備是否能升級到 Windows 11，如果不能，必須規劃替換設備的預算和時間表。</li><li>雲端轉型：對於需要提升效率和靈活性的企業，考慮虛擬化、容器化或雲端基礎設施的轉型，這樣不僅能提升運營效率，還能減少對舊硬體的依賴，透過雲端或是容器化，需要保護或是大規模更動的或許就不再是實體的硬體，若真的需要進行復原也相對容易。</li></ul><p>如果小編屆時升級後仍然出現問題，會考量將舊筆電系統轉換至 ChromeOS Flex。</p><h2 id="Windows-11-記憶體使用分析"><a href="#Windows-11-記憶體使用分析" class="headerlink" title="Windows 11 記憶體使用分析"></a>Windows 11 記憶體使用分析</h2><p>不過 Windows 11 在效能上也引發了一些問題，小編用起來體感記憶體有用的比較滿，所以特別去查了網路上的評測，確實也有發現類似的問題。</p><p>根據<a href="https://www.hk01.com/article/690067">網路上的測試</a></p><ul><li>Windows 11 在開機時的記憶體佔用率約 29%，相比於 Windows 10 的 19% 增加了約 10%。</li><li>對於擁有 4GB 或 8GB 記憶體的舊款筆電來說，這樣的記憶體佔用率可能會影響系統的流暢性。</li><li>若是 16GB 記憶體的設備，開機後的可用記憶體約為 11GB，這對於需要運行大型應用程式的使用者來說，無疑會是一個挑戰。</li></ul><p>若想避免卡頓的情況，建議用戶在升級之前仔細考量自己的硬體配置，雖然 Windows 11 提供了針對特定應用的效率模式，但仍需微軟在後續更新中進一步優化。</p><h2 id="常見問題與改進建議"><a href="#常見問題與改進建議" class="headerlink" title="常見問題與改進建議"></a>常見問題與改進建議</h2><p>使用過程中，我也遇到了一些小問題。例如，在某些情況下，時間同步功能會出現異常，這可能會影響到日常使用。對於這些小問題，微軟可能會在未來的更新中進行修復，建議使用者保持系統的最新狀態。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241011/20130026G9deZPvvXg.png" alt="https://ithelp.ithome.com.tw/upload/images/20241011/20130026G9deZPvvXg.png"></p><h2 id="IT-部署規劃：如何無縫升級到-Windows-11"><a href="#IT-部署規劃：如何無縫升級到-Windows-11" class="headerlink" title="IT 部署規劃：如何無縫升級到 Windows 11"></a>IT 部署規劃：如何無縫升級到 Windows 11</h2><p>對於竹科這種都是工廠的公司來說，我認為也無法一次到位，升級至 Windows 11 對企業來說是一次全方位的挑戰，如果系統升級上去需要停機停線，這個損失往往遠大過於系統升級的好處。</p><p>除了硬體升級，升級過程中硬體相容性和軟體相容性會是企業遇到的主要問題，小編在大公司過往的經驗都是會遇到問題，因為大公司的電腦中除了作業系統本身還額外安裝了許多監控類的系統，而這些系統是很可能跟新的作業系統打架的。</p><p>除了透過相容性測試工具，如 Windows 11 Health Check，來確保現有的硬體和應用程式能夠與新系統順利運行。還需要對操作系統部署進行周密規劃。</p><p>以下是一些建議：</p><ul><li>在升級前進行<strong>測試環境部署</strong>，確保系統升級不會對業務流程造成干擾。</li><li>設計<strong>還原計劃</strong>，若升級出現問題，可以迅速恢復到舊系統避免業務中斷。</li></ul><h2 id="ESU-能有什麼幫助"><a href="#ESU-能有什麼幫助" class="headerlink" title="ESU 能有什麼幫助?"></a>ESU 能有什麼幫助?</h2><p>隨著 Windows 10 的支援將於 2025&#x2F;10&#x2F;14 結束，在終止支援（End of Support, EOS）後，微軟將不再提供安全更新或漏洞修補，企業需立即做對應的規劃，像是購買擴展安全更新（ESU）或是升級至 Windows 11。</p><p>這對企業的 IT 基礎架構、數位安全性、業務運營及成本管理等方面都帶來了深遠的影響。</p><h2 id="Windows-10-EOS-對企業的急迫性"><a href="#Windows-10-EOS-對企業的急迫性" class="headerlink" title="Windows 10 EOS 對企業的急迫性"></a>Windows 10 EOS 對企業的急迫性</h2><p>從 Windows 10 開始後強制性更新帶來了不少問題，而 Windows 11 開始更是從硬體開始打造一條龍的安全性保護，整體的硬體支援跟版本的相容度想當然就沒那麼高。</p><h3 id="急迫性分析"><a href="#急迫性分析" class="headerlink" title="急迫性分析"></a>急迫性分析</h3><p>隨著時間的過去急迫性會顯示在安全風險與漏洞暴露、軟體與應用相容性問題、成本與運維挑戰。</p><ul><li>缺乏安全更新：一旦 Windows 10 停止支援，企業將無法再獲得來自 Microsoft 的安全更新或漏洞修復。隨著時間推移，系統中的未修補漏洞將成為黑客的目標，可能導致資料洩露、勒索病毒攻擊、網絡滲透等重大安全事故。</li><li>法律與合規風險：許多企業必須遵守特定的行業規範（如 GDPR、HIPAA 等），如果使用不再支援的操作系統，可能無法滿足這些合規要求，並可能面臨罰款或法律後果。</li><li>隨著支援終止，第三方應用程式和企業級軟體將不再在 Windows 10 上釋出更新版本。</li><li>硬體更新需求：Windows 11 相對於 Windows 10 對硬體的要求更高，企業可能需要升級硬體，尤其是舊款設備無法升級至 Windows 11。</li></ul><p>此外，隨著市場對新技術的需求增加，企業如不跟上潮流，可能會在競爭中處於劣勢。因此，企業需立即評估其 IT 基礎設施，以確保能在支援結束前制定有效的升級或替代計劃。</p><h3 id="強制性更新的影響"><a href="#強制性更新的影響" class="headerlink" title="強制性更新的影響"></a>強制性更新的影響</h3><p>身為工程師其實都知道首先我們要先養蟲，蟲才能夠養我們，蟲與工程師是一個互利共生的概念，但自從強制更新出現之後，我們可以發現 Windows 11 的更新問題頻傳，一次的大改版可能真的是改太大，最終的建議都走向換電腦一途。</p><p>企業端在派送更新時應了解這些更新的背景，避免升級之後可能導致系統中斷或相容性問題，並且制定有效的更新和還原策略，以減少對業務運行的影響。</p><blockquote><p>並不是每個人每間公司都能夠馬上換電腦的，那就來試試看 ESU 吧</p></blockquote><h2 id="Windows-10-EOS-因應策略"><a href="#Windows-10-EOS-因應策略" class="headerlink" title="Windows 10 EOS 因應策略"></a>Windows 10 EOS 因應策略</h2><p>因應策略大致會有底下幾個方向和選擇</p><ol><li>升級至 Windows 11</li><li>無法升級則考慮 Windows 10 ESU</li><li>沒大筆預算就先加強資安設定及教育訓練</li><li>改成使用雲端的解決方案</li></ol><h3 id="計劃升級至-Windows-11"><a href="#計劃升級至-Windows-11" class="headerlink" title="計劃升級至 Windows 11"></a>計劃升級至 Windows 11</h3><ol><li>進行全面的硬體與軟體評估：確認現有設備是否符合 Windows 11 的系統要求，並評估升級的可行性。</li><li>制定升級計劃：根據業務需求和現有資源，制定明確的升級時間表，並分階段實施，以減少業務運行的影響。</li><li>員工培訓與支持：針對新系統的培訓計劃至關重要，確保員工能快速適應新操作系統，提高生產力。</li></ol><h3 id="考慮-Windows-10-延長支援"><a href="#考慮-Windows-10-延長支援" class="headerlink" title="考慮 Windows 10 延長支援"></a>考慮 Windows 10 延長支援</h3><p>升級 Windows 11 主要在改善效能和更完整的安全防護，但對於無法立即升級的企業，微軟提供了擴展安全更新（ESU）選項。</p><p>雖然這些更新可延長支援時間，但需要付費且僅限於特定期間。企業需評估 ESU 的成本效益，因其成本較高，且僅能提供短期的過渡支援，需考慮長期的 IT 策略，以避免因支援終止而暴露於安全風險中。</p><p>最新的 Windows 10 版本為 22H2，在支援終止後只有透過付費 ESU 才能獲得安全更新，Windows 365 訂閱包含擴充安全性更新 (ESU)，對於存取 Windows 365 的 Windows 10 裝置無需額外付費。</p><p>Windows 10 壽命到期微軟推出個人版延伸安全更新（ESU）方案，方案將會提供一年的更新費用為 30 美元，使用者可於 2025 年接近支援結束時進行註冊。</p><p>更多資訊可以參考以下連結:</p><ul><li><a href="https://techcommunity.microsoft.com/t5/windows-it-pro-blog/plan-for-windows-10-eos-with-windows-11-windows-365-and-esu/ba-p/4000414">https://techcommunity.microsoft.com/t5/windows-it-pro-blog/plan-for-windows-10-eos-with-windows-11-windows-365-and-esu/ba-p/4000414</a></li><li><a href="https://www.theregister.com/2024/10/31/microsoft_windows_10_support/">https://www.theregister.com/2024/10/31/microsoft_windows_10_support/</a></li></ul><h3 id="加強資訊安全管理"><a href="#加強資訊安全管理" class="headerlink" title="加強資訊安全管理"></a>加強資訊安全管理</h3><p>增強的安全防護：企業應該加強內部的資安防護措施，防範升級過程中出現的漏洞。這包括更新防火牆、反病毒軟體、網絡監控系統等。<br>培訓員工：進行安全意識訓練，幫助員工理解舊系統的風險，以及如何避免遭受網絡攻擊或資料洩漏。</p><h3 id="使用雲端與虛擬化技術解決方案"><a href="#使用雲端與虛擬化技術解決方案" class="headerlink" title="使用雲端與虛擬化技術解決方案"></a>使用雲端與虛擬化技術解決方案</h3><ol><li>雲端桌面（DaaS）解決方案：企業可以考慮將部分桌面工作環境轉移到雲端，例如使用 Microsoft Azure 的虛擬桌面解決方案（Azure Virtual Desktop），使員工可以使用任何設備進行工作，且無需擔心操作系統的升級問題。</li><li>桌面虛擬化：透過虛擬桌面基礎架構（VDI），企業可以減少對實體硬體的依賴，並在單一平台上集中管理不同操作系統，進一步提高靈活性和降低成本。</li></ol><h2 id="升級的挑戰與機遇"><a href="#升級的挑戰與機遇" class="headerlink" title="升級的挑戰與機遇"></a>升級的挑戰與機遇</h2><p>因為 Windows 11 因為對於硬體的要求提高，且目前 iPhone 的市佔率越來越高，使用者有可能為了方便整合會選擇轉移到蘋果生態系，這次很可能會是微軟使用者流失最快的一次，小編的舊電腦若支援不佳也可能考慮轉移至 Chrome OS 或是 Linux 系統進行使用。</p><p>但這次體驗下來升級至 Windows 11 不僅能提升安全性，還可通過新功能增強團隊的協作與生產力，在面臨 Windows 10 支援終止的情況下，應利用機會進行系統升級和架構重組，企業端儘早規劃制定明確的升級策略，選擇適合的方案以保障業務持續運行和安全，並加強員工培訓，以適應新操作系統。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為什麼升級到 Windows 11？升級到 Windows 11 不僅能確保您的設備在安全性上獲得支持，還能提升性能和用戶體驗。以下是幾個值得考慮的理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現代化介面：Windows 11 擁有全新的設計，簡化的用戶介面讓您更容易找到和使用應用程式</summary>
      
    
    
    
    <category term="Windows11" scheme="https://linyencheng.github.io/categories/Windows11/"/>
    
    
    <category term="Windows11" scheme="https://linyencheng.github.io/tags/Windows11/"/>
    
    <category term="2024ironman" scheme="https://linyencheng.github.io/tags/2024ironman/"/>
    
  </entry>
  
  <entry>
    <title>Windows 11 Power Automate 自動化提升工作效率</title>
    <link href="https://linyencheng.github.io/2024/11/27/windows11/windows11-power-automate/"/>
    <id>https://linyencheng.github.io/2024/11/27/windows11/windows11-power-automate/</id>
    <published>2024-11-27T00:00:00.000Z</published>
    <updated>2025-08-11T11:18:01.471Z</updated>
    
    <content type="html"><![CDATA[<p>在 Windows 11 中，Power Automate 成為提升工作效率的強大工具。這是一個低程式碼平台，旨在幫助使用者輕鬆管理和優化日常工作流程，透過自動執行重複性任務，節省時間並提高生產力。</p><h2 id="Power-Automate-的核心功能"><a href="#Power-Automate-的核心功能" class="headerlink" title="Power Automate 的核心功能"></a>Power Automate 的核心功能</h2><p>Power Automate 提供了一個易於使用的低程式碼平台，使非技術人員也能輕鬆設計和管理自動化流程。這對企業和個人都十分有用，尤其是處理大量重複性任務時。</p><ul><li>預先安裝: 在 Windows 11 中，Power Automate Desktop 已經預安裝，使用者可以立即使用，無需額外安裝，降低了入門的門檻。</li><li>低程式碼平台: 使用者只需透過簡單的拖放操作即可創建自動化流程，無需編寫程式碼。平台內建超過 400 種預製動作，還支援錄製滑鼠和鍵盤操作，進行機器人程序自動化（RPA）。</li><li>多樣化應用: Power Automate 可以自動化各種業務流程，如從電子郵件中提取資料、生成報告、填寫表單等。它還能在 Microsoft 和第三方應用程式之間無縫交換資料，顯著提高工作效率。</li><li>視覺化設計器: 直觀的視覺化界面使得即使是沒有程式設計背景的使用者，也能輕鬆設計和管理自動化流程。清晰的流程設計邏輯幫助用戶了解每個任務的執行步驟。</li></ul><h2 id="Power-Automate-使用方法"><a href="#Power-Automate-使用方法" class="headerlink" title="Power Automate 使用方法"></a>Power Automate 使用方法</h2><p>Power Automate 提供多個範本，方便快速上手。只需存取範本中的服務，並輸入必要的設定即可開始。</p><ul><li>啟用 Power Automate: 在 Windows 11 的開始菜單中搜索 “Power Automate”，並使用 Microsoft 帳戶登入開始使用。</li><li>引導教學: 首次登入時，Power Automate 會提供一個引導教學，幫助用戶熟悉工具的控制台和設計器，讓用戶能夠快速上手。</li><li>流程錄製: Power Automate 讓使用者錄製操作過程，這些操作會被自動轉換成可執行的自動化步驟。這樣使用者無需手動配置每一個操作，讓自動化流程的創建變得簡單快捷。</li></ul><p>例如，這篇文章中提到的小編透過 Power Automate 的錄製功能，把某支股票（0050）的股價自動貼到記事本中。這是一個簡單的例子，但展示了如何運用錄製功能來節省時間和提高效率。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026jJnRtJnGLJ.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026jJnRtJnGLJ.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026GYDJCpflRp.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026GYDJCpflRp.png"></p><h3 id="實際應用案例"><a href="#實際應用案例" class="headerlink" title="實際應用案例"></a>實際應用案例</h3><p>Power Automate 在企業中的應用非常廣泛，尤其在需要處理大量數據和報表的部門中。例如：</p><ul><li>財務部門：自動生成報表和處理繁瑣的數據輸入工作，減少人為錯誤並提高處理速度。</li><li>可口可樂公司：根據統計，93% 的《Fortune》500 大企業都在使用 Power Automate。可口可樂就利用這個工具來自動化發票生成、訂單管理、物流管理等業務流程，顯著提升效率。</li></ul><p><a href="https://www.youtube.com/watch?v=N8RmCW_UXgM"><img src="https://img.youtube.com/vi/N8RmCW_UXgM/0.jpg" alt="Yes"></a></p><h2 id="如何開始使用-Power-Automate"><a href="#如何開始使用-Power-Automate" class="headerlink" title="如何開始使用 Power Automate"></a>如何開始使用 Power Automate</h2><p>透過 Power Automate，Windows 11 用戶能夠充分利用自動化技術，提高工作效率和生產力。無論是大型企業還是小型團隊，Power Automate 都是提升業務效率的理想工具。</p><p>Microsoft 官網提供了一系列的教程，幫助使用者學會如何建立和使用自動化流程，可以一步一步入門這個工具:<br><a href="https://learn.microsoft.com/en-us/training/modules/build-first-desktop-flow/">https://learn.microsoft.com/en-us/training/modules/build-first-desktop-flow/</a></p><p>Power Automate 是一個非常強大且實用的工具，尤其適合那些需要處理大量重複性任務的使用者。Windows 11 的集成功能，使得這個工具更加便捷且易於上手。無論是用於企業級的自動化，還是個人日常工作流程的優化，Power Automate 都是提升工作效率的理想選擇。</p><p>透過這些功能，Windows 11 用戶可以更好地利用自動化技術，節省時間、提高效率，並將更多的精力投入到更具創造性和價值的工作中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Windows 11 中，Power Automate 成為提升工作效率的強大工具。這是一個低程式碼平台，旨在幫助使用者輕鬆管理和優化日常工作流程，透過自動執行重複性任務，節省時間並提高生產力。&lt;/p&gt;
&lt;h2 id=&quot;Power-Automate-的核心功能&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Windows11" scheme="https://linyencheng.github.io/categories/Windows11/"/>
    
    
    <category term="Windows11" scheme="https://linyencheng.github.io/tags/Windows11/"/>
    
    <category term="2024ironman" scheme="https://linyencheng.github.io/tags/2024ironman/"/>
    
  </entry>
  
</feed>
